
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007590  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08007720  08007720  00017720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a18  08007a18  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007a18  08007a18  00017a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a20  08007a20  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a20  08007a20  00017a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a24  08007a24  00017a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000070  08007a98  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08007a98  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000c2dc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00010d64  00000000  00000000  0002c37c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002072  00000000  00000000  0003d0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001020  00000000  00000000  0003f158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000f48b3  00000000  00000000  00040178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000f18  00000000  00000000  00134a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00027782  00000000  00000000  00135948  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015d0ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005178  00000000  00000000  0015d148  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  001622c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  0016235c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007708 	.word	0x08007708

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007708 	.word	0x08007708

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b972 	b.w	8000f08 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9e08      	ldr	r6, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	4688      	mov	r8, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d14b      	bne.n	8000ce2 <__udivmoddi4+0xa6>
 8000c4a:	428a      	cmp	r2, r1
 8000c4c:	4615      	mov	r5, r2
 8000c4e:	d967      	bls.n	8000d20 <__udivmoddi4+0xe4>
 8000c50:	fab2 f282 	clz	r2, r2
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0720 	rsb	r7, r2, #32
 8000c5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c62:	4095      	lsls	r5, r2
 8000c64:	ea47 0803 	orr.w	r8, r7, r3
 8000c68:	4094      	lsls	r4, r2
 8000c6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6e:	0c23      	lsrs	r3, r4, #16
 8000c70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c74:	fa1f fc85 	uxth.w	ip, r5
 8000c78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c80:	fb07 f10c 	mul.w	r1, r7, ip
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x60>
 8000c88:	18eb      	adds	r3, r5, r3
 8000c8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c8e:	f080 811b 	bcs.w	8000ec8 <__udivmoddi4+0x28c>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 8118 	bls.w	8000ec8 <__udivmoddi4+0x28c>
 8000c98:	3f02      	subs	r7, #2
 8000c9a:	442b      	add	r3, r5
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cb0:	45a4      	cmp	ip, r4
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x8c>
 8000cb4:	192c      	adds	r4, r5, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x290>
 8000cbe:	45a4      	cmp	ip, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x290>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	442c      	add	r4, r5
 8000cc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ccc:	eba4 040c 	sub.w	r4, r4, ip
 8000cd0:	2700      	movs	r7, #0
 8000cd2:	b11e      	cbz	r6, 8000cdc <__udivmoddi4+0xa0>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cdc:	4639      	mov	r1, r7
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xbe>
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	f000 80eb 	beq.w	8000ec2 <__udivmoddi4+0x286>
 8000cec:	2700      	movs	r7, #0
 8000cee:	e9c6 0100 	strd	r0, r1, [r6]
 8000cf2:	4638      	mov	r0, r7
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f783 	clz	r7, r3
 8000cfe:	2f00      	cmp	r7, #0
 8000d00:	d147      	bne.n	8000d92 <__udivmoddi4+0x156>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd0>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80fa 	bhi.w	8000f00 <__udivmoddi4+0x2c4>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	4698      	mov	r8, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa0>
 8000d1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xe8>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 808f 	bne.w	8000e4c <__udivmoddi4+0x210>
 8000d2e:	1b49      	subs	r1, r1, r5
 8000d30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d34:	fa1f f885 	uxth.w	r8, r5
 8000d38:	2701      	movs	r7, #1
 8000d3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d3e:	0c23      	lsrs	r3, r4, #16
 8000d40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d48:	fb08 f10c 	mul.w	r1, r8, ip
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x124>
 8000d50:	18eb      	adds	r3, r5, r3
 8000d52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x122>
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	f200 80cd 	bhi.w	8000ef8 <__udivmoddi4+0x2bc>
 8000d5e:	4684      	mov	ip, r0
 8000d60:	1a59      	subs	r1, r3, r1
 8000d62:	b2a3      	uxth	r3, r4
 8000d64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d70:	fb08 f800 	mul.w	r8, r8, r0
 8000d74:	45a0      	cmp	r8, r4
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x14c>
 8000d78:	192c      	adds	r4, r5, r4
 8000d7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x14a>
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	f200 80b6 	bhi.w	8000ef2 <__udivmoddi4+0x2b6>
 8000d86:	4618      	mov	r0, r3
 8000d88:	eba4 0408 	sub.w	r4, r4, r8
 8000d8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d90:	e79f      	b.n	8000cd2 <__udivmoddi4+0x96>
 8000d92:	f1c7 0c20 	rsb	ip, r7, #32
 8000d96:	40bb      	lsls	r3, r7
 8000d98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000da0:	fa01 f407 	lsl.w	r4, r1, r7
 8000da4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000da8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000db0:	4325      	orrs	r5, r4
 8000db2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000db6:	0c2c      	lsrs	r4, r5, #16
 8000db8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dbc:	fa1f fa8e 	uxth.w	sl, lr
 8000dc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	fa02 f207 	lsl.w	r2, r2, r7
 8000dce:	fa00 f107 	lsl.w	r1, r0, r7
 8000dd2:	d90b      	bls.n	8000dec <__udivmoddi4+0x1b0>
 8000dd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	f080 8087 	bcs.w	8000eee <__udivmoddi4+0x2b2>
 8000de0:	429c      	cmp	r4, r3
 8000de2:	f240 8084 	bls.w	8000eee <__udivmoddi4+0x2b2>
 8000de6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dea:	4473      	add	r3, lr
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	b2ad      	uxth	r5, r5
 8000df0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df4:	fb08 3310 	mls	r3, r8, r0, r3
 8000df8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e00:	45a2      	cmp	sl, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1da>
 8000e04:	eb1e 0404 	adds.w	r4, lr, r4
 8000e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0c:	d26b      	bcs.n	8000ee6 <__udivmoddi4+0x2aa>
 8000e0e:	45a2      	cmp	sl, r4
 8000e10:	d969      	bls.n	8000ee6 <__udivmoddi4+0x2aa>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4474      	add	r4, lr
 8000e16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	eba4 040a 	sub.w	r4, r4, sl
 8000e22:	454c      	cmp	r4, r9
 8000e24:	46c2      	mov	sl, r8
 8000e26:	464b      	mov	r3, r9
 8000e28:	d354      	bcc.n	8000ed4 <__udivmoddi4+0x298>
 8000e2a:	d051      	beq.n	8000ed0 <__udivmoddi4+0x294>
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d069      	beq.n	8000f04 <__udivmoddi4+0x2c8>
 8000e30:	ebb1 050a 	subs.w	r5, r1, sl
 8000e34:	eb64 0403 	sbc.w	r4, r4, r3
 8000e38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e3c:	40fd      	lsrs	r5, r7
 8000e3e:	40fc      	lsrs	r4, r7
 8000e40:	ea4c 0505 	orr.w	r5, ip, r5
 8000e44:	e9c6 5400 	strd	r5, r4, [r6]
 8000e48:	2700      	movs	r7, #0
 8000e4a:	e747      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f703 	lsr.w	r7, r0, r3
 8000e54:	4095      	lsls	r5, r2
 8000e56:	fa01 f002 	lsl.w	r0, r1, r2
 8000e5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e62:	4338      	orrs	r0, r7
 8000e64:	0c01      	lsrs	r1, r0, #16
 8000e66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e6a:	fa1f f885 	uxth.w	r8, r5
 8000e6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb07 f308 	mul.w	r3, r7, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x256>
 8000e82:	1869      	adds	r1, r5, r1
 8000e84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e88:	d22f      	bcs.n	8000eea <__udivmoddi4+0x2ae>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d92d      	bls.n	8000eea <__udivmoddi4+0x2ae>
 8000e8e:	3f02      	subs	r7, #2
 8000e90:	4429      	add	r1, r5
 8000e92:	1acb      	subs	r3, r1, r3
 8000e94:	b281      	uxth	r1, r0
 8000e96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb00 f308 	mul.w	r3, r0, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x27e>
 8000eaa:	1869      	adds	r1, r5, r1
 8000eac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb0:	d217      	bcs.n	8000ee2 <__udivmoddi4+0x2a6>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d915      	bls.n	8000ee2 <__udivmoddi4+0x2a6>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4429      	add	r1, r5
 8000eba:	1ac9      	subs	r1, r1, r3
 8000ebc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ec0:	e73b      	b.n	8000d3a <__udivmoddi4+0xfe>
 8000ec2:	4637      	mov	r7, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e709      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000ec8:	4607      	mov	r7, r0
 8000eca:	e6e7      	b.n	8000c9c <__udivmoddi4+0x60>
 8000ecc:	4618      	mov	r0, r3
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x8c>
 8000ed0:	4541      	cmp	r1, r8
 8000ed2:	d2ab      	bcs.n	8000e2c <__udivmoddi4+0x1f0>
 8000ed4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ed8:	eb69 020e 	sbc.w	r2, r9, lr
 8000edc:	3801      	subs	r0, #1
 8000ede:	4613      	mov	r3, r2
 8000ee0:	e7a4      	b.n	8000e2c <__udivmoddi4+0x1f0>
 8000ee2:	4660      	mov	r0, ip
 8000ee4:	e7e9      	b.n	8000eba <__udivmoddi4+0x27e>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	e795      	b.n	8000e16 <__udivmoddi4+0x1da>
 8000eea:	4667      	mov	r7, ip
 8000eec:	e7d1      	b.n	8000e92 <__udivmoddi4+0x256>
 8000eee:	4681      	mov	r9, r0
 8000ef0:	e77c      	b.n	8000dec <__udivmoddi4+0x1b0>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	442c      	add	r4, r5
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0x14c>
 8000ef8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000efc:	442b      	add	r3, r5
 8000efe:	e72f      	b.n	8000d60 <__udivmoddi4+0x124>
 8000f00:	4638      	mov	r0, r7
 8000f02:	e708      	b.n	8000d16 <__udivmoddi4+0xda>
 8000f04:	4637      	mov	r7, r6
 8000f06:	e6e9      	b.n	8000cdc <__udivmoddi4+0xa0>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f12:	e003      	b.n	8000f1c <LoopCopyDataInit>

08000f14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f1a:	3104      	adds	r1, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f24:	d3f6      	bcc.n	8000f14 <CopyDataInit>
	ldr	r2, =_sbss
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f28:	e002      	b.n	8000f30 <LoopFillZerobss>

08000f2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f2c:	f842 3b04 	str.w	r3, [r2], #4

08000f30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <LoopForever+0x16>)
	cmp	r2, r3
 8000f32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f34:	d3f9      	bcc.n	8000f2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f36:	f004 fa47 	bl	80053c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f004 fa7b 	bl	8005434 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f3e:	f003 facf 	bl	80044e0 <main>

08000f42 <LoopForever>:

LoopForever:
    b LoopForever
 8000f42:	e7fe      	b.n	8000f42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f44:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000f48:	08007a28 	.word	0x08007a28
	ldr	r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f50:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000f54:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000f58:	2000024c 	.word	0x2000024c

08000f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC1_2_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <HAL_Init+0x3c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <HAL_Init+0x3c>)
 8000f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f76:	2003      	movs	r0, #3
 8000f78:	f000 f93a 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 f80f 	bl	8000fa0 <HAL_InitTick>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	e001      	b.n	8000f92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f8e:	f003 ffc1 	bl	8004f14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f946 	bl	800125a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f910 	bl	8001206 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000004 	.word	0x20000004
 800100c:	20000008 	.word	0x20000008
 8001010:	20000000 	.word	0x20000000

08001014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000098 	.word	0x20000098
 8001034:	20000004 	.word	0x20000004

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000098 	.word	0x20000098

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <__NVIC_EnableIRQ+0x38>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff8e 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff29 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff3e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff8e 	bl	8001144 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5d 	bl	80010f0 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff31 	bl	80010b4 <__NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffa2 	bl	80011ac <SysTick_Config>
 8001268:	4603      	mov	r3, r0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001282:	e17f      	b.n	8001584 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8171 	beq.w	800157e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x38>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b12      	cmp	r3, #18
 80012aa:	d123      	bne.n	80012f4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	08da      	lsrs	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3208      	adds	r2, #8
 80012ee:	6939      	ldr	r1, [r7, #16]
 80012f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0203 	and.w	r2, r3, #3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d00b      	beq.n	8001348 <HAL_GPIO_Init+0xd4>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d007      	beq.n	8001348 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800133c:	2b11      	cmp	r3, #17
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b12      	cmp	r3, #18
 8001346:	d130      	bne.n	80013aa <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800137e:	2201      	movs	r2, #1
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	f003 0201 	and.w	r2, r3, #1
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d118      	bne.n	80013e8 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013bc:	2201      	movs	r2, #1
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	08db      	lsrs	r3, r3, #3
 80013d2:	f003 0201 	and.w	r2, r3, #1
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80ac 	beq.w	800157e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b5e      	ldr	r3, [pc, #376]	; (80015a0 <HAL_GPIO_Init+0x32c>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	4a5d      	ldr	r2, [pc, #372]	; (80015a0 <HAL_GPIO_Init+0x32c>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6613      	str	r3, [r2, #96]	; 0x60
 8001432:	4b5b      	ldr	r3, [pc, #364]	; (80015a0 <HAL_GPIO_Init+0x32c>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800143e:	4a59      	ldr	r2, [pc, #356]	; (80015a4 <HAL_GPIO_Init+0x330>)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	220f      	movs	r2, #15
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001468:	d025      	beq.n	80014b6 <HAL_GPIO_Init+0x242>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4e      	ldr	r2, [pc, #312]	; (80015a8 <HAL_GPIO_Init+0x334>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d01f      	beq.n	80014b2 <HAL_GPIO_Init+0x23e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4d      	ldr	r2, [pc, #308]	; (80015ac <HAL_GPIO_Init+0x338>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d019      	beq.n	80014ae <HAL_GPIO_Init+0x23a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4c      	ldr	r2, [pc, #304]	; (80015b0 <HAL_GPIO_Init+0x33c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0x236>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4b      	ldr	r2, [pc, #300]	; (80015b4 <HAL_GPIO_Init+0x340>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00d      	beq.n	80014a6 <HAL_GPIO_Init+0x232>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4a      	ldr	r2, [pc, #296]	; (80015b8 <HAL_GPIO_Init+0x344>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x22e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a49      	ldr	r2, [pc, #292]	; (80015bc <HAL_GPIO_Init+0x348>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_GPIO_Init+0x22a>
 800149a:	2306      	movs	r3, #6
 800149c:	e00c      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 800149e:	2307      	movs	r3, #7
 80014a0:	e00a      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014a2:	2305      	movs	r3, #5
 80014a4:	e008      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014a6:	2304      	movs	r3, #4
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014aa:	2303      	movs	r3, #3
 80014ac:	e004      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014b6:	2300      	movs	r3, #0
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	f002 0203 	and.w	r2, r2, #3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4093      	lsls	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014c8:	4936      	ldr	r1, [pc, #216]	; (80015a4 <HAL_GPIO_Init+0x330>)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014d6:	4b3a      	ldr	r3, [pc, #232]	; (80015c0 <HAL_GPIO_Init+0x34c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014fa:	4a31      	ldr	r2, [pc, #196]	; (80015c0 <HAL_GPIO_Init+0x34c>)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001500:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <HAL_GPIO_Init+0x34c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001524:	4a26      	ldr	r2, [pc, #152]	; (80015c0 <HAL_GPIO_Init+0x34c>)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <HAL_GPIO_Init+0x34c>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800154e:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <HAL_GPIO_Init+0x34c>)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001554:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <HAL_GPIO_Init+0x34c>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001578:	4a11      	ldr	r2, [pc, #68]	; (80015c0 <HAL_GPIO_Init+0x34c>)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa22 f303 	lsr.w	r3, r2, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	f47f ae78 	bne.w	8001284 <HAL_GPIO_Init+0x10>
  }
}
 8001594:	bf00      	nop
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010000 	.word	0x40010000
 80015a8:	48000400 	.word	0x48000400
 80015ac:	48000800 	.word	0x48000800
 80015b0:	48000c00 	.word	0x48000c00
 80015b4:	48001000 	.word	0x48001000
 80015b8:	48001400 	.word	0x48001400
 80015bc:	48001800 	.word	0x48001800
 80015c0:	40010400 	.word	0x40010400

080015c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	887b      	ldrh	r3, [r7, #2]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	e001      	b.n	80015e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001610:	e002      	b.n	8001618 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	4013      	ands	r3, r2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f806 	bl	8001654 <HAL_GPIO_EXTI_Callback>
  }
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40010400 	.word	0x40010400

08001654 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <HAL_PWREx_GetVoltageRange+0x18>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40007000 	.word	0x40007000

08001688 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001696:	d130      	bne.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a4:	d038      	beq.n	8001718 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016ae:	4a1e      	ldr	r2, [pc, #120]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2232      	movs	r2, #50	; 0x32
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0c9b      	lsrs	r3, r3, #18
 80016c8:	3301      	adds	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016cc:	e002      	b.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e0:	d102      	bne.n	80016e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f2      	bne.n	80016ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f4:	d110      	bne.n	8001718 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e00f      	b.n	800171a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001706:	d007      	beq.n	8001718 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001710:	4a05      	ldr	r2, [pc, #20]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001716:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40007000 	.word	0x40007000
 800172c:	20000008 	.word	0x20000008
 8001730:	431bde83 	.word	0x431bde83

08001734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e39d      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001746:	4ba4      	ldr	r3, [pc, #656]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001750:	4ba1      	ldr	r3, [pc, #644]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80e1 	beq.w	800192a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <HAL_RCC_OscConfig+0x4a>
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	2b0c      	cmp	r3, #12
 8001772:	f040 8088 	bne.w	8001886 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2b01      	cmp	r3, #1
 800177a:	f040 8084 	bne.w	8001886 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800177e:	4b96      	ldr	r3, [pc, #600]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_RCC_OscConfig+0x62>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e375      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1a      	ldr	r2, [r3, #32]
 800179a:	4b8f      	ldr	r3, [pc, #572]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d004      	beq.n	80017b0 <HAL_RCC_OscConfig+0x7c>
 80017a6:	4b8c      	ldr	r3, [pc, #560]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ae:	e005      	b.n	80017bc <HAL_RCC_OscConfig+0x88>
 80017b0:	4b89      	ldr	r3, [pc, #548]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80017b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017bc:	4293      	cmp	r3, r2
 80017be:	d223      	bcs.n	8001808 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fd09 	bl	80021dc <RCC_SetFlashLatencyFromMSIRange>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e356      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d4:	4b80      	ldr	r3, [pc, #512]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a7f      	ldr	r2, [pc, #508]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80017da:	f043 0308 	orr.w	r3, r3, #8
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b7d      	ldr	r3, [pc, #500]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	497a      	ldr	r1, [pc, #488]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f2:	4b79      	ldr	r3, [pc, #484]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	4975      	ldr	r1, [pc, #468]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
 8001806:	e022      	b.n	800184e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001808:	4b73      	ldr	r3, [pc, #460]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a72      	ldr	r2, [pc, #456]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 800180e:	f043 0308 	orr.w	r3, r3, #8
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b70      	ldr	r3, [pc, #448]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	496d      	ldr	r1, [pc, #436]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001826:	4b6c      	ldr	r3, [pc, #432]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	4968      	ldr	r1, [pc, #416]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001836:	4313      	orrs	r3, r2
 8001838:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fccc 	bl	80021dc <RCC_SetFlashLatencyFromMSIRange>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e319      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800184e:	f000 fc03 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8001852:	4601      	mov	r1, r0
 8001854:	4b60      	ldr	r3, [pc, #384]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	4a5f      	ldr	r2, [pc, #380]	; (80019dc <HAL_RCC_OscConfig+0x2a8>)
 8001860:	5cd3      	ldrb	r3, [r2, r3]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	fa21 f303 	lsr.w	r3, r1, r3
 800186a:	4a5d      	ldr	r2, [pc, #372]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800186e:	4b5d      	ldr	r3, [pc, #372]	; (80019e4 <HAL_RCC_OscConfig+0x2b0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fb94 	bl	8000fa0 <HAL_InitTick>
 8001878:	4603      	mov	r3, r0
 800187a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d052      	beq.n	8001928 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	e2fd      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d032      	beq.n	80018f4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800188e:	4b52      	ldr	r3, [pc, #328]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a51      	ldr	r2, [pc, #324]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800189a:	f7ff fbcd 	bl	8001038 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018a2:	f7ff fbc9 	bl	8001038 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e2e6      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b4:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c0:	4b45      	ldr	r3, [pc, #276]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a44      	ldr	r2, [pc, #272]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	493f      	ldr	r1, [pc, #252]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018de:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	493a      	ldr	r1, [pc, #232]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
 80018f2:	e01a      	b.n	800192a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018f4:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a37      	ldr	r2, [pc, #220]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001900:	f7ff fb9a 	bl	8001038 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001908:	f7ff fb96 	bl	8001038 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e2b3      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800191a:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x1d4>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d074      	beq.n	8001a20 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b08      	cmp	r3, #8
 800193a:	d005      	beq.n	8001948 <HAL_RCC_OscConfig+0x214>
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d10e      	bne.n	8001960 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d10b      	bne.n	8001960 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d064      	beq.n	8001a1e <HAL_RCC_OscConfig+0x2ea>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d160      	bne.n	8001a1e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e290      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001968:	d106      	bne.n	8001978 <HAL_RCC_OscConfig+0x244>
 800196a:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a1a      	ldr	r2, [pc, #104]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e01d      	b.n	80019b4 <HAL_RCC_OscConfig+0x280>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x268>
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a11      	ldr	r2, [pc, #68]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0x280>
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <HAL_RCC_OscConfig+0x2a4>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff fb3c 	bl	8001038 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c2:	e011      	b.n	80019e8 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff fb38 	bl	8001038 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d90a      	bls.n	80019e8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e255      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000
 80019dc:	08007760 	.word	0x08007760
 80019e0:	20000008 	.word	0x20000008
 80019e4:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e8:	4bae      	ldr	r3, [pc, #696]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0e7      	beq.n	80019c4 <HAL_RCC_OscConfig+0x290>
 80019f4:	e014      	b.n	8001a20 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f6:	f7ff fb1f 	bl	8001038 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fe:	f7ff fb1b 	bl	8001038 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b64      	cmp	r3, #100	; 0x64
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e238      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a10:	4ba4      	ldr	r3, [pc, #656]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x2ca>
 8001a1c:	e000      	b.n	8001a20 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d060      	beq.n	8001aee <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d005      	beq.n	8001a3e <HAL_RCC_OscConfig+0x30a>
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2b0c      	cmp	r3, #12
 8001a36:	d119      	bne.n	8001a6c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d116      	bne.n	8001a6c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a3e:	4b99      	ldr	r3, [pc, #612]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_RCC_OscConfig+0x322>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e215      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a56:	4b93      	ldr	r3, [pc, #588]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	061b      	lsls	r3, r3, #24
 8001a64:	498f      	ldr	r1, [pc, #572]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a6a:	e040      	b.n	8001aee <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d023      	beq.n	8001abc <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a74:	4b8b      	ldr	r3, [pc, #556]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a8a      	ldr	r2, [pc, #552]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7ff fada 	bl	8001038 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a88:	f7ff fad6 	bl	8001038 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1f3      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9a:	4b82      	ldr	r3, [pc, #520]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa6:	4b7f      	ldr	r3, [pc, #508]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	061b      	lsls	r3, r3, #24
 8001ab4:	497b      	ldr	r1, [pc, #492]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]
 8001aba:	e018      	b.n	8001aee <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001abc:	4b79      	ldr	r3, [pc, #484]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a78      	ldr	r2, [pc, #480]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001ac2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fab6 	bl	8001038 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fab2 	bl	8001038 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e1cf      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae2:	4b70      	ldr	r3, [pc, #448]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d03c      	beq.n	8001b74 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d01c      	beq.n	8001b3c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b02:	4b68      	ldr	r3, [pc, #416]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b08:	4a66      	ldr	r2, [pc, #408]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7ff fa91 	bl	8001038 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1a:	f7ff fa8d 	bl	8001038 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e1aa      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b2c:	4b5d      	ldr	r3, [pc, #372]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0ef      	beq.n	8001b1a <HAL_RCC_OscConfig+0x3e6>
 8001b3a:	e01b      	b.n	8001b74 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3c:	4b59      	ldr	r3, [pc, #356]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b42:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4c:	f7ff fa74 	bl	8001038 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b54:	f7ff fa70 	bl	8001038 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e18d      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b66:	4b4f      	ldr	r3, [pc, #316]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1ef      	bne.n	8001b54 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80a5 	beq.w	8001ccc <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b86:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10d      	bne.n	8001bae <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b44      	ldr	r3, [pc, #272]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	4a43      	ldr	r2, [pc, #268]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9e:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001baa:	2301      	movs	r3, #1
 8001bac:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bae:	4b3e      	ldr	r3, [pc, #248]	; (8001ca8 <HAL_RCC_OscConfig+0x574>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d118      	bne.n	8001bec <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bba:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <HAL_RCC_OscConfig+0x574>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a3a      	ldr	r2, [pc, #232]	; (8001ca8 <HAL_RCC_OscConfig+0x574>)
 8001bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc6:	f7ff fa37 	bl	8001038 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bce:	f7ff fa33 	bl	8001038 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e150      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be0:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <HAL_RCC_OscConfig+0x574>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d108      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4d2>
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfa:	4a2a      	ldr	r2, [pc, #168]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c04:	e024      	b.n	8001c50 <HAL_RCC_OscConfig+0x51c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d110      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4fc>
 8001c0e:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c14:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c1e:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c24:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c2e:	e00f      	b.n	8001c50 <HAL_RCC_OscConfig+0x51c>
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c36:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c40:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001c48:	f023 0304 	bic.w	r3, r3, #4
 8001c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d016      	beq.n	8001c86 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c58:	f7ff f9ee 	bl	8001038 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7ff f9ea 	bl	8001038 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e105      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_RCC_OscConfig+0x570>)
 8001c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0ed      	beq.n	8001c60 <HAL_RCC_OscConfig+0x52c>
 8001c84:	e019      	b.n	8001cba <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c86:	f7ff f9d7 	bl	8001038 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c8c:	e00e      	b.n	8001cac <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8e:	f7ff f9d3 	bl	8001038 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d905      	bls.n	8001cac <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e0ee      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cac:	4b77      	ldr	r3, [pc, #476]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1e9      	bne.n	8001c8e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cba:	7ffb      	ldrb	r3, [r7, #31]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d105      	bne.n	8001ccc <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc0:	4b72      	ldr	r3, [pc, #456]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	4a71      	ldr	r2, [pc, #452]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80d5 	beq.w	8001e80 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	2b0c      	cmp	r3, #12
 8001cda:	f000 808e 	beq.w	8001dfa <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d15b      	bne.n	8001d9e <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce6:	4b69      	ldr	r3, [pc, #420]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a68      	ldr	r2, [pc, #416]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001cec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7ff f9a1 	bl	8001038 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e0ba      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d0c:	4b5f      	ldr	r3, [pc, #380]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d18:	4b5c      	ldr	r3, [pc, #368]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	4b5c      	ldr	r3, [pc, #368]	; (8001e90 <HAL_RCC_OscConfig+0x75c>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d28:	3a01      	subs	r2, #1
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d32:	0212      	lsls	r2, r2, #8
 8001d34:	4311      	orrs	r1, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d3a:	0852      	lsrs	r2, r2, #1
 8001d3c:	3a01      	subs	r2, #1
 8001d3e:	0552      	lsls	r2, r2, #21
 8001d40:	4311      	orrs	r1, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d46:	0852      	lsrs	r2, r2, #1
 8001d48:	3a01      	subs	r2, #1
 8001d4a:	0652      	lsls	r2, r2, #25
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d52:	0912      	lsrs	r2, r2, #4
 8001d54:	0452      	lsls	r2, r2, #17
 8001d56:	430a      	orrs	r2, r1
 8001d58:	494c      	ldr	r1, [pc, #304]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d5e:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a4a      	ldr	r2, [pc, #296]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001d64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d68:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d6a:	4b48      	ldr	r3, [pc, #288]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	4a47      	ldr	r2, [pc, #284]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001d70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d74:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff f95f 	bl	8001038 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff f95b 	bl	8001038 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e078      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d90:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x64a>
 8001d9c:	e070      	b.n	8001e80 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a3a      	ldr	r2, [pc, #232]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001da4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001daa:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d105      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001db6:	4b35      	ldr	r3, [pc, #212]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4a34      	ldr	r2, [pc, #208]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001dbc:	f023 0303 	bic.w	r3, r3, #3
 8001dc0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dc2:	4b32      	ldr	r3, [pc, #200]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	4a31      	ldr	r2, [pc, #196]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001dc8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7ff f931 	bl	8001038 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dda:	f7ff f92d 	bl	8001038 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e04a      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x6a6>
 8001df8:	e042      	b.n	8001e80 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e03d      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001e06:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <HAL_RCC_OscConfig+0x758>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f003 0203 	and.w	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d130      	bne.n	8001e7c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	3b01      	subs	r3, #1
 8001e26:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d127      	bne.n	8001e7c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e36:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d11f      	bne.n	8001e7c <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e46:	2a07      	cmp	r2, #7
 8001e48:	bf14      	ite	ne
 8001e4a:	2201      	movne	r2, #1
 8001e4c:	2200      	moveq	r2, #0
 8001e4e:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d113      	bne.n	8001e7c <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5e:	085b      	lsrs	r3, r3, #1
 8001e60:	3b01      	subs	r3, #1
 8001e62:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d109      	bne.n	8001e7c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	085b      	lsrs	r3, r3, #1
 8001e74:	3b01      	subs	r3, #1
 8001e76:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3720      	adds	r7, #32
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	f99d808c 	.word	0xf99d808c

08001e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0c8      	b.n	800203a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b66      	ldr	r3, [pc, #408]	; (8002044 <HAL_RCC_ClockConfig+0x1b0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d910      	bls.n	8001ed8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b63      	ldr	r3, [pc, #396]	; (8002044 <HAL_RCC_ClockConfig+0x1b0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 0207 	bic.w	r2, r3, #7
 8001ebe:	4961      	ldr	r1, [pc, #388]	; (8002044 <HAL_RCC_ClockConfig+0x1b0>)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b5f      	ldr	r3, [pc, #380]	; (8002044 <HAL_RCC_ClockConfig+0x1b0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0b0      	b.n	800203a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d04c      	beq.n	8001f7e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eec:	4b56      	ldr	r3, [pc, #344]	; (8002048 <HAL_RCC_ClockConfig+0x1b4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d121      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e09e      	b.n	800203a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f04:	4b50      	ldr	r3, [pc, #320]	; (8002048 <HAL_RCC_ClockConfig+0x1b4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d115      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e092      	b.n	800203a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d107      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f1c:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <HAL_RCC_ClockConfig+0x1b4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d109      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e086      	b.n	800203a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f2c:	4b46      	ldr	r3, [pc, #280]	; (8002048 <HAL_RCC_ClockConfig+0x1b4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e07e      	b.n	800203a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f3c:	4b42      	ldr	r3, [pc, #264]	; (8002048 <HAL_RCC_ClockConfig+0x1b4>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f023 0203 	bic.w	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	493f      	ldr	r1, [pc, #252]	; (8002048 <HAL_RCC_ClockConfig+0x1b4>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f4e:	f7ff f873 	bl	8001038 <HAL_GetTick>
 8001f52:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f54:	e00a      	b.n	8001f6c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f56:	f7ff f86f 	bl	8001038 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e066      	b.n	800203a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6c:	4b36      	ldr	r3, [pc, #216]	; (8002048 <HAL_RCC_ClockConfig+0x1b4>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 020c 	and.w	r2, r3, #12
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d1eb      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d008      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_RCC_ClockConfig+0x1b4>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	492c      	ldr	r1, [pc, #176]	; (8002048 <HAL_RCC_ClockConfig+0x1b4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b29      	ldr	r3, [pc, #164]	; (8002044 <HAL_RCC_ClockConfig+0x1b0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d210      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_RCC_ClockConfig+0x1b0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0207 	bic.w	r2, r3, #7
 8001fb2:	4924      	ldr	r1, [pc, #144]	; (8002044 <HAL_RCC_ClockConfig+0x1b0>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <HAL_RCC_ClockConfig+0x1b0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e036      	b.n	800203a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_RCC_ClockConfig+0x1b4>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4918      	ldr	r1, [pc, #96]	; (8002048 <HAL_RCC_ClockConfig+0x1b4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <HAL_RCC_ClockConfig+0x1b4>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4910      	ldr	r1, [pc, #64]	; (8002048 <HAL_RCC_ClockConfig+0x1b4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800200a:	f000 f825 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 800200e:	4601      	mov	r1, r0
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_RCC_ClockConfig+0x1b4>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	4a0c      	ldr	r2, [pc, #48]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	fa21 f303 	lsr.w	r3, r1, r3
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe ffb6 	bl	8000fa0 <HAL_InitTick>
 8002034:	4603      	mov	r3, r0
 8002036:	72fb      	strb	r3, [r7, #11]

  return status;
 8002038:	7afb      	ldrb	r3, [r7, #11]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
 800204c:	08007760 	.word	0x08007760
 8002050:	20000008 	.word	0x20000008
 8002054:	20000000 	.word	0x20000000

08002058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002066:	4b3d      	ldr	r3, [pc, #244]	; (800215c <HAL_RCC_GetSysClockFreq+0x104>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002070:	4b3a      	ldr	r3, [pc, #232]	; (800215c <HAL_RCC_GetSysClockFreq+0x104>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x34>
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d121      	bne.n	80020ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d11e      	bne.n	80020ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800208c:	4b33      	ldr	r3, [pc, #204]	; (800215c <HAL_RCC_GetSysClockFreq+0x104>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d107      	bne.n	80020a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002098:	4b30      	ldr	r3, [pc, #192]	; (800215c <HAL_RCC_GetSysClockFreq+0x104>)
 800209a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800209e:	0a1b      	lsrs	r3, r3, #8
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	e005      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020a8:	4b2c      	ldr	r3, [pc, #176]	; (800215c <HAL_RCC_GetSysClockFreq+0x104>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020b4:	4a2a      	ldr	r2, [pc, #168]	; (8002160 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10d      	bne.n	80020e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020c8:	e00a      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d102      	bne.n	80020d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	e004      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_RCC_GetSysClockFreq+0x110>)
 80020de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d133      	bne.n	800214e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_RCC_GetSysClockFreq+0x104>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d002      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0xa4>
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d003      	beq.n	8002102 <HAL_RCC_GetSysClockFreq+0xaa>
 80020fa:	e005      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020fe:	617b      	str	r3, [r7, #20]
      break;
 8002100:	e005      	b.n	800210e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002102:	4b19      	ldr	r3, [pc, #100]	; (8002168 <HAL_RCC_GetSysClockFreq+0x110>)
 8002104:	617b      	str	r3, [r7, #20]
      break;
 8002106:	e002      	b.n	800210e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	617b      	str	r3, [r7, #20]
      break;
 800210c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_RCC_GetSysClockFreq+0x104>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	091b      	lsrs	r3, r3, #4
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	3301      	adds	r3, #1
 800211a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <HAL_RCC_GetSysClockFreq+0x104>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	fb02 f203 	mul.w	r2, r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_RCC_GetSysClockFreq+0x104>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	0e5b      	lsrs	r3, r3, #25
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	3301      	adds	r3, #1
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	fbb2 f3f3 	udiv	r3, r2, r3
 800214c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800214e:	69bb      	ldr	r3, [r7, #24]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3724      	adds	r7, #36	; 0x24
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	40021000 	.word	0x40021000
 8002160:	08007778 	.word	0x08007778
 8002164:	00f42400 	.word	0x00f42400
 8002168:	007a1200 	.word	0x007a1200

0800216c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_RCC_GetHCLKFreq+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000008 	.word	0x20000008

08002184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002188:	f7ff fff0 	bl	800216c <HAL_RCC_GetHCLKFreq>
 800218c:	4601      	mov	r1, r0
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08007770 	.word	0x08007770

080021b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021b4:	f7ff ffda 	bl	800216c <HAL_RCC_GetHCLKFreq>
 80021b8:	4601      	mov	r1, r0
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	0adb      	lsrs	r3, r3, #11
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021c6:	5cd3      	ldrb	r3, [r2, r3]
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08007770 	.word	0x08007770

080021dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021e4:	2300      	movs	r3, #0
 80021e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021e8:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021f4:	f7ff fa3a 	bl	800166c <HAL_PWREx_GetVoltageRange>
 80021f8:	6178      	str	r0, [r7, #20]
 80021fa:	e014      	b.n	8002226 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021fc:	4b25      	ldr	r3, [pc, #148]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	4a24      	ldr	r2, [pc, #144]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002206:	6593      	str	r3, [r2, #88]	; 0x58
 8002208:	4b22      	ldr	r3, [pc, #136]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002214:	f7ff fa2a 	bl	800166c <HAL_PWREx_GetVoltageRange>
 8002218:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	4a1d      	ldr	r2, [pc, #116]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002224:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800222c:	d10b      	bne.n	8002246 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b80      	cmp	r3, #128	; 0x80
 8002232:	d919      	bls.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2ba0      	cmp	r3, #160	; 0xa0
 8002238:	d902      	bls.n	8002240 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800223a:	2302      	movs	r3, #2
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	e013      	b.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002240:	2301      	movs	r3, #1
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	e010      	b.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b80      	cmp	r3, #128	; 0x80
 800224a:	d902      	bls.n	8002252 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800224c:	2303      	movs	r3, #3
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	e00a      	b.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d102      	bne.n	800225e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002258:	2302      	movs	r3, #2
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	e004      	b.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b70      	cmp	r3, #112	; 0x70
 8002262:	d101      	bne.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002264:	2301      	movs	r3, #1
 8002266:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 0207 	bic.w	r2, r3, #7
 8002270:	4909      	ldr	r1, [pc, #36]	; (8002298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002278:	4b07      	ldr	r3, [pc, #28]	; (8002298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	429a      	cmp	r2, r3
 8002284:	d001      	beq.n	800228a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	40022000 	.word	0x40022000

0800229c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022a4:	2300      	movs	r3, #0
 80022a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022a8:	2300      	movs	r3, #0
 80022aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d03f      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c0:	d01c      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80022c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c6:	d802      	bhi.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00e      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80022cc:	e01f      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80022ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022d2:	d003      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80022d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022d8:	d01c      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80022da:	e018      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022dc:	4b85      	ldr	r3, [pc, #532]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a84      	ldr	r2, [pc, #528]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022e8:	e015      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 fab9 	bl	8002868 <RCCEx_PLLSAI1_Config>
 80022f6:	4603      	mov	r3, r0
 80022f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022fa:	e00c      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3320      	adds	r3, #32
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fba0 	bl	8002a48 <RCCEx_PLLSAI2_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800230c:	e003      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	74fb      	strb	r3, [r7, #19]
      break;
 8002312:	e000      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10b      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800231c:	4b75      	ldr	r3, [pc, #468]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800232a:	4972      	ldr	r1, [pc, #456]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002332:	e001      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d03f      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800234c:	d01c      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800234e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002352:	d802      	bhi.n	800235a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00e      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002358:	e01f      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800235a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800235e:	d003      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002360:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002364:	d01c      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002366:	e018      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002368:	4b62      	ldr	r3, [pc, #392]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a61      	ldr	r2, [pc, #388]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800236e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002372:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002374:	e015      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3304      	adds	r3, #4
 800237a:	2100      	movs	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fa73 	bl	8002868 <RCCEx_PLLSAI1_Config>
 8002382:	4603      	mov	r3, r0
 8002384:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002386:	e00c      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3320      	adds	r3, #32
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fb5a 	bl	8002a48 <RCCEx_PLLSAI2_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002398:	e003      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	74fb      	strb	r3, [r7, #19]
      break;
 800239e:	e000      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80023a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023a2:	7cfb      	ldrb	r3, [r7, #19]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10b      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023a8:	4b52      	ldr	r3, [pc, #328]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023b6:	494f      	ldr	r1, [pc, #316]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023be:	e001      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a0 	beq.w	8002512 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023d6:	4b47      	ldr	r3, [pc, #284]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00d      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ec:	4b41      	ldr	r3, [pc, #260]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	4a40      	ldr	r2, [pc, #256]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f6:	6593      	str	r3, [r2, #88]	; 0x58
 80023f8:	4b3e      	ldr	r3, [pc, #248]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002404:	2301      	movs	r3, #1
 8002406:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002408:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a3a      	ldr	r2, [pc, #232]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800240e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002414:	f7fe fe10 	bl	8001038 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800241a:	e009      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241c:	f7fe fe0c 	bl	8001038 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d902      	bls.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	74fb      	strb	r3, [r7, #19]
        break;
 800242e:	e005      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002430:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ef      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d15c      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002442:	4b2c      	ldr	r3, [pc, #176]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01f      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	429a      	cmp	r2, r3
 800245e:	d019      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002460:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800246a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800246c:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800247c:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800248c:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d016      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7fe fdcb 	bl	8001038 <HAL_GetTick>
 80024a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a4:	e00b      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7fe fdc7 	bl	8001038 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d902      	bls.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	74fb      	strb	r3, [r7, #19]
            break;
 80024bc:	e006      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ec      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80024cc:	7cfb      	ldrb	r3, [r7, #19]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10c      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e2:	4904      	ldr	r1, [pc, #16]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024ea:	e009      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
 80024f0:	e006      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002500:	7c7b      	ldrb	r3, [r7, #17]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d105      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002506:	4b9e      	ldr	r3, [pc, #632]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250a:	4a9d      	ldr	r2, [pc, #628]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800250c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002510:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800251e:	4b98      	ldr	r3, [pc, #608]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002524:	f023 0203 	bic.w	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252c:	4994      	ldr	r1, [pc, #592]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002540:	4b8f      	ldr	r3, [pc, #572]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f023 020c 	bic.w	r2, r3, #12
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	498c      	ldr	r1, [pc, #560]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002562:	4b87      	ldr	r3, [pc, #540]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002568:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	4983      	ldr	r1, [pc, #524]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002584:	4b7e      	ldr	r3, [pc, #504]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	497b      	ldr	r1, [pc, #492]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025a6:	4b76      	ldr	r3, [pc, #472]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b4:	4972      	ldr	r1, [pc, #456]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025c8:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d6:	496a      	ldr	r1, [pc, #424]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025ea:	4b65      	ldr	r3, [pc, #404]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	4961      	ldr	r1, [pc, #388]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800260c:	4b5c      	ldr	r3, [pc, #368]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261a:	4959      	ldr	r1, [pc, #356]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800262e:	4b54      	ldr	r3, [pc, #336]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002634:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263c:	4950      	ldr	r1, [pc, #320]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002650:	4b4b      	ldr	r3, [pc, #300]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	4948      	ldr	r1, [pc, #288]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002672:	4b43      	ldr	r3, [pc, #268]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	493f      	ldr	r1, [pc, #252]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d028      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002694:	4b3a      	ldr	r3, [pc, #232]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026a2:	4937      	ldr	r1, [pc, #220]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026b2:	d106      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b4:	4b32      	ldr	r3, [pc, #200]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4a31      	ldr	r2, [pc, #196]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026be:	60d3      	str	r3, [r2, #12]
 80026c0:	e011      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ca:	d10c      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3304      	adds	r3, #4
 80026d0:	2101      	movs	r1, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f8c8 	bl	8002868 <RCCEx_PLLSAI1_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80026e2:	7cfb      	ldrb	r3, [r7, #19]
 80026e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d028      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026f2:	4b23      	ldr	r3, [pc, #140]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	491f      	ldr	r1, [pc, #124]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002710:	d106      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002712:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	4a1a      	ldr	r2, [pc, #104]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271c:	60d3      	str	r3, [r2, #12]
 800271e:	e011      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002728:	d10c      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3304      	adds	r3, #4
 800272e:	2101      	movs	r1, #1
 8002730:	4618      	mov	r0, r3
 8002732:	f000 f899 	bl	8002868 <RCCEx_PLLSAI1_Config>
 8002736:	4603      	mov	r3, r0
 8002738:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002740:	7cfb      	ldrb	r3, [r7, #19]
 8002742:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d02b      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275e:	4908      	ldr	r1, [pc, #32]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800276e:	d109      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a02      	ldr	r2, [pc, #8]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800277a:	60d3      	str	r3, [r2, #12]
 800277c:	e014      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002788:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800278c:	d10c      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3304      	adds	r3, #4
 8002792:	2101      	movs	r1, #1
 8002794:	4618      	mov	r0, r3
 8002796:	f000 f867 	bl	8002868 <RCCEx_PLLSAI1_Config>
 800279a:	4603      	mov	r3, r0
 800279c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d02f      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027b4:	4b2b      	ldr	r3, [pc, #172]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027c2:	4928      	ldr	r1, [pc, #160]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027d2:	d10d      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	2102      	movs	r1, #2
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f844 	bl	8002868 <RCCEx_PLLSAI1_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d014      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80027ea:	7cfb      	ldrb	r3, [r7, #19]
 80027ec:	74bb      	strb	r3, [r7, #18]
 80027ee:	e011      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027f8:	d10c      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3320      	adds	r3, #32
 80027fe:	2102      	movs	r1, #2
 8002800:	4618      	mov	r0, r3
 8002802:	f000 f921 	bl	8002a48 <RCCEx_PLLSAI2_Config>
 8002806:	4603      	mov	r3, r0
 8002808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002820:	4b10      	ldr	r3, [pc, #64]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800282e:	490d      	ldr	r1, [pc, #52]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002852:	4904      	ldr	r1, [pc, #16]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800285a:	7cbb      	ldrb	r3, [r7, #18]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40021000 	.word	0x40021000

08002868 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002876:	4b73      	ldr	r3, [pc, #460]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d018      	beq.n	80028b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002882:	4b70      	ldr	r3, [pc, #448]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0203 	and.w	r2, r3, #3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d10d      	bne.n	80028ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
       ||
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800289a:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
       ||
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d044      	beq.n	8002938 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
 80028b2:	e041      	b.n	8002938 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d00c      	beq.n	80028d6 <RCCEx_PLLSAI1_Config+0x6e>
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d013      	beq.n	80028e8 <RCCEx_PLLSAI1_Config+0x80>
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d120      	bne.n	8002906 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028c4:	4b5f      	ldr	r3, [pc, #380]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d11d      	bne.n	800290c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d4:	e01a      	b.n	800290c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028d6:	4b5b      	ldr	r3, [pc, #364]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e6:	e013      	b.n	8002910 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028e8:	4b56      	ldr	r3, [pc, #344]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10f      	bne.n	8002914 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028f4:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d109      	bne.n	8002914 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002904:	e006      	b.n	8002914 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
      break;
 800290a:	e004      	b.n	8002916 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800290c:	bf00      	nop
 800290e:	e002      	b.n	8002916 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002910:	bf00      	nop
 8002912:	e000      	b.n	8002916 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002914:	bf00      	nop
    }

    if(status == HAL_OK)
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10d      	bne.n	8002938 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800291c:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6819      	ldr	r1, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	3b01      	subs	r3, #1
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	430b      	orrs	r3, r1
 8002932:	4944      	ldr	r1, [pc, #272]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002934:	4313      	orrs	r3, r2
 8002936:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d17d      	bne.n	8002a3a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800293e:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a40      	ldr	r2, [pc, #256]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002944:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294a:	f7fe fb75 	bl	8001038 <HAL_GetTick>
 800294e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002950:	e009      	b.n	8002966 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002952:	f7fe fb71 	bl	8001038 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d902      	bls.n	8002966 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	73fb      	strb	r3, [r7, #15]
        break;
 8002964:	e005      	b.n	8002972 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002966:	4b37      	ldr	r3, [pc, #220]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1ef      	bne.n	8002952 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d160      	bne.n	8002a3a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d111      	bne.n	80029a2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800297e:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6892      	ldr	r2, [r2, #8]
 800298e:	0211      	lsls	r1, r2, #8
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	68d2      	ldr	r2, [r2, #12]
 8002994:	0912      	lsrs	r2, r2, #4
 8002996:	0452      	lsls	r2, r2, #17
 8002998:	430a      	orrs	r2, r1
 800299a:	492a      	ldr	r1, [pc, #168]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 800299c:	4313      	orrs	r3, r2
 800299e:	610b      	str	r3, [r1, #16]
 80029a0:	e027      	b.n	80029f2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d112      	bne.n	80029ce <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a8:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6892      	ldr	r2, [r2, #8]
 80029b8:	0211      	lsls	r1, r2, #8
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6912      	ldr	r2, [r2, #16]
 80029be:	0852      	lsrs	r2, r2, #1
 80029c0:	3a01      	subs	r2, #1
 80029c2:	0552      	lsls	r2, r2, #21
 80029c4:	430a      	orrs	r2, r1
 80029c6:	491f      	ldr	r1, [pc, #124]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	610b      	str	r3, [r1, #16]
 80029cc:	e011      	b.n	80029f2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6892      	ldr	r2, [r2, #8]
 80029de:	0211      	lsls	r1, r2, #8
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6952      	ldr	r2, [r2, #20]
 80029e4:	0852      	lsrs	r2, r2, #1
 80029e6:	3a01      	subs	r2, #1
 80029e8:	0652      	lsls	r2, r2, #25
 80029ea:	430a      	orrs	r2, r1
 80029ec:	4915      	ldr	r1, [pc, #84]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe fb1b 	bl	8001038 <HAL_GetTick>
 8002a02:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a04:	e009      	b.n	8002a1a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a06:	f7fe fb17 	bl	8001038 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d902      	bls.n	8002a1a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	73fb      	strb	r3, [r7, #15]
          break;
 8002a18:	e005      	b.n	8002a26 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0ef      	beq.n	8002a06 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d106      	bne.n	8002a3a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	4903      	ldr	r1, [pc, #12]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000

08002a48 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a56:	4b68      	ldr	r3, [pc, #416]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d018      	beq.n	8002a94 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a62:	4b65      	ldr	r3, [pc, #404]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0203 	and.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d10d      	bne.n	8002a8e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
       ||
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a7a:	4b5f      	ldr	r3, [pc, #380]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
       ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d044      	beq.n	8002b18 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
 8002a92:	e041      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d00c      	beq.n	8002ab6 <RCCEx_PLLSAI2_Config+0x6e>
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d013      	beq.n	8002ac8 <RCCEx_PLLSAI2_Config+0x80>
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d120      	bne.n	8002ae6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aa4:	4b54      	ldr	r3, [pc, #336]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d11d      	bne.n	8002aec <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab4:	e01a      	b.n	8002aec <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ab6:	4b50      	ldr	r3, [pc, #320]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d116      	bne.n	8002af0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac6:	e013      	b.n	8002af0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ac8:	4b4b      	ldr	r3, [pc, #300]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10f      	bne.n	8002af4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ad4:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ae4:	e006      	b.n	8002af4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aea:	e004      	b.n	8002af6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002aec:	bf00      	nop
 8002aee:	e002      	b.n	8002af6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002af0:	bf00      	nop
 8002af2:	e000      	b.n	8002af6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002af4:	bf00      	nop
    }

    if(status == HAL_OK)
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10d      	bne.n	8002b18 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002afc:	4b3e      	ldr	r3, [pc, #248]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6819      	ldr	r1, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	430b      	orrs	r3, r1
 8002b12:	4939      	ldr	r1, [pc, #228]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d167      	bne.n	8002bee <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b1e:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a35      	ldr	r2, [pc, #212]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b2a:	f7fe fa85 	bl	8001038 <HAL_GetTick>
 8002b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b30:	e009      	b.n	8002b46 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b32:	f7fe fa81 	bl	8001038 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d902      	bls.n	8002b46 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	73fb      	strb	r3, [r7, #15]
        break;
 8002b44:	e005      	b.n	8002b52 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b46:	4b2c      	ldr	r3, [pc, #176]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1ef      	bne.n	8002b32 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d14a      	bne.n	8002bee <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d111      	bne.n	8002b82 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b5e:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6892      	ldr	r2, [r2, #8]
 8002b6e:	0211      	lsls	r1, r2, #8
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	68d2      	ldr	r2, [r2, #12]
 8002b74:	0912      	lsrs	r2, r2, #4
 8002b76:	0452      	lsls	r2, r2, #17
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	491f      	ldr	r1, [pc, #124]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	614b      	str	r3, [r1, #20]
 8002b80:	e011      	b.n	8002ba6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6892      	ldr	r2, [r2, #8]
 8002b92:	0211      	lsls	r1, r2, #8
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6912      	ldr	r2, [r2, #16]
 8002b98:	0852      	lsrs	r2, r2, #1
 8002b9a:	3a01      	subs	r2, #1
 8002b9c:	0652      	lsls	r2, r2, #25
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	4915      	ldr	r1, [pc, #84]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fa41 	bl	8001038 <HAL_GetTick>
 8002bb6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bb8:	e009      	b.n	8002bce <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bba:	f7fe fa3d 	bl	8001038 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d902      	bls.n	8002bce <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	73fb      	strb	r3, [r7, #15]
          break;
 8002bcc:	e005      	b.n	8002bda <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0ef      	beq.n	8002bba <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	4903      	ldr	r1, [pc, #12]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000

08002bfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e07c      	b.n	8002d08 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d106      	bne.n	8002c2e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f002 f997 	bl	8004f5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c44:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c4e:	d902      	bls.n	8002c56 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	e002      	b.n	8002c5c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c64:	d007      	beq.n	8002c76 <HAL_SPI_Init+0x7a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c6e:	d002      	beq.n	8002c76 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10b      	bne.n	8002c96 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c86:	d903      	bls.n	8002c90 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c8e:	e002      	b.n	8002c96 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	ea42 0103 	orr.w	r1, r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	f003 0204 	and.w	r2, r3, #4
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	ea42 0103 	orr.w	r1, r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e01d      	b.n	8002d5e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f002 f972 	bl	8005020 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 fa7a 	bl	8003248 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2201      	movs	r2, #1
 8002d78:	6839      	ldr	r1, [r7, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fdd4 	bl	8003928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <HAL_TIM_PWM_Start+0x98>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <HAL_TIM_PWM_Start+0x4a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1d      	ldr	r2, [pc, #116]	; (8002e04 <HAL_TIM_PWM_Start+0x9c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00e      	beq.n	8002db2 <HAL_TIM_PWM_Start+0x4a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_TIM_PWM_Start+0xa0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d009      	beq.n	8002db2 <HAL_TIM_PWM_Start+0x4a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1a      	ldr	r2, [pc, #104]	; (8002e0c <HAL_TIM_PWM_Start+0xa4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d004      	beq.n	8002db2 <HAL_TIM_PWM_Start+0x4a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <HAL_TIM_PWM_Start+0xa8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_TIM_PWM_Start+0x4e>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_TIM_PWM_Start+0x50>
 8002db6:	2300      	movs	r3, #0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <HAL_TIM_PWM_Start+0xac>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d00b      	beq.n	8002df6 <HAL_TIM_PWM_Start+0x8e>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d007      	beq.n	8002df6 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0201 	orr.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40012c00 	.word	0x40012c00
 8002e04:	40013400 	.word	0x40013400
 8002e08:	40014000 	.word	0x40014000
 8002e0c:	40014400 	.word	0x40014400
 8002e10:	40014800 	.word	0x40014800
 8002e14:	00010007 	.word	0x00010007

08002e18 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2200      	movs	r2, #0
 8002e28:	6839      	ldr	r1, [r7, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fd7c 	bl	8003928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a2a      	ldr	r2, [pc, #168]	; (8002ee0 <HAL_TIM_PWM_Stop+0xc8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <HAL_TIM_PWM_Stop+0x4a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a29      	ldr	r2, [pc, #164]	; (8002ee4 <HAL_TIM_PWM_Stop+0xcc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00e      	beq.n	8002e62 <HAL_TIM_PWM_Stop+0x4a>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a27      	ldr	r2, [pc, #156]	; (8002ee8 <HAL_TIM_PWM_Stop+0xd0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d009      	beq.n	8002e62 <HAL_TIM_PWM_Stop+0x4a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a26      	ldr	r2, [pc, #152]	; (8002eec <HAL_TIM_PWM_Stop+0xd4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_TIM_PWM_Stop+0x4a>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a24      	ldr	r2, [pc, #144]	; (8002ef0 <HAL_TIM_PWM_Stop+0xd8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_PWM_Stop+0x4e>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_TIM_PWM_Stop+0x50>
 8002e66:	2300      	movs	r3, #0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d017      	beq.n	8002e9c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6a1a      	ldr	r2, [r3, #32]
 8002e72:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10f      	bne.n	8002e9c <HAL_TIM_PWM_Stop+0x84>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	f240 4344 	movw	r3, #1092	; 0x444
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d107      	bne.n	8002e9c <HAL_TIM_PWM_Stop+0x84>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6a1a      	ldr	r2, [r3, #32]
 8002ea2:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10f      	bne.n	8002ecc <HAL_TIM_PWM_Stop+0xb4>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6a1a      	ldr	r2, [r3, #32]
 8002eb2:	f240 4344 	movw	r3, #1092	; 0x444
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d107      	bne.n	8002ecc <HAL_TIM_PWM_Stop+0xb4>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40013400 	.word	0x40013400
 8002ee8:	40014000 	.word	0x40014000
 8002eec:	40014400 	.word	0x40014400
 8002ef0:	40014800 	.word	0x40014800

08002ef4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e083      	b.n	8003010 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f002 f8b1 	bl	8005084 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002f38:	f023 0307 	bic.w	r3, r3, #7
 8002f3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3304      	adds	r3, #4
 8002f46:	4619      	mov	r1, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f000 f97d 	bl	8003248 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f76:	f023 0303 	bic.w	r3, r3, #3
 8002f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	4313      	orrs	r3, r2
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f94:	f023 030c 	bic.w	r3, r3, #12
 8002f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	011a      	lsls	r2, r3, #4
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	031b      	lsls	r3, r3, #12
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002fd2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002fda:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800302e:	2302      	movs	r3, #2
 8003030:	e105      	b.n	800323e <HAL_TIM_PWM_ConfigChannel+0x226>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2202      	movs	r2, #2
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b14      	cmp	r3, #20
 8003046:	f200 80f0 	bhi.w	800322a <HAL_TIM_PWM_ConfigChannel+0x212>
 800304a:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003050:	080030a5 	.word	0x080030a5
 8003054:	0800322b 	.word	0x0800322b
 8003058:	0800322b 	.word	0x0800322b
 800305c:	0800322b 	.word	0x0800322b
 8003060:	080030e5 	.word	0x080030e5
 8003064:	0800322b 	.word	0x0800322b
 8003068:	0800322b 	.word	0x0800322b
 800306c:	0800322b 	.word	0x0800322b
 8003070:	08003127 	.word	0x08003127
 8003074:	0800322b 	.word	0x0800322b
 8003078:	0800322b 	.word	0x0800322b
 800307c:	0800322b 	.word	0x0800322b
 8003080:	08003167 	.word	0x08003167
 8003084:	0800322b 	.word	0x0800322b
 8003088:	0800322b 	.word	0x0800322b
 800308c:	0800322b 	.word	0x0800322b
 8003090:	080031a9 	.word	0x080031a9
 8003094:	0800322b 	.word	0x0800322b
 8003098:	0800322b 	.word	0x0800322b
 800309c:	0800322b 	.word	0x0800322b
 80030a0:	080031e9 	.word	0x080031e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f966 	bl	800337c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0208 	orr.w	r2, r2, #8
 80030be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0204 	bic.w	r2, r2, #4
 80030ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6999      	ldr	r1, [r3, #24]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	619a      	str	r2, [r3, #24]
      break;
 80030e2:	e0a3      	b.n	800322c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f9d6 	bl	800349c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6999      	ldr	r1, [r3, #24]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	021a      	lsls	r2, r3, #8
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	619a      	str	r2, [r3, #24]
      break;
 8003124:	e082      	b.n	800322c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fa3f 	bl	80035b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0208 	orr.w	r2, r2, #8
 8003140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0204 	bic.w	r2, r2, #4
 8003150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69d9      	ldr	r1, [r3, #28]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	61da      	str	r2, [r3, #28]
      break;
 8003164:	e062      	b.n	800322c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	4618      	mov	r0, r3
 800316e:	f000 faa7 	bl	80036c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69da      	ldr	r2, [r3, #28]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69d9      	ldr	r1, [r3, #28]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	021a      	lsls	r2, r3, #8
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	61da      	str	r2, [r3, #28]
      break;
 80031a6:	e041      	b.n	800322c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 faf0 	bl	8003794 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0208 	orr.w	r2, r2, #8
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0204 	bic.w	r2, r2, #4
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031e6:	e021      	b.n	800322c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fb34 	bl	800385c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003202:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003212:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	021a      	lsls	r2, r3, #8
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003228:	e000      	b.n	800322c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800322a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop

08003248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a40      	ldr	r2, [pc, #256]	; (800335c <TIM_Base_SetConfig+0x114>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d013      	beq.n	8003288 <TIM_Base_SetConfig+0x40>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003266:	d00f      	beq.n	8003288 <TIM_Base_SetConfig+0x40>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a3d      	ldr	r2, [pc, #244]	; (8003360 <TIM_Base_SetConfig+0x118>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00b      	beq.n	8003288 <TIM_Base_SetConfig+0x40>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a3c      	ldr	r2, [pc, #240]	; (8003364 <TIM_Base_SetConfig+0x11c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d007      	beq.n	8003288 <TIM_Base_SetConfig+0x40>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a3b      	ldr	r2, [pc, #236]	; (8003368 <TIM_Base_SetConfig+0x120>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d003      	beq.n	8003288 <TIM_Base_SetConfig+0x40>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a3a      	ldr	r2, [pc, #232]	; (800336c <TIM_Base_SetConfig+0x124>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d108      	bne.n	800329a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2f      	ldr	r2, [pc, #188]	; (800335c <TIM_Base_SetConfig+0x114>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01f      	beq.n	80032e2 <TIM_Base_SetConfig+0x9a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a8:	d01b      	beq.n	80032e2 <TIM_Base_SetConfig+0x9a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2c      	ldr	r2, [pc, #176]	; (8003360 <TIM_Base_SetConfig+0x118>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d017      	beq.n	80032e2 <TIM_Base_SetConfig+0x9a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2b      	ldr	r2, [pc, #172]	; (8003364 <TIM_Base_SetConfig+0x11c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <TIM_Base_SetConfig+0x9a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2a      	ldr	r2, [pc, #168]	; (8003368 <TIM_Base_SetConfig+0x120>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00f      	beq.n	80032e2 <TIM_Base_SetConfig+0x9a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a29      	ldr	r2, [pc, #164]	; (800336c <TIM_Base_SetConfig+0x124>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00b      	beq.n	80032e2 <TIM_Base_SetConfig+0x9a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a28      	ldr	r2, [pc, #160]	; (8003370 <TIM_Base_SetConfig+0x128>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d007      	beq.n	80032e2 <TIM_Base_SetConfig+0x9a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a27      	ldr	r2, [pc, #156]	; (8003374 <TIM_Base_SetConfig+0x12c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d003      	beq.n	80032e2 <TIM_Base_SetConfig+0x9a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a26      	ldr	r2, [pc, #152]	; (8003378 <TIM_Base_SetConfig+0x130>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d108      	bne.n	80032f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a10      	ldr	r2, [pc, #64]	; (800335c <TIM_Base_SetConfig+0x114>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00f      	beq.n	8003340 <TIM_Base_SetConfig+0xf8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <TIM_Base_SetConfig+0x124>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00b      	beq.n	8003340 <TIM_Base_SetConfig+0xf8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a11      	ldr	r2, [pc, #68]	; (8003370 <TIM_Base_SetConfig+0x128>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <TIM_Base_SetConfig+0xf8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a10      	ldr	r2, [pc, #64]	; (8003374 <TIM_Base_SetConfig+0x12c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <TIM_Base_SetConfig+0xf8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a0f      	ldr	r2, [pc, #60]	; (8003378 <TIM_Base_SetConfig+0x130>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d103      	bne.n	8003348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	615a      	str	r2, [r3, #20]
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40012c00 	.word	0x40012c00
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40000c00 	.word	0x40000c00
 800336c:	40013400 	.word	0x40013400
 8003370:	40014000 	.word	0x40014000
 8003374:	40014400 	.word	0x40014400
 8003378:	40014800 	.word	0x40014800

0800337c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f023 0201 	bic.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0303 	bic.w	r3, r3, #3
 80033b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f023 0302 	bic.w	r3, r3, #2
 80033c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a2c      	ldr	r2, [pc, #176]	; (8003488 <TIM_OC1_SetConfig+0x10c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00f      	beq.n	80033fc <TIM_OC1_SetConfig+0x80>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a2b      	ldr	r2, [pc, #172]	; (800348c <TIM_OC1_SetConfig+0x110>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00b      	beq.n	80033fc <TIM_OC1_SetConfig+0x80>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <TIM_OC1_SetConfig+0x114>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d007      	beq.n	80033fc <TIM_OC1_SetConfig+0x80>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a29      	ldr	r2, [pc, #164]	; (8003494 <TIM_OC1_SetConfig+0x118>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_OC1_SetConfig+0x80>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a28      	ldr	r2, [pc, #160]	; (8003498 <TIM_OC1_SetConfig+0x11c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d10c      	bne.n	8003416 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f023 0308 	bic.w	r3, r3, #8
 8003402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1b      	ldr	r2, [pc, #108]	; (8003488 <TIM_OC1_SetConfig+0x10c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00f      	beq.n	800343e <TIM_OC1_SetConfig+0xc2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1a      	ldr	r2, [pc, #104]	; (800348c <TIM_OC1_SetConfig+0x110>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00b      	beq.n	800343e <TIM_OC1_SetConfig+0xc2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a19      	ldr	r2, [pc, #100]	; (8003490 <TIM_OC1_SetConfig+0x114>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <TIM_OC1_SetConfig+0xc2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a18      	ldr	r2, [pc, #96]	; (8003494 <TIM_OC1_SetConfig+0x118>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <TIM_OC1_SetConfig+0xc2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a17      	ldr	r2, [pc, #92]	; (8003498 <TIM_OC1_SetConfig+0x11c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d111      	bne.n	8003462 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800344c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	621a      	str	r2, [r3, #32]
}
 800347c:	bf00      	nop
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40013400 	.word	0x40013400
 8003490:	40014000 	.word	0x40014000
 8003494:	40014400 	.word	0x40014400
 8003498:	40014800 	.word	0x40014800

0800349c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f023 0210 	bic.w	r2, r3, #16
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f023 0320 	bic.w	r3, r3, #32
 80034ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a28      	ldr	r2, [pc, #160]	; (800359c <TIM_OC2_SetConfig+0x100>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_OC2_SetConfig+0x6c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a27      	ldr	r2, [pc, #156]	; (80035a0 <TIM_OC2_SetConfig+0x104>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d10d      	bne.n	8003524 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800350e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003522:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a1d      	ldr	r2, [pc, #116]	; (800359c <TIM_OC2_SetConfig+0x100>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00f      	beq.n	800354c <TIM_OC2_SetConfig+0xb0>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <TIM_OC2_SetConfig+0x104>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00b      	beq.n	800354c <TIM_OC2_SetConfig+0xb0>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <TIM_OC2_SetConfig+0x108>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <TIM_OC2_SetConfig+0xb0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a1a      	ldr	r2, [pc, #104]	; (80035a8 <TIM_OC2_SetConfig+0x10c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_OC2_SetConfig+0xb0>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a19      	ldr	r2, [pc, #100]	; (80035ac <TIM_OC2_SetConfig+0x110>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d113      	bne.n	8003574 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800355a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40013400 	.word	0x40013400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40014400 	.word	0x40014400
 80035ac:	40014800 	.word	0x40014800

080035b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0303 	bic.w	r3, r3, #3
 80035ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a27      	ldr	r2, [pc, #156]	; (80036ac <TIM_OC3_SetConfig+0xfc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_OC3_SetConfig+0x6a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <TIM_OC3_SetConfig+0x100>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d10d      	bne.n	8003636 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <TIM_OC3_SetConfig+0xfc>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00f      	beq.n	800365e <TIM_OC3_SetConfig+0xae>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a1b      	ldr	r2, [pc, #108]	; (80036b0 <TIM_OC3_SetConfig+0x100>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00b      	beq.n	800365e <TIM_OC3_SetConfig+0xae>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a1a      	ldr	r2, [pc, #104]	; (80036b4 <TIM_OC3_SetConfig+0x104>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d007      	beq.n	800365e <TIM_OC3_SetConfig+0xae>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a19      	ldr	r2, [pc, #100]	; (80036b8 <TIM_OC3_SetConfig+0x108>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d003      	beq.n	800365e <TIM_OC3_SetConfig+0xae>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a18      	ldr	r2, [pc, #96]	; (80036bc <TIM_OC3_SetConfig+0x10c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d113      	bne.n	8003686 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800366c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	621a      	str	r2, [r3, #32]
}
 80036a0:	bf00      	nop
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40013400 	.word	0x40013400
 80036b4:	40014000 	.word	0x40014000
 80036b8:	40014400 	.word	0x40014400
 80036bc:	40014800 	.word	0x40014800

080036c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800370e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	031b      	lsls	r3, r3, #12
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a18      	ldr	r2, [pc, #96]	; (8003780 <TIM_OC4_SetConfig+0xc0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00f      	beq.n	8003744 <TIM_OC4_SetConfig+0x84>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a17      	ldr	r2, [pc, #92]	; (8003784 <TIM_OC4_SetConfig+0xc4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00b      	beq.n	8003744 <TIM_OC4_SetConfig+0x84>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a16      	ldr	r2, [pc, #88]	; (8003788 <TIM_OC4_SetConfig+0xc8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d007      	beq.n	8003744 <TIM_OC4_SetConfig+0x84>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a15      	ldr	r2, [pc, #84]	; (800378c <TIM_OC4_SetConfig+0xcc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d003      	beq.n	8003744 <TIM_OC4_SetConfig+0x84>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a14      	ldr	r2, [pc, #80]	; (8003790 <TIM_OC4_SetConfig+0xd0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d109      	bne.n	8003758 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800374a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	019b      	lsls	r3, r3, #6
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	621a      	str	r2, [r3, #32]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40013400 	.word	0x40013400
 8003788:	40014000 	.word	0x40014000
 800378c:	40014400 	.word	0x40014400
 8003790:	40014800 	.word	0x40014800

08003794 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80037d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	041b      	lsls	r3, r3, #16
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a17      	ldr	r2, [pc, #92]	; (8003848 <TIM_OC5_SetConfig+0xb4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00f      	beq.n	800380e <TIM_OC5_SetConfig+0x7a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a16      	ldr	r2, [pc, #88]	; (800384c <TIM_OC5_SetConfig+0xb8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00b      	beq.n	800380e <TIM_OC5_SetConfig+0x7a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a15      	ldr	r2, [pc, #84]	; (8003850 <TIM_OC5_SetConfig+0xbc>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d007      	beq.n	800380e <TIM_OC5_SetConfig+0x7a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a14      	ldr	r2, [pc, #80]	; (8003854 <TIM_OC5_SetConfig+0xc0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d003      	beq.n	800380e <TIM_OC5_SetConfig+0x7a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a13      	ldr	r2, [pc, #76]	; (8003858 <TIM_OC5_SetConfig+0xc4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d109      	bne.n	8003822 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003814:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	621a      	str	r2, [r3, #32]
}
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40013400 	.word	0x40013400
 8003850:	40014000 	.word	0x40014000
 8003854:	40014400 	.word	0x40014400
 8003858:	40014800 	.word	0x40014800

0800385c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800388a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	051b      	lsls	r3, r3, #20
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a18      	ldr	r2, [pc, #96]	; (8003914 <TIM_OC6_SetConfig+0xb8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00f      	beq.n	80038d8 <TIM_OC6_SetConfig+0x7c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a17      	ldr	r2, [pc, #92]	; (8003918 <TIM_OC6_SetConfig+0xbc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00b      	beq.n	80038d8 <TIM_OC6_SetConfig+0x7c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a16      	ldr	r2, [pc, #88]	; (800391c <TIM_OC6_SetConfig+0xc0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d007      	beq.n	80038d8 <TIM_OC6_SetConfig+0x7c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a15      	ldr	r2, [pc, #84]	; (8003920 <TIM_OC6_SetConfig+0xc4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d003      	beq.n	80038d8 <TIM_OC6_SetConfig+0x7c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a14      	ldr	r2, [pc, #80]	; (8003924 <TIM_OC6_SetConfig+0xc8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d109      	bne.n	80038ec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	029b      	lsls	r3, r3, #10
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40013400 	.word	0x40013400
 800391c:	40014000 	.word	0x40014000
 8003920:	40014400 	.word	0x40014400
 8003924:	40014800 	.word	0x40014800

08003928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	2201      	movs	r2, #1
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1a      	ldr	r2, [r3, #32]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	43db      	mvns	r3, r3
 800394a:	401a      	ands	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a1a      	ldr	r2, [r3, #32]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	431a      	orrs	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003988:	2302      	movs	r3, #2
 800398a:	e045      	b.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1c      	ldr	r2, [pc, #112]	; (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1b      	ldr	r2, [pc, #108]	; (8003a28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d108      	bne.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ea:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40013400 	.word	0x40013400

08003a2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e040      	b.n	8003ac0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f001 fbb6 	bl	80051c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2224      	movs	r2, #36	; 0x24
 8003a58:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f8c0 	bl	8003bf0 <UART_SetConfig>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e022      	b.n	8003ac0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fbfc 	bl	8004280 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fc83 	bl	80043c4 <UART_CheckIdleState>
 8003abe:	4603      	mov	r3, r0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	; 0x28
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	f040 8081 	bne.w	8003be4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_UART_Transmit+0x26>
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e079      	b.n	8003be6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_UART_Transmit+0x38>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e072      	b.n	8003be6 <HAL_UART_Transmit+0x11e>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2221      	movs	r2, #33	; 0x21
 8003b12:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003b14:	f7fd fa90 	bl	8001038 <HAL_GetTick>
 8003b18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	88fa      	ldrh	r2, [r7, #6]
 8003b1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	88fa      	ldrh	r2, [r7, #6]
 8003b26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b32:	d108      	bne.n	8003b46 <HAL_UART_Transmit+0x7e>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d104      	bne.n	8003b46 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	e003      	b.n	8003b4e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b4e:	e02d      	b.n	8003bac <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2200      	movs	r2, #0
 8003b58:	2180      	movs	r1, #128	; 0x80
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fc77 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e03d      	b.n	8003be6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10b      	bne.n	8003b88 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	881a      	ldrh	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b7c:	b292      	uxth	r2, r2
 8003b7e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	3302      	adds	r3, #2
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e008      	b.n	8003b9a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	b292      	uxth	r2, r2
 8003b92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	3301      	adds	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1cb      	bne.n	8003b50 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2140      	movs	r1, #64	; 0x40
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fc43 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e009      	b.n	8003be6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e000      	b.n	8003be6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003bf4:	b088      	sub	sp, #32
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4bac      	ldr	r3, [pc, #688]	; (8003ed8 <UART_SetConfig+0x2e8>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	69f9      	ldr	r1, [r7, #28]
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4aa2      	ldr	r2, [pc, #648]	; (8003edc <UART_SetConfig+0x2ec>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a99      	ldr	r2, [pc, #612]	; (8003ee0 <UART_SetConfig+0x2f0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d121      	bne.n	8003cc4 <UART_SetConfig+0xd4>
 8003c80:	4b98      	ldr	r3, [pc, #608]	; (8003ee4 <UART_SetConfig+0x2f4>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d816      	bhi.n	8003cbc <UART_SetConfig+0xcc>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <UART_SetConfig+0xa4>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003ca5 	.word	0x08003ca5
 8003c98:	08003cb1 	.word	0x08003cb1
 8003c9c:	08003cab 	.word	0x08003cab
 8003ca0:	08003cb7 	.word	0x08003cb7
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	76fb      	strb	r3, [r7, #27]
 8003ca8:	e0e8      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003caa:	2302      	movs	r3, #2
 8003cac:	76fb      	strb	r3, [r7, #27]
 8003cae:	e0e5      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	76fb      	strb	r3, [r7, #27]
 8003cb4:	e0e2      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	76fb      	strb	r3, [r7, #27]
 8003cba:	e0df      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	76fb      	strb	r3, [r7, #27]
 8003cc0:	bf00      	nop
 8003cc2:	e0db      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a87      	ldr	r2, [pc, #540]	; (8003ee8 <UART_SetConfig+0x2f8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d134      	bne.n	8003d38 <UART_SetConfig+0x148>
 8003cce:	4b85      	ldr	r3, [pc, #532]	; (8003ee4 <UART_SetConfig+0x2f4>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f003 030c 	and.w	r3, r3, #12
 8003cd8:	2b0c      	cmp	r3, #12
 8003cda:	d829      	bhi.n	8003d30 <UART_SetConfig+0x140>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <UART_SetConfig+0xf4>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d19 	.word	0x08003d19
 8003ce8:	08003d31 	.word	0x08003d31
 8003cec:	08003d31 	.word	0x08003d31
 8003cf0:	08003d31 	.word	0x08003d31
 8003cf4:	08003d25 	.word	0x08003d25
 8003cf8:	08003d31 	.word	0x08003d31
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003d31 	.word	0x08003d31
 8003d04:	08003d1f 	.word	0x08003d1f
 8003d08:	08003d31 	.word	0x08003d31
 8003d0c:	08003d31 	.word	0x08003d31
 8003d10:	08003d31 	.word	0x08003d31
 8003d14:	08003d2b 	.word	0x08003d2b
 8003d18:	2300      	movs	r3, #0
 8003d1a:	76fb      	strb	r3, [r7, #27]
 8003d1c:	e0ae      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	76fb      	strb	r3, [r7, #27]
 8003d22:	e0ab      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003d24:	2304      	movs	r3, #4
 8003d26:	76fb      	strb	r3, [r7, #27]
 8003d28:	e0a8      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	76fb      	strb	r3, [r7, #27]
 8003d2e:	e0a5      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003d30:	2310      	movs	r3, #16
 8003d32:	76fb      	strb	r3, [r7, #27]
 8003d34:	bf00      	nop
 8003d36:	e0a1      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a6b      	ldr	r2, [pc, #428]	; (8003eec <UART_SetConfig+0x2fc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d120      	bne.n	8003d84 <UART_SetConfig+0x194>
 8003d42:	4b68      	ldr	r3, [pc, #416]	; (8003ee4 <UART_SetConfig+0x2f4>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d00f      	beq.n	8003d70 <UART_SetConfig+0x180>
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d802      	bhi.n	8003d5a <UART_SetConfig+0x16a>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <UART_SetConfig+0x174>
 8003d58:	e010      	b.n	8003d7c <UART_SetConfig+0x18c>
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d005      	beq.n	8003d6a <UART_SetConfig+0x17a>
 8003d5e:	2b30      	cmp	r3, #48	; 0x30
 8003d60:	d009      	beq.n	8003d76 <UART_SetConfig+0x186>
 8003d62:	e00b      	b.n	8003d7c <UART_SetConfig+0x18c>
 8003d64:	2300      	movs	r3, #0
 8003d66:	76fb      	strb	r3, [r7, #27]
 8003d68:	e088      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	76fb      	strb	r3, [r7, #27]
 8003d6e:	e085      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003d70:	2304      	movs	r3, #4
 8003d72:	76fb      	strb	r3, [r7, #27]
 8003d74:	e082      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003d76:	2308      	movs	r3, #8
 8003d78:	76fb      	strb	r3, [r7, #27]
 8003d7a:	e07f      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	76fb      	strb	r3, [r7, #27]
 8003d80:	bf00      	nop
 8003d82:	e07b      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a59      	ldr	r2, [pc, #356]	; (8003ef0 <UART_SetConfig+0x300>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d120      	bne.n	8003dd0 <UART_SetConfig+0x1e0>
 8003d8e:	4b55      	ldr	r3, [pc, #340]	; (8003ee4 <UART_SetConfig+0x2f4>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d98:	2b40      	cmp	r3, #64	; 0x40
 8003d9a:	d00f      	beq.n	8003dbc <UART_SetConfig+0x1cc>
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d802      	bhi.n	8003da6 <UART_SetConfig+0x1b6>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <UART_SetConfig+0x1c0>
 8003da4:	e010      	b.n	8003dc8 <UART_SetConfig+0x1d8>
 8003da6:	2b80      	cmp	r3, #128	; 0x80
 8003da8:	d005      	beq.n	8003db6 <UART_SetConfig+0x1c6>
 8003daa:	2bc0      	cmp	r3, #192	; 0xc0
 8003dac:	d009      	beq.n	8003dc2 <UART_SetConfig+0x1d2>
 8003dae:	e00b      	b.n	8003dc8 <UART_SetConfig+0x1d8>
 8003db0:	2300      	movs	r3, #0
 8003db2:	76fb      	strb	r3, [r7, #27]
 8003db4:	e062      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003db6:	2302      	movs	r3, #2
 8003db8:	76fb      	strb	r3, [r7, #27]
 8003dba:	e05f      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	76fb      	strb	r3, [r7, #27]
 8003dc0:	e05c      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	76fb      	strb	r3, [r7, #27]
 8003dc6:	e059      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	76fb      	strb	r3, [r7, #27]
 8003dcc:	bf00      	nop
 8003dce:	e055      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a47      	ldr	r2, [pc, #284]	; (8003ef4 <UART_SetConfig+0x304>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d124      	bne.n	8003e24 <UART_SetConfig+0x234>
 8003dda:	4b42      	ldr	r3, [pc, #264]	; (8003ee4 <UART_SetConfig+0x2f4>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de8:	d012      	beq.n	8003e10 <UART_SetConfig+0x220>
 8003dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dee:	d802      	bhi.n	8003df6 <UART_SetConfig+0x206>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <UART_SetConfig+0x214>
 8003df4:	e012      	b.n	8003e1c <UART_SetConfig+0x22c>
 8003df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfa:	d006      	beq.n	8003e0a <UART_SetConfig+0x21a>
 8003dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e00:	d009      	beq.n	8003e16 <UART_SetConfig+0x226>
 8003e02:	e00b      	b.n	8003e1c <UART_SetConfig+0x22c>
 8003e04:	2300      	movs	r3, #0
 8003e06:	76fb      	strb	r3, [r7, #27]
 8003e08:	e038      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	76fb      	strb	r3, [r7, #27]
 8003e0e:	e035      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003e10:	2304      	movs	r3, #4
 8003e12:	76fb      	strb	r3, [r7, #27]
 8003e14:	e032      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003e16:	2308      	movs	r3, #8
 8003e18:	76fb      	strb	r3, [r7, #27]
 8003e1a:	e02f      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	76fb      	strb	r3, [r7, #27]
 8003e20:	bf00      	nop
 8003e22:	e02b      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a2c      	ldr	r2, [pc, #176]	; (8003edc <UART_SetConfig+0x2ec>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d124      	bne.n	8003e78 <UART_SetConfig+0x288>
 8003e2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ee4 <UART_SetConfig+0x2f4>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3c:	d012      	beq.n	8003e64 <UART_SetConfig+0x274>
 8003e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e42:	d802      	bhi.n	8003e4a <UART_SetConfig+0x25a>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <UART_SetConfig+0x268>
 8003e48:	e012      	b.n	8003e70 <UART_SetConfig+0x280>
 8003e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e4e:	d006      	beq.n	8003e5e <UART_SetConfig+0x26e>
 8003e50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e54:	d009      	beq.n	8003e6a <UART_SetConfig+0x27a>
 8003e56:	e00b      	b.n	8003e70 <UART_SetConfig+0x280>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	76fb      	strb	r3, [r7, #27]
 8003e5c:	e00e      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	76fb      	strb	r3, [r7, #27]
 8003e62:	e00b      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003e64:	2304      	movs	r3, #4
 8003e66:	76fb      	strb	r3, [r7, #27]
 8003e68:	e008      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	76fb      	strb	r3, [r7, #27]
 8003e6e:	e005      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003e70:	2310      	movs	r3, #16
 8003e72:	76fb      	strb	r3, [r7, #27]
 8003e74:	bf00      	nop
 8003e76:	e001      	b.n	8003e7c <UART_SetConfig+0x28c>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a16      	ldr	r2, [pc, #88]	; (8003edc <UART_SetConfig+0x2ec>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	f040 80fa 	bne.w	800407c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e88:	7efb      	ldrb	r3, [r7, #27]
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d836      	bhi.n	8003efc <UART_SetConfig+0x30c>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <UART_SetConfig+0x2a4>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003eb9 	.word	0x08003eb9
 8003e98:	08003efd 	.word	0x08003efd
 8003e9c:	08003ec1 	.word	0x08003ec1
 8003ea0:	08003efd 	.word	0x08003efd
 8003ea4:	08003ec7 	.word	0x08003ec7
 8003ea8:	08003efd 	.word	0x08003efd
 8003eac:	08003efd 	.word	0x08003efd
 8003eb0:	08003efd 	.word	0x08003efd
 8003eb4:	08003ecf 	.word	0x08003ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003eb8:	f7fe f964 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8003ebc:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ebe:	e020      	b.n	8003f02 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <UART_SetConfig+0x308>)
 8003ec2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ec4:	e01d      	b.n	8003f02 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003ec6:	f7fe f8c7 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8003eca:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ecc:	e019      	b.n	8003f02 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ed2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ed4:	e015      	b.n	8003f02 <UART_SetConfig+0x312>
 8003ed6:	bf00      	nop
 8003ed8:	efff69f3 	.word	0xefff69f3
 8003edc:	40008000 	.word	0x40008000
 8003ee0:	40013800 	.word	0x40013800
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40004400 	.word	0x40004400
 8003eec:	40004800 	.word	0x40004800
 8003ef0:	40004c00 	.word	0x40004c00
 8003ef4:	40005000 	.word	0x40005000
 8003ef8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	74fb      	strb	r3, [r7, #19]
        break;
 8003f00:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 81ac 	beq.w	8004262 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4413      	add	r3, r2
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d305      	bcc.n	8003f26 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d902      	bls.n	8003f2c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	74fb      	strb	r3, [r7, #19]
 8003f2a:	e19a      	b.n	8004262 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8003f2c:	7efb      	ldrb	r3, [r7, #27]
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	f200 8091 	bhi.w	8004056 <UART_SetConfig+0x466>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <UART_SetConfig+0x34c>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f61 	.word	0x08003f61
 8003f40:	08004057 	.word	0x08004057
 8003f44:	08003fad 	.word	0x08003fad
 8003f48:	08004057 	.word	0x08004057
 8003f4c:	08003fe1 	.word	0x08003fe1
 8003f50:	08004057 	.word	0x08004057
 8003f54:	08004057 	.word	0x08004057
 8003f58:	08004057 	.word	0x08004057
 8003f5c:	0800402d 	.word	0x0800402d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003f60:	f7fe f910 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8003f64:	4603      	mov	r3, r0
 8003f66:	4619      	mov	r1, r3
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	f04f 0400 	mov.w	r4, #0
 8003f74:	0214      	lsls	r4, r2, #8
 8003f76:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003f7a:	020b      	lsls	r3, r1, #8
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6852      	ldr	r2, [r2, #4]
 8003f80:	0852      	lsrs	r2, r2, #1
 8003f82:	4611      	mov	r1, r2
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	eb13 0b01 	adds.w	fp, r3, r1
 8003f8c:	eb44 0c02 	adc.w	ip, r4, r2
 8003f90:	4658      	mov	r0, fp
 8003f92:	4661      	mov	r1, ip
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f04f 0400 	mov.w	r4, #0
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	f7fc fe34 	bl	8000c0c <__aeabi_uldivmod>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003faa:	e057      	b.n	800405c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	f04f 0400 	mov.w	r4, #0
 8003fb6:	49b1      	ldr	r1, [pc, #708]	; (800427c <UART_SetConfig+0x68c>)
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	eb13 0b01 	adds.w	fp, r3, r1
 8003fc0:	eb44 0c02 	adc.w	ip, r4, r2
 8003fc4:	4658      	mov	r0, fp
 8003fc6:	4661      	mov	r1, ip
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f04f 0400 	mov.w	r4, #0
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	f7fc fe1a 	bl	8000c0c <__aeabi_uldivmod>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	460c      	mov	r4, r1
 8003fdc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003fde:	e03d      	b.n	800405c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003fe0:	f7fe f83a 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	f04f 0400 	mov.w	r4, #0
 8003ff4:	0214      	lsls	r4, r2, #8
 8003ff6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003ffa:	020b      	lsls	r3, r1, #8
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6852      	ldr	r2, [r2, #4]
 8004000:	0852      	lsrs	r2, r2, #1
 8004002:	4611      	mov	r1, r2
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	eb13 0b01 	adds.w	fp, r3, r1
 800400c:	eb44 0c02 	adc.w	ip, r4, r2
 8004010:	4658      	mov	r0, fp
 8004012:	4661      	mov	r1, ip
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f04f 0400 	mov.w	r4, #0
 800401c:	461a      	mov	r2, r3
 800401e:	4623      	mov	r3, r4
 8004020:	f7fc fdf4 	bl	8000c0c <__aeabi_uldivmod>
 8004024:	4603      	mov	r3, r0
 8004026:	460c      	mov	r4, r1
 8004028:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800402a:	e017      	b.n	800405c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	085b      	lsrs	r3, r3, #1
 8004032:	f04f 0400 	mov.w	r4, #0
 8004036:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800403a:	f144 0100 	adc.w	r1, r4, #0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f04f 0400 	mov.w	r4, #0
 8004046:	461a      	mov	r2, r3
 8004048:	4623      	mov	r3, r4
 800404a:	f7fc fddf 	bl	8000c0c <__aeabi_uldivmod>
 800404e:	4603      	mov	r3, r0
 8004050:	460c      	mov	r4, r1
 8004052:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004054:	e002      	b.n	800405c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	74fb      	strb	r3, [r7, #19]
            break;
 800405a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004062:	d308      	bcc.n	8004076 <UART_SetConfig+0x486>
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800406a:	d204      	bcs.n	8004076 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	60da      	str	r2, [r3, #12]
 8004074:	e0f5      	b.n	8004262 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	74fb      	strb	r3, [r7, #19]
 800407a:	e0f2      	b.n	8004262 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004084:	d17f      	bne.n	8004186 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8004086:	7efb      	ldrb	r3, [r7, #27]
 8004088:	2b08      	cmp	r3, #8
 800408a:	d85c      	bhi.n	8004146 <UART_SetConfig+0x556>
 800408c:	a201      	add	r2, pc, #4	; (adr r2, 8004094 <UART_SetConfig+0x4a4>)
 800408e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004092:	bf00      	nop
 8004094:	080040b9 	.word	0x080040b9
 8004098:	080040d7 	.word	0x080040d7
 800409c:	080040f5 	.word	0x080040f5
 80040a0:	08004147 	.word	0x08004147
 80040a4:	08004111 	.word	0x08004111
 80040a8:	08004147 	.word	0x08004147
 80040ac:	08004147 	.word	0x08004147
 80040b0:	08004147 	.word	0x08004147
 80040b4:	0800412f 	.word	0x0800412f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80040b8:	f7fe f864 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 80040bc:	4603      	mov	r3, r0
 80040be:	005a      	lsls	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	441a      	add	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040d4:	e03a      	b.n	800414c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80040d6:	f7fe f86b 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 80040da:	4603      	mov	r3, r0
 80040dc:	005a      	lsls	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	085b      	lsrs	r3, r3, #1
 80040e4:	441a      	add	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040f2:	e02b      	b.n	800414c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	085b      	lsrs	r3, r3, #1
 80040fa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80040fe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6852      	ldr	r2, [r2, #4]
 8004106:	fbb3 f3f2 	udiv	r3, r3, r2
 800410a:	b29b      	uxth	r3, r3
 800410c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800410e:	e01d      	b.n	800414c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004110:	f7fd ffa2 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8004114:	4603      	mov	r3, r0
 8004116:	005a      	lsls	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	441a      	add	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	b29b      	uxth	r3, r3
 800412a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800412c:	e00e      	b.n	800414c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	b29b      	uxth	r3, r3
 8004142:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004144:	e002      	b.n	800414c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	74fb      	strb	r3, [r7, #19]
        break;
 800414a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b0f      	cmp	r3, #15
 8004150:	d916      	bls.n	8004180 <UART_SetConfig+0x590>
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004158:	d212      	bcs.n	8004180 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	b29b      	uxth	r3, r3
 800415e:	f023 030f 	bic.w	r3, r3, #15
 8004162:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	b29b      	uxth	r3, r3
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	b29a      	uxth	r2, r3
 8004170:	897b      	ldrh	r3, [r7, #10]
 8004172:	4313      	orrs	r3, r2
 8004174:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	897a      	ldrh	r2, [r7, #10]
 800417c:	60da      	str	r2, [r3, #12]
 800417e:	e070      	b.n	8004262 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	74fb      	strb	r3, [r7, #19]
 8004184:	e06d      	b.n	8004262 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8004186:	7efb      	ldrb	r3, [r7, #27]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d859      	bhi.n	8004240 <UART_SetConfig+0x650>
 800418c:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <UART_SetConfig+0x5a4>)
 800418e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004192:	bf00      	nop
 8004194:	080041b9 	.word	0x080041b9
 8004198:	080041d5 	.word	0x080041d5
 800419c:	080041f1 	.word	0x080041f1
 80041a0:	08004241 	.word	0x08004241
 80041a4:	0800420d 	.word	0x0800420d
 80041a8:	08004241 	.word	0x08004241
 80041ac:	08004241 	.word	0x08004241
 80041b0:	08004241 	.word	0x08004241
 80041b4:	08004229 	.word	0x08004229
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80041b8:	f7fd ffe4 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 80041bc:	4602      	mov	r2, r0
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	441a      	add	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041d2:	e038      	b.n	8004246 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80041d4:	f7fd ffec 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 80041d8:	4602      	mov	r2, r0
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	441a      	add	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041ee:	e02a      	b.n	8004246 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80041fa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6852      	ldr	r2, [r2, #4]
 8004202:	fbb3 f3f2 	udiv	r3, r3, r2
 8004206:	b29b      	uxth	r3, r3
 8004208:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800420a:	e01c      	b.n	8004246 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800420c:	f7fd ff24 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8004210:	4602      	mov	r2, r0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	085b      	lsrs	r3, r3, #1
 8004218:	441a      	add	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004222:	b29b      	uxth	r3, r3
 8004224:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004226:	e00e      	b.n	8004246 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	085b      	lsrs	r3, r3, #1
 800422e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	fbb2 f3f3 	udiv	r3, r2, r3
 800423a:	b29b      	uxth	r3, r3
 800423c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800423e:	e002      	b.n	8004246 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	74fb      	strb	r3, [r7, #19]
        break;
 8004244:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b0f      	cmp	r3, #15
 800424a:	d908      	bls.n	800425e <UART_SetConfig+0x66e>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004252:	d204      	bcs.n	800425e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	60da      	str	r2, [r3, #12]
 800425c:	e001      	b.n	8004262 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800426e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3720      	adds	r7, #32
 8004274:	46bd      	mov	sp, r7
 8004276:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800427a:	bf00      	nop
 800427c:	f4240000 	.word	0xf4240000

08004280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01a      	beq.n	8004396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800437e:	d10a      	bne.n	8004396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	605a      	str	r2, [r3, #4]
  }
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80043d2:	f7fc fe31 	bl	8001038 <HAL_GetTick>
 80043d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d10e      	bne.n	8004404 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f82a 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e020      	b.n	8004446 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b04      	cmp	r3, #4
 8004410:	d10e      	bne.n	8004430 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004412:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f814 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e00a      	b.n	8004446 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	4613      	mov	r3, r2
 800445c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445e:	e02a      	b.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004466:	d026      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004468:	f7fc fde6 	bl	8001038 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	429a      	cmp	r2, r3
 8004476:	d302      	bcc.n	800447e <UART_WaitOnFlagUntilTimeout+0x30>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d11b      	bne.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800448c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e00f      	b.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4013      	ands	r3, r2
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	bf0c      	ite	eq
 80044c6:	2301      	moveq	r3, #1
 80044c8:	2300      	movne	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d0c5      	beq.n	8004460 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80044e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80044e4:	b0c4      	sub	sp, #272	; 0x110
 80044e6:	af04      	add	r7, sp, #16


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80044e8:	f7fc fd3a 	bl	8000f60 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80044ec:	f000 f900 	bl	80046f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80044f0:	f000 fae8 	bl	8004ac4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80044f4:	f000 fab6 	bl	8004a64 <MX_USART2_UART_Init>
	MX_SPI2_Init();
 80044f8:	f000 f970 	bl	80047dc <MX_SPI2_Init>
	MX_TIM2_Init();
 80044fc:	f000 f9a8 	bl	8004850 <MX_TIM2_Init>
	MX_TIM3_Init();
 8004500:	f000 f9fe 	bl	8004900 <MX_TIM3_Init>
	MX_TIM4_Init();
 8004504:	f000 fa56 	bl	80049b4 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */

	motor_Context motorG, motorD;

	motorG.timer	 		= htim2;
 8004508:	4b6b      	ldr	r3, [pc, #428]	; (80046b8 <main+0x1d8>)
 800450a:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 800450e:	461d      	mov	r5, r3
 8004510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800451a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800451c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004520:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	motorG.channel	 	= TIM_CHANNEL_2;
 8004524:	2304      	movs	r3, #4
 8004526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	motorG.motDir_Port	= MotA_Dir_GPIO_Port;
 800452a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800452e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	motorG.motDir_Pin	 	= MotA_Dir_Pin;
 8004532:	2320      	movs	r3, #32
 8004534:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
	motorG.motBrake_Port	= MotA_Brake_GPIO_Port;
 8004538:	4b60      	ldr	r3, [pc, #384]	; (80046bc <main+0x1dc>)
 800453a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	motorG.motBrake_Pin	= MotA_Brake_Pin;
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
	motorG.reverseDir	 	= true;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6

	motorD.timer	 		= htim3;
 800454a:	4b5d      	ldr	r3, [pc, #372]	; (80046c0 <main+0x1e0>)
 800454c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8004550:	461d      	mov	r5, r3
 8004552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800455a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800455c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800455e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004562:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	motorD.channel	 	= TIM_CHANNEL_2;
 8004566:	2304      	movs	r3, #4
 8004568:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	motorD.motDir_Port	= MotB_Dir_GPIO_Port;
 800456c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004570:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	motorD.motDir_Pin	 	= MotB_Dir_Pin;
 8004574:	2340      	movs	r3, #64	; 0x40
 8004576:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	motorD.motBrake_Port	= MotB_Brake_GPIO_Port;
 800457a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800457e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	motorD.motBrake_Pin	= MotB_Brake_Pin;
 8004582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004586:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	motorD.reverseDir	 	= false;
 800458a:	2300      	movs	r3, #0
 800458c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

	motor_init(&motorG);
 8004590:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fb38 	bl	8004c0a <motor_init>
	motor_init(&motorD);
 800459a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fb33 	bl	8004c0a <motor_init>

	odometry_Context odometry;

	odometry.encoderR = 				&EncValD;
 80045a4:	4b47      	ldr	r3, [pc, #284]	; (80046c4 <main+0x1e4>)
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
	odometry.encoderL = 				&TIM4->CNT;
 80045a8:	4b47      	ldr	r3, [pc, #284]	; (80046c8 <main+0x1e8>)
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28
	odometry.encoderRes = 				480; // tick/rad
 80045ac:	4b47      	ldr	r3, [pc, #284]	; (80046cc <main+0x1ec>)
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	odometry.wheelRadiusR = 			65./2.;
 80045b0:	4b47      	ldr	r3, [pc, #284]	; (80046d0 <main+0x1f0>)
 80045b2:	633b      	str	r3, [r7, #48]	; 0x30
	odometry.wheelRadiusL = 			65./2.;
 80045b4:	4b46      	ldr	r3, [pc, #280]	; (80046d0 <main+0x1f0>)
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34
	odometry.distanceBetweenWheels = 	210.;
 80045b8:	4b46      	ldr	r3, [pc, #280]	; (80046d4 <main+0x1f4>)
 80045ba:	63bb      	str	r3, [r7, #56]	; 0x38

	odometry_init(&odometry);
 80045bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fbc5 	bl	8004d50 <odometry_init>

	odometry.position.x = 0.;
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	odometry.position.y = 0.;
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	643b      	str	r3, [r7, #64]	; 0x40
	odometry.position.theta = 0.;
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	647b      	str	r3, [r7, #68]	; 0x44
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int32_t t0, t;
	t0 = HAL_GetTick();
 80045d8:	f7fc fd2e 	bl	8001038 <HAL_GetTick>
 80045dc:	4603      	mov	r3, r0
 80045de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	while (1)
	{
	char buffer[32];

	t = HAL_GetTick() - t0;
 80045e2:	f7fc fd29 	bl	8001038 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	if( t%5 == 0)
 80045f2:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80045f6:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <main+0x1f8>)
 80045f8:	fb83 2301 	smull	r2, r3, r3, r1
 80045fc:	105a      	asrs	r2, r3, #1
 80045fe:	17cb      	asrs	r3, r1, #31
 8004600:	1ad2      	subs	r2, r2, r3
 8004602:	4613      	mov	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	1aca      	subs	r2, r1, r3
 800460a:	2a00      	cmp	r2, #0
 800460c:	d10f      	bne.n	800462e <main+0x14e>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, printf("test"), 5000);
 800460e:	4833      	ldr	r0, [pc, #204]	; (80046dc <main+0x1fc>)
 8004610:	f000 ff3c 	bl	800548c <iprintf>
 8004614:	4603      	mov	r3, r0
 8004616:	b29a      	uxth	r2, r3
 8004618:	1d39      	adds	r1, r7, #4
 800461a:	f241 3388 	movw	r3, #5000	; 0x1388
 800461e:	4830      	ldr	r0, [pc, #192]	; (80046e0 <main+0x200>)
 8004620:	f7ff fa52 	bl	8003ac8 <HAL_UART_Transmit>
		odometry_update(&odometry);
 8004624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fba3 	bl	8004d74 <odometry_update>
	}
	motor_setSpeed(&motorG, 255);
 800462e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004632:	21ff      	movs	r1, #255	; 0xff
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fb19 	bl	8004c6c <motor_setSpeed>
	motor_setSpeed(&motorD, -255);
 800463a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800463e:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fb12 	bl	8004c6c <motor_setSpeed>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "Eg: %d  |   Ed: %d | ", (int16_t)TIM4->CNT, EncValD), 5000);
 8004648:	4b26      	ldr	r3, [pc, #152]	; (80046e4 <main+0x204>)
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	b21b      	sxth	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <main+0x1e4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	1d38      	adds	r0, r7, #4
 8004656:	4924      	ldr	r1, [pc, #144]	; (80046e8 <main+0x208>)
 8004658:	f000 ff30 	bl	80054bc <siprintf>
 800465c:	4603      	mov	r3, r0
 800465e:	b29a      	uxth	r2, r3
 8004660:	1d39      	adds	r1, r7, #4
 8004662:	f241 3388 	movw	r3, #5000	; 0x1388
 8004666:	481e      	ldr	r0, [pc, #120]	; (80046e0 <main+0x200>)
 8004668:	f7ff fa2e 	bl	8003ac8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer,
		sprintf(buffer, " x: %f  | y: %f | theta: %f \n", odometry.position.x, odometry.position.y, odometry.position.theta), 5000);
 800466c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466e:	4618      	mov	r0, r3
 8004670:	f7fb ff62 	bl	8000538 <__aeabi_f2d>
 8004674:	4680      	mov	r8, r0
 8004676:	4689      	mov	r9, r1
 8004678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800467a:	4618      	mov	r0, r3
 800467c:	f7fb ff5c 	bl	8000538 <__aeabi_f2d>
 8004680:	4604      	mov	r4, r0
 8004682:	460d      	mov	r5, r1
 8004684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004686:	4618      	mov	r0, r3
 8004688:	f7fb ff56 	bl	8000538 <__aeabi_f2d>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	1d38      	adds	r0, r7, #4
 8004692:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004696:	e9cd 4500 	strd	r4, r5, [sp]
 800469a:	4642      	mov	r2, r8
 800469c:	464b      	mov	r3, r9
 800469e:	4913      	ldr	r1, [pc, #76]	; (80046ec <main+0x20c>)
 80046a0:	f000 ff0c 	bl	80054bc <siprintf>
 80046a4:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer,
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	1d39      	adds	r1, r7, #4
 80046aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80046ae:	480c      	ldr	r0, [pc, #48]	; (80046e0 <main+0x200>)
 80046b0:	f7ff fa0a 	bl	8003ac8 <HAL_UART_Transmit>
	{
 80046b4:	e795      	b.n	80045e2 <main+0x102>
 80046b6:	bf00      	nop
 80046b8:	20000188 	.word	0x20000188
 80046bc:	48000800 	.word	0x48000800
 80046c0:	20000140 	.word	0x20000140
 80046c4:	20000184 	.word	0x20000184
 80046c8:	40000824 	.word	0x40000824
 80046cc:	43f00000 	.word	0x43f00000
 80046d0:	42020000 	.word	0x42020000
 80046d4:	43520000 	.word	0x43520000
 80046d8:	66666667 	.word	0x66666667
 80046dc:	08007720 	.word	0x08007720
 80046e0:	200001c8 	.word	0x200001c8
 80046e4:	40000800 	.word	0x40000800
 80046e8:	08007728 	.word	0x08007728
 80046ec:	08007740 	.word	0x08007740

080046f0 <SystemClock_Config>:
	/**
	* @brief System Clock Configuration
	* @retval None
	*/
	void SystemClock_Config(void)
	{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b0b8      	sub	sp, #224	; 0xe0
 80046f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80046fa:	2244      	movs	r2, #68	; 0x44
 80046fc:	2100      	movs	r1, #0
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 febc 	bl	800547c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004704:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	605a      	str	r2, [r3, #4]
 800470e:	609a      	str	r2, [r3, #8]
 8004710:	60da      	str	r2, [r3, #12]
 8004712:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004714:	463b      	mov	r3, r7
 8004716:	2288      	movs	r2, #136	; 0x88
 8004718:	2100      	movs	r1, #0
 800471a:	4618      	mov	r0, r3
 800471c:	f000 feae 	bl	800547c <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004720:	2302      	movs	r3, #2
 8004722:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800472a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800472e:	2310      	movs	r3, #16
 8004730:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004734:	2302      	movs	r3, #2
 8004736:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800473a:	2302      	movs	r3, #2
 800473c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8004740:	2301      	movs	r3, #1
 8004742:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 10;
 8004746:	230a      	movs	r3, #10
 8004748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800474c:	2307      	movs	r3, #7
 800474e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004752:	2302      	movs	r3, #2
 8004754:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004758:	2302      	movs	r3, #2
 800475a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800475e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004762:	4618      	mov	r0, r3
 8004764:	f7fc ffe6 	bl	8001734 <HAL_RCC_OscConfig>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <SystemClock_Config+0x82>
	{
	Error_Handler();
 800476e:	f000 fa45 	bl	8004bfc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004772:	230f      	movs	r3, #15
 8004774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	                          |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004778:	2303      	movs	r3, #3
 800477a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800477e:	2300      	movs	r3, #0
 8004780:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004784:	2300      	movs	r3, #0
 8004786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800478a:	2300      	movs	r3, #0
 800478c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004790:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004794:	2104      	movs	r1, #4
 8004796:	4618      	mov	r0, r3
 8004798:	f7fd fb7c 	bl	8001e94 <HAL_RCC_ClockConfig>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <SystemClock_Config+0xb6>
	{
	Error_Handler();
 80047a2:	f000 fa2b 	bl	8004bfc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80047a6:	2302      	movs	r3, #2
 80047a8:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80047aa:	2300      	movs	r3, #0
 80047ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047ae:	463b      	mov	r3, r7
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fd fd73 	bl	800229c <HAL_RCCEx_PeriphCLKConfig>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <SystemClock_Config+0xd0>
	{
	Error_Handler();
 80047bc:	f000 fa1e 	bl	8004bfc <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	*/
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80047c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80047c4:	f7fc ff60 	bl	8001688 <HAL_PWREx_ControlVoltageScaling>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <SystemClock_Config+0xe2>
	{
	Error_Handler();
 80047ce:	f000 fa15 	bl	8004bfc <Error_Handler>
	}
}
 80047d2:	bf00      	nop
 80047d4:	37e0      	adds	r7, #224	; 0xe0
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80047e0:	4b19      	ldr	r3, [pc, #100]	; (8004848 <MX_SPI2_Init+0x6c>)
 80047e2:	4a1a      	ldr	r2, [pc, #104]	; (800484c <MX_SPI2_Init+0x70>)
 80047e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80047e6:	4b18      	ldr	r3, [pc, #96]	; (8004848 <MX_SPI2_Init+0x6c>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80047ec:	4b16      	ldr	r3, [pc, #88]	; (8004848 <MX_SPI2_Init+0x6c>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <MX_SPI2_Init+0x6c>)
 80047f4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80047f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80047fa:	4b13      	ldr	r3, [pc, #76]	; (8004848 <MX_SPI2_Init+0x6c>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004800:	4b11      	ldr	r3, [pc, #68]	; (8004848 <MX_SPI2_Init+0x6c>)
 8004802:	2200      	movs	r2, #0
 8004804:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004806:	4b10      	ldr	r3, [pc, #64]	; (8004848 <MX_SPI2_Init+0x6c>)
 8004808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800480c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800480e:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <MX_SPI2_Init+0x6c>)
 8004810:	2200      	movs	r2, #0
 8004812:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <MX_SPI2_Init+0x6c>)
 8004816:	2200      	movs	r2, #0
 8004818:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800481a:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <MX_SPI2_Init+0x6c>)
 800481c:	2200      	movs	r2, #0
 800481e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004820:	4b09      	ldr	r3, [pc, #36]	; (8004848 <MX_SPI2_Init+0x6c>)
 8004822:	2207      	movs	r2, #7
 8004824:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004826:	4b08      	ldr	r3, [pc, #32]	; (8004848 <MX_SPI2_Init+0x6c>)
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800482c:	4b06      	ldr	r3, [pc, #24]	; (8004848 <MX_SPI2_Init+0x6c>)
 800482e:	2200      	movs	r2, #0
 8004830:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004832:	4805      	ldr	r0, [pc, #20]	; (8004848 <MX_SPI2_Init+0x6c>)
 8004834:	f7fe f9e2 	bl	8002bfc <HAL_SPI_Init>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 800483e:	f000 f9dd 	bl	8004bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004842:	bf00      	nop
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	2000009c 	.word	0x2000009c
 800484c:	40003800 	.word	0x40003800

08004850 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08a      	sub	sp, #40	; 0x28
 8004854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004856:	f107 031c 	add.w	r3, r7, #28
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	605a      	str	r2, [r3, #4]
 8004860:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004862:	463b      	mov	r3, r7
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	605a      	str	r2, [r3, #4]
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	60da      	str	r2, [r3, #12]
 800486e:	611a      	str	r2, [r3, #16]
 8004870:	615a      	str	r2, [r3, #20]
 8004872:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004874:	4b21      	ldr	r3, [pc, #132]	; (80048fc <MX_TIM2_Init+0xac>)
 8004876:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800487a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800487c:	4b1f      	ldr	r3, [pc, #124]	; (80048fc <MX_TIM2_Init+0xac>)
 800487e:	2200      	movs	r2, #0
 8004880:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004882:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <MX_TIM2_Init+0xac>)
 8004884:	2200      	movs	r2, #0
 8004886:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8004888:	4b1c      	ldr	r3, [pc, #112]	; (80048fc <MX_TIM2_Init+0xac>)
 800488a:	2200      	movs	r2, #0
 800488c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800488e:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <MX_TIM2_Init+0xac>)
 8004890:	2200      	movs	r2, #0
 8004892:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004894:	4b19      	ldr	r3, [pc, #100]	; (80048fc <MX_TIM2_Init+0xac>)
 8004896:	2200      	movs	r2, #0
 8004898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800489a:	4818      	ldr	r0, [pc, #96]	; (80048fc <MX_TIM2_Init+0xac>)
 800489c:	f7fe fa38 	bl	8002d10 <HAL_TIM_PWM_Init>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80048a6:	f000 f9a9 	bl	8004bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80048b2:	f107 031c 	add.w	r3, r7, #28
 80048b6:	4619      	mov	r1, r3
 80048b8:	4810      	ldr	r0, [pc, #64]	; (80048fc <MX_TIM2_Init+0xac>)
 80048ba:	f7ff f85b 	bl	8003974 <HAL_TIMEx_MasterConfigSynchronization>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80048c4:	f000 f99a 	bl	8004bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048c8:	2360      	movs	r3, #96	; 0x60
 80048ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80048d8:	463b      	mov	r3, r7
 80048da:	2204      	movs	r2, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4807      	ldr	r0, [pc, #28]	; (80048fc <MX_TIM2_Init+0xac>)
 80048e0:	f7fe fb9a 	bl	8003018 <HAL_TIM_PWM_ConfigChannel>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80048ea:	f000 f987 	bl	8004bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80048ee:	4803      	ldr	r0, [pc, #12]	; (80048fc <MX_TIM2_Init+0xac>)
 80048f0:	f000 fc0c 	bl	800510c <HAL_TIM_MspPostInit>

}
 80048f4:	bf00      	nop
 80048f6:	3728      	adds	r7, #40	; 0x28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000188 	.word	0x20000188

08004900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	; 0x28
 8004904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004906:	f107 031c 	add.w	r3, r7, #28
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	605a      	str	r2, [r3, #4]
 8004910:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004912:	463b      	mov	r3, r7
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	609a      	str	r2, [r3, #8]
 800491c:	60da      	str	r2, [r3, #12]
 800491e:	611a      	str	r2, [r3, #16]
 8004920:	615a      	str	r2, [r3, #20]
 8004922:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004924:	4b21      	ldr	r3, [pc, #132]	; (80049ac <MX_TIM3_Init+0xac>)
 8004926:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <MX_TIM3_Init+0xb0>)
 8004928:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800492a:	4b20      	ldr	r3, [pc, #128]	; (80049ac <MX_TIM3_Init+0xac>)
 800492c:	2200      	movs	r2, #0
 800492e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004930:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <MX_TIM3_Init+0xac>)
 8004932:	2200      	movs	r2, #0
 8004934:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8004936:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <MX_TIM3_Init+0xac>)
 8004938:	2200      	movs	r2, #0
 800493a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <MX_TIM3_Init+0xac>)
 800493e:	2200      	movs	r2, #0
 8004940:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004942:	4b1a      	ldr	r3, [pc, #104]	; (80049ac <MX_TIM3_Init+0xac>)
 8004944:	2200      	movs	r2, #0
 8004946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004948:	4818      	ldr	r0, [pc, #96]	; (80049ac <MX_TIM3_Init+0xac>)
 800494a:	f7fe f9e1 	bl	8002d10 <HAL_TIM_PWM_Init>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004954:	f000 f952 	bl	8004bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004958:	2300      	movs	r3, #0
 800495a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800495c:	2300      	movs	r3, #0
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004960:	f107 031c 	add.w	r3, r7, #28
 8004964:	4619      	mov	r1, r3
 8004966:	4811      	ldr	r0, [pc, #68]	; (80049ac <MX_TIM3_Init+0xac>)
 8004968:	f7ff f804 	bl	8003974 <HAL_TIMEx_MasterConfigSynchronization>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004972:	f000 f943 	bl	8004bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004976:	2360      	movs	r3, #96	; 0x60
 8004978:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800497e:	2300      	movs	r3, #0
 8004980:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004982:	2300      	movs	r3, #0
 8004984:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004986:	463b      	mov	r3, r7
 8004988:	2204      	movs	r2, #4
 800498a:	4619      	mov	r1, r3
 800498c:	4807      	ldr	r0, [pc, #28]	; (80049ac <MX_TIM3_Init+0xac>)
 800498e:	f7fe fb43 	bl	8003018 <HAL_TIM_PWM_ConfigChannel>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004998:	f000 f930 	bl	8004bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800499c:	4803      	ldr	r0, [pc, #12]	; (80049ac <MX_TIM3_Init+0xac>)
 800499e:	f000 fbb5 	bl	800510c <HAL_TIM_MspPostInit>

}
 80049a2:	bf00      	nop
 80049a4:	3728      	adds	r7, #40	; 0x28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000140 	.word	0x20000140
 80049b0:	40000400 	.word	0x40000400

080049b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08c      	sub	sp, #48	; 0x30
 80049b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80049ba:	f107 030c 	add.w	r3, r7, #12
 80049be:	2224      	movs	r2, #36	; 0x24
 80049c0:	2100      	movs	r1, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fd5a 	bl	800547c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049c8:	463b      	mov	r3, r7
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	605a      	str	r2, [r3, #4]
 80049d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80049d2:	4b22      	ldr	r3, [pc, #136]	; (8004a5c <MX_TIM4_Init+0xa8>)
 80049d4:	4a22      	ldr	r2, [pc, #136]	; (8004a60 <MX_TIM4_Init+0xac>)
 80049d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80049d8:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <MX_TIM4_Init+0xa8>)
 80049da:	2200      	movs	r2, #0
 80049dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049de:	4b1f      	ldr	r3, [pc, #124]	; (8004a5c <MX_TIM4_Init+0xa8>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80049e4:	4b1d      	ldr	r3, [pc, #116]	; (8004a5c <MX_TIM4_Init+0xa8>)
 80049e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049ec:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <MX_TIM4_Init+0xa8>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049f2:	4b1a      	ldr	r3, [pc, #104]	; (8004a5c <MX_TIM4_Init+0xa8>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80049f8:	2303      	movs	r3, #3
 80049fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80049fc:	2300      	movs	r3, #0
 80049fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004a00:	2301      	movs	r3, #1
 8004a02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8004a08:	230f      	movs	r3, #15
 8004a0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004a10:	2301      	movs	r3, #1
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004a14:	2300      	movs	r3, #0
 8004a16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8004a18:	230f      	movs	r3, #15
 8004a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004a1c:	f107 030c 	add.w	r3, r7, #12
 8004a20:	4619      	mov	r1, r3
 8004a22:	480e      	ldr	r0, [pc, #56]	; (8004a5c <MX_TIM4_Init+0xa8>)
 8004a24:	f7fe fa66 	bl	8002ef4 <HAL_TIM_Encoder_Init>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004a2e:	f000 f8e5 	bl	8004bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a32:	2300      	movs	r3, #0
 8004a34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4807      	ldr	r0, [pc, #28]	; (8004a5c <MX_TIM4_Init+0xa8>)
 8004a40:	f7fe ff98 	bl	8003974 <HAL_TIMEx_MasterConfigSynchronization>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8004a4a:	f000 f8d7 	bl	8004bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  TIM4->CR1 = 1;
 8004a4e:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <MX_TIM4_Init+0xac>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM4_Init 2 */

}
 8004a54:	bf00      	nop
 8004a56:	3730      	adds	r7, #48	; 0x30
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000100 	.word	0x20000100
 8004a60:	40000800 	.word	0x40000800

08004a64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a68:	4b14      	ldr	r3, [pc, #80]	; (8004abc <MX_USART2_UART_Init+0x58>)
 8004a6a:	4a15      	ldr	r2, [pc, #84]	; (8004ac0 <MX_USART2_UART_Init+0x5c>)
 8004a6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004a6e:	4b13      	ldr	r3, [pc, #76]	; (8004abc <MX_USART2_UART_Init+0x58>)
 8004a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a76:	4b11      	ldr	r3, [pc, #68]	; (8004abc <MX_USART2_UART_Init+0x58>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <MX_USART2_UART_Init+0x58>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a82:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <MX_USART2_UART_Init+0x58>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a88:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <MX_USART2_UART_Init+0x58>)
 8004a8a:	220c      	movs	r2, #12
 8004a8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a8e:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <MX_USART2_UART_Init+0x58>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a94:	4b09      	ldr	r3, [pc, #36]	; (8004abc <MX_USART2_UART_Init+0x58>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a9a:	4b08      	ldr	r3, [pc, #32]	; (8004abc <MX_USART2_UART_Init+0x58>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <MX_USART2_UART_Init+0x58>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004aa6:	4805      	ldr	r0, [pc, #20]	; (8004abc <MX_USART2_UART_Init+0x58>)
 8004aa8:	f7fe ffc0 	bl	8003a2c <HAL_UART_Init>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004ab2:	f000 f8a3 	bl	8004bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200001c8 	.word	0x200001c8
 8004ac0:	40004400 	.word	0x40004400

08004ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aca:	f107 030c 	add.w	r3, r7, #12
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
 8004ad4:	609a      	str	r2, [r3, #8]
 8004ad6:	60da      	str	r2, [r3, #12]
 8004ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ada:	4b44      	ldr	r3, [pc, #272]	; (8004bec <MX_GPIO_Init+0x128>)
 8004adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ade:	4a43      	ldr	r2, [pc, #268]	; (8004bec <MX_GPIO_Init+0x128>)
 8004ae0:	f043 0304 	orr.w	r3, r3, #4
 8004ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ae6:	4b41      	ldr	r3, [pc, #260]	; (8004bec <MX_GPIO_Init+0x128>)
 8004ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	60bb      	str	r3, [r7, #8]
 8004af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af2:	4b3e      	ldr	r3, [pc, #248]	; (8004bec <MX_GPIO_Init+0x128>)
 8004af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af6:	4a3d      	ldr	r2, [pc, #244]	; (8004bec <MX_GPIO_Init+0x128>)
 8004af8:	f043 0301 	orr.w	r3, r3, #1
 8004afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004afe:	4b3b      	ldr	r3, [pc, #236]	; (8004bec <MX_GPIO_Init+0x128>)
 8004b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	607b      	str	r3, [r7, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b0a:	4b38      	ldr	r3, [pc, #224]	; (8004bec <MX_GPIO_Init+0x128>)
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	4a37      	ldr	r2, [pc, #220]	; (8004bec <MX_GPIO_Init+0x128>)
 8004b10:	f043 0302 	orr.w	r3, r3, #2
 8004b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b16:	4b35      	ldr	r3, [pc, #212]	; (8004bec <MX_GPIO_Init+0x128>)
 8004b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotA_Dir_Pin|MotB_Dir_Pin|MotB_Brake_Pin, GPIO_PIN_RESET);
 8004b22:	2200      	movs	r2, #0
 8004b24:	f44f 7118 	mov.w	r1, #608	; 0x260
 8004b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b2c:	f7fc fd62 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotA_Brake_GPIO_Port, MotA_Brake_Pin, GPIO_PIN_RESET);
 8004b30:	2200      	movs	r2, #0
 8004b32:	2180      	movs	r1, #128	; 0x80
 8004b34:	482e      	ldr	r0, [pc, #184]	; (8004bf0 <MX_GPIO_Init+0x12c>)
 8004b36:	f7fc fd5d 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotA_CurrentSense_Pin MotB_CurrentSense_Pin */
  GPIO_InitStruct.Pin = MotA_CurrentSense_Pin|MotB_CurrentSense_Pin;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b46:	f107 030c 	add.w	r3, r7, #12
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b50:	f7fc fb90 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncB_Pin */
  GPIO_InitStruct.Pin = EncB_Pin;
 8004b54:	2310      	movs	r3, #16
 8004b56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004b58:	4b26      	ldr	r3, [pc, #152]	; (8004bf4 <MX_GPIO_Init+0x130>)
 8004b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EncB_GPIO_Port, &GPIO_InitStruct);
 8004b60:	f107 030c 	add.w	r3, r7, #12
 8004b64:	4619      	mov	r1, r3
 8004b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b6a:	f7fc fb83 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotA_Dir_Pin MotB_Dir_Pin MotB_Brake_Pin */
  GPIO_InitStruct.Pin = MotA_Dir_Pin|MotB_Dir_Pin|MotB_Brake_Pin;
 8004b6e:	f44f 7318 	mov.w	r3, #608	; 0x260
 8004b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b74:	2301      	movs	r3, #1
 8004b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b80:	f107 030c 	add.w	r3, r7, #12
 8004b84:	4619      	mov	r1, r3
 8004b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b8a:	f7fc fb73 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncA_Pin */
  GPIO_InitStruct.Pin = EncA_Pin;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004b92:	4b18      	ldr	r3, [pc, #96]	; (8004bf4 <MX_GPIO_Init+0x130>)
 8004b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b96:	2301      	movs	r3, #1
 8004b98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EncA_GPIO_Port, &GPIO_InitStruct);
 8004b9a:	f107 030c 	add.w	r3, r7, #12
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4815      	ldr	r0, [pc, #84]	; (8004bf8 <MX_GPIO_Init+0x134>)
 8004ba2:	f7fc fb67 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : MotA_Brake_Pin */
  GPIO_InitStruct.Pin = MotA_Brake_Pin;
 8004ba6:	2380      	movs	r3, #128	; 0x80
 8004ba8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004baa:	2301      	movs	r3, #1
 8004bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MotA_Brake_GPIO_Port, &GPIO_InitStruct);
 8004bb6:	f107 030c 	add.w	r3, r7, #12
 8004bba:	4619      	mov	r1, r3
 8004bbc:	480c      	ldr	r0, [pc, #48]	; (8004bf0 <MX_GPIO_Init+0x12c>)
 8004bbe:	f7fc fb59 	bl	8001274 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	2006      	movs	r0, #6
 8004bc8:	f7fc fb1d 	bl	8001206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004bcc:	2006      	movs	r0, #6
 8004bce:	f7fc fb36 	bl	800123e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	200a      	movs	r0, #10
 8004bd8:	f7fc fb15 	bl	8001206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004bdc:	200a      	movs	r0, #10
 8004bde:	f7fc fb2e 	bl	800123e <HAL_NVIC_EnableIRQ>

}
 8004be2:	bf00      	nop
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	48000800 	.word	0x48000800
 8004bf4:	10310000 	.word	0x10310000
 8004bf8:	48000400 	.word	0x48000400

08004bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <motor_init>:
#include "motor.h"

void motor_init(motor_Context *motor){
 8004c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c0c:	b093      	sub	sp, #76	; 0x4c
 8004c0e:	af10      	add	r7, sp, #64	; 0x40
 8004c10:	6078      	str	r0, [r7, #4]
    setPWM(motor->timer, motor->channel, 255, 0); // reset PWM
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	687e      	ldr	r6, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	920e      	str	r2, [sp, #56]	; 0x38
 8004c1c:	22ff      	movs	r2, #255	; 0xff
 8004c1e:	920d      	str	r2, [sp, #52]	; 0x34
 8004c20:	930c      	str	r3, [sp, #48]	; 0x30
 8004c22:	466d      	mov	r5, sp
 8004c24:	f106 0410 	add.w	r4, r6, #16
 8004c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c34:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004c38:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004c3c:	f000 f858 	bl	8004cf0 <setPWM>
    HAL_GPIO_WritePin(motor->motDir_Port, motor->motDir_Pin, GPIO_PIN_RESET); //
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	f7fc fcd1 	bl	80015f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->motBrake_Port, motor->motBrake_Pin, GPIO_PIN_RESET);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f7fc fcc8 	bl	80015f4 <HAL_GPIO_WritePin>
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c6c <motor_setSpeed>:

void motor_setSpeed(motor_Context *motor, int speed){
 8004c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c6e:	b093      	sub	sp, #76	; 0x4c
 8004c70:	af10      	add	r7, sp, #64	; 0x40
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
    if (motor->reverseDir){
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <motor_setSpeed+0x1a>
        speed = -speed;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	425b      	negs	r3, r3
 8004c84:	603b      	str	r3, [r7, #0]
    }
    if (speed < 0){
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	da0c      	bge.n	8004ca6 <motor_setSpeed+0x3a>
        speed = -speed;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	425b      	negs	r3, r3
 8004c90:	603b      	str	r3, [r7, #0]
        HAL_GPIO_WritePin(motor->motDir_Port, motor->motDir_Pin, GPIO_PIN_SET);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f7fc fca8 	bl	80015f4 <HAL_GPIO_WritePin>
 8004ca4:	e008      	b.n	8004cb8 <motor_setSpeed+0x4c>
    }
    else {
        HAL_GPIO_WritePin(motor->motDir_Port, motor->motDir_Pin, GPIO_PIN_RESET);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f7fc fc9e 	bl	80015f4 <HAL_GPIO_WritePin>
    }

    setPWM(motor->timer, motor->channel, 255, speed); // set PWM
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	b292      	uxth	r2, r2
 8004cc0:	687e      	ldr	r6, [r7, #4]
 8004cc2:	920e      	str	r2, [sp, #56]	; 0x38
 8004cc4:	22ff      	movs	r2, #255	; 0xff
 8004cc6:	920d      	str	r2, [sp, #52]	; 0x34
 8004cc8:	930c      	str	r3, [sp, #48]	; 0x30
 8004cca:	466d      	mov	r5, sp
 8004ccc:	f106 0410 	add.w	r4, r6, #16
 8004cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cd8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004cdc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004ce0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004ce4:	f000 f804 	bl	8004cf0 <setPWM>
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cf0 <setPWM>:

void motor_unbreake(motor_Context *motor){
    HAL_GPIO_WritePin(motor->motBrake_Port, motor->motBrake_Pin, GPIO_PIN_RESET);
}

static void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse) {
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b088      	sub	sp, #32
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8004cfc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  HAL_TIM_PWM_Stop(&timer, channel);    // stop generation of pwm
 8004d00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d02:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004d06:	f7fe f887 	bl	8002e18 <HAL_TIM_PWM_Stop>
	  TIM_OC_InitTypeDef sConfigOC;   timer.Init.Period = period;           // set the period duration
 8004d0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d0e:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_TIM_PWM_Init(&timer);  // reinititialise with new period value
 8004d10:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004d14:	f7fd fffc 	bl	8002d10 <HAL_TIM_PWM_Init>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d18:	2360      	movs	r3, #96	; 0x60
 8004d1a:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = pulse;              // set the pulse duration
 8004d1c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8004d20:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
	  HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8004d2a:	1d3b      	adds	r3, r7, #4
 8004d2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d2e:	4619      	mov	r1, r3
 8004d30:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004d34:	f7fe f970 	bl	8003018 <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_PWM_Start(&timer, channel);   // start pwm generation}
 8004d38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d3a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004d3e:	f7fe f813 	bl	8002d68 <HAL_TIM_PWM_Start>
}
 8004d42:	bf00      	nop
 8004d44:	3720      	adds	r7, #32
 8004d46:	46bd      	mov	sp, r7
 8004d48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d4c:	b004      	add	sp, #16
 8004d4e:	4770      	bx	lr

08004d50 <odometry_init>:
#include "odometry.h"

void odometry_init(odometry_Context *odometry){
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
    odometry->linearDisplacement =0.;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	625a      	str	r2, [r3, #36]	; 0x24
    odometry->angularDisplacement =0.;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <odometry_update>:

void odometry_update(odometry_Context *odometry){
 8004d74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
    float distR = (float)(int16_t)*(odometry->encoderR) / odometry->encoderRes * odometry->wheelRadiusR;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	b21b      	sxth	r3, r3
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da2:	edc7 7a03 	vstr	s15, [r7, #12]
    float distL = (float)(int16_t)*(odometry->encoderL) / odometry->encoderRes * odometry->wheelRadiusL;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	b21b      	sxth	r3, r3
 8004dae:	ee07 3a90 	vmov	s15, r3
 8004db2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004dbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	edd3 7a04 	vldr	s15, [r3, #16]
 8004dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dca:	edc7 7a02 	vstr	s15, [r7, #8]
    odometry->encoderR = 0;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
    odometry->encoderL = 0;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	605a      	str	r2, [r3, #4]

    odometry->linearDisplacement = (distR + distL)/2;
 8004dda:	ed97 7a03 	vldr	s14, [r7, #12]
 8004dde:	edd7 7a02 	vldr	s15, [r7, #8]
 8004de2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004de6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004dea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    odometry->angularDisplacement = (distR - distL)/2;
 8004df4:	ed97 7a03 	vldr	s14, [r7, #12]
 8004df8:	edd7 7a02 	vldr	s15, [r7, #8]
 8004dfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    odometry->position.x = odometry->position.x + odometry->angularDisplacement*cos(odometry->position.theta + odometry->angularDisplacement/2);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fb fb90 	bl	8000538 <__aeabi_f2d>
 8004e18:	4604      	mov	r4, r0
 8004e1a:	460d      	mov	r5, r1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fb fb89 	bl	8000538 <__aeabi_f2d>
 8004e26:	4680      	mov	r8, r0
 8004e28:	4689      	mov	r9, r1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	ed93 7a08 	vldr	s14, [r3, #32]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8004e36:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8004e3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e42:	ee17 0a90 	vmov	r0, s15
 8004e46:	f7fb fb77 	bl	8000538 <__aeabi_f2d>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	ec43 2b10 	vmov	d0, r2, r3
 8004e52:	f001 fbc5 	bl	80065e0 <cos>
 8004e56:	ec53 2b10 	vmov	r2, r3, d0
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	f7fb fbc3 	bl	80005e8 <__aeabi_dmul>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4620      	mov	r0, r4
 8004e68:	4629      	mov	r1, r5
 8004e6a:	f7fb fa07 	bl	800027c <__adddf3>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	460c      	mov	r4, r1
 8004e72:	4618      	mov	r0, r3
 8004e74:	4621      	mov	r1, r4
 8004e76:	f7fb fe79 	bl	8000b6c <__aeabi_d2f>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	619a      	str	r2, [r3, #24]
    odometry->position.y = odometry->position.y + odometry->angularDisplacement*sin(odometry->position.theta + odometry->angularDisplacement/2);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fb fb57 	bl	8000538 <__aeabi_f2d>
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	460d      	mov	r5, r1
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fb fb50 	bl	8000538 <__aeabi_f2d>
 8004e98:	4680      	mov	r8, r0
 8004e9a:	4689      	mov	r9, r1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	ed93 7a08 	vldr	s14, [r3, #32]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8004ea8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8004eac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eb4:	ee17 0a90 	vmov	r0, s15
 8004eb8:	f7fb fb3e 	bl	8000538 <__aeabi_f2d>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	ec43 2b10 	vmov	d0, r2, r3
 8004ec4:	f001 fbd0 	bl	8006668 <sin>
 8004ec8:	ec53 2b10 	vmov	r2, r3, d0
 8004ecc:	4640      	mov	r0, r8
 8004ece:	4649      	mov	r1, r9
 8004ed0:	f7fb fb8a 	bl	80005e8 <__aeabi_dmul>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4620      	mov	r0, r4
 8004eda:	4629      	mov	r1, r5
 8004edc:	f7fb f9ce 	bl	800027c <__adddf3>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	f7fb fe40 	bl	8000b6c <__aeabi_d2f>
 8004eec:	4602      	mov	r2, r0
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	61da      	str	r2, [r3, #28]
    odometry->position.theta = odometry->position.theta + odometry->angularDisplacement;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	ed93 7a08 	vldr	s14, [r3, #32]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08004f14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <HAL_MspInit+0x44>)
 8004f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f1e:	4a0e      	ldr	r2, [pc, #56]	; (8004f58 <HAL_MspInit+0x44>)
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	6613      	str	r3, [r2, #96]	; 0x60
 8004f26:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <HAL_MspInit+0x44>)
 8004f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	607b      	str	r3, [r7, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f32:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <HAL_MspInit+0x44>)
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f36:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <HAL_MspInit+0x44>)
 8004f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <HAL_MspInit+0x44>)
 8004f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40021000 	.word	0x40021000

08004f5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08a      	sub	sp, #40	; 0x28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f64:	f107 0314 	add.w	r3, r7, #20
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	605a      	str	r2, [r3, #4]
 8004f6e:	609a      	str	r2, [r3, #8]
 8004f70:	60da      	str	r2, [r3, #12]
 8004f72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a25      	ldr	r2, [pc, #148]	; (8005010 <HAL_SPI_MspInit+0xb4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d144      	bne.n	8005008 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004f7e:	4b25      	ldr	r3, [pc, #148]	; (8005014 <HAL_SPI_MspInit+0xb8>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f82:	4a24      	ldr	r2, [pc, #144]	; (8005014 <HAL_SPI_MspInit+0xb8>)
 8004f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f88:	6593      	str	r3, [r2, #88]	; 0x58
 8004f8a:	4b22      	ldr	r3, [pc, #136]	; (8005014 <HAL_SPI_MspInit+0xb8>)
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f96:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <HAL_SPI_MspInit+0xb8>)
 8004f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9a:	4a1e      	ldr	r2, [pc, #120]	; (8005014 <HAL_SPI_MspInit+0xb8>)
 8004f9c:	f043 0304 	orr.w	r3, r3, #4
 8004fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fa2:	4b1c      	ldr	r3, [pc, #112]	; (8005014 <HAL_SPI_MspInit+0xb8>)
 8004fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fae:	4b19      	ldr	r3, [pc, #100]	; (8005014 <HAL_SPI_MspInit+0xb8>)
 8004fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb2:	4a18      	ldr	r2, [pc, #96]	; (8005014 <HAL_SPI_MspInit+0xb8>)
 8004fb4:	f043 0302 	orr.w	r3, r3, #2
 8004fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fba:	4b16      	ldr	r3, [pc, #88]	; (8005014 <HAL_SPI_MspInit+0xb8>)
 8004fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	60bb      	str	r3, [r7, #8]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004fc6:	230c      	movs	r3, #12
 8004fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004fd6:	2305      	movs	r3, #5
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fda:	f107 0314 	add.w	r3, r7, #20
 8004fde:	4619      	mov	r1, r3
 8004fe0:	480d      	ldr	r0, [pc, #52]	; (8005018 <HAL_SPI_MspInit+0xbc>)
 8004fe2:	f7fc f947 	bl	8001274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fec:	2302      	movs	r3, #2
 8004fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ff8:	2305      	movs	r3, #5
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ffc:	f107 0314 	add.w	r3, r7, #20
 8005000:	4619      	mov	r1, r3
 8005002:	4806      	ldr	r0, [pc, #24]	; (800501c <HAL_SPI_MspInit+0xc0>)
 8005004:	f7fc f936 	bl	8001274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005008:	bf00      	nop
 800500a:	3728      	adds	r7, #40	; 0x28
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40003800 	.word	0x40003800
 8005014:	40021000 	.word	0x40021000
 8005018:	48000800 	.word	0x48000800
 800501c:	48000400 	.word	0x48000400

08005020 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005030:	d10c      	bne.n	800504c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <HAL_TIM_PWM_MspInit+0x5c>)
 8005034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005036:	4a11      	ldr	r2, [pc, #68]	; (800507c <HAL_TIM_PWM_MspInit+0x5c>)
 8005038:	f043 0301 	orr.w	r3, r3, #1
 800503c:	6593      	str	r3, [r2, #88]	; 0x58
 800503e:	4b0f      	ldr	r3, [pc, #60]	; (800507c <HAL_TIM_PWM_MspInit+0x5c>)
 8005040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800504a:	e010      	b.n	800506e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0b      	ldr	r2, [pc, #44]	; (8005080 <HAL_TIM_PWM_MspInit+0x60>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d10b      	bne.n	800506e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005056:	4b09      	ldr	r3, [pc, #36]	; (800507c <HAL_TIM_PWM_MspInit+0x5c>)
 8005058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505a:	4a08      	ldr	r2, [pc, #32]	; (800507c <HAL_TIM_PWM_MspInit+0x5c>)
 800505c:	f043 0302 	orr.w	r3, r3, #2
 8005060:	6593      	str	r3, [r2, #88]	; 0x58
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <HAL_TIM_PWM_MspInit+0x5c>)
 8005064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]
}
 800506e:	bf00      	nop
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40021000 	.word	0x40021000
 8005080:	40000400 	.word	0x40000400

08005084 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08a      	sub	sp, #40	; 0x28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800508c:	f107 0314 	add.w	r3, r7, #20
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	609a      	str	r2, [r3, #8]
 8005098:	60da      	str	r2, [r3, #12]
 800509a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a17      	ldr	r2, [pc, #92]	; (8005100 <HAL_TIM_Encoder_MspInit+0x7c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d127      	bne.n	80050f6 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80050a6:	4b17      	ldr	r3, [pc, #92]	; (8005104 <HAL_TIM_Encoder_MspInit+0x80>)
 80050a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050aa:	4a16      	ldr	r2, [pc, #88]	; (8005104 <HAL_TIM_Encoder_MspInit+0x80>)
 80050ac:	f043 0304 	orr.w	r3, r3, #4
 80050b0:	6593      	str	r3, [r2, #88]	; 0x58
 80050b2:	4b14      	ldr	r3, [pc, #80]	; (8005104 <HAL_TIM_Encoder_MspInit+0x80>)
 80050b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	613b      	str	r3, [r7, #16]
 80050bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050be:	4b11      	ldr	r3, [pc, #68]	; (8005104 <HAL_TIM_Encoder_MspInit+0x80>)
 80050c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c2:	4a10      	ldr	r2, [pc, #64]	; (8005104 <HAL_TIM_Encoder_MspInit+0x80>)
 80050c4:	f043 0302 	orr.w	r3, r3, #2
 80050c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ca:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <HAL_TIM_Encoder_MspInit+0x80>)
 80050cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050d6:	23c0      	movs	r3, #192	; 0xc0
 80050d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050da:	2302      	movs	r3, #2
 80050dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050de:	2301      	movs	r3, #1
 80050e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050e2:	2300      	movs	r3, #0
 80050e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80050e6:	2302      	movs	r3, #2
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ea:	f107 0314 	add.w	r3, r7, #20
 80050ee:	4619      	mov	r1, r3
 80050f0:	4805      	ldr	r0, [pc, #20]	; (8005108 <HAL_TIM_Encoder_MspInit+0x84>)
 80050f2:	f7fc f8bf 	bl	8001274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80050f6:	bf00      	nop
 80050f8:	3728      	adds	r7, #40	; 0x28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40000800 	.word	0x40000800
 8005104:	40021000 	.word	0x40021000
 8005108:	48000400 	.word	0x48000400

0800510c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	; 0x28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005114:	f107 0314 	add.w	r3, r7, #20
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	605a      	str	r2, [r3, #4]
 800511e:	609a      	str	r2, [r3, #8]
 8005120:	60da      	str	r2, [r3, #12]
 8005122:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512c:	d11c      	bne.n	8005168 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800512e:	4b21      	ldr	r3, [pc, #132]	; (80051b4 <HAL_TIM_MspPostInit+0xa8>)
 8005130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005132:	4a20      	ldr	r2, [pc, #128]	; (80051b4 <HAL_TIM_MspPostInit+0xa8>)
 8005134:	f043 0302 	orr.w	r3, r3, #2
 8005138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800513a:	4b1e      	ldr	r3, [pc, #120]	; (80051b4 <HAL_TIM_MspPostInit+0xa8>)
 800513c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = MotA_PWM_Pin;
 8005146:	2308      	movs	r3, #8
 8005148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800514a:	2302      	movs	r3, #2
 800514c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005152:	2300      	movs	r3, #0
 8005154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005156:	2301      	movs	r3, #1
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MotA_PWM_GPIO_Port, &GPIO_InitStruct);
 800515a:	f107 0314 	add.w	r3, r7, #20
 800515e:	4619      	mov	r1, r3
 8005160:	4815      	ldr	r0, [pc, #84]	; (80051b8 <HAL_TIM_MspPostInit+0xac>)
 8005162:	f7fc f887 	bl	8001274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005166:	e021      	b.n	80051ac <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a13      	ldr	r2, [pc, #76]	; (80051bc <HAL_TIM_MspPostInit+0xb0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d11c      	bne.n	80051ac <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005172:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <HAL_TIM_MspPostInit+0xa8>)
 8005174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005176:	4a0f      	ldr	r2, [pc, #60]	; (80051b4 <HAL_TIM_MspPostInit+0xa8>)
 8005178:	f043 0301 	orr.w	r3, r3, #1
 800517c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800517e:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <HAL_TIM_MspPostInit+0xa8>)
 8005180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MotB_PWM_Pin;
 800518a:	2380      	movs	r3, #128	; 0x80
 800518c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518e:	2302      	movs	r3, #2
 8005190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005192:	2300      	movs	r3, #0
 8005194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005196:	2300      	movs	r3, #0
 8005198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800519a:	2302      	movs	r3, #2
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MotB_PWM_GPIO_Port, &GPIO_InitStruct);
 800519e:	f107 0314 	add.w	r3, r7, #20
 80051a2:	4619      	mov	r1, r3
 80051a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051a8:	f7fc f864 	bl	8001274 <HAL_GPIO_Init>
}
 80051ac:	bf00      	nop
 80051ae:	3728      	adds	r7, #40	; 0x28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40021000 	.word	0x40021000
 80051b8:	48000400 	.word	0x48000400
 80051bc:	40000400 	.word	0x40000400

080051c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08a      	sub	sp, #40	; 0x28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c8:	f107 0314 	add.w	r3, r7, #20
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	609a      	str	r2, [r3, #8]
 80051d4:	60da      	str	r2, [r3, #12]
 80051d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a17      	ldr	r2, [pc, #92]	; (800523c <HAL_UART_MspInit+0x7c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d128      	bne.n	8005234 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80051e2:	4b17      	ldr	r3, [pc, #92]	; (8005240 <HAL_UART_MspInit+0x80>)
 80051e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e6:	4a16      	ldr	r2, [pc, #88]	; (8005240 <HAL_UART_MspInit+0x80>)
 80051e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ec:	6593      	str	r3, [r2, #88]	; 0x58
 80051ee:	4b14      	ldr	r3, [pc, #80]	; (8005240 <HAL_UART_MspInit+0x80>)
 80051f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051fa:	4b11      	ldr	r3, [pc, #68]	; (8005240 <HAL_UART_MspInit+0x80>)
 80051fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fe:	4a10      	ldr	r2, [pc, #64]	; (8005240 <HAL_UART_MspInit+0x80>)
 8005200:	f043 0301 	orr.w	r3, r3, #1
 8005204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005206:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <HAL_UART_MspInit+0x80>)
 8005208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005212:	230c      	movs	r3, #12
 8005214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005216:	2302      	movs	r3, #2
 8005218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800521e:	2303      	movs	r3, #3
 8005220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005222:	2307      	movs	r3, #7
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005226:	f107 0314 	add.w	r3, r7, #20
 800522a:	4619      	mov	r1, r3
 800522c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005230:	f7fc f820 	bl	8001274 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005234:	bf00      	nop
 8005236:	3728      	adds	r7, #40	; 0x28
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40004400 	.word	0x40004400
 8005240:	40021000 	.word	0x40021000

08005244 <updateEncG>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void updateEncG(void) {
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
    uint8_t s = stateEncD & 3;
 800524a:	4b33      	ldr	r3, [pc, #204]	; (8005318 <updateEncG+0xd4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(EncA_GPIO_Port, EncA_Pin)) s |= 4;
 8005256:	2101      	movs	r1, #1
 8005258:	4830      	ldr	r0, [pc, #192]	; (800531c <updateEncG+0xd8>)
 800525a:	f7fc f9b3 	bl	80015c4 <HAL_GPIO_ReadPin>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <updateEncG+0x28>
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	f043 0304 	orr.w	r3, r3, #4
 800526a:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(EncB_GPIO_Port, EncB_Pin)) s |= 8;
 800526c:	2110      	movs	r1, #16
 800526e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005272:	f7fc f9a7 	bl	80015c4 <HAL_GPIO_ReadPin>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <updateEncG+0x40>
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	f043 0308 	orr.w	r3, r3, #8
 8005282:	71fb      	strb	r3, [r7, #7]
    switch (s) {
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	2b0f      	cmp	r3, #15
 8005288:	d834      	bhi.n	80052f4 <updateEncG+0xb0>
 800528a:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <updateEncG+0x4c>)
 800528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005290:	08005301 	.word	0x08005301
 8005294:	080052d1 	.word	0x080052d1
 8005298:	080052dd 	.word	0x080052dd
 800529c:	080052e9 	.word	0x080052e9
 80052a0:	080052dd 	.word	0x080052dd
 80052a4:	08005301 	.word	0x08005301
 80052a8:	080052f5 	.word	0x080052f5
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052d1 	.word	0x080052d1
 80052b4:	080052f5 	.word	0x080052f5
 80052b8:	08005301 	.word	0x08005301
 80052bc:	080052dd 	.word	0x080052dd
 80052c0:	080052e9 	.word	0x080052e9
 80052c4:	080052dd 	.word	0x080052dd
 80052c8:	080052d1 	.word	0x080052d1
 80052cc:	08005301 	.word	0x08005301
        case 0: case 5: case 10: case 15:
            break;
        case 1: case 7: case 8: case 14:
        	EncValD++; break;
 80052d0:	4b13      	ldr	r3, [pc, #76]	; (8005320 <updateEncG+0xdc>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	4a12      	ldr	r2, [pc, #72]	; (8005320 <updateEncG+0xdc>)
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e012      	b.n	8005302 <updateEncG+0xbe>
        case 2: case 4: case 11: case 13:
        	EncValD--; break;
 80052dc:	4b10      	ldr	r3, [pc, #64]	; (8005320 <updateEncG+0xdc>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	4a0f      	ldr	r2, [pc, #60]	; (8005320 <updateEncG+0xdc>)
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	e00c      	b.n	8005302 <updateEncG+0xbe>
        case 3: case 12:
        	EncValD += 2; break;
 80052e8:	4b0d      	ldr	r3, [pc, #52]	; (8005320 <updateEncG+0xdc>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3302      	adds	r3, #2
 80052ee:	4a0c      	ldr	r2, [pc, #48]	; (8005320 <updateEncG+0xdc>)
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	e006      	b.n	8005302 <updateEncG+0xbe>
        default:
        	EncValD -= 2; break;
 80052f4:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <updateEncG+0xdc>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3b02      	subs	r3, #2
 80052fa:	4a09      	ldr	r2, [pc, #36]	; (8005320 <updateEncG+0xdc>)
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e000      	b.n	8005302 <updateEncG+0xbe>
            break;
 8005300:	bf00      	nop
    }
    stateEncD = (s >> 2);
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	089b      	lsrs	r3, r3, #2
 8005306:	b2db      	uxtb	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	4b03      	ldr	r3, [pc, #12]	; (8005318 <updateEncG+0xd4>)
 800530c:	601a      	str	r2, [r3, #0]
}
 800530e:	bf00      	nop
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20000180 	.word	0x20000180
 800531c:	48000400 	.word	0x48000400
 8005320:	20000184 	.word	0x20000184

08005324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005328:	bf00      	nop
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005332:	b480      	push	{r7}
 8005334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005336:	e7fe      	b.n	8005336 <HardFault_Handler+0x4>

08005338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800533c:	e7fe      	b.n	800533c <MemManage_Handler+0x4>

0800533e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800533e:	b480      	push	{r7}
 8005340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005342:	e7fe      	b.n	8005342 <BusFault_Handler+0x4>

08005344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005348:	e7fe      	b.n	8005348 <UsageFault_Handler+0x4>

0800534a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800534a:	b480      	push	{r7}
 800534c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800534e:	bf00      	nop
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800535c:	bf00      	nop
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005366:	b480      	push	{r7}
 8005368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800536a:	bf00      	nop
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005378:	f7fb fe4c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800537c:	bf00      	nop
 800537e:	bd80      	pop	{r7, pc}

08005380 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_0)){
 8005384:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <EXTI0_IRQHandler+0x20>)
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <EXTI0_IRQHandler+0x14>
		updateEncG();
 8005390:	f7ff ff58 	bl	8005244 <updateEncG>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005394:	2001      	movs	r0, #1
 8005396:	f7fc f945 	bl	8001624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800539a:	bf00      	nop
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	40010400 	.word	0x40010400

080053a4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_4)){
 80053a8:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <EXTI4_IRQHandler+0x20>)
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <EXTI4_IRQHandler+0x14>
		updateEncG();
 80053b4:	f7ff ff46 	bl	8005244 <updateEncG>
	}
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80053b8:	2010      	movs	r0, #16
 80053ba:	f7fc f933 	bl	8001624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80053be:	bf00      	nop
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40010400 	.word	0x40010400

080053c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053cc:	4b17      	ldr	r3, [pc, #92]	; (800542c <SystemInit+0x64>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	4a16      	ldr	r2, [pc, #88]	; (800542c <SystemInit+0x64>)
 80053d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80053dc:	4b14      	ldr	r3, [pc, #80]	; (8005430 <SystemInit+0x68>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a13      	ldr	r2, [pc, #76]	; (8005430 <SystemInit+0x68>)
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80053e8:	4b11      	ldr	r3, [pc, #68]	; (8005430 <SystemInit+0x68>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80053ee:	4b10      	ldr	r3, [pc, #64]	; (8005430 <SystemInit+0x68>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a0f      	ldr	r2, [pc, #60]	; (8005430 <SystemInit+0x68>)
 80053f4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80053f8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80053fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80053fe:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <SystemInit+0x68>)
 8005400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005404:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005406:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <SystemInit+0x68>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a09      	ldr	r2, [pc, #36]	; (8005430 <SystemInit+0x68>)
 800540c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005410:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <SystemInit+0x68>)
 8005414:	2200      	movs	r2, #0
 8005416:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005418:	4b04      	ldr	r3, [pc, #16]	; (800542c <SystemInit+0x64>)
 800541a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800541e:	609a      	str	r2, [r3, #8]
#endif
}
 8005420:	bf00      	nop
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	e000ed00 	.word	0xe000ed00
 8005430:	40021000 	.word	0x40021000

08005434 <__libc_init_array>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	4e0d      	ldr	r6, [pc, #52]	; (800546c <__libc_init_array+0x38>)
 8005438:	4c0d      	ldr	r4, [pc, #52]	; (8005470 <__libc_init_array+0x3c>)
 800543a:	1ba4      	subs	r4, r4, r6
 800543c:	10a4      	asrs	r4, r4, #2
 800543e:	2500      	movs	r5, #0
 8005440:	42a5      	cmp	r5, r4
 8005442:	d109      	bne.n	8005458 <__libc_init_array+0x24>
 8005444:	4e0b      	ldr	r6, [pc, #44]	; (8005474 <__libc_init_array+0x40>)
 8005446:	4c0c      	ldr	r4, [pc, #48]	; (8005478 <__libc_init_array+0x44>)
 8005448:	f002 f95e 	bl	8007708 <_init>
 800544c:	1ba4      	subs	r4, r4, r6
 800544e:	10a4      	asrs	r4, r4, #2
 8005450:	2500      	movs	r5, #0
 8005452:	42a5      	cmp	r5, r4
 8005454:	d105      	bne.n	8005462 <__libc_init_array+0x2e>
 8005456:	bd70      	pop	{r4, r5, r6, pc}
 8005458:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800545c:	4798      	blx	r3
 800545e:	3501      	adds	r5, #1
 8005460:	e7ee      	b.n	8005440 <__libc_init_array+0xc>
 8005462:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005466:	4798      	blx	r3
 8005468:	3501      	adds	r5, #1
 800546a:	e7f2      	b.n	8005452 <__libc_init_array+0x1e>
 800546c:	08007a20 	.word	0x08007a20
 8005470:	08007a20 	.word	0x08007a20
 8005474:	08007a20 	.word	0x08007a20
 8005478:	08007a24 	.word	0x08007a24

0800547c <memset>:
 800547c:	4402      	add	r2, r0
 800547e:	4603      	mov	r3, r0
 8005480:	4293      	cmp	r3, r2
 8005482:	d100      	bne.n	8005486 <memset+0xa>
 8005484:	4770      	bx	lr
 8005486:	f803 1b01 	strb.w	r1, [r3], #1
 800548a:	e7f9      	b.n	8005480 <memset+0x4>

0800548c <iprintf>:
 800548c:	b40f      	push	{r0, r1, r2, r3}
 800548e:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <iprintf+0x2c>)
 8005490:	b513      	push	{r0, r1, r4, lr}
 8005492:	681c      	ldr	r4, [r3, #0]
 8005494:	b124      	cbz	r4, 80054a0 <iprintf+0x14>
 8005496:	69a3      	ldr	r3, [r4, #24]
 8005498:	b913      	cbnz	r3, 80054a0 <iprintf+0x14>
 800549a:	4620      	mov	r0, r4
 800549c:	f000 f86e 	bl	800557c <__sinit>
 80054a0:	ab05      	add	r3, sp, #20
 80054a2:	9a04      	ldr	r2, [sp, #16]
 80054a4:	68a1      	ldr	r1, [r4, #8]
 80054a6:	9301      	str	r3, [sp, #4]
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 fac7 	bl	8005a3c <_vfiprintf_r>
 80054ae:	b002      	add	sp, #8
 80054b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054b4:	b004      	add	sp, #16
 80054b6:	4770      	bx	lr
 80054b8:	2000000c 	.word	0x2000000c

080054bc <siprintf>:
 80054bc:	b40e      	push	{r1, r2, r3}
 80054be:	b500      	push	{lr}
 80054c0:	b09c      	sub	sp, #112	; 0x70
 80054c2:	ab1d      	add	r3, sp, #116	; 0x74
 80054c4:	9002      	str	r0, [sp, #8]
 80054c6:	9006      	str	r0, [sp, #24]
 80054c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054cc:	4809      	ldr	r0, [pc, #36]	; (80054f4 <siprintf+0x38>)
 80054ce:	9107      	str	r1, [sp, #28]
 80054d0:	9104      	str	r1, [sp, #16]
 80054d2:	4909      	ldr	r1, [pc, #36]	; (80054f8 <siprintf+0x3c>)
 80054d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80054d8:	9105      	str	r1, [sp, #20]
 80054da:	6800      	ldr	r0, [r0, #0]
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	a902      	add	r1, sp, #8
 80054e0:	f000 f98a 	bl	80057f8 <_svfiprintf_r>
 80054e4:	9b02      	ldr	r3, [sp, #8]
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	b01c      	add	sp, #112	; 0x70
 80054ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80054f0:	b003      	add	sp, #12
 80054f2:	4770      	bx	lr
 80054f4:	2000000c 	.word	0x2000000c
 80054f8:	ffff0208 	.word	0xffff0208

080054fc <std>:
 80054fc:	2300      	movs	r3, #0
 80054fe:	b510      	push	{r4, lr}
 8005500:	4604      	mov	r4, r0
 8005502:	e9c0 3300 	strd	r3, r3, [r0]
 8005506:	6083      	str	r3, [r0, #8]
 8005508:	8181      	strh	r1, [r0, #12]
 800550a:	6643      	str	r3, [r0, #100]	; 0x64
 800550c:	81c2      	strh	r2, [r0, #14]
 800550e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005512:	6183      	str	r3, [r0, #24]
 8005514:	4619      	mov	r1, r3
 8005516:	2208      	movs	r2, #8
 8005518:	305c      	adds	r0, #92	; 0x5c
 800551a:	f7ff ffaf 	bl	800547c <memset>
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <std+0x38>)
 8005520:	6263      	str	r3, [r4, #36]	; 0x24
 8005522:	4b05      	ldr	r3, [pc, #20]	; (8005538 <std+0x3c>)
 8005524:	62a3      	str	r3, [r4, #40]	; 0x28
 8005526:	4b05      	ldr	r3, [pc, #20]	; (800553c <std+0x40>)
 8005528:	62e3      	str	r3, [r4, #44]	; 0x2c
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <std+0x44>)
 800552c:	6224      	str	r4, [r4, #32]
 800552e:	6323      	str	r3, [r4, #48]	; 0x30
 8005530:	bd10      	pop	{r4, pc}
 8005532:	bf00      	nop
 8005534:	08005f99 	.word	0x08005f99
 8005538:	08005fbb 	.word	0x08005fbb
 800553c:	08005ff3 	.word	0x08005ff3
 8005540:	08006017 	.word	0x08006017

08005544 <_cleanup_r>:
 8005544:	4901      	ldr	r1, [pc, #4]	; (800554c <_cleanup_r+0x8>)
 8005546:	f000 b885 	b.w	8005654 <_fwalk_reent>
 800554a:	bf00      	nop
 800554c:	080062f1 	.word	0x080062f1

08005550 <__sfmoreglue>:
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	1e4a      	subs	r2, r1, #1
 8005554:	2568      	movs	r5, #104	; 0x68
 8005556:	4355      	muls	r5, r2
 8005558:	460e      	mov	r6, r1
 800555a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800555e:	f000 f897 	bl	8005690 <_malloc_r>
 8005562:	4604      	mov	r4, r0
 8005564:	b140      	cbz	r0, 8005578 <__sfmoreglue+0x28>
 8005566:	2100      	movs	r1, #0
 8005568:	e9c0 1600 	strd	r1, r6, [r0]
 800556c:	300c      	adds	r0, #12
 800556e:	60a0      	str	r0, [r4, #8]
 8005570:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005574:	f7ff ff82 	bl	800547c <memset>
 8005578:	4620      	mov	r0, r4
 800557a:	bd70      	pop	{r4, r5, r6, pc}

0800557c <__sinit>:
 800557c:	6983      	ldr	r3, [r0, #24]
 800557e:	b510      	push	{r4, lr}
 8005580:	4604      	mov	r4, r0
 8005582:	bb33      	cbnz	r3, 80055d2 <__sinit+0x56>
 8005584:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005588:	6503      	str	r3, [r0, #80]	; 0x50
 800558a:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <__sinit+0x58>)
 800558c:	4a12      	ldr	r2, [pc, #72]	; (80055d8 <__sinit+0x5c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6282      	str	r2, [r0, #40]	; 0x28
 8005592:	4298      	cmp	r0, r3
 8005594:	bf04      	itt	eq
 8005596:	2301      	moveq	r3, #1
 8005598:	6183      	streq	r3, [r0, #24]
 800559a:	f000 f81f 	bl	80055dc <__sfp>
 800559e:	6060      	str	r0, [r4, #4]
 80055a0:	4620      	mov	r0, r4
 80055a2:	f000 f81b 	bl	80055dc <__sfp>
 80055a6:	60a0      	str	r0, [r4, #8]
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 f817 	bl	80055dc <__sfp>
 80055ae:	2200      	movs	r2, #0
 80055b0:	60e0      	str	r0, [r4, #12]
 80055b2:	2104      	movs	r1, #4
 80055b4:	6860      	ldr	r0, [r4, #4]
 80055b6:	f7ff ffa1 	bl	80054fc <std>
 80055ba:	2201      	movs	r2, #1
 80055bc:	2109      	movs	r1, #9
 80055be:	68a0      	ldr	r0, [r4, #8]
 80055c0:	f7ff ff9c 	bl	80054fc <std>
 80055c4:	2202      	movs	r2, #2
 80055c6:	2112      	movs	r1, #18
 80055c8:	68e0      	ldr	r0, [r4, #12]
 80055ca:	f7ff ff97 	bl	80054fc <std>
 80055ce:	2301      	movs	r3, #1
 80055d0:	61a3      	str	r3, [r4, #24]
 80055d2:	bd10      	pop	{r4, pc}
 80055d4:	080077a8 	.word	0x080077a8
 80055d8:	08005545 	.word	0x08005545

080055dc <__sfp>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	4b1b      	ldr	r3, [pc, #108]	; (800564c <__sfp+0x70>)
 80055e0:	681e      	ldr	r6, [r3, #0]
 80055e2:	69b3      	ldr	r3, [r6, #24]
 80055e4:	4607      	mov	r7, r0
 80055e6:	b913      	cbnz	r3, 80055ee <__sfp+0x12>
 80055e8:	4630      	mov	r0, r6
 80055ea:	f7ff ffc7 	bl	800557c <__sinit>
 80055ee:	3648      	adds	r6, #72	; 0x48
 80055f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	d503      	bpl.n	8005600 <__sfp+0x24>
 80055f8:	6833      	ldr	r3, [r6, #0]
 80055fa:	b133      	cbz	r3, 800560a <__sfp+0x2e>
 80055fc:	6836      	ldr	r6, [r6, #0]
 80055fe:	e7f7      	b.n	80055f0 <__sfp+0x14>
 8005600:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005604:	b16d      	cbz	r5, 8005622 <__sfp+0x46>
 8005606:	3468      	adds	r4, #104	; 0x68
 8005608:	e7f4      	b.n	80055f4 <__sfp+0x18>
 800560a:	2104      	movs	r1, #4
 800560c:	4638      	mov	r0, r7
 800560e:	f7ff ff9f 	bl	8005550 <__sfmoreglue>
 8005612:	6030      	str	r0, [r6, #0]
 8005614:	2800      	cmp	r0, #0
 8005616:	d1f1      	bne.n	80055fc <__sfp+0x20>
 8005618:	230c      	movs	r3, #12
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4604      	mov	r4, r0
 800561e:	4620      	mov	r0, r4
 8005620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005622:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <__sfp+0x74>)
 8005624:	6665      	str	r5, [r4, #100]	; 0x64
 8005626:	e9c4 5500 	strd	r5, r5, [r4]
 800562a:	60a5      	str	r5, [r4, #8]
 800562c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005630:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005634:	2208      	movs	r2, #8
 8005636:	4629      	mov	r1, r5
 8005638:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800563c:	f7ff ff1e 	bl	800547c <memset>
 8005640:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005644:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005648:	e7e9      	b.n	800561e <__sfp+0x42>
 800564a:	bf00      	nop
 800564c:	080077a8 	.word	0x080077a8
 8005650:	ffff0001 	.word	0xffff0001

08005654 <_fwalk_reent>:
 8005654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005658:	4680      	mov	r8, r0
 800565a:	4689      	mov	r9, r1
 800565c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005660:	2600      	movs	r6, #0
 8005662:	b914      	cbnz	r4, 800566a <_fwalk_reent+0x16>
 8005664:	4630      	mov	r0, r6
 8005666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800566a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800566e:	3f01      	subs	r7, #1
 8005670:	d501      	bpl.n	8005676 <_fwalk_reent+0x22>
 8005672:	6824      	ldr	r4, [r4, #0]
 8005674:	e7f5      	b.n	8005662 <_fwalk_reent+0xe>
 8005676:	89ab      	ldrh	r3, [r5, #12]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d907      	bls.n	800568c <_fwalk_reent+0x38>
 800567c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005680:	3301      	adds	r3, #1
 8005682:	d003      	beq.n	800568c <_fwalk_reent+0x38>
 8005684:	4629      	mov	r1, r5
 8005686:	4640      	mov	r0, r8
 8005688:	47c8      	blx	r9
 800568a:	4306      	orrs	r6, r0
 800568c:	3568      	adds	r5, #104	; 0x68
 800568e:	e7ee      	b.n	800566e <_fwalk_reent+0x1a>

08005690 <_malloc_r>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	1ccd      	adds	r5, r1, #3
 8005694:	f025 0503 	bic.w	r5, r5, #3
 8005698:	3508      	adds	r5, #8
 800569a:	2d0c      	cmp	r5, #12
 800569c:	bf38      	it	cc
 800569e:	250c      	movcc	r5, #12
 80056a0:	2d00      	cmp	r5, #0
 80056a2:	4606      	mov	r6, r0
 80056a4:	db01      	blt.n	80056aa <_malloc_r+0x1a>
 80056a6:	42a9      	cmp	r1, r5
 80056a8:	d903      	bls.n	80056b2 <_malloc_r+0x22>
 80056aa:	230c      	movs	r3, #12
 80056ac:	6033      	str	r3, [r6, #0]
 80056ae:	2000      	movs	r0, #0
 80056b0:	bd70      	pop	{r4, r5, r6, pc}
 80056b2:	f000 fee1 	bl	8006478 <__malloc_lock>
 80056b6:	4a21      	ldr	r2, [pc, #132]	; (800573c <_malloc_r+0xac>)
 80056b8:	6814      	ldr	r4, [r2, #0]
 80056ba:	4621      	mov	r1, r4
 80056bc:	b991      	cbnz	r1, 80056e4 <_malloc_r+0x54>
 80056be:	4c20      	ldr	r4, [pc, #128]	; (8005740 <_malloc_r+0xb0>)
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	b91b      	cbnz	r3, 80056cc <_malloc_r+0x3c>
 80056c4:	4630      	mov	r0, r6
 80056c6:	f000 fc57 	bl	8005f78 <_sbrk_r>
 80056ca:	6020      	str	r0, [r4, #0]
 80056cc:	4629      	mov	r1, r5
 80056ce:	4630      	mov	r0, r6
 80056d0:	f000 fc52 	bl	8005f78 <_sbrk_r>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d124      	bne.n	8005722 <_malloc_r+0x92>
 80056d8:	230c      	movs	r3, #12
 80056da:	6033      	str	r3, [r6, #0]
 80056dc:	4630      	mov	r0, r6
 80056de:	f000 fecc 	bl	800647a <__malloc_unlock>
 80056e2:	e7e4      	b.n	80056ae <_malloc_r+0x1e>
 80056e4:	680b      	ldr	r3, [r1, #0]
 80056e6:	1b5b      	subs	r3, r3, r5
 80056e8:	d418      	bmi.n	800571c <_malloc_r+0x8c>
 80056ea:	2b0b      	cmp	r3, #11
 80056ec:	d90f      	bls.n	800570e <_malloc_r+0x7e>
 80056ee:	600b      	str	r3, [r1, #0]
 80056f0:	50cd      	str	r5, [r1, r3]
 80056f2:	18cc      	adds	r4, r1, r3
 80056f4:	4630      	mov	r0, r6
 80056f6:	f000 fec0 	bl	800647a <__malloc_unlock>
 80056fa:	f104 000b 	add.w	r0, r4, #11
 80056fe:	1d23      	adds	r3, r4, #4
 8005700:	f020 0007 	bic.w	r0, r0, #7
 8005704:	1ac3      	subs	r3, r0, r3
 8005706:	d0d3      	beq.n	80056b0 <_malloc_r+0x20>
 8005708:	425a      	negs	r2, r3
 800570a:	50e2      	str	r2, [r4, r3]
 800570c:	e7d0      	b.n	80056b0 <_malloc_r+0x20>
 800570e:	428c      	cmp	r4, r1
 8005710:	684b      	ldr	r3, [r1, #4]
 8005712:	bf16      	itet	ne
 8005714:	6063      	strne	r3, [r4, #4]
 8005716:	6013      	streq	r3, [r2, #0]
 8005718:	460c      	movne	r4, r1
 800571a:	e7eb      	b.n	80056f4 <_malloc_r+0x64>
 800571c:	460c      	mov	r4, r1
 800571e:	6849      	ldr	r1, [r1, #4]
 8005720:	e7cc      	b.n	80056bc <_malloc_r+0x2c>
 8005722:	1cc4      	adds	r4, r0, #3
 8005724:	f024 0403 	bic.w	r4, r4, #3
 8005728:	42a0      	cmp	r0, r4
 800572a:	d005      	beq.n	8005738 <_malloc_r+0xa8>
 800572c:	1a21      	subs	r1, r4, r0
 800572e:	4630      	mov	r0, r6
 8005730:	f000 fc22 	bl	8005f78 <_sbrk_r>
 8005734:	3001      	adds	r0, #1
 8005736:	d0cf      	beq.n	80056d8 <_malloc_r+0x48>
 8005738:	6025      	str	r5, [r4, #0]
 800573a:	e7db      	b.n	80056f4 <_malloc_r+0x64>
 800573c:	2000008c 	.word	0x2000008c
 8005740:	20000090 	.word	0x20000090

08005744 <__ssputs_r>:
 8005744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005748:	688e      	ldr	r6, [r1, #8]
 800574a:	429e      	cmp	r6, r3
 800574c:	4682      	mov	sl, r0
 800574e:	460c      	mov	r4, r1
 8005750:	4690      	mov	r8, r2
 8005752:	4699      	mov	r9, r3
 8005754:	d837      	bhi.n	80057c6 <__ssputs_r+0x82>
 8005756:	898a      	ldrh	r2, [r1, #12]
 8005758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800575c:	d031      	beq.n	80057c2 <__ssputs_r+0x7e>
 800575e:	6825      	ldr	r5, [r4, #0]
 8005760:	6909      	ldr	r1, [r1, #16]
 8005762:	1a6f      	subs	r7, r5, r1
 8005764:	6965      	ldr	r5, [r4, #20]
 8005766:	2302      	movs	r3, #2
 8005768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800576c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005770:	f109 0301 	add.w	r3, r9, #1
 8005774:	443b      	add	r3, r7
 8005776:	429d      	cmp	r5, r3
 8005778:	bf38      	it	cc
 800577a:	461d      	movcc	r5, r3
 800577c:	0553      	lsls	r3, r2, #21
 800577e:	d530      	bpl.n	80057e2 <__ssputs_r+0x9e>
 8005780:	4629      	mov	r1, r5
 8005782:	f7ff ff85 	bl	8005690 <_malloc_r>
 8005786:	4606      	mov	r6, r0
 8005788:	b950      	cbnz	r0, 80057a0 <__ssputs_r+0x5c>
 800578a:	230c      	movs	r3, #12
 800578c:	f8ca 3000 	str.w	r3, [sl]
 8005790:	89a3      	ldrh	r3, [r4, #12]
 8005792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005796:	81a3      	strh	r3, [r4, #12]
 8005798:	f04f 30ff 	mov.w	r0, #4294967295
 800579c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a0:	463a      	mov	r2, r7
 80057a2:	6921      	ldr	r1, [r4, #16]
 80057a4:	f000 fe44 	bl	8006430 <memcpy>
 80057a8:	89a3      	ldrh	r3, [r4, #12]
 80057aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b2:	81a3      	strh	r3, [r4, #12]
 80057b4:	6126      	str	r6, [r4, #16]
 80057b6:	6165      	str	r5, [r4, #20]
 80057b8:	443e      	add	r6, r7
 80057ba:	1bed      	subs	r5, r5, r7
 80057bc:	6026      	str	r6, [r4, #0]
 80057be:	60a5      	str	r5, [r4, #8]
 80057c0:	464e      	mov	r6, r9
 80057c2:	454e      	cmp	r6, r9
 80057c4:	d900      	bls.n	80057c8 <__ssputs_r+0x84>
 80057c6:	464e      	mov	r6, r9
 80057c8:	4632      	mov	r2, r6
 80057ca:	4641      	mov	r1, r8
 80057cc:	6820      	ldr	r0, [r4, #0]
 80057ce:	f000 fe3a 	bl	8006446 <memmove>
 80057d2:	68a3      	ldr	r3, [r4, #8]
 80057d4:	1b9b      	subs	r3, r3, r6
 80057d6:	60a3      	str	r3, [r4, #8]
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	441e      	add	r6, r3
 80057dc:	6026      	str	r6, [r4, #0]
 80057de:	2000      	movs	r0, #0
 80057e0:	e7dc      	b.n	800579c <__ssputs_r+0x58>
 80057e2:	462a      	mov	r2, r5
 80057e4:	f000 fe98 	bl	8006518 <_realloc_r>
 80057e8:	4606      	mov	r6, r0
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d1e2      	bne.n	80057b4 <__ssputs_r+0x70>
 80057ee:	6921      	ldr	r1, [r4, #16]
 80057f0:	4650      	mov	r0, sl
 80057f2:	f000 fe43 	bl	800647c <_free_r>
 80057f6:	e7c8      	b.n	800578a <__ssputs_r+0x46>

080057f8 <_svfiprintf_r>:
 80057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	461d      	mov	r5, r3
 80057fe:	898b      	ldrh	r3, [r1, #12]
 8005800:	061f      	lsls	r7, r3, #24
 8005802:	b09d      	sub	sp, #116	; 0x74
 8005804:	4680      	mov	r8, r0
 8005806:	460c      	mov	r4, r1
 8005808:	4616      	mov	r6, r2
 800580a:	d50f      	bpl.n	800582c <_svfiprintf_r+0x34>
 800580c:	690b      	ldr	r3, [r1, #16]
 800580e:	b96b      	cbnz	r3, 800582c <_svfiprintf_r+0x34>
 8005810:	2140      	movs	r1, #64	; 0x40
 8005812:	f7ff ff3d 	bl	8005690 <_malloc_r>
 8005816:	6020      	str	r0, [r4, #0]
 8005818:	6120      	str	r0, [r4, #16]
 800581a:	b928      	cbnz	r0, 8005828 <_svfiprintf_r+0x30>
 800581c:	230c      	movs	r3, #12
 800581e:	f8c8 3000 	str.w	r3, [r8]
 8005822:	f04f 30ff 	mov.w	r0, #4294967295
 8005826:	e0c8      	b.n	80059ba <_svfiprintf_r+0x1c2>
 8005828:	2340      	movs	r3, #64	; 0x40
 800582a:	6163      	str	r3, [r4, #20]
 800582c:	2300      	movs	r3, #0
 800582e:	9309      	str	r3, [sp, #36]	; 0x24
 8005830:	2320      	movs	r3, #32
 8005832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005836:	2330      	movs	r3, #48	; 0x30
 8005838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800583c:	9503      	str	r5, [sp, #12]
 800583e:	f04f 0b01 	mov.w	fp, #1
 8005842:	4637      	mov	r7, r6
 8005844:	463d      	mov	r5, r7
 8005846:	f815 3b01 	ldrb.w	r3, [r5], #1
 800584a:	b10b      	cbz	r3, 8005850 <_svfiprintf_r+0x58>
 800584c:	2b25      	cmp	r3, #37	; 0x25
 800584e:	d13e      	bne.n	80058ce <_svfiprintf_r+0xd6>
 8005850:	ebb7 0a06 	subs.w	sl, r7, r6
 8005854:	d00b      	beq.n	800586e <_svfiprintf_r+0x76>
 8005856:	4653      	mov	r3, sl
 8005858:	4632      	mov	r2, r6
 800585a:	4621      	mov	r1, r4
 800585c:	4640      	mov	r0, r8
 800585e:	f7ff ff71 	bl	8005744 <__ssputs_r>
 8005862:	3001      	adds	r0, #1
 8005864:	f000 80a4 	beq.w	80059b0 <_svfiprintf_r+0x1b8>
 8005868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800586a:	4453      	add	r3, sl
 800586c:	9309      	str	r3, [sp, #36]	; 0x24
 800586e:	783b      	ldrb	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 809d 	beq.w	80059b0 <_svfiprintf_r+0x1b8>
 8005876:	2300      	movs	r3, #0
 8005878:	f04f 32ff 	mov.w	r2, #4294967295
 800587c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005880:	9304      	str	r3, [sp, #16]
 8005882:	9307      	str	r3, [sp, #28]
 8005884:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005888:	931a      	str	r3, [sp, #104]	; 0x68
 800588a:	462f      	mov	r7, r5
 800588c:	2205      	movs	r2, #5
 800588e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005892:	4850      	ldr	r0, [pc, #320]	; (80059d4 <_svfiprintf_r+0x1dc>)
 8005894:	f7fa fc9c 	bl	80001d0 <memchr>
 8005898:	9b04      	ldr	r3, [sp, #16]
 800589a:	b9d0      	cbnz	r0, 80058d2 <_svfiprintf_r+0xda>
 800589c:	06d9      	lsls	r1, r3, #27
 800589e:	bf44      	itt	mi
 80058a0:	2220      	movmi	r2, #32
 80058a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058a6:	071a      	lsls	r2, r3, #28
 80058a8:	bf44      	itt	mi
 80058aa:	222b      	movmi	r2, #43	; 0x2b
 80058ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058b0:	782a      	ldrb	r2, [r5, #0]
 80058b2:	2a2a      	cmp	r2, #42	; 0x2a
 80058b4:	d015      	beq.n	80058e2 <_svfiprintf_r+0xea>
 80058b6:	9a07      	ldr	r2, [sp, #28]
 80058b8:	462f      	mov	r7, r5
 80058ba:	2000      	movs	r0, #0
 80058bc:	250a      	movs	r5, #10
 80058be:	4639      	mov	r1, r7
 80058c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058c4:	3b30      	subs	r3, #48	; 0x30
 80058c6:	2b09      	cmp	r3, #9
 80058c8:	d94d      	bls.n	8005966 <_svfiprintf_r+0x16e>
 80058ca:	b1b8      	cbz	r0, 80058fc <_svfiprintf_r+0x104>
 80058cc:	e00f      	b.n	80058ee <_svfiprintf_r+0xf6>
 80058ce:	462f      	mov	r7, r5
 80058d0:	e7b8      	b.n	8005844 <_svfiprintf_r+0x4c>
 80058d2:	4a40      	ldr	r2, [pc, #256]	; (80059d4 <_svfiprintf_r+0x1dc>)
 80058d4:	1a80      	subs	r0, r0, r2
 80058d6:	fa0b f000 	lsl.w	r0, fp, r0
 80058da:	4318      	orrs	r0, r3
 80058dc:	9004      	str	r0, [sp, #16]
 80058de:	463d      	mov	r5, r7
 80058e0:	e7d3      	b.n	800588a <_svfiprintf_r+0x92>
 80058e2:	9a03      	ldr	r2, [sp, #12]
 80058e4:	1d11      	adds	r1, r2, #4
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	9103      	str	r1, [sp, #12]
 80058ea:	2a00      	cmp	r2, #0
 80058ec:	db01      	blt.n	80058f2 <_svfiprintf_r+0xfa>
 80058ee:	9207      	str	r2, [sp, #28]
 80058f0:	e004      	b.n	80058fc <_svfiprintf_r+0x104>
 80058f2:	4252      	negs	r2, r2
 80058f4:	f043 0302 	orr.w	r3, r3, #2
 80058f8:	9207      	str	r2, [sp, #28]
 80058fa:	9304      	str	r3, [sp, #16]
 80058fc:	783b      	ldrb	r3, [r7, #0]
 80058fe:	2b2e      	cmp	r3, #46	; 0x2e
 8005900:	d10c      	bne.n	800591c <_svfiprintf_r+0x124>
 8005902:	787b      	ldrb	r3, [r7, #1]
 8005904:	2b2a      	cmp	r3, #42	; 0x2a
 8005906:	d133      	bne.n	8005970 <_svfiprintf_r+0x178>
 8005908:	9b03      	ldr	r3, [sp, #12]
 800590a:	1d1a      	adds	r2, r3, #4
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	9203      	str	r2, [sp, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	bfb8      	it	lt
 8005914:	f04f 33ff 	movlt.w	r3, #4294967295
 8005918:	3702      	adds	r7, #2
 800591a:	9305      	str	r3, [sp, #20]
 800591c:	4d2e      	ldr	r5, [pc, #184]	; (80059d8 <_svfiprintf_r+0x1e0>)
 800591e:	7839      	ldrb	r1, [r7, #0]
 8005920:	2203      	movs	r2, #3
 8005922:	4628      	mov	r0, r5
 8005924:	f7fa fc54 	bl	80001d0 <memchr>
 8005928:	b138      	cbz	r0, 800593a <_svfiprintf_r+0x142>
 800592a:	2340      	movs	r3, #64	; 0x40
 800592c:	1b40      	subs	r0, r0, r5
 800592e:	fa03 f000 	lsl.w	r0, r3, r0
 8005932:	9b04      	ldr	r3, [sp, #16]
 8005934:	4303      	orrs	r3, r0
 8005936:	3701      	adds	r7, #1
 8005938:	9304      	str	r3, [sp, #16]
 800593a:	7839      	ldrb	r1, [r7, #0]
 800593c:	4827      	ldr	r0, [pc, #156]	; (80059dc <_svfiprintf_r+0x1e4>)
 800593e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005942:	2206      	movs	r2, #6
 8005944:	1c7e      	adds	r6, r7, #1
 8005946:	f7fa fc43 	bl	80001d0 <memchr>
 800594a:	2800      	cmp	r0, #0
 800594c:	d038      	beq.n	80059c0 <_svfiprintf_r+0x1c8>
 800594e:	4b24      	ldr	r3, [pc, #144]	; (80059e0 <_svfiprintf_r+0x1e8>)
 8005950:	bb13      	cbnz	r3, 8005998 <_svfiprintf_r+0x1a0>
 8005952:	9b03      	ldr	r3, [sp, #12]
 8005954:	3307      	adds	r3, #7
 8005956:	f023 0307 	bic.w	r3, r3, #7
 800595a:	3308      	adds	r3, #8
 800595c:	9303      	str	r3, [sp, #12]
 800595e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005960:	444b      	add	r3, r9
 8005962:	9309      	str	r3, [sp, #36]	; 0x24
 8005964:	e76d      	b.n	8005842 <_svfiprintf_r+0x4a>
 8005966:	fb05 3202 	mla	r2, r5, r2, r3
 800596a:	2001      	movs	r0, #1
 800596c:	460f      	mov	r7, r1
 800596e:	e7a6      	b.n	80058be <_svfiprintf_r+0xc6>
 8005970:	2300      	movs	r3, #0
 8005972:	3701      	adds	r7, #1
 8005974:	9305      	str	r3, [sp, #20]
 8005976:	4619      	mov	r1, r3
 8005978:	250a      	movs	r5, #10
 800597a:	4638      	mov	r0, r7
 800597c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005980:	3a30      	subs	r2, #48	; 0x30
 8005982:	2a09      	cmp	r2, #9
 8005984:	d903      	bls.n	800598e <_svfiprintf_r+0x196>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0c8      	beq.n	800591c <_svfiprintf_r+0x124>
 800598a:	9105      	str	r1, [sp, #20]
 800598c:	e7c6      	b.n	800591c <_svfiprintf_r+0x124>
 800598e:	fb05 2101 	mla	r1, r5, r1, r2
 8005992:	2301      	movs	r3, #1
 8005994:	4607      	mov	r7, r0
 8005996:	e7f0      	b.n	800597a <_svfiprintf_r+0x182>
 8005998:	ab03      	add	r3, sp, #12
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	4622      	mov	r2, r4
 800599e:	4b11      	ldr	r3, [pc, #68]	; (80059e4 <_svfiprintf_r+0x1ec>)
 80059a0:	a904      	add	r1, sp, #16
 80059a2:	4640      	mov	r0, r8
 80059a4:	f3af 8000 	nop.w
 80059a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80059ac:	4681      	mov	r9, r0
 80059ae:	d1d6      	bne.n	800595e <_svfiprintf_r+0x166>
 80059b0:	89a3      	ldrh	r3, [r4, #12]
 80059b2:	065b      	lsls	r3, r3, #25
 80059b4:	f53f af35 	bmi.w	8005822 <_svfiprintf_r+0x2a>
 80059b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059ba:	b01d      	add	sp, #116	; 0x74
 80059bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c0:	ab03      	add	r3, sp, #12
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	4622      	mov	r2, r4
 80059c6:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <_svfiprintf_r+0x1ec>)
 80059c8:	a904      	add	r1, sp, #16
 80059ca:	4640      	mov	r0, r8
 80059cc:	f000 f9c2 	bl	8005d54 <_printf_i>
 80059d0:	e7ea      	b.n	80059a8 <_svfiprintf_r+0x1b0>
 80059d2:	bf00      	nop
 80059d4:	0800780c 	.word	0x0800780c
 80059d8:	08007812 	.word	0x08007812
 80059dc:	08007816 	.word	0x08007816
 80059e0:	00000000 	.word	0x00000000
 80059e4:	08005745 	.word	0x08005745

080059e8 <__sfputc_r>:
 80059e8:	6893      	ldr	r3, [r2, #8]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	b410      	push	{r4}
 80059f0:	6093      	str	r3, [r2, #8]
 80059f2:	da08      	bge.n	8005a06 <__sfputc_r+0x1e>
 80059f4:	6994      	ldr	r4, [r2, #24]
 80059f6:	42a3      	cmp	r3, r4
 80059f8:	db01      	blt.n	80059fe <__sfputc_r+0x16>
 80059fa:	290a      	cmp	r1, #10
 80059fc:	d103      	bne.n	8005a06 <__sfputc_r+0x1e>
 80059fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a02:	f000 bb0d 	b.w	8006020 <__swbuf_r>
 8005a06:	6813      	ldr	r3, [r2, #0]
 8005a08:	1c58      	adds	r0, r3, #1
 8005a0a:	6010      	str	r0, [r2, #0]
 8005a0c:	7019      	strb	r1, [r3, #0]
 8005a0e:	4608      	mov	r0, r1
 8005a10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <__sfputs_r>:
 8005a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a18:	4606      	mov	r6, r0
 8005a1a:	460f      	mov	r7, r1
 8005a1c:	4614      	mov	r4, r2
 8005a1e:	18d5      	adds	r5, r2, r3
 8005a20:	42ac      	cmp	r4, r5
 8005a22:	d101      	bne.n	8005a28 <__sfputs_r+0x12>
 8005a24:	2000      	movs	r0, #0
 8005a26:	e007      	b.n	8005a38 <__sfputs_r+0x22>
 8005a28:	463a      	mov	r2, r7
 8005a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f7ff ffda 	bl	80059e8 <__sfputc_r>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d1f3      	bne.n	8005a20 <__sfputs_r+0xa>
 8005a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a3c <_vfiprintf_r>:
 8005a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a40:	460c      	mov	r4, r1
 8005a42:	b09d      	sub	sp, #116	; 0x74
 8005a44:	4617      	mov	r7, r2
 8005a46:	461d      	mov	r5, r3
 8005a48:	4606      	mov	r6, r0
 8005a4a:	b118      	cbz	r0, 8005a54 <_vfiprintf_r+0x18>
 8005a4c:	6983      	ldr	r3, [r0, #24]
 8005a4e:	b90b      	cbnz	r3, 8005a54 <_vfiprintf_r+0x18>
 8005a50:	f7ff fd94 	bl	800557c <__sinit>
 8005a54:	4b7c      	ldr	r3, [pc, #496]	; (8005c48 <_vfiprintf_r+0x20c>)
 8005a56:	429c      	cmp	r4, r3
 8005a58:	d158      	bne.n	8005b0c <_vfiprintf_r+0xd0>
 8005a5a:	6874      	ldr	r4, [r6, #4]
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	0718      	lsls	r0, r3, #28
 8005a60:	d55e      	bpl.n	8005b20 <_vfiprintf_r+0xe4>
 8005a62:	6923      	ldr	r3, [r4, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d05b      	beq.n	8005b20 <_vfiprintf_r+0xe4>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a6c:	2320      	movs	r3, #32
 8005a6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a72:	2330      	movs	r3, #48	; 0x30
 8005a74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a78:	9503      	str	r5, [sp, #12]
 8005a7a:	f04f 0b01 	mov.w	fp, #1
 8005a7e:	46b8      	mov	r8, r7
 8005a80:	4645      	mov	r5, r8
 8005a82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a86:	b10b      	cbz	r3, 8005a8c <_vfiprintf_r+0x50>
 8005a88:	2b25      	cmp	r3, #37	; 0x25
 8005a8a:	d154      	bne.n	8005b36 <_vfiprintf_r+0xfa>
 8005a8c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005a90:	d00b      	beq.n	8005aaa <_vfiprintf_r+0x6e>
 8005a92:	4653      	mov	r3, sl
 8005a94:	463a      	mov	r2, r7
 8005a96:	4621      	mov	r1, r4
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f7ff ffbc 	bl	8005a16 <__sfputs_r>
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	f000 80c2 	beq.w	8005c28 <_vfiprintf_r+0x1ec>
 8005aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa6:	4453      	add	r3, sl
 8005aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aaa:	f898 3000 	ldrb.w	r3, [r8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 80ba 	beq.w	8005c28 <_vfiprintf_r+0x1ec>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005abe:	9304      	str	r3, [sp, #16]
 8005ac0:	9307      	str	r3, [sp, #28]
 8005ac2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ac6:	931a      	str	r3, [sp, #104]	; 0x68
 8005ac8:	46a8      	mov	r8, r5
 8005aca:	2205      	movs	r2, #5
 8005acc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005ad0:	485e      	ldr	r0, [pc, #376]	; (8005c4c <_vfiprintf_r+0x210>)
 8005ad2:	f7fa fb7d 	bl	80001d0 <memchr>
 8005ad6:	9b04      	ldr	r3, [sp, #16]
 8005ad8:	bb78      	cbnz	r0, 8005b3a <_vfiprintf_r+0xfe>
 8005ada:	06d9      	lsls	r1, r3, #27
 8005adc:	bf44      	itt	mi
 8005ade:	2220      	movmi	r2, #32
 8005ae0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ae4:	071a      	lsls	r2, r3, #28
 8005ae6:	bf44      	itt	mi
 8005ae8:	222b      	movmi	r2, #43	; 0x2b
 8005aea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005aee:	782a      	ldrb	r2, [r5, #0]
 8005af0:	2a2a      	cmp	r2, #42	; 0x2a
 8005af2:	d02a      	beq.n	8005b4a <_vfiprintf_r+0x10e>
 8005af4:	9a07      	ldr	r2, [sp, #28]
 8005af6:	46a8      	mov	r8, r5
 8005af8:	2000      	movs	r0, #0
 8005afa:	250a      	movs	r5, #10
 8005afc:	4641      	mov	r1, r8
 8005afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b02:	3b30      	subs	r3, #48	; 0x30
 8005b04:	2b09      	cmp	r3, #9
 8005b06:	d969      	bls.n	8005bdc <_vfiprintf_r+0x1a0>
 8005b08:	b360      	cbz	r0, 8005b64 <_vfiprintf_r+0x128>
 8005b0a:	e024      	b.n	8005b56 <_vfiprintf_r+0x11a>
 8005b0c:	4b50      	ldr	r3, [pc, #320]	; (8005c50 <_vfiprintf_r+0x214>)
 8005b0e:	429c      	cmp	r4, r3
 8005b10:	d101      	bne.n	8005b16 <_vfiprintf_r+0xda>
 8005b12:	68b4      	ldr	r4, [r6, #8]
 8005b14:	e7a2      	b.n	8005a5c <_vfiprintf_r+0x20>
 8005b16:	4b4f      	ldr	r3, [pc, #316]	; (8005c54 <_vfiprintf_r+0x218>)
 8005b18:	429c      	cmp	r4, r3
 8005b1a:	bf08      	it	eq
 8005b1c:	68f4      	ldreq	r4, [r6, #12]
 8005b1e:	e79d      	b.n	8005a5c <_vfiprintf_r+0x20>
 8005b20:	4621      	mov	r1, r4
 8005b22:	4630      	mov	r0, r6
 8005b24:	f000 fae0 	bl	80060e8 <__swsetup_r>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d09d      	beq.n	8005a68 <_vfiprintf_r+0x2c>
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	b01d      	add	sp, #116	; 0x74
 8005b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b36:	46a8      	mov	r8, r5
 8005b38:	e7a2      	b.n	8005a80 <_vfiprintf_r+0x44>
 8005b3a:	4a44      	ldr	r2, [pc, #272]	; (8005c4c <_vfiprintf_r+0x210>)
 8005b3c:	1a80      	subs	r0, r0, r2
 8005b3e:	fa0b f000 	lsl.w	r0, fp, r0
 8005b42:	4318      	orrs	r0, r3
 8005b44:	9004      	str	r0, [sp, #16]
 8005b46:	4645      	mov	r5, r8
 8005b48:	e7be      	b.n	8005ac8 <_vfiprintf_r+0x8c>
 8005b4a:	9a03      	ldr	r2, [sp, #12]
 8005b4c:	1d11      	adds	r1, r2, #4
 8005b4e:	6812      	ldr	r2, [r2, #0]
 8005b50:	9103      	str	r1, [sp, #12]
 8005b52:	2a00      	cmp	r2, #0
 8005b54:	db01      	blt.n	8005b5a <_vfiprintf_r+0x11e>
 8005b56:	9207      	str	r2, [sp, #28]
 8005b58:	e004      	b.n	8005b64 <_vfiprintf_r+0x128>
 8005b5a:	4252      	negs	r2, r2
 8005b5c:	f043 0302 	orr.w	r3, r3, #2
 8005b60:	9207      	str	r2, [sp, #28]
 8005b62:	9304      	str	r3, [sp, #16]
 8005b64:	f898 3000 	ldrb.w	r3, [r8]
 8005b68:	2b2e      	cmp	r3, #46	; 0x2e
 8005b6a:	d10e      	bne.n	8005b8a <_vfiprintf_r+0x14e>
 8005b6c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005b70:	2b2a      	cmp	r3, #42	; 0x2a
 8005b72:	d138      	bne.n	8005be6 <_vfiprintf_r+0x1aa>
 8005b74:	9b03      	ldr	r3, [sp, #12]
 8005b76:	1d1a      	adds	r2, r3, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	9203      	str	r2, [sp, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	bfb8      	it	lt
 8005b80:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b84:	f108 0802 	add.w	r8, r8, #2
 8005b88:	9305      	str	r3, [sp, #20]
 8005b8a:	4d33      	ldr	r5, [pc, #204]	; (8005c58 <_vfiprintf_r+0x21c>)
 8005b8c:	f898 1000 	ldrb.w	r1, [r8]
 8005b90:	2203      	movs	r2, #3
 8005b92:	4628      	mov	r0, r5
 8005b94:	f7fa fb1c 	bl	80001d0 <memchr>
 8005b98:	b140      	cbz	r0, 8005bac <_vfiprintf_r+0x170>
 8005b9a:	2340      	movs	r3, #64	; 0x40
 8005b9c:	1b40      	subs	r0, r0, r5
 8005b9e:	fa03 f000 	lsl.w	r0, r3, r0
 8005ba2:	9b04      	ldr	r3, [sp, #16]
 8005ba4:	4303      	orrs	r3, r0
 8005ba6:	f108 0801 	add.w	r8, r8, #1
 8005baa:	9304      	str	r3, [sp, #16]
 8005bac:	f898 1000 	ldrb.w	r1, [r8]
 8005bb0:	482a      	ldr	r0, [pc, #168]	; (8005c5c <_vfiprintf_r+0x220>)
 8005bb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bb6:	2206      	movs	r2, #6
 8005bb8:	f108 0701 	add.w	r7, r8, #1
 8005bbc:	f7fa fb08 	bl	80001d0 <memchr>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d037      	beq.n	8005c34 <_vfiprintf_r+0x1f8>
 8005bc4:	4b26      	ldr	r3, [pc, #152]	; (8005c60 <_vfiprintf_r+0x224>)
 8005bc6:	bb1b      	cbnz	r3, 8005c10 <_vfiprintf_r+0x1d4>
 8005bc8:	9b03      	ldr	r3, [sp, #12]
 8005bca:	3307      	adds	r3, #7
 8005bcc:	f023 0307 	bic.w	r3, r3, #7
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	9303      	str	r3, [sp, #12]
 8005bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd6:	444b      	add	r3, r9
 8005bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bda:	e750      	b.n	8005a7e <_vfiprintf_r+0x42>
 8005bdc:	fb05 3202 	mla	r2, r5, r2, r3
 8005be0:	2001      	movs	r0, #1
 8005be2:	4688      	mov	r8, r1
 8005be4:	e78a      	b.n	8005afc <_vfiprintf_r+0xc0>
 8005be6:	2300      	movs	r3, #0
 8005be8:	f108 0801 	add.w	r8, r8, #1
 8005bec:	9305      	str	r3, [sp, #20]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	250a      	movs	r5, #10
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bf8:	3a30      	subs	r2, #48	; 0x30
 8005bfa:	2a09      	cmp	r2, #9
 8005bfc:	d903      	bls.n	8005c06 <_vfiprintf_r+0x1ca>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0c3      	beq.n	8005b8a <_vfiprintf_r+0x14e>
 8005c02:	9105      	str	r1, [sp, #20]
 8005c04:	e7c1      	b.n	8005b8a <_vfiprintf_r+0x14e>
 8005c06:	fb05 2101 	mla	r1, r5, r1, r2
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4680      	mov	r8, r0
 8005c0e:	e7f0      	b.n	8005bf2 <_vfiprintf_r+0x1b6>
 8005c10:	ab03      	add	r3, sp, #12
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	4622      	mov	r2, r4
 8005c16:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <_vfiprintf_r+0x228>)
 8005c18:	a904      	add	r1, sp, #16
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	f3af 8000 	nop.w
 8005c20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c24:	4681      	mov	r9, r0
 8005c26:	d1d5      	bne.n	8005bd4 <_vfiprintf_r+0x198>
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	065b      	lsls	r3, r3, #25
 8005c2c:	f53f af7e 	bmi.w	8005b2c <_vfiprintf_r+0xf0>
 8005c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c32:	e77d      	b.n	8005b30 <_vfiprintf_r+0xf4>
 8005c34:	ab03      	add	r3, sp, #12
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	4622      	mov	r2, r4
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <_vfiprintf_r+0x228>)
 8005c3c:	a904      	add	r1, sp, #16
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f000 f888 	bl	8005d54 <_printf_i>
 8005c44:	e7ec      	b.n	8005c20 <_vfiprintf_r+0x1e4>
 8005c46:	bf00      	nop
 8005c48:	080077cc 	.word	0x080077cc
 8005c4c:	0800780c 	.word	0x0800780c
 8005c50:	080077ec 	.word	0x080077ec
 8005c54:	080077ac 	.word	0x080077ac
 8005c58:	08007812 	.word	0x08007812
 8005c5c:	08007816 	.word	0x08007816
 8005c60:	00000000 	.word	0x00000000
 8005c64:	08005a17 	.word	0x08005a17

08005c68 <_printf_common>:
 8005c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c6c:	4691      	mov	r9, r2
 8005c6e:	461f      	mov	r7, r3
 8005c70:	688a      	ldr	r2, [r1, #8]
 8005c72:	690b      	ldr	r3, [r1, #16]
 8005c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	bfb8      	it	lt
 8005c7c:	4613      	movlt	r3, r2
 8005c7e:	f8c9 3000 	str.w	r3, [r9]
 8005c82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c86:	4606      	mov	r6, r0
 8005c88:	460c      	mov	r4, r1
 8005c8a:	b112      	cbz	r2, 8005c92 <_printf_common+0x2a>
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	f8c9 3000 	str.w	r3, [r9]
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	0699      	lsls	r1, r3, #26
 8005c96:	bf42      	ittt	mi
 8005c98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c9c:	3302      	addmi	r3, #2
 8005c9e:	f8c9 3000 	strmi.w	r3, [r9]
 8005ca2:	6825      	ldr	r5, [r4, #0]
 8005ca4:	f015 0506 	ands.w	r5, r5, #6
 8005ca8:	d107      	bne.n	8005cba <_printf_common+0x52>
 8005caa:	f104 0a19 	add.w	sl, r4, #25
 8005cae:	68e3      	ldr	r3, [r4, #12]
 8005cb0:	f8d9 2000 	ldr.w	r2, [r9]
 8005cb4:	1a9b      	subs	r3, r3, r2
 8005cb6:	42ab      	cmp	r3, r5
 8005cb8:	dc28      	bgt.n	8005d0c <_printf_common+0xa4>
 8005cba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005cbe:	6822      	ldr	r2, [r4, #0]
 8005cc0:	3300      	adds	r3, #0
 8005cc2:	bf18      	it	ne
 8005cc4:	2301      	movne	r3, #1
 8005cc6:	0692      	lsls	r2, r2, #26
 8005cc8:	d42d      	bmi.n	8005d26 <_printf_common+0xbe>
 8005cca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cce:	4639      	mov	r1, r7
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	47c0      	blx	r8
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d020      	beq.n	8005d1a <_printf_common+0xb2>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	68e5      	ldr	r5, [r4, #12]
 8005cdc:	f8d9 2000 	ldr.w	r2, [r9]
 8005ce0:	f003 0306 	and.w	r3, r3, #6
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	bf08      	it	eq
 8005ce8:	1aad      	subeq	r5, r5, r2
 8005cea:	68a3      	ldr	r3, [r4, #8]
 8005cec:	6922      	ldr	r2, [r4, #16]
 8005cee:	bf0c      	ite	eq
 8005cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cf4:	2500      	movne	r5, #0
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	bfc4      	itt	gt
 8005cfa:	1a9b      	subgt	r3, r3, r2
 8005cfc:	18ed      	addgt	r5, r5, r3
 8005cfe:	f04f 0900 	mov.w	r9, #0
 8005d02:	341a      	adds	r4, #26
 8005d04:	454d      	cmp	r5, r9
 8005d06:	d11a      	bne.n	8005d3e <_printf_common+0xd6>
 8005d08:	2000      	movs	r0, #0
 8005d0a:	e008      	b.n	8005d1e <_printf_common+0xb6>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	4652      	mov	r2, sl
 8005d10:	4639      	mov	r1, r7
 8005d12:	4630      	mov	r0, r6
 8005d14:	47c0      	blx	r8
 8005d16:	3001      	adds	r0, #1
 8005d18:	d103      	bne.n	8005d22 <_printf_common+0xba>
 8005d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d22:	3501      	adds	r5, #1
 8005d24:	e7c3      	b.n	8005cae <_printf_common+0x46>
 8005d26:	18e1      	adds	r1, r4, r3
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	2030      	movs	r0, #48	; 0x30
 8005d2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d30:	4422      	add	r2, r4
 8005d32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d3a:	3302      	adds	r3, #2
 8005d3c:	e7c5      	b.n	8005cca <_printf_common+0x62>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4622      	mov	r2, r4
 8005d42:	4639      	mov	r1, r7
 8005d44:	4630      	mov	r0, r6
 8005d46:	47c0      	blx	r8
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d0e6      	beq.n	8005d1a <_printf_common+0xb2>
 8005d4c:	f109 0901 	add.w	r9, r9, #1
 8005d50:	e7d8      	b.n	8005d04 <_printf_common+0x9c>
	...

08005d54 <_printf_i>:
 8005d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	7e09      	ldrb	r1, [r1, #24]
 8005d60:	b085      	sub	sp, #20
 8005d62:	296e      	cmp	r1, #110	; 0x6e
 8005d64:	4617      	mov	r7, r2
 8005d66:	4606      	mov	r6, r0
 8005d68:	4698      	mov	r8, r3
 8005d6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d6c:	f000 80b3 	beq.w	8005ed6 <_printf_i+0x182>
 8005d70:	d822      	bhi.n	8005db8 <_printf_i+0x64>
 8005d72:	2963      	cmp	r1, #99	; 0x63
 8005d74:	d036      	beq.n	8005de4 <_printf_i+0x90>
 8005d76:	d80a      	bhi.n	8005d8e <_printf_i+0x3a>
 8005d78:	2900      	cmp	r1, #0
 8005d7a:	f000 80b9 	beq.w	8005ef0 <_printf_i+0x19c>
 8005d7e:	2958      	cmp	r1, #88	; 0x58
 8005d80:	f000 8083 	beq.w	8005e8a <_printf_i+0x136>
 8005d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005d8c:	e032      	b.n	8005df4 <_printf_i+0xa0>
 8005d8e:	2964      	cmp	r1, #100	; 0x64
 8005d90:	d001      	beq.n	8005d96 <_printf_i+0x42>
 8005d92:	2969      	cmp	r1, #105	; 0x69
 8005d94:	d1f6      	bne.n	8005d84 <_printf_i+0x30>
 8005d96:	6820      	ldr	r0, [r4, #0]
 8005d98:	6813      	ldr	r3, [r2, #0]
 8005d9a:	0605      	lsls	r5, r0, #24
 8005d9c:	f103 0104 	add.w	r1, r3, #4
 8005da0:	d52a      	bpl.n	8005df8 <_printf_i+0xa4>
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6011      	str	r1, [r2, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	da03      	bge.n	8005db2 <_printf_i+0x5e>
 8005daa:	222d      	movs	r2, #45	; 0x2d
 8005dac:	425b      	negs	r3, r3
 8005dae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005db2:	486f      	ldr	r0, [pc, #444]	; (8005f70 <_printf_i+0x21c>)
 8005db4:	220a      	movs	r2, #10
 8005db6:	e039      	b.n	8005e2c <_printf_i+0xd8>
 8005db8:	2973      	cmp	r1, #115	; 0x73
 8005dba:	f000 809d 	beq.w	8005ef8 <_printf_i+0x1a4>
 8005dbe:	d808      	bhi.n	8005dd2 <_printf_i+0x7e>
 8005dc0:	296f      	cmp	r1, #111	; 0x6f
 8005dc2:	d020      	beq.n	8005e06 <_printf_i+0xb2>
 8005dc4:	2970      	cmp	r1, #112	; 0x70
 8005dc6:	d1dd      	bne.n	8005d84 <_printf_i+0x30>
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	f043 0320 	orr.w	r3, r3, #32
 8005dce:	6023      	str	r3, [r4, #0]
 8005dd0:	e003      	b.n	8005dda <_printf_i+0x86>
 8005dd2:	2975      	cmp	r1, #117	; 0x75
 8005dd4:	d017      	beq.n	8005e06 <_printf_i+0xb2>
 8005dd6:	2978      	cmp	r1, #120	; 0x78
 8005dd8:	d1d4      	bne.n	8005d84 <_printf_i+0x30>
 8005dda:	2378      	movs	r3, #120	; 0x78
 8005ddc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005de0:	4864      	ldr	r0, [pc, #400]	; (8005f74 <_printf_i+0x220>)
 8005de2:	e055      	b.n	8005e90 <_printf_i+0x13c>
 8005de4:	6813      	ldr	r3, [r2, #0]
 8005de6:	1d19      	adds	r1, r3, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6011      	str	r1, [r2, #0]
 8005dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005df0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005df4:	2301      	movs	r3, #1
 8005df6:	e08c      	b.n	8005f12 <_printf_i+0x1be>
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6011      	str	r1, [r2, #0]
 8005dfc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e00:	bf18      	it	ne
 8005e02:	b21b      	sxthne	r3, r3
 8005e04:	e7cf      	b.n	8005da6 <_printf_i+0x52>
 8005e06:	6813      	ldr	r3, [r2, #0]
 8005e08:	6825      	ldr	r5, [r4, #0]
 8005e0a:	1d18      	adds	r0, r3, #4
 8005e0c:	6010      	str	r0, [r2, #0]
 8005e0e:	0628      	lsls	r0, r5, #24
 8005e10:	d501      	bpl.n	8005e16 <_printf_i+0xc2>
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	e002      	b.n	8005e1c <_printf_i+0xc8>
 8005e16:	0668      	lsls	r0, r5, #25
 8005e18:	d5fb      	bpl.n	8005e12 <_printf_i+0xbe>
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	4854      	ldr	r0, [pc, #336]	; (8005f70 <_printf_i+0x21c>)
 8005e1e:	296f      	cmp	r1, #111	; 0x6f
 8005e20:	bf14      	ite	ne
 8005e22:	220a      	movne	r2, #10
 8005e24:	2208      	moveq	r2, #8
 8005e26:	2100      	movs	r1, #0
 8005e28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e2c:	6865      	ldr	r5, [r4, #4]
 8005e2e:	60a5      	str	r5, [r4, #8]
 8005e30:	2d00      	cmp	r5, #0
 8005e32:	f2c0 8095 	blt.w	8005f60 <_printf_i+0x20c>
 8005e36:	6821      	ldr	r1, [r4, #0]
 8005e38:	f021 0104 	bic.w	r1, r1, #4
 8005e3c:	6021      	str	r1, [r4, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d13d      	bne.n	8005ebe <_printf_i+0x16a>
 8005e42:	2d00      	cmp	r5, #0
 8005e44:	f040 808e 	bne.w	8005f64 <_printf_i+0x210>
 8005e48:	4665      	mov	r5, ip
 8005e4a:	2a08      	cmp	r2, #8
 8005e4c:	d10b      	bne.n	8005e66 <_printf_i+0x112>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	07db      	lsls	r3, r3, #31
 8005e52:	d508      	bpl.n	8005e66 <_printf_i+0x112>
 8005e54:	6923      	ldr	r3, [r4, #16]
 8005e56:	6862      	ldr	r2, [r4, #4]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	bfde      	ittt	le
 8005e5c:	2330      	movle	r3, #48	; 0x30
 8005e5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e66:	ebac 0305 	sub.w	r3, ip, r5
 8005e6a:	6123      	str	r3, [r4, #16]
 8005e6c:	f8cd 8000 	str.w	r8, [sp]
 8005e70:	463b      	mov	r3, r7
 8005e72:	aa03      	add	r2, sp, #12
 8005e74:	4621      	mov	r1, r4
 8005e76:	4630      	mov	r0, r6
 8005e78:	f7ff fef6 	bl	8005c68 <_printf_common>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d14d      	bne.n	8005f1c <_printf_i+0x1c8>
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	b005      	add	sp, #20
 8005e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e8a:	4839      	ldr	r0, [pc, #228]	; (8005f70 <_printf_i+0x21c>)
 8005e8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005e90:	6813      	ldr	r3, [r2, #0]
 8005e92:	6821      	ldr	r1, [r4, #0]
 8005e94:	1d1d      	adds	r5, r3, #4
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6015      	str	r5, [r2, #0]
 8005e9a:	060a      	lsls	r2, r1, #24
 8005e9c:	d50b      	bpl.n	8005eb6 <_printf_i+0x162>
 8005e9e:	07ca      	lsls	r2, r1, #31
 8005ea0:	bf44      	itt	mi
 8005ea2:	f041 0120 	orrmi.w	r1, r1, #32
 8005ea6:	6021      	strmi	r1, [r4, #0]
 8005ea8:	b91b      	cbnz	r3, 8005eb2 <_printf_i+0x15e>
 8005eaa:	6822      	ldr	r2, [r4, #0]
 8005eac:	f022 0220 	bic.w	r2, r2, #32
 8005eb0:	6022      	str	r2, [r4, #0]
 8005eb2:	2210      	movs	r2, #16
 8005eb4:	e7b7      	b.n	8005e26 <_printf_i+0xd2>
 8005eb6:	064d      	lsls	r5, r1, #25
 8005eb8:	bf48      	it	mi
 8005eba:	b29b      	uxthmi	r3, r3
 8005ebc:	e7ef      	b.n	8005e9e <_printf_i+0x14a>
 8005ebe:	4665      	mov	r5, ip
 8005ec0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ec4:	fb02 3311 	mls	r3, r2, r1, r3
 8005ec8:	5cc3      	ldrb	r3, [r0, r3]
 8005eca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ece:	460b      	mov	r3, r1
 8005ed0:	2900      	cmp	r1, #0
 8005ed2:	d1f5      	bne.n	8005ec0 <_printf_i+0x16c>
 8005ed4:	e7b9      	b.n	8005e4a <_printf_i+0xf6>
 8005ed6:	6813      	ldr	r3, [r2, #0]
 8005ed8:	6825      	ldr	r5, [r4, #0]
 8005eda:	6961      	ldr	r1, [r4, #20]
 8005edc:	1d18      	adds	r0, r3, #4
 8005ede:	6010      	str	r0, [r2, #0]
 8005ee0:	0628      	lsls	r0, r5, #24
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	d501      	bpl.n	8005eea <_printf_i+0x196>
 8005ee6:	6019      	str	r1, [r3, #0]
 8005ee8:	e002      	b.n	8005ef0 <_printf_i+0x19c>
 8005eea:	066a      	lsls	r2, r5, #25
 8005eec:	d5fb      	bpl.n	8005ee6 <_printf_i+0x192>
 8005eee:	8019      	strh	r1, [r3, #0]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	6123      	str	r3, [r4, #16]
 8005ef4:	4665      	mov	r5, ip
 8005ef6:	e7b9      	b.n	8005e6c <_printf_i+0x118>
 8005ef8:	6813      	ldr	r3, [r2, #0]
 8005efa:	1d19      	adds	r1, r3, #4
 8005efc:	6011      	str	r1, [r2, #0]
 8005efe:	681d      	ldr	r5, [r3, #0]
 8005f00:	6862      	ldr	r2, [r4, #4]
 8005f02:	2100      	movs	r1, #0
 8005f04:	4628      	mov	r0, r5
 8005f06:	f7fa f963 	bl	80001d0 <memchr>
 8005f0a:	b108      	cbz	r0, 8005f10 <_printf_i+0x1bc>
 8005f0c:	1b40      	subs	r0, r0, r5
 8005f0e:	6060      	str	r0, [r4, #4]
 8005f10:	6863      	ldr	r3, [r4, #4]
 8005f12:	6123      	str	r3, [r4, #16]
 8005f14:	2300      	movs	r3, #0
 8005f16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f1a:	e7a7      	b.n	8005e6c <_printf_i+0x118>
 8005f1c:	6923      	ldr	r3, [r4, #16]
 8005f1e:	462a      	mov	r2, r5
 8005f20:	4639      	mov	r1, r7
 8005f22:	4630      	mov	r0, r6
 8005f24:	47c0      	blx	r8
 8005f26:	3001      	adds	r0, #1
 8005f28:	d0aa      	beq.n	8005e80 <_printf_i+0x12c>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	079b      	lsls	r3, r3, #30
 8005f2e:	d413      	bmi.n	8005f58 <_printf_i+0x204>
 8005f30:	68e0      	ldr	r0, [r4, #12]
 8005f32:	9b03      	ldr	r3, [sp, #12]
 8005f34:	4298      	cmp	r0, r3
 8005f36:	bfb8      	it	lt
 8005f38:	4618      	movlt	r0, r3
 8005f3a:	e7a3      	b.n	8005e84 <_printf_i+0x130>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	464a      	mov	r2, r9
 8005f40:	4639      	mov	r1, r7
 8005f42:	4630      	mov	r0, r6
 8005f44:	47c0      	blx	r8
 8005f46:	3001      	adds	r0, #1
 8005f48:	d09a      	beq.n	8005e80 <_printf_i+0x12c>
 8005f4a:	3501      	adds	r5, #1
 8005f4c:	68e3      	ldr	r3, [r4, #12]
 8005f4e:	9a03      	ldr	r2, [sp, #12]
 8005f50:	1a9b      	subs	r3, r3, r2
 8005f52:	42ab      	cmp	r3, r5
 8005f54:	dcf2      	bgt.n	8005f3c <_printf_i+0x1e8>
 8005f56:	e7eb      	b.n	8005f30 <_printf_i+0x1dc>
 8005f58:	2500      	movs	r5, #0
 8005f5a:	f104 0919 	add.w	r9, r4, #25
 8005f5e:	e7f5      	b.n	8005f4c <_printf_i+0x1f8>
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1ac      	bne.n	8005ebe <_printf_i+0x16a>
 8005f64:	7803      	ldrb	r3, [r0, #0]
 8005f66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f6e:	e76c      	b.n	8005e4a <_printf_i+0xf6>
 8005f70:	0800781d 	.word	0x0800781d
 8005f74:	0800782e 	.word	0x0800782e

08005f78 <_sbrk_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4c06      	ldr	r4, [pc, #24]	; (8005f94 <_sbrk_r+0x1c>)
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4605      	mov	r5, r0
 8005f80:	4608      	mov	r0, r1
 8005f82:	6023      	str	r3, [r4, #0]
 8005f84:	f001 fbaa 	bl	80076dc <_sbrk>
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	d102      	bne.n	8005f92 <_sbrk_r+0x1a>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	b103      	cbz	r3, 8005f92 <_sbrk_r+0x1a>
 8005f90:	602b      	str	r3, [r5, #0]
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	20000248 	.word	0x20000248

08005f98 <__sread>:
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa0:	f000 fae0 	bl	8006564 <_read_r>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	bfab      	itete	ge
 8005fa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005faa:	89a3      	ldrhlt	r3, [r4, #12]
 8005fac:	181b      	addge	r3, r3, r0
 8005fae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fb2:	bfac      	ite	ge
 8005fb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fb6:	81a3      	strhlt	r3, [r4, #12]
 8005fb8:	bd10      	pop	{r4, pc}

08005fba <__swrite>:
 8005fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fbe:	461f      	mov	r7, r3
 8005fc0:	898b      	ldrh	r3, [r1, #12]
 8005fc2:	05db      	lsls	r3, r3, #23
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	4616      	mov	r6, r2
 8005fca:	d505      	bpl.n	8005fd8 <__swrite+0x1e>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd4:	f000 f9b6 	bl	8006344 <_lseek_r>
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fe2:	81a3      	strh	r3, [r4, #12]
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	4628      	mov	r0, r5
 8005fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fee:	f000 b869 	b.w	80060c4 <_write_r>

08005ff2 <__sseek>:
 8005ff2:	b510      	push	{r4, lr}
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ffa:	f000 f9a3 	bl	8006344 <_lseek_r>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	bf15      	itete	ne
 8006004:	6560      	strne	r0, [r4, #84]	; 0x54
 8006006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800600a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800600e:	81a3      	strheq	r3, [r4, #12]
 8006010:	bf18      	it	ne
 8006012:	81a3      	strhne	r3, [r4, #12]
 8006014:	bd10      	pop	{r4, pc}

08006016 <__sclose>:
 8006016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800601a:	f000 b8d3 	b.w	80061c4 <_close_r>
	...

08006020 <__swbuf_r>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	460e      	mov	r6, r1
 8006024:	4614      	mov	r4, r2
 8006026:	4605      	mov	r5, r0
 8006028:	b118      	cbz	r0, 8006032 <__swbuf_r+0x12>
 800602a:	6983      	ldr	r3, [r0, #24]
 800602c:	b90b      	cbnz	r3, 8006032 <__swbuf_r+0x12>
 800602e:	f7ff faa5 	bl	800557c <__sinit>
 8006032:	4b21      	ldr	r3, [pc, #132]	; (80060b8 <__swbuf_r+0x98>)
 8006034:	429c      	cmp	r4, r3
 8006036:	d12a      	bne.n	800608e <__swbuf_r+0x6e>
 8006038:	686c      	ldr	r4, [r5, #4]
 800603a:	69a3      	ldr	r3, [r4, #24]
 800603c:	60a3      	str	r3, [r4, #8]
 800603e:	89a3      	ldrh	r3, [r4, #12]
 8006040:	071a      	lsls	r2, r3, #28
 8006042:	d52e      	bpl.n	80060a2 <__swbuf_r+0x82>
 8006044:	6923      	ldr	r3, [r4, #16]
 8006046:	b363      	cbz	r3, 80060a2 <__swbuf_r+0x82>
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	6820      	ldr	r0, [r4, #0]
 800604c:	1ac0      	subs	r0, r0, r3
 800604e:	6963      	ldr	r3, [r4, #20]
 8006050:	b2f6      	uxtb	r6, r6
 8006052:	4283      	cmp	r3, r0
 8006054:	4637      	mov	r7, r6
 8006056:	dc04      	bgt.n	8006062 <__swbuf_r+0x42>
 8006058:	4621      	mov	r1, r4
 800605a:	4628      	mov	r0, r5
 800605c:	f000 f948 	bl	80062f0 <_fflush_r>
 8006060:	bb28      	cbnz	r0, 80060ae <__swbuf_r+0x8e>
 8006062:	68a3      	ldr	r3, [r4, #8]
 8006064:	3b01      	subs	r3, #1
 8006066:	60a3      	str	r3, [r4, #8]
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	6022      	str	r2, [r4, #0]
 800606e:	701e      	strb	r6, [r3, #0]
 8006070:	6963      	ldr	r3, [r4, #20]
 8006072:	3001      	adds	r0, #1
 8006074:	4283      	cmp	r3, r0
 8006076:	d004      	beq.n	8006082 <__swbuf_r+0x62>
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	07db      	lsls	r3, r3, #31
 800607c:	d519      	bpl.n	80060b2 <__swbuf_r+0x92>
 800607e:	2e0a      	cmp	r6, #10
 8006080:	d117      	bne.n	80060b2 <__swbuf_r+0x92>
 8006082:	4621      	mov	r1, r4
 8006084:	4628      	mov	r0, r5
 8006086:	f000 f933 	bl	80062f0 <_fflush_r>
 800608a:	b190      	cbz	r0, 80060b2 <__swbuf_r+0x92>
 800608c:	e00f      	b.n	80060ae <__swbuf_r+0x8e>
 800608e:	4b0b      	ldr	r3, [pc, #44]	; (80060bc <__swbuf_r+0x9c>)
 8006090:	429c      	cmp	r4, r3
 8006092:	d101      	bne.n	8006098 <__swbuf_r+0x78>
 8006094:	68ac      	ldr	r4, [r5, #8]
 8006096:	e7d0      	b.n	800603a <__swbuf_r+0x1a>
 8006098:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <__swbuf_r+0xa0>)
 800609a:	429c      	cmp	r4, r3
 800609c:	bf08      	it	eq
 800609e:	68ec      	ldreq	r4, [r5, #12]
 80060a0:	e7cb      	b.n	800603a <__swbuf_r+0x1a>
 80060a2:	4621      	mov	r1, r4
 80060a4:	4628      	mov	r0, r5
 80060a6:	f000 f81f 	bl	80060e8 <__swsetup_r>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d0cc      	beq.n	8006048 <__swbuf_r+0x28>
 80060ae:	f04f 37ff 	mov.w	r7, #4294967295
 80060b2:	4638      	mov	r0, r7
 80060b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060b6:	bf00      	nop
 80060b8:	080077cc 	.word	0x080077cc
 80060bc:	080077ec 	.word	0x080077ec
 80060c0:	080077ac 	.word	0x080077ac

080060c4 <_write_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4c07      	ldr	r4, [pc, #28]	; (80060e4 <_write_r+0x20>)
 80060c8:	4605      	mov	r5, r0
 80060ca:	4608      	mov	r0, r1
 80060cc:	4611      	mov	r1, r2
 80060ce:	2200      	movs	r2, #0
 80060d0:	6022      	str	r2, [r4, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f001 fb10 	bl	80076f8 <_write>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_write_r+0x1e>
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_write_r+0x1e>
 80060e0:	602b      	str	r3, [r5, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	20000248 	.word	0x20000248

080060e8 <__swsetup_r>:
 80060e8:	4b32      	ldr	r3, [pc, #200]	; (80061b4 <__swsetup_r+0xcc>)
 80060ea:	b570      	push	{r4, r5, r6, lr}
 80060ec:	681d      	ldr	r5, [r3, #0]
 80060ee:	4606      	mov	r6, r0
 80060f0:	460c      	mov	r4, r1
 80060f2:	b125      	cbz	r5, 80060fe <__swsetup_r+0x16>
 80060f4:	69ab      	ldr	r3, [r5, #24]
 80060f6:	b913      	cbnz	r3, 80060fe <__swsetup_r+0x16>
 80060f8:	4628      	mov	r0, r5
 80060fa:	f7ff fa3f 	bl	800557c <__sinit>
 80060fe:	4b2e      	ldr	r3, [pc, #184]	; (80061b8 <__swsetup_r+0xd0>)
 8006100:	429c      	cmp	r4, r3
 8006102:	d10f      	bne.n	8006124 <__swsetup_r+0x3c>
 8006104:	686c      	ldr	r4, [r5, #4]
 8006106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800610a:	b29a      	uxth	r2, r3
 800610c:	0715      	lsls	r5, r2, #28
 800610e:	d42c      	bmi.n	800616a <__swsetup_r+0x82>
 8006110:	06d0      	lsls	r0, r2, #27
 8006112:	d411      	bmi.n	8006138 <__swsetup_r+0x50>
 8006114:	2209      	movs	r2, #9
 8006116:	6032      	str	r2, [r6, #0]
 8006118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800611c:	81a3      	strh	r3, [r4, #12]
 800611e:	f04f 30ff 	mov.w	r0, #4294967295
 8006122:	e03e      	b.n	80061a2 <__swsetup_r+0xba>
 8006124:	4b25      	ldr	r3, [pc, #148]	; (80061bc <__swsetup_r+0xd4>)
 8006126:	429c      	cmp	r4, r3
 8006128:	d101      	bne.n	800612e <__swsetup_r+0x46>
 800612a:	68ac      	ldr	r4, [r5, #8]
 800612c:	e7eb      	b.n	8006106 <__swsetup_r+0x1e>
 800612e:	4b24      	ldr	r3, [pc, #144]	; (80061c0 <__swsetup_r+0xd8>)
 8006130:	429c      	cmp	r4, r3
 8006132:	bf08      	it	eq
 8006134:	68ec      	ldreq	r4, [r5, #12]
 8006136:	e7e6      	b.n	8006106 <__swsetup_r+0x1e>
 8006138:	0751      	lsls	r1, r2, #29
 800613a:	d512      	bpl.n	8006162 <__swsetup_r+0x7a>
 800613c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800613e:	b141      	cbz	r1, 8006152 <__swsetup_r+0x6a>
 8006140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006144:	4299      	cmp	r1, r3
 8006146:	d002      	beq.n	800614e <__swsetup_r+0x66>
 8006148:	4630      	mov	r0, r6
 800614a:	f000 f997 	bl	800647c <_free_r>
 800614e:	2300      	movs	r3, #0
 8006150:	6363      	str	r3, [r4, #52]	; 0x34
 8006152:	89a3      	ldrh	r3, [r4, #12]
 8006154:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006158:	81a3      	strh	r3, [r4, #12]
 800615a:	2300      	movs	r3, #0
 800615c:	6063      	str	r3, [r4, #4]
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	6023      	str	r3, [r4, #0]
 8006162:	89a3      	ldrh	r3, [r4, #12]
 8006164:	f043 0308 	orr.w	r3, r3, #8
 8006168:	81a3      	strh	r3, [r4, #12]
 800616a:	6923      	ldr	r3, [r4, #16]
 800616c:	b94b      	cbnz	r3, 8006182 <__swsetup_r+0x9a>
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006178:	d003      	beq.n	8006182 <__swsetup_r+0x9a>
 800617a:	4621      	mov	r1, r4
 800617c:	4630      	mov	r0, r6
 800617e:	f000 f917 	bl	80063b0 <__smakebuf_r>
 8006182:	89a2      	ldrh	r2, [r4, #12]
 8006184:	f012 0301 	ands.w	r3, r2, #1
 8006188:	d00c      	beq.n	80061a4 <__swsetup_r+0xbc>
 800618a:	2300      	movs	r3, #0
 800618c:	60a3      	str	r3, [r4, #8]
 800618e:	6963      	ldr	r3, [r4, #20]
 8006190:	425b      	negs	r3, r3
 8006192:	61a3      	str	r3, [r4, #24]
 8006194:	6923      	ldr	r3, [r4, #16]
 8006196:	b953      	cbnz	r3, 80061ae <__swsetup_r+0xc6>
 8006198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800619c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80061a0:	d1ba      	bne.n	8006118 <__swsetup_r+0x30>
 80061a2:	bd70      	pop	{r4, r5, r6, pc}
 80061a4:	0792      	lsls	r2, r2, #30
 80061a6:	bf58      	it	pl
 80061a8:	6963      	ldrpl	r3, [r4, #20]
 80061aa:	60a3      	str	r3, [r4, #8]
 80061ac:	e7f2      	b.n	8006194 <__swsetup_r+0xac>
 80061ae:	2000      	movs	r0, #0
 80061b0:	e7f7      	b.n	80061a2 <__swsetup_r+0xba>
 80061b2:	bf00      	nop
 80061b4:	2000000c 	.word	0x2000000c
 80061b8:	080077cc 	.word	0x080077cc
 80061bc:	080077ec 	.word	0x080077ec
 80061c0:	080077ac 	.word	0x080077ac

080061c4 <_close_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4c06      	ldr	r4, [pc, #24]	; (80061e0 <_close_r+0x1c>)
 80061c8:	2300      	movs	r3, #0
 80061ca:	4605      	mov	r5, r0
 80061cc:	4608      	mov	r0, r1
 80061ce:	6023      	str	r3, [r4, #0]
 80061d0:	f001 fa5c 	bl	800768c <_close>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d102      	bne.n	80061de <_close_r+0x1a>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	b103      	cbz	r3, 80061de <_close_r+0x1a>
 80061dc:	602b      	str	r3, [r5, #0]
 80061de:	bd38      	pop	{r3, r4, r5, pc}
 80061e0:	20000248 	.word	0x20000248

080061e4 <__sflush_r>:
 80061e4:	898a      	ldrh	r2, [r1, #12]
 80061e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ea:	4605      	mov	r5, r0
 80061ec:	0710      	lsls	r0, r2, #28
 80061ee:	460c      	mov	r4, r1
 80061f0:	d458      	bmi.n	80062a4 <__sflush_r+0xc0>
 80061f2:	684b      	ldr	r3, [r1, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	dc05      	bgt.n	8006204 <__sflush_r+0x20>
 80061f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	dc02      	bgt.n	8006204 <__sflush_r+0x20>
 80061fe:	2000      	movs	r0, #0
 8006200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006206:	2e00      	cmp	r6, #0
 8006208:	d0f9      	beq.n	80061fe <__sflush_r+0x1a>
 800620a:	2300      	movs	r3, #0
 800620c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006210:	682f      	ldr	r7, [r5, #0]
 8006212:	6a21      	ldr	r1, [r4, #32]
 8006214:	602b      	str	r3, [r5, #0]
 8006216:	d032      	beq.n	800627e <__sflush_r+0x9a>
 8006218:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	075a      	lsls	r2, r3, #29
 800621e:	d505      	bpl.n	800622c <__sflush_r+0x48>
 8006220:	6863      	ldr	r3, [r4, #4]
 8006222:	1ac0      	subs	r0, r0, r3
 8006224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006226:	b10b      	cbz	r3, 800622c <__sflush_r+0x48>
 8006228:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800622a:	1ac0      	subs	r0, r0, r3
 800622c:	2300      	movs	r3, #0
 800622e:	4602      	mov	r2, r0
 8006230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006232:	6a21      	ldr	r1, [r4, #32]
 8006234:	4628      	mov	r0, r5
 8006236:	47b0      	blx	r6
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	d106      	bne.n	800624c <__sflush_r+0x68>
 800623e:	6829      	ldr	r1, [r5, #0]
 8006240:	291d      	cmp	r1, #29
 8006242:	d848      	bhi.n	80062d6 <__sflush_r+0xf2>
 8006244:	4a29      	ldr	r2, [pc, #164]	; (80062ec <__sflush_r+0x108>)
 8006246:	40ca      	lsrs	r2, r1
 8006248:	07d6      	lsls	r6, r2, #31
 800624a:	d544      	bpl.n	80062d6 <__sflush_r+0xf2>
 800624c:	2200      	movs	r2, #0
 800624e:	6062      	str	r2, [r4, #4]
 8006250:	04d9      	lsls	r1, r3, #19
 8006252:	6922      	ldr	r2, [r4, #16]
 8006254:	6022      	str	r2, [r4, #0]
 8006256:	d504      	bpl.n	8006262 <__sflush_r+0x7e>
 8006258:	1c42      	adds	r2, r0, #1
 800625a:	d101      	bne.n	8006260 <__sflush_r+0x7c>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	b903      	cbnz	r3, 8006262 <__sflush_r+0x7e>
 8006260:	6560      	str	r0, [r4, #84]	; 0x54
 8006262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006264:	602f      	str	r7, [r5, #0]
 8006266:	2900      	cmp	r1, #0
 8006268:	d0c9      	beq.n	80061fe <__sflush_r+0x1a>
 800626a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800626e:	4299      	cmp	r1, r3
 8006270:	d002      	beq.n	8006278 <__sflush_r+0x94>
 8006272:	4628      	mov	r0, r5
 8006274:	f000 f902 	bl	800647c <_free_r>
 8006278:	2000      	movs	r0, #0
 800627a:	6360      	str	r0, [r4, #52]	; 0x34
 800627c:	e7c0      	b.n	8006200 <__sflush_r+0x1c>
 800627e:	2301      	movs	r3, #1
 8006280:	4628      	mov	r0, r5
 8006282:	47b0      	blx	r6
 8006284:	1c41      	adds	r1, r0, #1
 8006286:	d1c8      	bne.n	800621a <__sflush_r+0x36>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0c5      	beq.n	800621a <__sflush_r+0x36>
 800628e:	2b1d      	cmp	r3, #29
 8006290:	d001      	beq.n	8006296 <__sflush_r+0xb2>
 8006292:	2b16      	cmp	r3, #22
 8006294:	d101      	bne.n	800629a <__sflush_r+0xb6>
 8006296:	602f      	str	r7, [r5, #0]
 8006298:	e7b1      	b.n	80061fe <__sflush_r+0x1a>
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a0:	81a3      	strh	r3, [r4, #12]
 80062a2:	e7ad      	b.n	8006200 <__sflush_r+0x1c>
 80062a4:	690f      	ldr	r7, [r1, #16]
 80062a6:	2f00      	cmp	r7, #0
 80062a8:	d0a9      	beq.n	80061fe <__sflush_r+0x1a>
 80062aa:	0793      	lsls	r3, r2, #30
 80062ac:	680e      	ldr	r6, [r1, #0]
 80062ae:	bf08      	it	eq
 80062b0:	694b      	ldreq	r3, [r1, #20]
 80062b2:	600f      	str	r7, [r1, #0]
 80062b4:	bf18      	it	ne
 80062b6:	2300      	movne	r3, #0
 80062b8:	eba6 0807 	sub.w	r8, r6, r7
 80062bc:	608b      	str	r3, [r1, #8]
 80062be:	f1b8 0f00 	cmp.w	r8, #0
 80062c2:	dd9c      	ble.n	80061fe <__sflush_r+0x1a>
 80062c4:	4643      	mov	r3, r8
 80062c6:	463a      	mov	r2, r7
 80062c8:	6a21      	ldr	r1, [r4, #32]
 80062ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b0      	blx	r6
 80062d0:	2800      	cmp	r0, #0
 80062d2:	dc06      	bgt.n	80062e2 <__sflush_r+0xfe>
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062da:	81a3      	strh	r3, [r4, #12]
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295
 80062e0:	e78e      	b.n	8006200 <__sflush_r+0x1c>
 80062e2:	4407      	add	r7, r0
 80062e4:	eba8 0800 	sub.w	r8, r8, r0
 80062e8:	e7e9      	b.n	80062be <__sflush_r+0xda>
 80062ea:	bf00      	nop
 80062ec:	20400001 	.word	0x20400001

080062f0 <_fflush_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	690b      	ldr	r3, [r1, #16]
 80062f4:	4605      	mov	r5, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	b1db      	cbz	r3, 8006332 <_fflush_r+0x42>
 80062fa:	b118      	cbz	r0, 8006304 <_fflush_r+0x14>
 80062fc:	6983      	ldr	r3, [r0, #24]
 80062fe:	b90b      	cbnz	r3, 8006304 <_fflush_r+0x14>
 8006300:	f7ff f93c 	bl	800557c <__sinit>
 8006304:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <_fflush_r+0x48>)
 8006306:	429c      	cmp	r4, r3
 8006308:	d109      	bne.n	800631e <_fflush_r+0x2e>
 800630a:	686c      	ldr	r4, [r5, #4]
 800630c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006310:	b17b      	cbz	r3, 8006332 <_fflush_r+0x42>
 8006312:	4621      	mov	r1, r4
 8006314:	4628      	mov	r0, r5
 8006316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800631a:	f7ff bf63 	b.w	80061e4 <__sflush_r>
 800631e:	4b07      	ldr	r3, [pc, #28]	; (800633c <_fflush_r+0x4c>)
 8006320:	429c      	cmp	r4, r3
 8006322:	d101      	bne.n	8006328 <_fflush_r+0x38>
 8006324:	68ac      	ldr	r4, [r5, #8]
 8006326:	e7f1      	b.n	800630c <_fflush_r+0x1c>
 8006328:	4b05      	ldr	r3, [pc, #20]	; (8006340 <_fflush_r+0x50>)
 800632a:	429c      	cmp	r4, r3
 800632c:	bf08      	it	eq
 800632e:	68ec      	ldreq	r4, [r5, #12]
 8006330:	e7ec      	b.n	800630c <_fflush_r+0x1c>
 8006332:	2000      	movs	r0, #0
 8006334:	bd38      	pop	{r3, r4, r5, pc}
 8006336:	bf00      	nop
 8006338:	080077cc 	.word	0x080077cc
 800633c:	080077ec 	.word	0x080077ec
 8006340:	080077ac 	.word	0x080077ac

08006344 <_lseek_r>:
 8006344:	b538      	push	{r3, r4, r5, lr}
 8006346:	4c07      	ldr	r4, [pc, #28]	; (8006364 <_lseek_r+0x20>)
 8006348:	4605      	mov	r5, r0
 800634a:	4608      	mov	r0, r1
 800634c:	4611      	mov	r1, r2
 800634e:	2200      	movs	r2, #0
 8006350:	6022      	str	r2, [r4, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	f001 f9b2 	bl	80076bc <_lseek>
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	d102      	bne.n	8006362 <_lseek_r+0x1e>
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	b103      	cbz	r3, 8006362 <_lseek_r+0x1e>
 8006360:	602b      	str	r3, [r5, #0]
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	20000248 	.word	0x20000248

08006368 <__swhatbuf_r>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	460e      	mov	r6, r1
 800636c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006370:	2900      	cmp	r1, #0
 8006372:	b096      	sub	sp, #88	; 0x58
 8006374:	4614      	mov	r4, r2
 8006376:	461d      	mov	r5, r3
 8006378:	da07      	bge.n	800638a <__swhatbuf_r+0x22>
 800637a:	2300      	movs	r3, #0
 800637c:	602b      	str	r3, [r5, #0]
 800637e:	89b3      	ldrh	r3, [r6, #12]
 8006380:	061a      	lsls	r2, r3, #24
 8006382:	d410      	bmi.n	80063a6 <__swhatbuf_r+0x3e>
 8006384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006388:	e00e      	b.n	80063a8 <__swhatbuf_r+0x40>
 800638a:	466a      	mov	r2, sp
 800638c:	f000 f8fc 	bl	8006588 <_fstat_r>
 8006390:	2800      	cmp	r0, #0
 8006392:	dbf2      	blt.n	800637a <__swhatbuf_r+0x12>
 8006394:	9a01      	ldr	r2, [sp, #4]
 8006396:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800639a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800639e:	425a      	negs	r2, r3
 80063a0:	415a      	adcs	r2, r3
 80063a2:	602a      	str	r2, [r5, #0]
 80063a4:	e7ee      	b.n	8006384 <__swhatbuf_r+0x1c>
 80063a6:	2340      	movs	r3, #64	; 0x40
 80063a8:	2000      	movs	r0, #0
 80063aa:	6023      	str	r3, [r4, #0]
 80063ac:	b016      	add	sp, #88	; 0x58
 80063ae:	bd70      	pop	{r4, r5, r6, pc}

080063b0 <__smakebuf_r>:
 80063b0:	898b      	ldrh	r3, [r1, #12]
 80063b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063b4:	079d      	lsls	r5, r3, #30
 80063b6:	4606      	mov	r6, r0
 80063b8:	460c      	mov	r4, r1
 80063ba:	d507      	bpl.n	80063cc <__smakebuf_r+0x1c>
 80063bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063c0:	6023      	str	r3, [r4, #0]
 80063c2:	6123      	str	r3, [r4, #16]
 80063c4:	2301      	movs	r3, #1
 80063c6:	6163      	str	r3, [r4, #20]
 80063c8:	b002      	add	sp, #8
 80063ca:	bd70      	pop	{r4, r5, r6, pc}
 80063cc:	ab01      	add	r3, sp, #4
 80063ce:	466a      	mov	r2, sp
 80063d0:	f7ff ffca 	bl	8006368 <__swhatbuf_r>
 80063d4:	9900      	ldr	r1, [sp, #0]
 80063d6:	4605      	mov	r5, r0
 80063d8:	4630      	mov	r0, r6
 80063da:	f7ff f959 	bl	8005690 <_malloc_r>
 80063de:	b948      	cbnz	r0, 80063f4 <__smakebuf_r+0x44>
 80063e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063e4:	059a      	lsls	r2, r3, #22
 80063e6:	d4ef      	bmi.n	80063c8 <__smakebuf_r+0x18>
 80063e8:	f023 0303 	bic.w	r3, r3, #3
 80063ec:	f043 0302 	orr.w	r3, r3, #2
 80063f0:	81a3      	strh	r3, [r4, #12]
 80063f2:	e7e3      	b.n	80063bc <__smakebuf_r+0xc>
 80063f4:	4b0d      	ldr	r3, [pc, #52]	; (800642c <__smakebuf_r+0x7c>)
 80063f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	6020      	str	r0, [r4, #0]
 80063fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006400:	81a3      	strh	r3, [r4, #12]
 8006402:	9b00      	ldr	r3, [sp, #0]
 8006404:	6163      	str	r3, [r4, #20]
 8006406:	9b01      	ldr	r3, [sp, #4]
 8006408:	6120      	str	r0, [r4, #16]
 800640a:	b15b      	cbz	r3, 8006424 <__smakebuf_r+0x74>
 800640c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006410:	4630      	mov	r0, r6
 8006412:	f000 f8cb 	bl	80065ac <_isatty_r>
 8006416:	b128      	cbz	r0, 8006424 <__smakebuf_r+0x74>
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	f023 0303 	bic.w	r3, r3, #3
 800641e:	f043 0301 	orr.w	r3, r3, #1
 8006422:	81a3      	strh	r3, [r4, #12]
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	431d      	orrs	r5, r3
 8006428:	81a5      	strh	r5, [r4, #12]
 800642a:	e7cd      	b.n	80063c8 <__smakebuf_r+0x18>
 800642c:	08005545 	.word	0x08005545

08006430 <memcpy>:
 8006430:	b510      	push	{r4, lr}
 8006432:	1e43      	subs	r3, r0, #1
 8006434:	440a      	add	r2, r1
 8006436:	4291      	cmp	r1, r2
 8006438:	d100      	bne.n	800643c <memcpy+0xc>
 800643a:	bd10      	pop	{r4, pc}
 800643c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006440:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006444:	e7f7      	b.n	8006436 <memcpy+0x6>

08006446 <memmove>:
 8006446:	4288      	cmp	r0, r1
 8006448:	b510      	push	{r4, lr}
 800644a:	eb01 0302 	add.w	r3, r1, r2
 800644e:	d807      	bhi.n	8006460 <memmove+0x1a>
 8006450:	1e42      	subs	r2, r0, #1
 8006452:	4299      	cmp	r1, r3
 8006454:	d00a      	beq.n	800646c <memmove+0x26>
 8006456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800645a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800645e:	e7f8      	b.n	8006452 <memmove+0xc>
 8006460:	4283      	cmp	r3, r0
 8006462:	d9f5      	bls.n	8006450 <memmove+0xa>
 8006464:	1881      	adds	r1, r0, r2
 8006466:	1ad2      	subs	r2, r2, r3
 8006468:	42d3      	cmn	r3, r2
 800646a:	d100      	bne.n	800646e <memmove+0x28>
 800646c:	bd10      	pop	{r4, pc}
 800646e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006472:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006476:	e7f7      	b.n	8006468 <memmove+0x22>

08006478 <__malloc_lock>:
 8006478:	4770      	bx	lr

0800647a <__malloc_unlock>:
 800647a:	4770      	bx	lr

0800647c <_free_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4605      	mov	r5, r0
 8006480:	2900      	cmp	r1, #0
 8006482:	d045      	beq.n	8006510 <_free_r+0x94>
 8006484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006488:	1f0c      	subs	r4, r1, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	bfb8      	it	lt
 800648e:	18e4      	addlt	r4, r4, r3
 8006490:	f7ff fff2 	bl	8006478 <__malloc_lock>
 8006494:	4a1f      	ldr	r2, [pc, #124]	; (8006514 <_free_r+0x98>)
 8006496:	6813      	ldr	r3, [r2, #0]
 8006498:	4610      	mov	r0, r2
 800649a:	b933      	cbnz	r3, 80064aa <_free_r+0x2e>
 800649c:	6063      	str	r3, [r4, #4]
 800649e:	6014      	str	r4, [r2, #0]
 80064a0:	4628      	mov	r0, r5
 80064a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064a6:	f7ff bfe8 	b.w	800647a <__malloc_unlock>
 80064aa:	42a3      	cmp	r3, r4
 80064ac:	d90c      	bls.n	80064c8 <_free_r+0x4c>
 80064ae:	6821      	ldr	r1, [r4, #0]
 80064b0:	1862      	adds	r2, r4, r1
 80064b2:	4293      	cmp	r3, r2
 80064b4:	bf04      	itt	eq
 80064b6:	681a      	ldreq	r2, [r3, #0]
 80064b8:	685b      	ldreq	r3, [r3, #4]
 80064ba:	6063      	str	r3, [r4, #4]
 80064bc:	bf04      	itt	eq
 80064be:	1852      	addeq	r2, r2, r1
 80064c0:	6022      	streq	r2, [r4, #0]
 80064c2:	6004      	str	r4, [r0, #0]
 80064c4:	e7ec      	b.n	80064a0 <_free_r+0x24>
 80064c6:	4613      	mov	r3, r2
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	b10a      	cbz	r2, 80064d0 <_free_r+0x54>
 80064cc:	42a2      	cmp	r2, r4
 80064ce:	d9fa      	bls.n	80064c6 <_free_r+0x4a>
 80064d0:	6819      	ldr	r1, [r3, #0]
 80064d2:	1858      	adds	r0, r3, r1
 80064d4:	42a0      	cmp	r0, r4
 80064d6:	d10b      	bne.n	80064f0 <_free_r+0x74>
 80064d8:	6820      	ldr	r0, [r4, #0]
 80064da:	4401      	add	r1, r0
 80064dc:	1858      	adds	r0, r3, r1
 80064de:	4282      	cmp	r2, r0
 80064e0:	6019      	str	r1, [r3, #0]
 80064e2:	d1dd      	bne.n	80064a0 <_free_r+0x24>
 80064e4:	6810      	ldr	r0, [r2, #0]
 80064e6:	6852      	ldr	r2, [r2, #4]
 80064e8:	605a      	str	r2, [r3, #4]
 80064ea:	4401      	add	r1, r0
 80064ec:	6019      	str	r1, [r3, #0]
 80064ee:	e7d7      	b.n	80064a0 <_free_r+0x24>
 80064f0:	d902      	bls.n	80064f8 <_free_r+0x7c>
 80064f2:	230c      	movs	r3, #12
 80064f4:	602b      	str	r3, [r5, #0]
 80064f6:	e7d3      	b.n	80064a0 <_free_r+0x24>
 80064f8:	6820      	ldr	r0, [r4, #0]
 80064fa:	1821      	adds	r1, r4, r0
 80064fc:	428a      	cmp	r2, r1
 80064fe:	bf04      	itt	eq
 8006500:	6811      	ldreq	r1, [r2, #0]
 8006502:	6852      	ldreq	r2, [r2, #4]
 8006504:	6062      	str	r2, [r4, #4]
 8006506:	bf04      	itt	eq
 8006508:	1809      	addeq	r1, r1, r0
 800650a:	6021      	streq	r1, [r4, #0]
 800650c:	605c      	str	r4, [r3, #4]
 800650e:	e7c7      	b.n	80064a0 <_free_r+0x24>
 8006510:	bd38      	pop	{r3, r4, r5, pc}
 8006512:	bf00      	nop
 8006514:	2000008c 	.word	0x2000008c

08006518 <_realloc_r>:
 8006518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651a:	4607      	mov	r7, r0
 800651c:	4614      	mov	r4, r2
 800651e:	460e      	mov	r6, r1
 8006520:	b921      	cbnz	r1, 800652c <_realloc_r+0x14>
 8006522:	4611      	mov	r1, r2
 8006524:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006528:	f7ff b8b2 	b.w	8005690 <_malloc_r>
 800652c:	b922      	cbnz	r2, 8006538 <_realloc_r+0x20>
 800652e:	f7ff ffa5 	bl	800647c <_free_r>
 8006532:	4625      	mov	r5, r4
 8006534:	4628      	mov	r0, r5
 8006536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006538:	f000 f848 	bl	80065cc <_malloc_usable_size_r>
 800653c:	42a0      	cmp	r0, r4
 800653e:	d20f      	bcs.n	8006560 <_realloc_r+0x48>
 8006540:	4621      	mov	r1, r4
 8006542:	4638      	mov	r0, r7
 8006544:	f7ff f8a4 	bl	8005690 <_malloc_r>
 8006548:	4605      	mov	r5, r0
 800654a:	2800      	cmp	r0, #0
 800654c:	d0f2      	beq.n	8006534 <_realloc_r+0x1c>
 800654e:	4631      	mov	r1, r6
 8006550:	4622      	mov	r2, r4
 8006552:	f7ff ff6d 	bl	8006430 <memcpy>
 8006556:	4631      	mov	r1, r6
 8006558:	4638      	mov	r0, r7
 800655a:	f7ff ff8f 	bl	800647c <_free_r>
 800655e:	e7e9      	b.n	8006534 <_realloc_r+0x1c>
 8006560:	4635      	mov	r5, r6
 8006562:	e7e7      	b.n	8006534 <_realloc_r+0x1c>

08006564 <_read_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4c07      	ldr	r4, [pc, #28]	; (8006584 <_read_r+0x20>)
 8006568:	4605      	mov	r5, r0
 800656a:	4608      	mov	r0, r1
 800656c:	4611      	mov	r1, r2
 800656e:	2200      	movs	r2, #0
 8006570:	6022      	str	r2, [r4, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	f001 f8aa 	bl	80076cc <_read>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_read_r+0x1e>
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	b103      	cbz	r3, 8006582 <_read_r+0x1e>
 8006580:	602b      	str	r3, [r5, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	20000248 	.word	0x20000248

08006588 <_fstat_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4c07      	ldr	r4, [pc, #28]	; (80065a8 <_fstat_r+0x20>)
 800658c:	2300      	movs	r3, #0
 800658e:	4605      	mov	r5, r0
 8006590:	4608      	mov	r0, r1
 8006592:	4611      	mov	r1, r2
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	f001 f881 	bl	800769c <_fstat>
 800659a:	1c43      	adds	r3, r0, #1
 800659c:	d102      	bne.n	80065a4 <_fstat_r+0x1c>
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	b103      	cbz	r3, 80065a4 <_fstat_r+0x1c>
 80065a2:	602b      	str	r3, [r5, #0]
 80065a4:	bd38      	pop	{r3, r4, r5, pc}
 80065a6:	bf00      	nop
 80065a8:	20000248 	.word	0x20000248

080065ac <_isatty_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4c06      	ldr	r4, [pc, #24]	; (80065c8 <_isatty_r+0x1c>)
 80065b0:	2300      	movs	r3, #0
 80065b2:	4605      	mov	r5, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	6023      	str	r3, [r4, #0]
 80065b8:	f001 f878 	bl	80076ac <_isatty>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_isatty_r+0x1a>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_isatty_r+0x1a>
 80065c4:	602b      	str	r3, [r5, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	20000248 	.word	0x20000248

080065cc <_malloc_usable_size_r>:
 80065cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d0:	1f18      	subs	r0, r3, #4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	bfbc      	itt	lt
 80065d6:	580b      	ldrlt	r3, [r1, r0]
 80065d8:	18c0      	addlt	r0, r0, r3
 80065da:	4770      	bx	lr
 80065dc:	0000      	movs	r0, r0
	...

080065e0 <cos>:
 80065e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065e2:	ec51 0b10 	vmov	r0, r1, d0
 80065e6:	4a1e      	ldr	r2, [pc, #120]	; (8006660 <cos+0x80>)
 80065e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065ec:	4293      	cmp	r3, r2
 80065ee:	dc06      	bgt.n	80065fe <cos+0x1e>
 80065f0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006658 <cos+0x78>
 80065f4:	f000 fa74 	bl	8006ae0 <__kernel_cos>
 80065f8:	ec51 0b10 	vmov	r0, r1, d0
 80065fc:	e007      	b.n	800660e <cos+0x2e>
 80065fe:	4a19      	ldr	r2, [pc, #100]	; (8006664 <cos+0x84>)
 8006600:	4293      	cmp	r3, r2
 8006602:	dd09      	ble.n	8006618 <cos+0x38>
 8006604:	ee10 2a10 	vmov	r2, s0
 8006608:	460b      	mov	r3, r1
 800660a:	f7f9 fe35 	bl	8000278 <__aeabi_dsub>
 800660e:	ec41 0b10 	vmov	d0, r0, r1
 8006612:	b005      	add	sp, #20
 8006614:	f85d fb04 	ldr.w	pc, [sp], #4
 8006618:	4668      	mov	r0, sp
 800661a:	f000 f86d 	bl	80066f8 <__ieee754_rem_pio2>
 800661e:	f000 0003 	and.w	r0, r0, #3
 8006622:	2801      	cmp	r0, #1
 8006624:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006628:	ed9d 0b00 	vldr	d0, [sp]
 800662c:	d007      	beq.n	800663e <cos+0x5e>
 800662e:	2802      	cmp	r0, #2
 8006630:	d00e      	beq.n	8006650 <cos+0x70>
 8006632:	2800      	cmp	r0, #0
 8006634:	d0de      	beq.n	80065f4 <cos+0x14>
 8006636:	2001      	movs	r0, #1
 8006638:	f000 fe5a 	bl	80072f0 <__kernel_sin>
 800663c:	e7dc      	b.n	80065f8 <cos+0x18>
 800663e:	f000 fe57 	bl	80072f0 <__kernel_sin>
 8006642:	ec53 2b10 	vmov	r2, r3, d0
 8006646:	ee10 0a10 	vmov	r0, s0
 800664a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800664e:	e7de      	b.n	800660e <cos+0x2e>
 8006650:	f000 fa46 	bl	8006ae0 <__kernel_cos>
 8006654:	e7f5      	b.n	8006642 <cos+0x62>
 8006656:	bf00      	nop
	...
 8006660:	3fe921fb 	.word	0x3fe921fb
 8006664:	7fefffff 	.word	0x7fefffff

08006668 <sin>:
 8006668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800666a:	ec51 0b10 	vmov	r0, r1, d0
 800666e:	4a20      	ldr	r2, [pc, #128]	; (80066f0 <sin+0x88>)
 8006670:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006674:	4293      	cmp	r3, r2
 8006676:	dc07      	bgt.n	8006688 <sin+0x20>
 8006678:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80066e8 <sin+0x80>
 800667c:	2000      	movs	r0, #0
 800667e:	f000 fe37 	bl	80072f0 <__kernel_sin>
 8006682:	ec51 0b10 	vmov	r0, r1, d0
 8006686:	e007      	b.n	8006698 <sin+0x30>
 8006688:	4a1a      	ldr	r2, [pc, #104]	; (80066f4 <sin+0x8c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	dd09      	ble.n	80066a2 <sin+0x3a>
 800668e:	ee10 2a10 	vmov	r2, s0
 8006692:	460b      	mov	r3, r1
 8006694:	f7f9 fdf0 	bl	8000278 <__aeabi_dsub>
 8006698:	ec41 0b10 	vmov	d0, r0, r1
 800669c:	b005      	add	sp, #20
 800669e:	f85d fb04 	ldr.w	pc, [sp], #4
 80066a2:	4668      	mov	r0, sp
 80066a4:	f000 f828 	bl	80066f8 <__ieee754_rem_pio2>
 80066a8:	f000 0003 	and.w	r0, r0, #3
 80066ac:	2801      	cmp	r0, #1
 80066ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066b2:	ed9d 0b00 	vldr	d0, [sp]
 80066b6:	d004      	beq.n	80066c2 <sin+0x5a>
 80066b8:	2802      	cmp	r0, #2
 80066ba:	d005      	beq.n	80066c8 <sin+0x60>
 80066bc:	b970      	cbnz	r0, 80066dc <sin+0x74>
 80066be:	2001      	movs	r0, #1
 80066c0:	e7dd      	b.n	800667e <sin+0x16>
 80066c2:	f000 fa0d 	bl	8006ae0 <__kernel_cos>
 80066c6:	e7dc      	b.n	8006682 <sin+0x1a>
 80066c8:	2001      	movs	r0, #1
 80066ca:	f000 fe11 	bl	80072f0 <__kernel_sin>
 80066ce:	ec53 2b10 	vmov	r2, r3, d0
 80066d2:	ee10 0a10 	vmov	r0, s0
 80066d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80066da:	e7dd      	b.n	8006698 <sin+0x30>
 80066dc:	f000 fa00 	bl	8006ae0 <__kernel_cos>
 80066e0:	e7f5      	b.n	80066ce <sin+0x66>
 80066e2:	bf00      	nop
 80066e4:	f3af 8000 	nop.w
	...
 80066f0:	3fe921fb 	.word	0x3fe921fb
 80066f4:	7fefffff 	.word	0x7fefffff

080066f8 <__ieee754_rem_pio2>:
 80066f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fc:	ec57 6b10 	vmov	r6, r7, d0
 8006700:	4bc3      	ldr	r3, [pc, #780]	; (8006a10 <__ieee754_rem_pio2+0x318>)
 8006702:	b08d      	sub	sp, #52	; 0x34
 8006704:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006708:	4598      	cmp	r8, r3
 800670a:	4604      	mov	r4, r0
 800670c:	9704      	str	r7, [sp, #16]
 800670e:	dc07      	bgt.n	8006720 <__ieee754_rem_pio2+0x28>
 8006710:	2200      	movs	r2, #0
 8006712:	2300      	movs	r3, #0
 8006714:	ed84 0b00 	vstr	d0, [r4]
 8006718:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800671c:	2500      	movs	r5, #0
 800671e:	e027      	b.n	8006770 <__ieee754_rem_pio2+0x78>
 8006720:	4bbc      	ldr	r3, [pc, #752]	; (8006a14 <__ieee754_rem_pio2+0x31c>)
 8006722:	4598      	cmp	r8, r3
 8006724:	dc75      	bgt.n	8006812 <__ieee754_rem_pio2+0x11a>
 8006726:	9b04      	ldr	r3, [sp, #16]
 8006728:	4dbb      	ldr	r5, [pc, #748]	; (8006a18 <__ieee754_rem_pio2+0x320>)
 800672a:	2b00      	cmp	r3, #0
 800672c:	ee10 0a10 	vmov	r0, s0
 8006730:	a3a9      	add	r3, pc, #676	; (adr r3, 80069d8 <__ieee754_rem_pio2+0x2e0>)
 8006732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006736:	4639      	mov	r1, r7
 8006738:	dd36      	ble.n	80067a8 <__ieee754_rem_pio2+0xb0>
 800673a:	f7f9 fd9d 	bl	8000278 <__aeabi_dsub>
 800673e:	45a8      	cmp	r8, r5
 8006740:	4606      	mov	r6, r0
 8006742:	460f      	mov	r7, r1
 8006744:	d018      	beq.n	8006778 <__ieee754_rem_pio2+0x80>
 8006746:	a3a6      	add	r3, pc, #664	; (adr r3, 80069e0 <__ieee754_rem_pio2+0x2e8>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7f9 fd94 	bl	8000278 <__aeabi_dsub>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	e9c4 2300 	strd	r2, r3, [r4]
 8006758:	4630      	mov	r0, r6
 800675a:	4639      	mov	r1, r7
 800675c:	f7f9 fd8c 	bl	8000278 <__aeabi_dsub>
 8006760:	a39f      	add	r3, pc, #636	; (adr r3, 80069e0 <__ieee754_rem_pio2+0x2e8>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 fd87 	bl	8000278 <__aeabi_dsub>
 800676a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800676e:	2501      	movs	r5, #1
 8006770:	4628      	mov	r0, r5
 8006772:	b00d      	add	sp, #52	; 0x34
 8006774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006778:	a39b      	add	r3, pc, #620	; (adr r3, 80069e8 <__ieee754_rem_pio2+0x2f0>)
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	f7f9 fd7b 	bl	8000278 <__aeabi_dsub>
 8006782:	a39b      	add	r3, pc, #620	; (adr r3, 80069f0 <__ieee754_rem_pio2+0x2f8>)
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	4606      	mov	r6, r0
 800678a:	460f      	mov	r7, r1
 800678c:	f7f9 fd74 	bl	8000278 <__aeabi_dsub>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	e9c4 2300 	strd	r2, r3, [r4]
 8006798:	4630      	mov	r0, r6
 800679a:	4639      	mov	r1, r7
 800679c:	f7f9 fd6c 	bl	8000278 <__aeabi_dsub>
 80067a0:	a393      	add	r3, pc, #588	; (adr r3, 80069f0 <__ieee754_rem_pio2+0x2f8>)
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	e7de      	b.n	8006766 <__ieee754_rem_pio2+0x6e>
 80067a8:	f7f9 fd68 	bl	800027c <__adddf3>
 80067ac:	45a8      	cmp	r8, r5
 80067ae:	4606      	mov	r6, r0
 80067b0:	460f      	mov	r7, r1
 80067b2:	d016      	beq.n	80067e2 <__ieee754_rem_pio2+0xea>
 80067b4:	a38a      	add	r3, pc, #552	; (adr r3, 80069e0 <__ieee754_rem_pio2+0x2e8>)
 80067b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ba:	f7f9 fd5f 	bl	800027c <__adddf3>
 80067be:	4602      	mov	r2, r0
 80067c0:	460b      	mov	r3, r1
 80067c2:	e9c4 2300 	strd	r2, r3, [r4]
 80067c6:	4630      	mov	r0, r6
 80067c8:	4639      	mov	r1, r7
 80067ca:	f7f9 fd55 	bl	8000278 <__aeabi_dsub>
 80067ce:	a384      	add	r3, pc, #528	; (adr r3, 80069e0 <__ieee754_rem_pio2+0x2e8>)
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	f7f9 fd52 	bl	800027c <__adddf3>
 80067d8:	f04f 35ff 	mov.w	r5, #4294967295
 80067dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80067e0:	e7c6      	b.n	8006770 <__ieee754_rem_pio2+0x78>
 80067e2:	a381      	add	r3, pc, #516	; (adr r3, 80069e8 <__ieee754_rem_pio2+0x2f0>)
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f7f9 fd48 	bl	800027c <__adddf3>
 80067ec:	a380      	add	r3, pc, #512	; (adr r3, 80069f0 <__ieee754_rem_pio2+0x2f8>)
 80067ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f2:	4606      	mov	r6, r0
 80067f4:	460f      	mov	r7, r1
 80067f6:	f7f9 fd41 	bl	800027c <__adddf3>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	e9c4 2300 	strd	r2, r3, [r4]
 8006802:	4630      	mov	r0, r6
 8006804:	4639      	mov	r1, r7
 8006806:	f7f9 fd37 	bl	8000278 <__aeabi_dsub>
 800680a:	a379      	add	r3, pc, #484	; (adr r3, 80069f0 <__ieee754_rem_pio2+0x2f8>)
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	e7e0      	b.n	80067d4 <__ieee754_rem_pio2+0xdc>
 8006812:	4b82      	ldr	r3, [pc, #520]	; (8006a1c <__ieee754_rem_pio2+0x324>)
 8006814:	4598      	cmp	r8, r3
 8006816:	f300 80d0 	bgt.w	80069ba <__ieee754_rem_pio2+0x2c2>
 800681a:	f000 fe23 	bl	8007464 <fabs>
 800681e:	ec57 6b10 	vmov	r6, r7, d0
 8006822:	ee10 0a10 	vmov	r0, s0
 8006826:	a374      	add	r3, pc, #464	; (adr r3, 80069f8 <__ieee754_rem_pio2+0x300>)
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	4639      	mov	r1, r7
 800682e:	f7f9 fedb 	bl	80005e8 <__aeabi_dmul>
 8006832:	2200      	movs	r2, #0
 8006834:	4b7a      	ldr	r3, [pc, #488]	; (8006a20 <__ieee754_rem_pio2+0x328>)
 8006836:	f7f9 fd21 	bl	800027c <__adddf3>
 800683a:	f7fa f96f 	bl	8000b1c <__aeabi_d2iz>
 800683e:	4605      	mov	r5, r0
 8006840:	f7f9 fe68 	bl	8000514 <__aeabi_i2d>
 8006844:	a364      	add	r3, pc, #400	; (adr r3, 80069d8 <__ieee754_rem_pio2+0x2e0>)
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800684e:	f7f9 fecb 	bl	80005e8 <__aeabi_dmul>
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	4630      	mov	r0, r6
 8006858:	4639      	mov	r1, r7
 800685a:	f7f9 fd0d 	bl	8000278 <__aeabi_dsub>
 800685e:	a360      	add	r3, pc, #384	; (adr r3, 80069e0 <__ieee754_rem_pio2+0x2e8>)
 8006860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006864:	4682      	mov	sl, r0
 8006866:	468b      	mov	fp, r1
 8006868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800686c:	f7f9 febc 	bl	80005e8 <__aeabi_dmul>
 8006870:	2d1f      	cmp	r5, #31
 8006872:	4606      	mov	r6, r0
 8006874:	460f      	mov	r7, r1
 8006876:	dc0c      	bgt.n	8006892 <__ieee754_rem_pio2+0x19a>
 8006878:	1e6a      	subs	r2, r5, #1
 800687a:	4b6a      	ldr	r3, [pc, #424]	; (8006a24 <__ieee754_rem_pio2+0x32c>)
 800687c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006880:	4543      	cmp	r3, r8
 8006882:	d006      	beq.n	8006892 <__ieee754_rem_pio2+0x19a>
 8006884:	4632      	mov	r2, r6
 8006886:	463b      	mov	r3, r7
 8006888:	4650      	mov	r0, sl
 800688a:	4659      	mov	r1, fp
 800688c:	f7f9 fcf4 	bl	8000278 <__aeabi_dsub>
 8006890:	e00e      	b.n	80068b0 <__ieee754_rem_pio2+0x1b8>
 8006892:	4632      	mov	r2, r6
 8006894:	463b      	mov	r3, r7
 8006896:	4650      	mov	r0, sl
 8006898:	4659      	mov	r1, fp
 800689a:	f7f9 fced 	bl	8000278 <__aeabi_dsub>
 800689e:	ea4f 5328 	mov.w	r3, r8, asr #20
 80068a2:	9305      	str	r3, [sp, #20]
 80068a4:	9a05      	ldr	r2, [sp, #20]
 80068a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b10      	cmp	r3, #16
 80068ae:	dc02      	bgt.n	80068b6 <__ieee754_rem_pio2+0x1be>
 80068b0:	e9c4 0100 	strd	r0, r1, [r4]
 80068b4:	e039      	b.n	800692a <__ieee754_rem_pio2+0x232>
 80068b6:	a34c      	add	r3, pc, #304	; (adr r3, 80069e8 <__ieee754_rem_pio2+0x2f0>)
 80068b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068c0:	f7f9 fe92 	bl	80005e8 <__aeabi_dmul>
 80068c4:	4606      	mov	r6, r0
 80068c6:	460f      	mov	r7, r1
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4650      	mov	r0, sl
 80068ce:	4659      	mov	r1, fp
 80068d0:	f7f9 fcd2 	bl	8000278 <__aeabi_dsub>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4680      	mov	r8, r0
 80068da:	4689      	mov	r9, r1
 80068dc:	4650      	mov	r0, sl
 80068de:	4659      	mov	r1, fp
 80068e0:	f7f9 fcca 	bl	8000278 <__aeabi_dsub>
 80068e4:	4632      	mov	r2, r6
 80068e6:	463b      	mov	r3, r7
 80068e8:	f7f9 fcc6 	bl	8000278 <__aeabi_dsub>
 80068ec:	a340      	add	r3, pc, #256	; (adr r3, 80069f0 <__ieee754_rem_pio2+0x2f8>)
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	4606      	mov	r6, r0
 80068f4:	460f      	mov	r7, r1
 80068f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068fa:	f7f9 fe75 	bl	80005e8 <__aeabi_dmul>
 80068fe:	4632      	mov	r2, r6
 8006900:	463b      	mov	r3, r7
 8006902:	f7f9 fcb9 	bl	8000278 <__aeabi_dsub>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4606      	mov	r6, r0
 800690c:	460f      	mov	r7, r1
 800690e:	4640      	mov	r0, r8
 8006910:	4649      	mov	r1, r9
 8006912:	f7f9 fcb1 	bl	8000278 <__aeabi_dsub>
 8006916:	9a05      	ldr	r2, [sp, #20]
 8006918:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b31      	cmp	r3, #49	; 0x31
 8006920:	dc20      	bgt.n	8006964 <__ieee754_rem_pio2+0x26c>
 8006922:	e9c4 0100 	strd	r0, r1, [r4]
 8006926:	46c2      	mov	sl, r8
 8006928:	46cb      	mov	fp, r9
 800692a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800692e:	4650      	mov	r0, sl
 8006930:	4642      	mov	r2, r8
 8006932:	464b      	mov	r3, r9
 8006934:	4659      	mov	r1, fp
 8006936:	f7f9 fc9f 	bl	8000278 <__aeabi_dsub>
 800693a:	463b      	mov	r3, r7
 800693c:	4632      	mov	r2, r6
 800693e:	f7f9 fc9b 	bl	8000278 <__aeabi_dsub>
 8006942:	9b04      	ldr	r3, [sp, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800694a:	f6bf af11 	bge.w	8006770 <__ieee754_rem_pio2+0x78>
 800694e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006952:	6063      	str	r3, [r4, #4]
 8006954:	f8c4 8000 	str.w	r8, [r4]
 8006958:	60a0      	str	r0, [r4, #8]
 800695a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800695e:	60e3      	str	r3, [r4, #12]
 8006960:	426d      	negs	r5, r5
 8006962:	e705      	b.n	8006770 <__ieee754_rem_pio2+0x78>
 8006964:	a326      	add	r3, pc, #152	; (adr r3, 8006a00 <__ieee754_rem_pio2+0x308>)
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800696e:	f7f9 fe3b 	bl	80005e8 <__aeabi_dmul>
 8006972:	4606      	mov	r6, r0
 8006974:	460f      	mov	r7, r1
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4640      	mov	r0, r8
 800697c:	4649      	mov	r1, r9
 800697e:	f7f9 fc7b 	bl	8000278 <__aeabi_dsub>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4682      	mov	sl, r0
 8006988:	468b      	mov	fp, r1
 800698a:	4640      	mov	r0, r8
 800698c:	4649      	mov	r1, r9
 800698e:	f7f9 fc73 	bl	8000278 <__aeabi_dsub>
 8006992:	4632      	mov	r2, r6
 8006994:	463b      	mov	r3, r7
 8006996:	f7f9 fc6f 	bl	8000278 <__aeabi_dsub>
 800699a:	a31b      	add	r3, pc, #108	; (adr r3, 8006a08 <__ieee754_rem_pio2+0x310>)
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	4606      	mov	r6, r0
 80069a2:	460f      	mov	r7, r1
 80069a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069a8:	f7f9 fe1e 	bl	80005e8 <__aeabi_dmul>
 80069ac:	4632      	mov	r2, r6
 80069ae:	463b      	mov	r3, r7
 80069b0:	f7f9 fc62 	bl	8000278 <__aeabi_dsub>
 80069b4:	4606      	mov	r6, r0
 80069b6:	460f      	mov	r7, r1
 80069b8:	e764      	b.n	8006884 <__ieee754_rem_pio2+0x18c>
 80069ba:	4b1b      	ldr	r3, [pc, #108]	; (8006a28 <__ieee754_rem_pio2+0x330>)
 80069bc:	4598      	cmp	r8, r3
 80069be:	dd35      	ble.n	8006a2c <__ieee754_rem_pio2+0x334>
 80069c0:	ee10 2a10 	vmov	r2, s0
 80069c4:	463b      	mov	r3, r7
 80069c6:	4630      	mov	r0, r6
 80069c8:	4639      	mov	r1, r7
 80069ca:	f7f9 fc55 	bl	8000278 <__aeabi_dsub>
 80069ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80069d2:	e9c4 0100 	strd	r0, r1, [r4]
 80069d6:	e6a1      	b.n	800671c <__ieee754_rem_pio2+0x24>
 80069d8:	54400000 	.word	0x54400000
 80069dc:	3ff921fb 	.word	0x3ff921fb
 80069e0:	1a626331 	.word	0x1a626331
 80069e4:	3dd0b461 	.word	0x3dd0b461
 80069e8:	1a600000 	.word	0x1a600000
 80069ec:	3dd0b461 	.word	0x3dd0b461
 80069f0:	2e037073 	.word	0x2e037073
 80069f4:	3ba3198a 	.word	0x3ba3198a
 80069f8:	6dc9c883 	.word	0x6dc9c883
 80069fc:	3fe45f30 	.word	0x3fe45f30
 8006a00:	2e000000 	.word	0x2e000000
 8006a04:	3ba3198a 	.word	0x3ba3198a
 8006a08:	252049c1 	.word	0x252049c1
 8006a0c:	397b839a 	.word	0x397b839a
 8006a10:	3fe921fb 	.word	0x3fe921fb
 8006a14:	4002d97b 	.word	0x4002d97b
 8006a18:	3ff921fb 	.word	0x3ff921fb
 8006a1c:	413921fb 	.word	0x413921fb
 8006a20:	3fe00000 	.word	0x3fe00000
 8006a24:	08007840 	.word	0x08007840
 8006a28:	7fefffff 	.word	0x7fefffff
 8006a2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006a30:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006a34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006a38:	4630      	mov	r0, r6
 8006a3a:	460f      	mov	r7, r1
 8006a3c:	f7fa f86e 	bl	8000b1c <__aeabi_d2iz>
 8006a40:	f7f9 fd68 	bl	8000514 <__aeabi_i2d>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4630      	mov	r0, r6
 8006a4a:	4639      	mov	r1, r7
 8006a4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a50:	f7f9 fc12 	bl	8000278 <__aeabi_dsub>
 8006a54:	2200      	movs	r2, #0
 8006a56:	4b1f      	ldr	r3, [pc, #124]	; (8006ad4 <__ieee754_rem_pio2+0x3dc>)
 8006a58:	f7f9 fdc6 	bl	80005e8 <__aeabi_dmul>
 8006a5c:	460f      	mov	r7, r1
 8006a5e:	4606      	mov	r6, r0
 8006a60:	f7fa f85c 	bl	8000b1c <__aeabi_d2iz>
 8006a64:	f7f9 fd56 	bl	8000514 <__aeabi_i2d>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	4639      	mov	r1, r7
 8006a70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006a74:	f7f9 fc00 	bl	8000278 <__aeabi_dsub>
 8006a78:	2200      	movs	r2, #0
 8006a7a:	4b16      	ldr	r3, [pc, #88]	; (8006ad4 <__ieee754_rem_pio2+0x3dc>)
 8006a7c:	f7f9 fdb4 	bl	80005e8 <__aeabi_dmul>
 8006a80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a84:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006a88:	f04f 0803 	mov.w	r8, #3
 8006a8c:	2600      	movs	r6, #0
 8006a8e:	2700      	movs	r7, #0
 8006a90:	4632      	mov	r2, r6
 8006a92:	463b      	mov	r3, r7
 8006a94:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006a98:	f108 3aff 	add.w	sl, r8, #4294967295
 8006a9c:	f7fa f80c 	bl	8000ab8 <__aeabi_dcmpeq>
 8006aa0:	b9b0      	cbnz	r0, 8006ad0 <__ieee754_rem_pio2+0x3d8>
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	; (8006ad8 <__ieee754_rem_pio2+0x3e0>)
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	462a      	mov	r2, r5
 8006aac:	4643      	mov	r3, r8
 8006aae:	4621      	mov	r1, r4
 8006ab0:	a806      	add	r0, sp, #24
 8006ab2:	f000 f8dd 	bl	8006c70 <__kernel_rem_pio2>
 8006ab6:	9b04      	ldr	r3, [sp, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	4605      	mov	r5, r0
 8006abc:	f6bf ae58 	bge.w	8006770 <__ieee754_rem_pio2+0x78>
 8006ac0:	6863      	ldr	r3, [r4, #4]
 8006ac2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006ac6:	6063      	str	r3, [r4, #4]
 8006ac8:	68e3      	ldr	r3, [r4, #12]
 8006aca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006ace:	e746      	b.n	800695e <__ieee754_rem_pio2+0x266>
 8006ad0:	46d0      	mov	r8, sl
 8006ad2:	e7dd      	b.n	8006a90 <__ieee754_rem_pio2+0x398>
 8006ad4:	41700000 	.word	0x41700000
 8006ad8:	080078c0 	.word	0x080078c0
 8006adc:	00000000 	.word	0x00000000

08006ae0 <__kernel_cos>:
 8006ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	ec59 8b10 	vmov	r8, r9, d0
 8006ae8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8006aec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006af0:	ed2d 8b02 	vpush	{d8}
 8006af4:	eeb0 8a41 	vmov.f32	s16, s2
 8006af8:	eef0 8a61 	vmov.f32	s17, s3
 8006afc:	da07      	bge.n	8006b0e <__kernel_cos+0x2e>
 8006afe:	ee10 0a10 	vmov	r0, s0
 8006b02:	4649      	mov	r1, r9
 8006b04:	f7fa f80a 	bl	8000b1c <__aeabi_d2iz>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	f000 8089 	beq.w	8006c20 <__kernel_cos+0x140>
 8006b0e:	4642      	mov	r2, r8
 8006b10:	464b      	mov	r3, r9
 8006b12:	4640      	mov	r0, r8
 8006b14:	4649      	mov	r1, r9
 8006b16:	f7f9 fd67 	bl	80005e8 <__aeabi_dmul>
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	4b4e      	ldr	r3, [pc, #312]	; (8006c58 <__kernel_cos+0x178>)
 8006b1e:	4604      	mov	r4, r0
 8006b20:	460d      	mov	r5, r1
 8006b22:	f7f9 fd61 	bl	80005e8 <__aeabi_dmul>
 8006b26:	a340      	add	r3, pc, #256	; (adr r3, 8006c28 <__kernel_cos+0x148>)
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	4682      	mov	sl, r0
 8006b2e:	468b      	mov	fp, r1
 8006b30:	4620      	mov	r0, r4
 8006b32:	4629      	mov	r1, r5
 8006b34:	f7f9 fd58 	bl	80005e8 <__aeabi_dmul>
 8006b38:	a33d      	add	r3, pc, #244	; (adr r3, 8006c30 <__kernel_cos+0x150>)
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	f7f9 fb9d 	bl	800027c <__adddf3>
 8006b42:	4622      	mov	r2, r4
 8006b44:	462b      	mov	r3, r5
 8006b46:	f7f9 fd4f 	bl	80005e8 <__aeabi_dmul>
 8006b4a:	a33b      	add	r3, pc, #236	; (adr r3, 8006c38 <__kernel_cos+0x158>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	f7f9 fb92 	bl	8000278 <__aeabi_dsub>
 8006b54:	4622      	mov	r2, r4
 8006b56:	462b      	mov	r3, r5
 8006b58:	f7f9 fd46 	bl	80005e8 <__aeabi_dmul>
 8006b5c:	a338      	add	r3, pc, #224	; (adr r3, 8006c40 <__kernel_cos+0x160>)
 8006b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b62:	f7f9 fb8b 	bl	800027c <__adddf3>
 8006b66:	4622      	mov	r2, r4
 8006b68:	462b      	mov	r3, r5
 8006b6a:	f7f9 fd3d 	bl	80005e8 <__aeabi_dmul>
 8006b6e:	a336      	add	r3, pc, #216	; (adr r3, 8006c48 <__kernel_cos+0x168>)
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	f7f9 fb80 	bl	8000278 <__aeabi_dsub>
 8006b78:	4622      	mov	r2, r4
 8006b7a:	462b      	mov	r3, r5
 8006b7c:	f7f9 fd34 	bl	80005e8 <__aeabi_dmul>
 8006b80:	a333      	add	r3, pc, #204	; (adr r3, 8006c50 <__kernel_cos+0x170>)
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	f7f9 fb79 	bl	800027c <__adddf3>
 8006b8a:	4622      	mov	r2, r4
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	f7f9 fd2b 	bl	80005e8 <__aeabi_dmul>
 8006b92:	4622      	mov	r2, r4
 8006b94:	462b      	mov	r3, r5
 8006b96:	f7f9 fd27 	bl	80005e8 <__aeabi_dmul>
 8006b9a:	ec53 2b18 	vmov	r2, r3, d8
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	460d      	mov	r5, r1
 8006ba2:	4640      	mov	r0, r8
 8006ba4:	4649      	mov	r1, r9
 8006ba6:	f7f9 fd1f 	bl	80005e8 <__aeabi_dmul>
 8006baa:	460b      	mov	r3, r1
 8006bac:	4602      	mov	r2, r0
 8006bae:	4629      	mov	r1, r5
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f7f9 fb61 	bl	8000278 <__aeabi_dsub>
 8006bb6:	4b29      	ldr	r3, [pc, #164]	; (8006c5c <__kernel_cos+0x17c>)
 8006bb8:	429e      	cmp	r6, r3
 8006bba:	4680      	mov	r8, r0
 8006bbc:	4689      	mov	r9, r1
 8006bbe:	dc11      	bgt.n	8006be4 <__kernel_cos+0x104>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4650      	mov	r0, sl
 8006bc6:	4659      	mov	r1, fp
 8006bc8:	f7f9 fb56 	bl	8000278 <__aeabi_dsub>
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4924      	ldr	r1, [pc, #144]	; (8006c60 <__kernel_cos+0x180>)
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	f7f9 fb50 	bl	8000278 <__aeabi_dsub>
 8006bd8:	ecbd 8b02 	vpop	{d8}
 8006bdc:	ec41 0b10 	vmov	d0, r0, r1
 8006be0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be4:	4b1f      	ldr	r3, [pc, #124]	; (8006c64 <__kernel_cos+0x184>)
 8006be6:	491e      	ldr	r1, [pc, #120]	; (8006c60 <__kernel_cos+0x180>)
 8006be8:	429e      	cmp	r6, r3
 8006bea:	bfcc      	ite	gt
 8006bec:	4d1e      	ldrgt	r5, [pc, #120]	; (8006c68 <__kernel_cos+0x188>)
 8006bee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006bf2:	2400      	movs	r4, #0
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	462b      	mov	r3, r5
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	f7f9 fb3d 	bl	8000278 <__aeabi_dsub>
 8006bfe:	4622      	mov	r2, r4
 8006c00:	4606      	mov	r6, r0
 8006c02:	460f      	mov	r7, r1
 8006c04:	462b      	mov	r3, r5
 8006c06:	4650      	mov	r0, sl
 8006c08:	4659      	mov	r1, fp
 8006c0a:	f7f9 fb35 	bl	8000278 <__aeabi_dsub>
 8006c0e:	4642      	mov	r2, r8
 8006c10:	464b      	mov	r3, r9
 8006c12:	f7f9 fb31 	bl	8000278 <__aeabi_dsub>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	e7d9      	b.n	8006bd4 <__kernel_cos+0xf4>
 8006c20:	2000      	movs	r0, #0
 8006c22:	490f      	ldr	r1, [pc, #60]	; (8006c60 <__kernel_cos+0x180>)
 8006c24:	e7d8      	b.n	8006bd8 <__kernel_cos+0xf8>
 8006c26:	bf00      	nop
 8006c28:	be8838d4 	.word	0xbe8838d4
 8006c2c:	bda8fae9 	.word	0xbda8fae9
 8006c30:	bdb4b1c4 	.word	0xbdb4b1c4
 8006c34:	3e21ee9e 	.word	0x3e21ee9e
 8006c38:	809c52ad 	.word	0x809c52ad
 8006c3c:	3e927e4f 	.word	0x3e927e4f
 8006c40:	19cb1590 	.word	0x19cb1590
 8006c44:	3efa01a0 	.word	0x3efa01a0
 8006c48:	16c15177 	.word	0x16c15177
 8006c4c:	3f56c16c 	.word	0x3f56c16c
 8006c50:	5555554c 	.word	0x5555554c
 8006c54:	3fa55555 	.word	0x3fa55555
 8006c58:	3fe00000 	.word	0x3fe00000
 8006c5c:	3fd33332 	.word	0x3fd33332
 8006c60:	3ff00000 	.word	0x3ff00000
 8006c64:	3fe90000 	.word	0x3fe90000
 8006c68:	3fd20000 	.word	0x3fd20000
 8006c6c:	00000000 	.word	0x00000000

08006c70 <__kernel_rem_pio2>:
 8006c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c74:	ed2d 8b02 	vpush	{d8}
 8006c78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006c7c:	1ed4      	subs	r4, r2, #3
 8006c7e:	9308      	str	r3, [sp, #32]
 8006c80:	9101      	str	r1, [sp, #4]
 8006c82:	4bc5      	ldr	r3, [pc, #788]	; (8006f98 <__kernel_rem_pio2+0x328>)
 8006c84:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006c86:	9009      	str	r0, [sp, #36]	; 0x24
 8006c88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c8c:	9304      	str	r3, [sp, #16]
 8006c8e:	9b08      	ldr	r3, [sp, #32]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	9307      	str	r3, [sp, #28]
 8006c94:	2318      	movs	r3, #24
 8006c96:	fb94 f4f3 	sdiv	r4, r4, r3
 8006c9a:	f06f 0317 	mvn.w	r3, #23
 8006c9e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006ca2:	fb04 3303 	mla	r3, r4, r3, r3
 8006ca6:	eb03 0a02 	add.w	sl, r3, r2
 8006caa:	9b04      	ldr	r3, [sp, #16]
 8006cac:	9a07      	ldr	r2, [sp, #28]
 8006cae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006f88 <__kernel_rem_pio2+0x318>
 8006cb2:	eb03 0802 	add.w	r8, r3, r2
 8006cb6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006cb8:	1aa7      	subs	r7, r4, r2
 8006cba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006cbe:	ae22      	add	r6, sp, #136	; 0x88
 8006cc0:	2500      	movs	r5, #0
 8006cc2:	4545      	cmp	r5, r8
 8006cc4:	dd13      	ble.n	8006cee <__kernel_rem_pio2+0x7e>
 8006cc6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006f88 <__kernel_rem_pio2+0x318>
 8006cca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006cce:	2600      	movs	r6, #0
 8006cd0:	9b04      	ldr	r3, [sp, #16]
 8006cd2:	429e      	cmp	r6, r3
 8006cd4:	dc32      	bgt.n	8006d3c <__kernel_rem_pio2+0xcc>
 8006cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd8:	9302      	str	r3, [sp, #8]
 8006cda:	9b08      	ldr	r3, [sp, #32]
 8006cdc:	199d      	adds	r5, r3, r6
 8006cde:	ab22      	add	r3, sp, #136	; 0x88
 8006ce0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006ce4:	9306      	str	r3, [sp, #24]
 8006ce6:	ec59 8b18 	vmov	r8, r9, d8
 8006cea:	2700      	movs	r7, #0
 8006cec:	e01f      	b.n	8006d2e <__kernel_rem_pio2+0xbe>
 8006cee:	42ef      	cmn	r7, r5
 8006cf0:	d407      	bmi.n	8006d02 <__kernel_rem_pio2+0x92>
 8006cf2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006cf6:	f7f9 fc0d 	bl	8000514 <__aeabi_i2d>
 8006cfa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006cfe:	3501      	adds	r5, #1
 8006d00:	e7df      	b.n	8006cc2 <__kernel_rem_pio2+0x52>
 8006d02:	ec51 0b18 	vmov	r0, r1, d8
 8006d06:	e7f8      	b.n	8006cfa <__kernel_rem_pio2+0x8a>
 8006d08:	9906      	ldr	r1, [sp, #24]
 8006d0a:	9d02      	ldr	r5, [sp, #8]
 8006d0c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006d10:	9106      	str	r1, [sp, #24]
 8006d12:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006d16:	9502      	str	r5, [sp, #8]
 8006d18:	f7f9 fc66 	bl	80005e8 <__aeabi_dmul>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4640      	mov	r0, r8
 8006d22:	4649      	mov	r1, r9
 8006d24:	f7f9 faaa 	bl	800027c <__adddf3>
 8006d28:	3701      	adds	r7, #1
 8006d2a:	4680      	mov	r8, r0
 8006d2c:	4689      	mov	r9, r1
 8006d2e:	9b07      	ldr	r3, [sp, #28]
 8006d30:	429f      	cmp	r7, r3
 8006d32:	dde9      	ble.n	8006d08 <__kernel_rem_pio2+0x98>
 8006d34:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006d38:	3601      	adds	r6, #1
 8006d3a:	e7c9      	b.n	8006cd0 <__kernel_rem_pio2+0x60>
 8006d3c:	9b04      	ldr	r3, [sp, #16]
 8006d3e:	aa0e      	add	r2, sp, #56	; 0x38
 8006d40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d44:	930c      	str	r3, [sp, #48]	; 0x30
 8006d46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006d48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006d4c:	9c04      	ldr	r4, [sp, #16]
 8006d4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d50:	ab9a      	add	r3, sp, #616	; 0x268
 8006d52:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8006d56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d5e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8006d62:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8006d66:	ab9a      	add	r3, sp, #616	; 0x268
 8006d68:	445b      	add	r3, fp
 8006d6a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8006d6e:	2500      	movs	r5, #0
 8006d70:	1b63      	subs	r3, r4, r5
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	dc78      	bgt.n	8006e68 <__kernel_rem_pio2+0x1f8>
 8006d76:	4650      	mov	r0, sl
 8006d78:	ec49 8b10 	vmov	d0, r8, r9
 8006d7c:	f000 fc00 	bl	8007580 <scalbn>
 8006d80:	ec57 6b10 	vmov	r6, r7, d0
 8006d84:	2200      	movs	r2, #0
 8006d86:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006d8a:	ee10 0a10 	vmov	r0, s0
 8006d8e:	4639      	mov	r1, r7
 8006d90:	f7f9 fc2a 	bl	80005e8 <__aeabi_dmul>
 8006d94:	ec41 0b10 	vmov	d0, r0, r1
 8006d98:	f000 fb6e 	bl	8007478 <floor>
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	ec51 0b10 	vmov	r0, r1, d0
 8006da2:	4b7e      	ldr	r3, [pc, #504]	; (8006f9c <__kernel_rem_pio2+0x32c>)
 8006da4:	f7f9 fc20 	bl	80005e8 <__aeabi_dmul>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4630      	mov	r0, r6
 8006dae:	4639      	mov	r1, r7
 8006db0:	f7f9 fa62 	bl	8000278 <__aeabi_dsub>
 8006db4:	460f      	mov	r7, r1
 8006db6:	4606      	mov	r6, r0
 8006db8:	f7f9 feb0 	bl	8000b1c <__aeabi_d2iz>
 8006dbc:	9006      	str	r0, [sp, #24]
 8006dbe:	f7f9 fba9 	bl	8000514 <__aeabi_i2d>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	4639      	mov	r1, r7
 8006dca:	f7f9 fa55 	bl	8000278 <__aeabi_dsub>
 8006dce:	f1ba 0f00 	cmp.w	sl, #0
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	460f      	mov	r7, r1
 8006dd6:	dd6c      	ble.n	8006eb2 <__kernel_rem_pio2+0x242>
 8006dd8:	1e62      	subs	r2, r4, #1
 8006dda:	ab0e      	add	r3, sp, #56	; 0x38
 8006ddc:	f1ca 0118 	rsb	r1, sl, #24
 8006de0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006de4:	9d06      	ldr	r5, [sp, #24]
 8006de6:	fa40 f301 	asr.w	r3, r0, r1
 8006dea:	441d      	add	r5, r3
 8006dec:	408b      	lsls	r3, r1
 8006dee:	1ac0      	subs	r0, r0, r3
 8006df0:	ab0e      	add	r3, sp, #56	; 0x38
 8006df2:	9506      	str	r5, [sp, #24]
 8006df4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006df8:	f1ca 0317 	rsb	r3, sl, #23
 8006dfc:	fa40 f303 	asr.w	r3, r0, r3
 8006e00:	9302      	str	r3, [sp, #8]
 8006e02:	9b02      	ldr	r3, [sp, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	dd62      	ble.n	8006ece <__kernel_rem_pio2+0x25e>
 8006e08:	9b06      	ldr	r3, [sp, #24]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	9306      	str	r3, [sp, #24]
 8006e10:	4615      	mov	r5, r2
 8006e12:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006e16:	4294      	cmp	r4, r2
 8006e18:	f300 8095 	bgt.w	8006f46 <__kernel_rem_pio2+0x2d6>
 8006e1c:	f1ba 0f00 	cmp.w	sl, #0
 8006e20:	dd07      	ble.n	8006e32 <__kernel_rem_pio2+0x1c2>
 8006e22:	f1ba 0f01 	cmp.w	sl, #1
 8006e26:	f000 80a2 	beq.w	8006f6e <__kernel_rem_pio2+0x2fe>
 8006e2a:	f1ba 0f02 	cmp.w	sl, #2
 8006e2e:	f000 80c1 	beq.w	8006fb4 <__kernel_rem_pio2+0x344>
 8006e32:	9b02      	ldr	r3, [sp, #8]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d14a      	bne.n	8006ece <__kernel_rem_pio2+0x25e>
 8006e38:	4632      	mov	r2, r6
 8006e3a:	463b      	mov	r3, r7
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	4958      	ldr	r1, [pc, #352]	; (8006fa0 <__kernel_rem_pio2+0x330>)
 8006e40:	f7f9 fa1a 	bl	8000278 <__aeabi_dsub>
 8006e44:	4606      	mov	r6, r0
 8006e46:	460f      	mov	r7, r1
 8006e48:	2d00      	cmp	r5, #0
 8006e4a:	d040      	beq.n	8006ece <__kernel_rem_pio2+0x25e>
 8006e4c:	4650      	mov	r0, sl
 8006e4e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006f90 <__kernel_rem_pio2+0x320>
 8006e52:	f000 fb95 	bl	8007580 <scalbn>
 8006e56:	4630      	mov	r0, r6
 8006e58:	4639      	mov	r1, r7
 8006e5a:	ec53 2b10 	vmov	r2, r3, d0
 8006e5e:	f7f9 fa0b 	bl	8000278 <__aeabi_dsub>
 8006e62:	4606      	mov	r6, r0
 8006e64:	460f      	mov	r7, r1
 8006e66:	e032      	b.n	8006ece <__kernel_rem_pio2+0x25e>
 8006e68:	2200      	movs	r2, #0
 8006e6a:	4b4e      	ldr	r3, [pc, #312]	; (8006fa4 <__kernel_rem_pio2+0x334>)
 8006e6c:	4640      	mov	r0, r8
 8006e6e:	4649      	mov	r1, r9
 8006e70:	f7f9 fbba 	bl	80005e8 <__aeabi_dmul>
 8006e74:	f7f9 fe52 	bl	8000b1c <__aeabi_d2iz>
 8006e78:	f7f9 fb4c 	bl	8000514 <__aeabi_i2d>
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	4b4a      	ldr	r3, [pc, #296]	; (8006fa8 <__kernel_rem_pio2+0x338>)
 8006e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e84:	f7f9 fbb0 	bl	80005e8 <__aeabi_dmul>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	4649      	mov	r1, r9
 8006e90:	f7f9 f9f2 	bl	8000278 <__aeabi_dsub>
 8006e94:	f7f9 fe42 	bl	8000b1c <__aeabi_d2iz>
 8006e98:	ab0e      	add	r3, sp, #56	; 0x38
 8006e9a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006e9e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006ea2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ea6:	f7f9 f9e9 	bl	800027c <__adddf3>
 8006eaa:	3501      	adds	r5, #1
 8006eac:	4680      	mov	r8, r0
 8006eae:	4689      	mov	r9, r1
 8006eb0:	e75e      	b.n	8006d70 <__kernel_rem_pio2+0x100>
 8006eb2:	d105      	bne.n	8006ec0 <__kernel_rem_pio2+0x250>
 8006eb4:	1e63      	subs	r3, r4, #1
 8006eb6:	aa0e      	add	r2, sp, #56	; 0x38
 8006eb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006ebc:	15c3      	asrs	r3, r0, #23
 8006ebe:	e79f      	b.n	8006e00 <__kernel_rem_pio2+0x190>
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	4b3a      	ldr	r3, [pc, #232]	; (8006fac <__kernel_rem_pio2+0x33c>)
 8006ec4:	f7f9 fe16 	bl	8000af4 <__aeabi_dcmpge>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d139      	bne.n	8006f40 <__kernel_rem_pio2+0x2d0>
 8006ecc:	9002      	str	r0, [sp, #8]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	f7f9 fdef 	bl	8000ab8 <__aeabi_dcmpeq>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	f000 80c7 	beq.w	800706e <__kernel_rem_pio2+0x3fe>
 8006ee0:	1e65      	subs	r5, r4, #1
 8006ee2:	462b      	mov	r3, r5
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	9904      	ldr	r1, [sp, #16]
 8006ee8:	428b      	cmp	r3, r1
 8006eea:	da6a      	bge.n	8006fc2 <__kernel_rem_pio2+0x352>
 8006eec:	2a00      	cmp	r2, #0
 8006eee:	f000 8088 	beq.w	8007002 <__kernel_rem_pio2+0x392>
 8006ef2:	ab0e      	add	r3, sp, #56	; 0x38
 8006ef4:	f1aa 0a18 	sub.w	sl, sl, #24
 8006ef8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 80b4 	beq.w	800706a <__kernel_rem_pio2+0x3fa>
 8006f02:	4650      	mov	r0, sl
 8006f04:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006f90 <__kernel_rem_pio2+0x320>
 8006f08:	f000 fb3a 	bl	8007580 <scalbn>
 8006f0c:	00ec      	lsls	r4, r5, #3
 8006f0e:	ab72      	add	r3, sp, #456	; 0x1c8
 8006f10:	191e      	adds	r6, r3, r4
 8006f12:	ec59 8b10 	vmov	r8, r9, d0
 8006f16:	f106 0a08 	add.w	sl, r6, #8
 8006f1a:	462f      	mov	r7, r5
 8006f1c:	2f00      	cmp	r7, #0
 8006f1e:	f280 80df 	bge.w	80070e0 <__kernel_rem_pio2+0x470>
 8006f22:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006f88 <__kernel_rem_pio2+0x318>
 8006f26:	f04f 0a00 	mov.w	sl, #0
 8006f2a:	eba5 030a 	sub.w	r3, r5, sl
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f2c0 810a 	blt.w	8007148 <__kernel_rem_pio2+0x4d8>
 8006f34:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006fb0 <__kernel_rem_pio2+0x340>
 8006f38:	ec59 8b18 	vmov	r8, r9, d8
 8006f3c:	2700      	movs	r7, #0
 8006f3e:	e0f5      	b.n	800712c <__kernel_rem_pio2+0x4bc>
 8006f40:	2302      	movs	r3, #2
 8006f42:	9302      	str	r3, [sp, #8]
 8006f44:	e760      	b.n	8006e08 <__kernel_rem_pio2+0x198>
 8006f46:	ab0e      	add	r3, sp, #56	; 0x38
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	b94d      	cbnz	r5, 8006f62 <__kernel_rem_pio2+0x2f2>
 8006f4e:	b12b      	cbz	r3, 8006f5c <__kernel_rem_pio2+0x2ec>
 8006f50:	a80e      	add	r0, sp, #56	; 0x38
 8006f52:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006f56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	3201      	adds	r2, #1
 8006f5e:	461d      	mov	r5, r3
 8006f60:	e759      	b.n	8006e16 <__kernel_rem_pio2+0x1a6>
 8006f62:	a80e      	add	r0, sp, #56	; 0x38
 8006f64:	1acb      	subs	r3, r1, r3
 8006f66:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006f6a:	462b      	mov	r3, r5
 8006f6c:	e7f6      	b.n	8006f5c <__kernel_rem_pio2+0x2ec>
 8006f6e:	1e62      	subs	r2, r4, #1
 8006f70:	ab0e      	add	r3, sp, #56	; 0x38
 8006f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f76:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006f7a:	a90e      	add	r1, sp, #56	; 0x38
 8006f7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006f80:	e757      	b.n	8006e32 <__kernel_rem_pio2+0x1c2>
 8006f82:	bf00      	nop
 8006f84:	f3af 8000 	nop.w
	...
 8006f94:	3ff00000 	.word	0x3ff00000
 8006f98:	08007a08 	.word	0x08007a08
 8006f9c:	40200000 	.word	0x40200000
 8006fa0:	3ff00000 	.word	0x3ff00000
 8006fa4:	3e700000 	.word	0x3e700000
 8006fa8:	41700000 	.word	0x41700000
 8006fac:	3fe00000 	.word	0x3fe00000
 8006fb0:	080079c8 	.word	0x080079c8
 8006fb4:	1e62      	subs	r2, r4, #1
 8006fb6:	ab0e      	add	r3, sp, #56	; 0x38
 8006fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fbc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006fc0:	e7db      	b.n	8006f7a <__kernel_rem_pio2+0x30a>
 8006fc2:	a90e      	add	r1, sp, #56	; 0x38
 8006fc4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	e78b      	b.n	8006ee6 <__kernel_rem_pio2+0x276>
 8006fce:	3301      	adds	r3, #1
 8006fd0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006fd4:	2900      	cmp	r1, #0
 8006fd6:	d0fa      	beq.n	8006fce <__kernel_rem_pio2+0x35e>
 8006fd8:	9a08      	ldr	r2, [sp, #32]
 8006fda:	4422      	add	r2, r4
 8006fdc:	00d2      	lsls	r2, r2, #3
 8006fde:	a922      	add	r1, sp, #136	; 0x88
 8006fe0:	18e3      	adds	r3, r4, r3
 8006fe2:	9206      	str	r2, [sp, #24]
 8006fe4:	440a      	add	r2, r1
 8006fe6:	9302      	str	r3, [sp, #8]
 8006fe8:	f10b 0108 	add.w	r1, fp, #8
 8006fec:	f102 0308 	add.w	r3, r2, #8
 8006ff0:	1c66      	adds	r6, r4, #1
 8006ff2:	910a      	str	r1, [sp, #40]	; 0x28
 8006ff4:	2500      	movs	r5, #0
 8006ff6:	930d      	str	r3, [sp, #52]	; 0x34
 8006ff8:	9b02      	ldr	r3, [sp, #8]
 8006ffa:	42b3      	cmp	r3, r6
 8006ffc:	da04      	bge.n	8007008 <__kernel_rem_pio2+0x398>
 8006ffe:	461c      	mov	r4, r3
 8007000:	e6a6      	b.n	8006d50 <__kernel_rem_pio2+0xe0>
 8007002:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007004:	2301      	movs	r3, #1
 8007006:	e7e3      	b.n	8006fd0 <__kernel_rem_pio2+0x360>
 8007008:	9b06      	ldr	r3, [sp, #24]
 800700a:	18ef      	adds	r7, r5, r3
 800700c:	ab22      	add	r3, sp, #136	; 0x88
 800700e:	441f      	add	r7, r3
 8007010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007012:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007016:	f7f9 fa7d 	bl	8000514 <__aeabi_i2d>
 800701a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701c:	461c      	mov	r4, r3
 800701e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007020:	e9c7 0100 	strd	r0, r1, [r7]
 8007024:	eb03 0b05 	add.w	fp, r3, r5
 8007028:	2700      	movs	r7, #0
 800702a:	f04f 0800 	mov.w	r8, #0
 800702e:	f04f 0900 	mov.w	r9, #0
 8007032:	9b07      	ldr	r3, [sp, #28]
 8007034:	429f      	cmp	r7, r3
 8007036:	dd08      	ble.n	800704a <__kernel_rem_pio2+0x3da>
 8007038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800703a:	aa72      	add	r2, sp, #456	; 0x1c8
 800703c:	18eb      	adds	r3, r5, r3
 800703e:	4413      	add	r3, r2
 8007040:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8007044:	3601      	adds	r6, #1
 8007046:	3508      	adds	r5, #8
 8007048:	e7d6      	b.n	8006ff8 <__kernel_rem_pio2+0x388>
 800704a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800704e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007052:	f7f9 fac9 	bl	80005e8 <__aeabi_dmul>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	4640      	mov	r0, r8
 800705c:	4649      	mov	r1, r9
 800705e:	f7f9 f90d 	bl	800027c <__adddf3>
 8007062:	3701      	adds	r7, #1
 8007064:	4680      	mov	r8, r0
 8007066:	4689      	mov	r9, r1
 8007068:	e7e3      	b.n	8007032 <__kernel_rem_pio2+0x3c2>
 800706a:	3d01      	subs	r5, #1
 800706c:	e741      	b.n	8006ef2 <__kernel_rem_pio2+0x282>
 800706e:	f1ca 0000 	rsb	r0, sl, #0
 8007072:	ec47 6b10 	vmov	d0, r6, r7
 8007076:	f000 fa83 	bl	8007580 <scalbn>
 800707a:	ec57 6b10 	vmov	r6, r7, d0
 800707e:	2200      	movs	r2, #0
 8007080:	4b99      	ldr	r3, [pc, #612]	; (80072e8 <__kernel_rem_pio2+0x678>)
 8007082:	ee10 0a10 	vmov	r0, s0
 8007086:	4639      	mov	r1, r7
 8007088:	f7f9 fd34 	bl	8000af4 <__aeabi_dcmpge>
 800708c:	b1f8      	cbz	r0, 80070ce <__kernel_rem_pio2+0x45e>
 800708e:	2200      	movs	r2, #0
 8007090:	4b96      	ldr	r3, [pc, #600]	; (80072ec <__kernel_rem_pio2+0x67c>)
 8007092:	4630      	mov	r0, r6
 8007094:	4639      	mov	r1, r7
 8007096:	f7f9 faa7 	bl	80005e8 <__aeabi_dmul>
 800709a:	f7f9 fd3f 	bl	8000b1c <__aeabi_d2iz>
 800709e:	4680      	mov	r8, r0
 80070a0:	f7f9 fa38 	bl	8000514 <__aeabi_i2d>
 80070a4:	2200      	movs	r2, #0
 80070a6:	4b90      	ldr	r3, [pc, #576]	; (80072e8 <__kernel_rem_pio2+0x678>)
 80070a8:	f7f9 fa9e 	bl	80005e8 <__aeabi_dmul>
 80070ac:	460b      	mov	r3, r1
 80070ae:	4602      	mov	r2, r0
 80070b0:	4639      	mov	r1, r7
 80070b2:	4630      	mov	r0, r6
 80070b4:	f7f9 f8e0 	bl	8000278 <__aeabi_dsub>
 80070b8:	f7f9 fd30 	bl	8000b1c <__aeabi_d2iz>
 80070bc:	1c65      	adds	r5, r4, #1
 80070be:	ab0e      	add	r3, sp, #56	; 0x38
 80070c0:	f10a 0a18 	add.w	sl, sl, #24
 80070c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80070c8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80070cc:	e719      	b.n	8006f02 <__kernel_rem_pio2+0x292>
 80070ce:	4630      	mov	r0, r6
 80070d0:	4639      	mov	r1, r7
 80070d2:	f7f9 fd23 	bl	8000b1c <__aeabi_d2iz>
 80070d6:	ab0e      	add	r3, sp, #56	; 0x38
 80070d8:	4625      	mov	r5, r4
 80070da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80070de:	e710      	b.n	8006f02 <__kernel_rem_pio2+0x292>
 80070e0:	ab0e      	add	r3, sp, #56	; 0x38
 80070e2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80070e6:	f7f9 fa15 	bl	8000514 <__aeabi_i2d>
 80070ea:	4642      	mov	r2, r8
 80070ec:	464b      	mov	r3, r9
 80070ee:	f7f9 fa7b 	bl	80005e8 <__aeabi_dmul>
 80070f2:	2200      	movs	r2, #0
 80070f4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80070f8:	4b7c      	ldr	r3, [pc, #496]	; (80072ec <__kernel_rem_pio2+0x67c>)
 80070fa:	4640      	mov	r0, r8
 80070fc:	4649      	mov	r1, r9
 80070fe:	f7f9 fa73 	bl	80005e8 <__aeabi_dmul>
 8007102:	3f01      	subs	r7, #1
 8007104:	4680      	mov	r8, r0
 8007106:	4689      	mov	r9, r1
 8007108:	e708      	b.n	8006f1c <__kernel_rem_pio2+0x2ac>
 800710a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8007116:	f7f9 fa67 	bl	80005e8 <__aeabi_dmul>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4640      	mov	r0, r8
 8007120:	4649      	mov	r1, r9
 8007122:	f7f9 f8ab 	bl	800027c <__adddf3>
 8007126:	3701      	adds	r7, #1
 8007128:	4680      	mov	r8, r0
 800712a:	4689      	mov	r9, r1
 800712c:	9b04      	ldr	r3, [sp, #16]
 800712e:	429f      	cmp	r7, r3
 8007130:	dc01      	bgt.n	8007136 <__kernel_rem_pio2+0x4c6>
 8007132:	45ba      	cmp	sl, r7
 8007134:	dae9      	bge.n	800710a <__kernel_rem_pio2+0x49a>
 8007136:	ab4a      	add	r3, sp, #296	; 0x128
 8007138:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800713c:	e9c3 8900 	strd	r8, r9, [r3]
 8007140:	f10a 0a01 	add.w	sl, sl, #1
 8007144:	3e08      	subs	r6, #8
 8007146:	e6f0      	b.n	8006f2a <__kernel_rem_pio2+0x2ba>
 8007148:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800714a:	2b03      	cmp	r3, #3
 800714c:	d85b      	bhi.n	8007206 <__kernel_rem_pio2+0x596>
 800714e:	e8df f003 	tbb	[pc, r3]
 8007152:	264a      	.short	0x264a
 8007154:	0226      	.short	0x0226
 8007156:	ab9a      	add	r3, sp, #616	; 0x268
 8007158:	441c      	add	r4, r3
 800715a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800715e:	46a2      	mov	sl, r4
 8007160:	46ab      	mov	fp, r5
 8007162:	f1bb 0f00 	cmp.w	fp, #0
 8007166:	dc6c      	bgt.n	8007242 <__kernel_rem_pio2+0x5d2>
 8007168:	46a2      	mov	sl, r4
 800716a:	46ab      	mov	fp, r5
 800716c:	f1bb 0f01 	cmp.w	fp, #1
 8007170:	f300 8086 	bgt.w	8007280 <__kernel_rem_pio2+0x610>
 8007174:	2000      	movs	r0, #0
 8007176:	2100      	movs	r1, #0
 8007178:	2d01      	cmp	r5, #1
 800717a:	f300 80a0 	bgt.w	80072be <__kernel_rem_pio2+0x64e>
 800717e:	9b02      	ldr	r3, [sp, #8]
 8007180:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007184:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007188:	2b00      	cmp	r3, #0
 800718a:	f040 809e 	bne.w	80072ca <__kernel_rem_pio2+0x65a>
 800718e:	9b01      	ldr	r3, [sp, #4]
 8007190:	e9c3 7800 	strd	r7, r8, [r3]
 8007194:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007198:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800719c:	e033      	b.n	8007206 <__kernel_rem_pio2+0x596>
 800719e:	3408      	adds	r4, #8
 80071a0:	ab4a      	add	r3, sp, #296	; 0x128
 80071a2:	441c      	add	r4, r3
 80071a4:	462e      	mov	r6, r5
 80071a6:	2000      	movs	r0, #0
 80071a8:	2100      	movs	r1, #0
 80071aa:	2e00      	cmp	r6, #0
 80071ac:	da3a      	bge.n	8007224 <__kernel_rem_pio2+0x5b4>
 80071ae:	9b02      	ldr	r3, [sp, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d03d      	beq.n	8007230 <__kernel_rem_pio2+0x5c0>
 80071b4:	4602      	mov	r2, r0
 80071b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071ba:	9c01      	ldr	r4, [sp, #4]
 80071bc:	e9c4 2300 	strd	r2, r3, [r4]
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80071c8:	f7f9 f856 	bl	8000278 <__aeabi_dsub>
 80071cc:	ae4c      	add	r6, sp, #304	; 0x130
 80071ce:	2401      	movs	r4, #1
 80071d0:	42a5      	cmp	r5, r4
 80071d2:	da30      	bge.n	8007236 <__kernel_rem_pio2+0x5c6>
 80071d4:	9b02      	ldr	r3, [sp, #8]
 80071d6:	b113      	cbz	r3, 80071de <__kernel_rem_pio2+0x56e>
 80071d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071dc:	4619      	mov	r1, r3
 80071de:	9b01      	ldr	r3, [sp, #4]
 80071e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80071e4:	e00f      	b.n	8007206 <__kernel_rem_pio2+0x596>
 80071e6:	ab9a      	add	r3, sp, #616	; 0x268
 80071e8:	441c      	add	r4, r3
 80071ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80071ee:	2000      	movs	r0, #0
 80071f0:	2100      	movs	r1, #0
 80071f2:	2d00      	cmp	r5, #0
 80071f4:	da10      	bge.n	8007218 <__kernel_rem_pio2+0x5a8>
 80071f6:	9b02      	ldr	r3, [sp, #8]
 80071f8:	b113      	cbz	r3, 8007200 <__kernel_rem_pio2+0x590>
 80071fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071fe:	4619      	mov	r1, r3
 8007200:	9b01      	ldr	r3, [sp, #4]
 8007202:	e9c3 0100 	strd	r0, r1, [r3]
 8007206:	9b06      	ldr	r3, [sp, #24]
 8007208:	f003 0007 	and.w	r0, r3, #7
 800720c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007210:	ecbd 8b02 	vpop	{d8}
 8007214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007218:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800721c:	f7f9 f82e 	bl	800027c <__adddf3>
 8007220:	3d01      	subs	r5, #1
 8007222:	e7e6      	b.n	80071f2 <__kernel_rem_pio2+0x582>
 8007224:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007228:	f7f9 f828 	bl	800027c <__adddf3>
 800722c:	3e01      	subs	r6, #1
 800722e:	e7bc      	b.n	80071aa <__kernel_rem_pio2+0x53a>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	e7c1      	b.n	80071ba <__kernel_rem_pio2+0x54a>
 8007236:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800723a:	f7f9 f81f 	bl	800027c <__adddf3>
 800723e:	3401      	adds	r4, #1
 8007240:	e7c6      	b.n	80071d0 <__kernel_rem_pio2+0x560>
 8007242:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8007246:	ed3a 7b02 	vldmdb	sl!, {d7}
 800724a:	4640      	mov	r0, r8
 800724c:	ec53 2b17 	vmov	r2, r3, d7
 8007250:	4649      	mov	r1, r9
 8007252:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007256:	f7f9 f811 	bl	800027c <__adddf3>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4606      	mov	r6, r0
 8007260:	460f      	mov	r7, r1
 8007262:	4640      	mov	r0, r8
 8007264:	4649      	mov	r1, r9
 8007266:	f7f9 f807 	bl	8000278 <__aeabi_dsub>
 800726a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800726e:	f7f9 f805 	bl	800027c <__adddf3>
 8007272:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007276:	e9ca 0100 	strd	r0, r1, [sl]
 800727a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800727e:	e770      	b.n	8007162 <__kernel_rem_pio2+0x4f2>
 8007280:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8007284:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007288:	4630      	mov	r0, r6
 800728a:	ec53 2b17 	vmov	r2, r3, d7
 800728e:	4639      	mov	r1, r7
 8007290:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007294:	f7f8 fff2 	bl	800027c <__adddf3>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4680      	mov	r8, r0
 800729e:	4689      	mov	r9, r1
 80072a0:	4630      	mov	r0, r6
 80072a2:	4639      	mov	r1, r7
 80072a4:	f7f8 ffe8 	bl	8000278 <__aeabi_dsub>
 80072a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ac:	f7f8 ffe6 	bl	800027c <__adddf3>
 80072b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072b4:	e9ca 0100 	strd	r0, r1, [sl]
 80072b8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80072bc:	e756      	b.n	800716c <__kernel_rem_pio2+0x4fc>
 80072be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80072c2:	f7f8 ffdb 	bl	800027c <__adddf3>
 80072c6:	3d01      	subs	r5, #1
 80072c8:	e756      	b.n	8007178 <__kernel_rem_pio2+0x508>
 80072ca:	9b01      	ldr	r3, [sp, #4]
 80072cc:	9a01      	ldr	r2, [sp, #4]
 80072ce:	601f      	str	r7, [r3, #0]
 80072d0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80072d4:	605c      	str	r4, [r3, #4]
 80072d6:	609d      	str	r5, [r3, #8]
 80072d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80072dc:	60d3      	str	r3, [r2, #12]
 80072de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072e2:	6110      	str	r0, [r2, #16]
 80072e4:	6153      	str	r3, [r2, #20]
 80072e6:	e78e      	b.n	8007206 <__kernel_rem_pio2+0x596>
 80072e8:	41700000 	.word	0x41700000
 80072ec:	3e700000 	.word	0x3e700000

080072f0 <__kernel_sin>:
 80072f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	ec55 4b10 	vmov	r4, r5, d0
 80072f8:	b085      	sub	sp, #20
 80072fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80072fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007302:	ed8d 1b00 	vstr	d1, [sp]
 8007306:	9002      	str	r0, [sp, #8]
 8007308:	da06      	bge.n	8007318 <__kernel_sin+0x28>
 800730a:	ee10 0a10 	vmov	r0, s0
 800730e:	4629      	mov	r1, r5
 8007310:	f7f9 fc04 	bl	8000b1c <__aeabi_d2iz>
 8007314:	2800      	cmp	r0, #0
 8007316:	d051      	beq.n	80073bc <__kernel_sin+0xcc>
 8007318:	4622      	mov	r2, r4
 800731a:	462b      	mov	r3, r5
 800731c:	4620      	mov	r0, r4
 800731e:	4629      	mov	r1, r5
 8007320:	f7f9 f962 	bl	80005e8 <__aeabi_dmul>
 8007324:	4682      	mov	sl, r0
 8007326:	468b      	mov	fp, r1
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4620      	mov	r0, r4
 800732e:	4629      	mov	r1, r5
 8007330:	f7f9 f95a 	bl	80005e8 <__aeabi_dmul>
 8007334:	a341      	add	r3, pc, #260	; (adr r3, 800743c <__kernel_sin+0x14c>)
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	4680      	mov	r8, r0
 800733c:	4689      	mov	r9, r1
 800733e:	4650      	mov	r0, sl
 8007340:	4659      	mov	r1, fp
 8007342:	f7f9 f951 	bl	80005e8 <__aeabi_dmul>
 8007346:	a33f      	add	r3, pc, #252	; (adr r3, 8007444 <__kernel_sin+0x154>)
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	f7f8 ff94 	bl	8000278 <__aeabi_dsub>
 8007350:	4652      	mov	r2, sl
 8007352:	465b      	mov	r3, fp
 8007354:	f7f9 f948 	bl	80005e8 <__aeabi_dmul>
 8007358:	a33c      	add	r3, pc, #240	; (adr r3, 800744c <__kernel_sin+0x15c>)
 800735a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735e:	f7f8 ff8d 	bl	800027c <__adddf3>
 8007362:	4652      	mov	r2, sl
 8007364:	465b      	mov	r3, fp
 8007366:	f7f9 f93f 	bl	80005e8 <__aeabi_dmul>
 800736a:	a33a      	add	r3, pc, #232	; (adr r3, 8007454 <__kernel_sin+0x164>)
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	f7f8 ff82 	bl	8000278 <__aeabi_dsub>
 8007374:	4652      	mov	r2, sl
 8007376:	465b      	mov	r3, fp
 8007378:	f7f9 f936 	bl	80005e8 <__aeabi_dmul>
 800737c:	a337      	add	r3, pc, #220	; (adr r3, 800745c <__kernel_sin+0x16c>)
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	f7f8 ff7b 	bl	800027c <__adddf3>
 8007386:	9b02      	ldr	r3, [sp, #8]
 8007388:	4606      	mov	r6, r0
 800738a:	460f      	mov	r7, r1
 800738c:	b9db      	cbnz	r3, 80073c6 <__kernel_sin+0xd6>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	4650      	mov	r0, sl
 8007394:	4659      	mov	r1, fp
 8007396:	f7f9 f927 	bl	80005e8 <__aeabi_dmul>
 800739a:	a325      	add	r3, pc, #148	; (adr r3, 8007430 <__kernel_sin+0x140>)
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	f7f8 ff6a 	bl	8000278 <__aeabi_dsub>
 80073a4:	4642      	mov	r2, r8
 80073a6:	464b      	mov	r3, r9
 80073a8:	f7f9 f91e 	bl	80005e8 <__aeabi_dmul>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4620      	mov	r0, r4
 80073b2:	4629      	mov	r1, r5
 80073b4:	f7f8 ff62 	bl	800027c <__adddf3>
 80073b8:	4604      	mov	r4, r0
 80073ba:	460d      	mov	r5, r1
 80073bc:	ec45 4b10 	vmov	d0, r4, r5
 80073c0:	b005      	add	sp, #20
 80073c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c6:	2200      	movs	r2, #0
 80073c8:	4b1b      	ldr	r3, [pc, #108]	; (8007438 <__kernel_sin+0x148>)
 80073ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073ce:	f7f9 f90b 	bl	80005e8 <__aeabi_dmul>
 80073d2:	4632      	mov	r2, r6
 80073d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073d8:	463b      	mov	r3, r7
 80073da:	4640      	mov	r0, r8
 80073dc:	4649      	mov	r1, r9
 80073de:	f7f9 f903 	bl	80005e8 <__aeabi_dmul>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073ea:	f7f8 ff45 	bl	8000278 <__aeabi_dsub>
 80073ee:	4652      	mov	r2, sl
 80073f0:	465b      	mov	r3, fp
 80073f2:	f7f9 f8f9 	bl	80005e8 <__aeabi_dmul>
 80073f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073fa:	f7f8 ff3d 	bl	8000278 <__aeabi_dsub>
 80073fe:	a30c      	add	r3, pc, #48	; (adr r3, 8007430 <__kernel_sin+0x140>)
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	4606      	mov	r6, r0
 8007406:	460f      	mov	r7, r1
 8007408:	4640      	mov	r0, r8
 800740a:	4649      	mov	r1, r9
 800740c:	f7f9 f8ec 	bl	80005e8 <__aeabi_dmul>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	4630      	mov	r0, r6
 8007416:	4639      	mov	r1, r7
 8007418:	f7f8 ff30 	bl	800027c <__adddf3>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4620      	mov	r0, r4
 8007422:	4629      	mov	r1, r5
 8007424:	f7f8 ff28 	bl	8000278 <__aeabi_dsub>
 8007428:	e7c6      	b.n	80073b8 <__kernel_sin+0xc8>
 800742a:	bf00      	nop
 800742c:	f3af 8000 	nop.w
 8007430:	55555549 	.word	0x55555549
 8007434:	3fc55555 	.word	0x3fc55555
 8007438:	3fe00000 	.word	0x3fe00000
 800743c:	5acfd57c 	.word	0x5acfd57c
 8007440:	3de5d93a 	.word	0x3de5d93a
 8007444:	8a2b9ceb 	.word	0x8a2b9ceb
 8007448:	3e5ae5e6 	.word	0x3e5ae5e6
 800744c:	57b1fe7d 	.word	0x57b1fe7d
 8007450:	3ec71de3 	.word	0x3ec71de3
 8007454:	19c161d5 	.word	0x19c161d5
 8007458:	3f2a01a0 	.word	0x3f2a01a0
 800745c:	1110f8a6 	.word	0x1110f8a6
 8007460:	3f811111 	.word	0x3f811111

08007464 <fabs>:
 8007464:	ec51 0b10 	vmov	r0, r1, d0
 8007468:	ee10 2a10 	vmov	r2, s0
 800746c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007470:	ec43 2b10 	vmov	d0, r2, r3
 8007474:	4770      	bx	lr
	...

08007478 <floor>:
 8007478:	ec51 0b10 	vmov	r0, r1, d0
 800747c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007480:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007484:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007488:	2e13      	cmp	r6, #19
 800748a:	460c      	mov	r4, r1
 800748c:	ee10 5a10 	vmov	r5, s0
 8007490:	4680      	mov	r8, r0
 8007492:	dc34      	bgt.n	80074fe <floor+0x86>
 8007494:	2e00      	cmp	r6, #0
 8007496:	da16      	bge.n	80074c6 <floor+0x4e>
 8007498:	a335      	add	r3, pc, #212	; (adr r3, 8007570 <floor+0xf8>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7f8 feed 	bl	800027c <__adddf3>
 80074a2:	2200      	movs	r2, #0
 80074a4:	2300      	movs	r3, #0
 80074a6:	f7f9 fb2f 	bl	8000b08 <__aeabi_dcmpgt>
 80074aa:	b148      	cbz	r0, 80074c0 <floor+0x48>
 80074ac:	2c00      	cmp	r4, #0
 80074ae:	da59      	bge.n	8007564 <floor+0xec>
 80074b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80074b4:	4a30      	ldr	r2, [pc, #192]	; (8007578 <floor+0x100>)
 80074b6:	432b      	orrs	r3, r5
 80074b8:	2500      	movs	r5, #0
 80074ba:	42ab      	cmp	r3, r5
 80074bc:	bf18      	it	ne
 80074be:	4614      	movne	r4, r2
 80074c0:	4621      	mov	r1, r4
 80074c2:	4628      	mov	r0, r5
 80074c4:	e025      	b.n	8007512 <floor+0x9a>
 80074c6:	4f2d      	ldr	r7, [pc, #180]	; (800757c <floor+0x104>)
 80074c8:	4137      	asrs	r7, r6
 80074ca:	ea01 0307 	and.w	r3, r1, r7
 80074ce:	4303      	orrs	r3, r0
 80074d0:	d01f      	beq.n	8007512 <floor+0x9a>
 80074d2:	a327      	add	r3, pc, #156	; (adr r3, 8007570 <floor+0xf8>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f7f8 fed0 	bl	800027c <__adddf3>
 80074dc:	2200      	movs	r2, #0
 80074de:	2300      	movs	r3, #0
 80074e0:	f7f9 fb12 	bl	8000b08 <__aeabi_dcmpgt>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d0eb      	beq.n	80074c0 <floor+0x48>
 80074e8:	2c00      	cmp	r4, #0
 80074ea:	bfbe      	ittt	lt
 80074ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80074f0:	fa43 f606 	asrlt.w	r6, r3, r6
 80074f4:	19a4      	addlt	r4, r4, r6
 80074f6:	ea24 0407 	bic.w	r4, r4, r7
 80074fa:	2500      	movs	r5, #0
 80074fc:	e7e0      	b.n	80074c0 <floor+0x48>
 80074fe:	2e33      	cmp	r6, #51	; 0x33
 8007500:	dd0b      	ble.n	800751a <floor+0xa2>
 8007502:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007506:	d104      	bne.n	8007512 <floor+0x9a>
 8007508:	ee10 2a10 	vmov	r2, s0
 800750c:	460b      	mov	r3, r1
 800750e:	f7f8 feb5 	bl	800027c <__adddf3>
 8007512:	ec41 0b10 	vmov	d0, r0, r1
 8007516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800751a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800751e:	f04f 33ff 	mov.w	r3, #4294967295
 8007522:	fa23 f707 	lsr.w	r7, r3, r7
 8007526:	4207      	tst	r7, r0
 8007528:	d0f3      	beq.n	8007512 <floor+0x9a>
 800752a:	a311      	add	r3, pc, #68	; (adr r3, 8007570 <floor+0xf8>)
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	f7f8 fea4 	bl	800027c <__adddf3>
 8007534:	2200      	movs	r2, #0
 8007536:	2300      	movs	r3, #0
 8007538:	f7f9 fae6 	bl	8000b08 <__aeabi_dcmpgt>
 800753c:	2800      	cmp	r0, #0
 800753e:	d0bf      	beq.n	80074c0 <floor+0x48>
 8007540:	2c00      	cmp	r4, #0
 8007542:	da02      	bge.n	800754a <floor+0xd2>
 8007544:	2e14      	cmp	r6, #20
 8007546:	d103      	bne.n	8007550 <floor+0xd8>
 8007548:	3401      	adds	r4, #1
 800754a:	ea25 0507 	bic.w	r5, r5, r7
 800754e:	e7b7      	b.n	80074c0 <floor+0x48>
 8007550:	2301      	movs	r3, #1
 8007552:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007556:	fa03 f606 	lsl.w	r6, r3, r6
 800755a:	4435      	add	r5, r6
 800755c:	4545      	cmp	r5, r8
 800755e:	bf38      	it	cc
 8007560:	18e4      	addcc	r4, r4, r3
 8007562:	e7f2      	b.n	800754a <floor+0xd2>
 8007564:	2500      	movs	r5, #0
 8007566:	462c      	mov	r4, r5
 8007568:	e7aa      	b.n	80074c0 <floor+0x48>
 800756a:	bf00      	nop
 800756c:	f3af 8000 	nop.w
 8007570:	8800759c 	.word	0x8800759c
 8007574:	7e37e43c 	.word	0x7e37e43c
 8007578:	bff00000 	.word	0xbff00000
 800757c:	000fffff 	.word	0x000fffff

08007580 <scalbn>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	ec55 4b10 	vmov	r4, r5, d0
 8007586:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800758a:	4606      	mov	r6, r0
 800758c:	462b      	mov	r3, r5
 800758e:	b9aa      	cbnz	r2, 80075bc <scalbn+0x3c>
 8007590:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007594:	4323      	orrs	r3, r4
 8007596:	d03b      	beq.n	8007610 <scalbn+0x90>
 8007598:	4b31      	ldr	r3, [pc, #196]	; (8007660 <scalbn+0xe0>)
 800759a:	4629      	mov	r1, r5
 800759c:	2200      	movs	r2, #0
 800759e:	ee10 0a10 	vmov	r0, s0
 80075a2:	f7f9 f821 	bl	80005e8 <__aeabi_dmul>
 80075a6:	4b2f      	ldr	r3, [pc, #188]	; (8007664 <scalbn+0xe4>)
 80075a8:	429e      	cmp	r6, r3
 80075aa:	4604      	mov	r4, r0
 80075ac:	460d      	mov	r5, r1
 80075ae:	da12      	bge.n	80075d6 <scalbn+0x56>
 80075b0:	a327      	add	r3, pc, #156	; (adr r3, 8007650 <scalbn+0xd0>)
 80075b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b6:	f7f9 f817 	bl	80005e8 <__aeabi_dmul>
 80075ba:	e009      	b.n	80075d0 <scalbn+0x50>
 80075bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80075c0:	428a      	cmp	r2, r1
 80075c2:	d10c      	bne.n	80075de <scalbn+0x5e>
 80075c4:	ee10 2a10 	vmov	r2, s0
 80075c8:	4620      	mov	r0, r4
 80075ca:	4629      	mov	r1, r5
 80075cc:	f7f8 fe56 	bl	800027c <__adddf3>
 80075d0:	4604      	mov	r4, r0
 80075d2:	460d      	mov	r5, r1
 80075d4:	e01c      	b.n	8007610 <scalbn+0x90>
 80075d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80075da:	460b      	mov	r3, r1
 80075dc:	3a36      	subs	r2, #54	; 0x36
 80075de:	4432      	add	r2, r6
 80075e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80075e4:	428a      	cmp	r2, r1
 80075e6:	dd0b      	ble.n	8007600 <scalbn+0x80>
 80075e8:	ec45 4b11 	vmov	d1, r4, r5
 80075ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007658 <scalbn+0xd8>
 80075f0:	f000 f83c 	bl	800766c <copysign>
 80075f4:	a318      	add	r3, pc, #96	; (adr r3, 8007658 <scalbn+0xd8>)
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	ec51 0b10 	vmov	r0, r1, d0
 80075fe:	e7da      	b.n	80075b6 <scalbn+0x36>
 8007600:	2a00      	cmp	r2, #0
 8007602:	dd08      	ble.n	8007616 <scalbn+0x96>
 8007604:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007608:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800760c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007610:	ec45 4b10 	vmov	d0, r4, r5
 8007614:	bd70      	pop	{r4, r5, r6, pc}
 8007616:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800761a:	da0d      	bge.n	8007638 <scalbn+0xb8>
 800761c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007620:	429e      	cmp	r6, r3
 8007622:	ec45 4b11 	vmov	d1, r4, r5
 8007626:	dce1      	bgt.n	80075ec <scalbn+0x6c>
 8007628:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007650 <scalbn+0xd0>
 800762c:	f000 f81e 	bl	800766c <copysign>
 8007630:	a307      	add	r3, pc, #28	; (adr r3, 8007650 <scalbn+0xd0>)
 8007632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007636:	e7e0      	b.n	80075fa <scalbn+0x7a>
 8007638:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800763c:	3236      	adds	r2, #54	; 0x36
 800763e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007642:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007646:	4620      	mov	r0, r4
 8007648:	4629      	mov	r1, r5
 800764a:	2200      	movs	r2, #0
 800764c:	4b06      	ldr	r3, [pc, #24]	; (8007668 <scalbn+0xe8>)
 800764e:	e7b2      	b.n	80075b6 <scalbn+0x36>
 8007650:	c2f8f359 	.word	0xc2f8f359
 8007654:	01a56e1f 	.word	0x01a56e1f
 8007658:	8800759c 	.word	0x8800759c
 800765c:	7e37e43c 	.word	0x7e37e43c
 8007660:	43500000 	.word	0x43500000
 8007664:	ffff3cb0 	.word	0xffff3cb0
 8007668:	3c900000 	.word	0x3c900000

0800766c <copysign>:
 800766c:	ec51 0b10 	vmov	r0, r1, d0
 8007670:	ee11 0a90 	vmov	r0, s3
 8007674:	ee10 2a10 	vmov	r2, s0
 8007678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800767c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007680:	ea41 0300 	orr.w	r3, r1, r0
 8007684:	ec43 2b10 	vmov	d0, r2, r3
 8007688:	4770      	bx	lr
	...

0800768c <_close>:
 800768c:	4b02      	ldr	r3, [pc, #8]	; (8007698 <_close+0xc>)
 800768e:	2258      	movs	r2, #88	; 0x58
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	f04f 30ff 	mov.w	r0, #4294967295
 8007696:	4770      	bx	lr
 8007698:	20000248 	.word	0x20000248

0800769c <_fstat>:
 800769c:	4b02      	ldr	r3, [pc, #8]	; (80076a8 <_fstat+0xc>)
 800769e:	2258      	movs	r2, #88	; 0x58
 80076a0:	601a      	str	r2, [r3, #0]
 80076a2:	f04f 30ff 	mov.w	r0, #4294967295
 80076a6:	4770      	bx	lr
 80076a8:	20000248 	.word	0x20000248

080076ac <_isatty>:
 80076ac:	4b02      	ldr	r3, [pc, #8]	; (80076b8 <_isatty+0xc>)
 80076ae:	2258      	movs	r2, #88	; 0x58
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	2000      	movs	r0, #0
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	20000248 	.word	0x20000248

080076bc <_lseek>:
 80076bc:	4b02      	ldr	r3, [pc, #8]	; (80076c8 <_lseek+0xc>)
 80076be:	2258      	movs	r2, #88	; 0x58
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	f04f 30ff 	mov.w	r0, #4294967295
 80076c6:	4770      	bx	lr
 80076c8:	20000248 	.word	0x20000248

080076cc <_read>:
 80076cc:	4b02      	ldr	r3, [pc, #8]	; (80076d8 <_read+0xc>)
 80076ce:	2258      	movs	r2, #88	; 0x58
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	f04f 30ff 	mov.w	r0, #4294967295
 80076d6:	4770      	bx	lr
 80076d8:	20000248 	.word	0x20000248

080076dc <_sbrk>:
 80076dc:	4b04      	ldr	r3, [pc, #16]	; (80076f0 <_sbrk+0x14>)
 80076de:	6819      	ldr	r1, [r3, #0]
 80076e0:	4602      	mov	r2, r0
 80076e2:	b909      	cbnz	r1, 80076e8 <_sbrk+0xc>
 80076e4:	4903      	ldr	r1, [pc, #12]	; (80076f4 <_sbrk+0x18>)
 80076e6:	6019      	str	r1, [r3, #0]
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	4402      	add	r2, r0
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	4770      	bx	lr
 80076f0:	20000094 	.word	0x20000094
 80076f4:	20000250 	.word	0x20000250

080076f8 <_write>:
 80076f8:	4b02      	ldr	r3, [pc, #8]	; (8007704 <_write+0xc>)
 80076fa:	2258      	movs	r2, #88	; 0x58
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007702:	4770      	bx	lr
 8007704:	20000248 	.word	0x20000248

08007708 <_init>:
 8007708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770a:	bf00      	nop
 800770c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770e:	bc08      	pop	{r3}
 8007710:	469e      	mov	lr, r3
 8007712:	4770      	bx	lr

08007714 <_fini>:
 8007714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007716:	bf00      	nop
 8007718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771a:	bc08      	pop	{r3}
 800771c:	469e      	mov	lr, r3
 800771e:	4770      	bx	lr
