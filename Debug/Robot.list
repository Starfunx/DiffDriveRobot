
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800ed18  0800ed18  0001ed18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2d0  0800f2d0  000209c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2d0  0800f2d0  0001f2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2d8  0800f2d8  000209c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f2d8  0800f2d8  0001f2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2e0  0800f2e0  0001f2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c4  20000000  0800f2e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  200009c4  0800fca8  000209c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f90  0800fca8  00020f90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209c4  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000ff35  00000000  00000000  000209f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00018f5f  00000000  00000000  00030929  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003328  00000000  00000000  00049888  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000013b8  00000000  00000000  0004cbb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000f4fe4  00000000  00000000  0004df68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001220  00000000  00000000  00142f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00028ffb  00000000  00000000  00144170  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016d16b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a4  00000000  00000000  0016d1e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009c4 	.word	0x200009c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ed00 	.word	0x0800ed00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009c8 	.word	0x200009c8
 80001cc:	0800ed00 	.word	0x0800ed00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f8e:	e003      	b.n	8000f98 <LoopCopyDataInit>

08000f90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f96:	3104      	adds	r1, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fa0:	d3f6      	bcc.n	8000f90 <CopyDataInit>
	ldr	r2, =_sbss
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fa4:	e002      	b.n	8000fac <LoopFillZerobss>

08000fa6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fa6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fa8:	f842 3b04 	str.w	r3, [r2], #4

08000fac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <LoopForever+0x16>)
	cmp	r2, r3
 8000fae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fb0:	d3f9      	bcc.n	8000fa6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fb2:	f006 fc53 	bl	800785c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb6:	f006 fcd3 	bl	8007960 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fba:	f004 ff1b 	bl	8005df4 <main>

08000fbe <LoopForever>:

LoopForever:
    b LoopForever
 8000fbe:	e7fe      	b.n	8000fbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fc0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000fc4:	0800f2e4 	.word	0x0800f2e4
	ldr	r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fcc:	200009c4 	.word	0x200009c4
	ldr	r2, =_sbss
 8000fd0:	200009c4 	.word	0x200009c4
	ldr	r3, = _ebss
 8000fd4:	20000f90 	.word	0x20000f90

08000fd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC1_2_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_Init+0x3c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <HAL_Init+0x3c>)
 8000fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 f93a 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 f80f 	bl	800101c <HAL_InitTick>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	e001      	b.n	800100e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800100a:	f006 fa0b 	bl	8007424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800100e:	79fb      	ldrb	r3, [r7, #7]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40022000 	.word	0x40022000

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <HAL_InitTick+0x68>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d022      	beq.n	8001076 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_InitTick+0x6c>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <HAL_InitTick+0x68>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800103c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001040:	fbb2 f3f3 	udiv	r3, r2, r3
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f946 	bl	80012d6 <HAL_SYSTICK_Config>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10f      	bne.n	8001070 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b0f      	cmp	r3, #15
 8001054:	d809      	bhi.n	800106a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001056:	2200      	movs	r2, #0
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	f04f 30ff 	mov.w	r0, #4294967295
 800105e:	f000 f910 	bl	8001282 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <HAL_InitTick+0x70>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	e007      	b.n	800107a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	e004      	b.n	800107a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e001      	b.n	800107a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000004 	.word	0x20000004
 8001088:	2000000c 	.word	0x2000000c
 800108c:	20000000 	.word	0x20000000

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_IncTick+0x1c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_IncTick+0x20>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4413      	add	r3, r2
 800109e:	4a03      	ldr	r2, [pc, #12]	; (80010ac <HAL_IncTick+0x1c>)
 80010a0:	6013      	str	r3, [r2, #0]
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	20000a1c 	.word	0x20000a1c
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000a1c 	.word	0x20000a1c

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff3e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff31 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa2 	bl	8001228 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d005      	beq.n	8001312 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2204      	movs	r2, #4
 800130a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e029      	b.n	8001366 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 020e 	bic.w	r2, r2, #14
 8001320:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f003 021c 	and.w	r2, r3, #28
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
    }
  }
  return status;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	e17f      	b.n	8001680 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2101      	movs	r1, #1
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 8171 	beq.w	800167a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x38>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b12      	cmp	r3, #18
 80013a6:	d123      	bne.n	80013f0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	6939      	ldr	r1, [r7, #16]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d00b      	beq.n	8001444 <HAL_GPIO_Init+0xd4>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d007      	beq.n	8001444 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001438:	2b11      	cmp	r3, #17
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b12      	cmp	r3, #18
 8001442:	d130      	bne.n	80014a6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800147a:	2201      	movs	r2, #1
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	f003 0201 	and.w	r2, r3, #1
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d118      	bne.n	80014e4 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014b8:	2201      	movs	r2, #1
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	f003 0201 	and.w	r2, r3, #1
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 80ac 	beq.w	800167a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	4b5e      	ldr	r3, [pc, #376]	; (800169c <HAL_GPIO_Init+0x32c>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001526:	4a5d      	ldr	r2, [pc, #372]	; (800169c <HAL_GPIO_Init+0x32c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6613      	str	r3, [r2, #96]	; 0x60
 800152e:	4b5b      	ldr	r3, [pc, #364]	; (800169c <HAL_GPIO_Init+0x32c>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800153a:	4a59      	ldr	r2, [pc, #356]	; (80016a0 <HAL_GPIO_Init+0x330>)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001564:	d025      	beq.n	80015b2 <HAL_GPIO_Init+0x242>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4e      	ldr	r2, [pc, #312]	; (80016a4 <HAL_GPIO_Init+0x334>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01f      	beq.n	80015ae <HAL_GPIO_Init+0x23e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4d      	ldr	r2, [pc, #308]	; (80016a8 <HAL_GPIO_Init+0x338>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d019      	beq.n	80015aa <HAL_GPIO_Init+0x23a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4c      	ldr	r2, [pc, #304]	; (80016ac <HAL_GPIO_Init+0x33c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0x236>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HAL_GPIO_Init+0x340>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00d      	beq.n	80015a2 <HAL_GPIO_Init+0x232>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4a      	ldr	r2, [pc, #296]	; (80016b4 <HAL_GPIO_Init+0x344>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <HAL_GPIO_Init+0x22e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a49      	ldr	r2, [pc, #292]	; (80016b8 <HAL_GPIO_Init+0x348>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d101      	bne.n	800159a <HAL_GPIO_Init+0x22a>
 8001596:	2306      	movs	r3, #6
 8001598:	e00c      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 800159a:	2307      	movs	r3, #7
 800159c:	e00a      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 800159e:	2305      	movs	r3, #5
 80015a0:	e008      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 80015b2:	2300      	movs	r3, #0
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015c4:	4936      	ldr	r1, [pc, #216]	; (80016a0 <HAL_GPIO_Init+0x330>)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015d2:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <HAL_GPIO_Init+0x34c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015f6:	4a31      	ldr	r2, [pc, #196]	; (80016bc <HAL_GPIO_Init+0x34c>)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015fc:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <HAL_GPIO_Init+0x34c>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001620:	4a26      	ldr	r2, [pc, #152]	; (80016bc <HAL_GPIO_Init+0x34c>)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001626:	4b25      	ldr	r3, [pc, #148]	; (80016bc <HAL_GPIO_Init+0x34c>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800164a:	4a1c      	ldr	r2, [pc, #112]	; (80016bc <HAL_GPIO_Init+0x34c>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_GPIO_Init+0x34c>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001674:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_GPIO_Init+0x34c>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa22 f303 	lsr.w	r3, r2, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	f47f ae78 	bne.w	8001380 <HAL_GPIO_Init+0x10>
  }
}
 8001690:	bf00      	nop
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010000 	.word	0x40010000
 80016a4:	48000400 	.word	0x48000400
 80016a8:	48000800 	.word	0x48000800
 80016ac:	48000c00 	.word	0x48000c00
 80016b0:	48001000 	.word	0x48001000
 80016b4:	48001400 	.word	0x48001400
 80016b8:	48001800 	.word	0x48001800
 80016bc:	40010400 	.word	0x40010400

080016c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
 80016cc:	4613      	mov	r3, r2
 80016ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d0:	787b      	ldrb	r3, [r7, #1]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016dc:	e002      	b.n	80016e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <HAL_PWREx_GetVoltageRange+0x18>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40007000 	.word	0x40007000

0800170c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800171a:	d130      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800171c:	4b23      	ldr	r3, [pc, #140]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001728:	d038      	beq.n	800179c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001732:	4a1e      	ldr	r2, [pc, #120]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001734:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001738:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2232      	movs	r2, #50	; 0x32
 8001740:	fb02 f303 	mul.w	r3, r2, r3
 8001744:	4a1b      	ldr	r2, [pc, #108]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	0c9b      	lsrs	r3, r3, #18
 800174c:	3301      	adds	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001750:	e002      	b.n	8001758 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3b01      	subs	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001764:	d102      	bne.n	800176c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f2      	bne.n	8001752 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001778:	d110      	bne.n	800179c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e00f      	b.n	800179e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178a:	d007      	beq.n	800179c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001794:	4a05      	ldr	r2, [pc, #20]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40007000 	.word	0x40007000
 80017b0:	2000000c 	.word	0x2000000c
 80017b4:	431bde83 	.word	0x431bde83

080017b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e39d      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ca:	4ba4      	ldr	r3, [pc, #656]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d4:	4ba1      	ldr	r3, [pc, #644]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80e1 	beq.w	80019ae <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <HAL_RCC_OscConfig+0x4a>
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	f040 8088 	bne.w	800190a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	f040 8084 	bne.w	800190a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001802:	4b96      	ldr	r3, [pc, #600]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <HAL_RCC_OscConfig+0x62>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e375      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1a      	ldr	r2, [r3, #32]
 800181e:	4b8f      	ldr	r3, [pc, #572]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <HAL_RCC_OscConfig+0x7c>
 800182a:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001832:	e005      	b.n	8001840 <HAL_RCC_OscConfig+0x88>
 8001834:	4b89      	ldr	r3, [pc, #548]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001840:	4293      	cmp	r3, r2
 8001842:	d223      	bcs.n	800188c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fd09 	bl	8002260 <RCC_SetFlashLatencyFromMSIRange>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e356      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001858:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a7f      	ldr	r2, [pc, #508]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800185e:	f043 0308 	orr.w	r3, r3, #8
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b7d      	ldr	r3, [pc, #500]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	497a      	ldr	r1, [pc, #488]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001876:	4b79      	ldr	r3, [pc, #484]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	4975      	ldr	r1, [pc, #468]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
 800188a:	e022      	b.n	80018d2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800188c:	4b73      	ldr	r3, [pc, #460]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a72      	ldr	r2, [pc, #456]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001892:	f043 0308 	orr.w	r3, r3, #8
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b70      	ldr	r3, [pc, #448]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	496d      	ldr	r1, [pc, #436]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018aa:	4b6c      	ldr	r3, [pc, #432]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	4968      	ldr	r1, [pc, #416]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fccc 	bl	8002260 <RCC_SetFlashLatencyFromMSIRange>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e319      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018d2:	f000 fc03 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 80018d6:	4601      	mov	r1, r0
 80018d8:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	4a5f      	ldr	r2, [pc, #380]	; (8001a60 <HAL_RCC_OscConfig+0x2a8>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	fa21 f303 	lsr.w	r3, r1, r3
 80018ee:	4a5d      	ldr	r2, [pc, #372]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018f2:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <HAL_RCC_OscConfig+0x2b0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fb90 	bl	800101c <HAL_InitTick>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d052      	beq.n	80019ac <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	e2fd      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d032      	beq.n	8001978 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001912:	4b52      	ldr	r3, [pc, #328]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a51      	ldr	r2, [pc, #324]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800191e:	f7ff fbc9 	bl	80010b4 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001926:	f7ff fbc5 	bl	80010b4 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e2e6      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001938:	4b48      	ldr	r3, [pc, #288]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001944:	4b45      	ldr	r3, [pc, #276]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a44      	ldr	r2, [pc, #272]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800194a:	f043 0308 	orr.w	r3, r3, #8
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	493f      	ldr	r1, [pc, #252]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001962:	4b3e      	ldr	r3, [pc, #248]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	493a      	ldr	r1, [pc, #232]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
 8001976:	e01a      	b.n	80019ae <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001978:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a37      	ldr	r2, [pc, #220]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001984:	f7ff fb96 	bl	80010b4 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800198c:	f7ff fb92 	bl	80010b4 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e2b3      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800199e:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x1d4>
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d074      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d005      	beq.n	80019cc <HAL_RCC_OscConfig+0x214>
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d10e      	bne.n	80019e4 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d10b      	bne.n	80019e4 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d064      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x2ea>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d160      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e290      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ec:	d106      	bne.n	80019fc <HAL_RCC_OscConfig+0x244>
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e01d      	b.n	8001a38 <HAL_RCC_OscConfig+0x280>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x268>
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0x280>
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fb38 	bl	80010b4 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a46:	e011      	b.n	8001a6c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fb34 	bl	80010b4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d90a      	bls.n	8001a6c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e255      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	0800ed48 	.word	0x0800ed48
 8001a64:	2000000c 	.word	0x2000000c
 8001a68:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6c:	4bae      	ldr	r3, [pc, #696]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0e7      	beq.n	8001a48 <HAL_RCC_OscConfig+0x290>
 8001a78:	e014      	b.n	8001aa4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fb1b 	bl	80010b4 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a82:	f7ff fb17 	bl	80010b4 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b64      	cmp	r3, #100	; 0x64
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e238      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a94:	4ba4      	ldr	r3, [pc, #656]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x2ca>
 8001aa0:	e000      	b.n	8001aa4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d060      	beq.n	8001b72 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d005      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x30a>
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	d119      	bne.n	8001af0 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d116      	bne.n	8001af0 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac2:	4b99      	ldr	r3, [pc, #612]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x322>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e215      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b93      	ldr	r3, [pc, #588]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	061b      	lsls	r3, r3, #24
 8001ae8:	498f      	ldr	r1, [pc, #572]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aee:	e040      	b.n	8001b72 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d023      	beq.n	8001b40 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af8:	4b8b      	ldr	r3, [pc, #556]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a8a      	ldr	r2, [pc, #552]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff fad6 	bl	80010b4 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fad2 	bl	80010b4 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1f3      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1e:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2a:	4b7f      	ldr	r3, [pc, #508]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	061b      	lsls	r3, r3, #24
 8001b38:	497b      	ldr	r1, [pc, #492]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
 8001b3e:	e018      	b.n	8001b72 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b40:	4b79      	ldr	r3, [pc, #484]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a78      	ldr	r2, [pc, #480]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fab2 	bl	80010b4 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b54:	f7ff faae 	bl	80010b4 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1cf      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b66:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d03c      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b86:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8c:	4a66      	ldr	r2, [pc, #408]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b96:	f7ff fa8d 	bl	80010b4 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fa89 	bl	80010b4 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e1aa      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb0:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0ef      	beq.n	8001b9e <HAL_RCC_OscConfig+0x3e6>
 8001bbe:	e01b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc0:	4b59      	ldr	r3, [pc, #356]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc6:	4a58      	ldr	r2, [pc, #352]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fa70 	bl	80010b4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fa6c 	bl	80010b4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e18d      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bea:	4b4f      	ldr	r3, [pc, #316]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ef      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a5 	beq.w	8001d50 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c0a:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10d      	bne.n	8001c32 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b44      	ldr	r3, [pc, #272]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	4a43      	ldr	r2, [pc, #268]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c20:	6593      	str	r3, [r2, #88]	; 0x58
 8001c22:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c32:	4b3e      	ldr	r3, [pc, #248]	; (8001d2c <HAL_RCC_OscConfig+0x574>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d118      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_RCC_OscConfig+0x574>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a3a      	ldr	r2, [pc, #232]	; (8001d2c <HAL_RCC_OscConfig+0x574>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fa33 	bl	80010b4 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c52:	f7ff fa2f 	bl	80010b4 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e150      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c64:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <HAL_RCC_OscConfig+0x574>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d108      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4d2>
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	4a2a      	ldr	r2, [pc, #168]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c88:	e024      	b.n	8001cd4 <HAL_RCC_OscConfig+0x51c>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d110      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4fc>
 8001c92:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a23      	ldr	r2, [pc, #140]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca8:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb2:	e00f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x51c>
 8001cb4:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d016      	beq.n	8001d0a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7ff f9ea 	bl	80010b4 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce4:	f7ff f9e6 	bl	80010b4 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e105      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0ed      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x52c>
 8001d08:	e019      	b.n	8001d3e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f9d3 	bl	80010b4 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d10:	e00e      	b.n	8001d30 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7ff f9cf 	bl	80010b4 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d905      	bls.n	8001d30 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0ee      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d30:	4b77      	ldr	r3, [pc, #476]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1e9      	bne.n	8001d12 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d3e:	7ffb      	ldrb	r3, [r7, #31]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d44:	4b72      	ldr	r3, [pc, #456]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	4a71      	ldr	r2, [pc, #452]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80d5 	beq.w	8001f04 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	2b0c      	cmp	r3, #12
 8001d5e:	f000 808e 	beq.w	8001e7e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d15b      	bne.n	8001e22 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	4b69      	ldr	r3, [pc, #420]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a68      	ldr	r2, [pc, #416]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001d70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff f99d 	bl	80010b4 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff f999 	bl	80010b4 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e0ba      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d90:	4b5f      	ldr	r3, [pc, #380]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d9c:	4b5c      	ldr	r3, [pc, #368]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	4b5c      	ldr	r3, [pc, #368]	; (8001f14 <HAL_RCC_OscConfig+0x75c>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dac:	3a01      	subs	r2, #1
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	4311      	orrs	r1, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001db6:	0212      	lsls	r2, r2, #8
 8001db8:	4311      	orrs	r1, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dbe:	0852      	lsrs	r2, r2, #1
 8001dc0:	3a01      	subs	r2, #1
 8001dc2:	0552      	lsls	r2, r2, #21
 8001dc4:	4311      	orrs	r1, r2
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dca:	0852      	lsrs	r2, r2, #1
 8001dcc:	3a01      	subs	r2, #1
 8001dce:	0652      	lsls	r2, r2, #25
 8001dd0:	4311      	orrs	r1, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dd6:	0912      	lsrs	r2, r2, #4
 8001dd8:	0452      	lsls	r2, r2, #17
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	494c      	ldr	r1, [pc, #304]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de2:	4b4b      	ldr	r3, [pc, #300]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a4a      	ldr	r2, [pc, #296]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001de8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dec:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dee:	4b48      	ldr	r3, [pc, #288]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4a47      	ldr	r2, [pc, #284]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff f95b 	bl	80010b4 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff f957 	bl	80010b4 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e078      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e14:	4b3e      	ldr	r3, [pc, #248]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x64a>
 8001e20:	e070      	b.n	8001f04 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e22:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a3a      	ldr	r2, [pc, #232]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e2c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001e2e:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d105      	bne.n	8001e46 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e3a:	4b35      	ldr	r3, [pc, #212]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	4a34      	ldr	r2, [pc, #208]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e40:	f023 0303 	bic.w	r3, r3, #3
 8001e44:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	4a31      	ldr	r2, [pc, #196]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e4c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e54:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e56:	f7ff f92d 	bl	80010b4 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5e:	f7ff f929 	bl	80010b4 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e04a      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f0      	bne.n	8001e5e <HAL_RCC_OscConfig+0x6a6>
 8001e7c:	e042      	b.n	8001f04 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e03d      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001e8a:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0203 	and.w	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d130      	bne.n	8001f00 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d127      	bne.n	8001f00 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eba:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d11f      	bne.n	8001f00 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eca:	2a07      	cmp	r2, #7
 8001ecc:	bf14      	ite	ne
 8001ece:	2201      	movne	r2, #1
 8001ed0:	2200      	moveq	r2, #0
 8001ed2:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d113      	bne.n	8001f00 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee2:	085b      	lsrs	r3, r3, #1
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d109      	bne.n	8001f00 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	085b      	lsrs	r3, r3, #1
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3720      	adds	r7, #32
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	f99d808c 	.word	0xf99d808c

08001f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0c8      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b66      	ldr	r3, [pc, #408]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d910      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b63      	ldr	r3, [pc, #396]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4961      	ldr	r1, [pc, #388]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b5f      	ldr	r3, [pc, #380]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0b0      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d04c      	beq.n	8002002 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f70:	4b56      	ldr	r3, [pc, #344]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d121      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e09e      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f88:	4b50      	ldr	r3, [pc, #320]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d115      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e092      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e086      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb0:	4b46      	ldr	r3, [pc, #280]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e07e      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fc0:	4b42      	ldr	r3, [pc, #264]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 0203 	bic.w	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	493f      	ldr	r1, [pc, #252]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd2:	f7ff f86f 	bl	80010b4 <HAL_GetTick>
 8001fd6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd8:	e00a      	b.n	8001ff0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fda:	f7ff f86b 	bl	80010b4 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e066      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff0:	4b36      	ldr	r3, [pc, #216]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 020c 	and.w	r2, r3, #12
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d1eb      	bne.n	8001fda <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d008      	beq.n	8002020 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800200e:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	492c      	ldr	r1, [pc, #176]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002020:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d210      	bcs.n	8002050 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 0207 	bic.w	r2, r3, #7
 8002036:	4924      	ldr	r1, [pc, #144]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e036      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800205c:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4918      	ldr	r1, [pc, #96]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4910      	ldr	r1, [pc, #64]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800208e:	f000 f825 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 8002092:	4601      	mov	r1, r0
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	5cd3      	ldrb	r3, [r2, r3]
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	fa21 f303 	lsr.w	r3, r1, r3
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe ffb2 	bl	800101c <HAL_InitTick>
 80020b8:	4603      	mov	r3, r0
 80020ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80020bc:	7afb      	ldrb	r3, [r7, #11]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40022000 	.word	0x40022000
 80020cc:	40021000 	.word	0x40021000
 80020d0:	0800ed48 	.word	0x0800ed48
 80020d4:	2000000c 	.word	0x2000000c
 80020d8:	20000000 	.word	0x20000000

080020dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	; 0x24
 80020e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ea:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020f4:	4b3a      	ldr	r3, [pc, #232]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x34>
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	d121      	bne.n	800214e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d11e      	bne.n	800214e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002110:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800211c:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800211e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e005      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800212c:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002138:	4a2a      	ldr	r2, [pc, #168]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b04      	cmp	r3, #4
 8002152:	d102      	bne.n	800215a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002154:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	e004      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d101      	bne.n	8002164 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002162:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2b0c      	cmp	r3, #12
 8002168:	d133      	bne.n	80021d2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d002      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0xa4>
 800217a:	2b03      	cmp	r3, #3
 800217c:	d003      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0xaa>
 800217e:	e005      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002182:	617b      	str	r3, [r7, #20]
      break;
 8002184:	e005      	b.n	8002192 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002186:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002188:	617b      	str	r3, [r7, #20]
      break;
 800218a:	e002      	b.n	8002192 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	617b      	str	r3, [r7, #20]
      break;
 8002190:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	3301      	adds	r3, #1
 800219e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	fb02 f203 	mul.w	r2, r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0e5b      	lsrs	r3, r3, #25
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	3301      	adds	r3, #1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021d2:	69bb      	ldr	r3, [r7, #24]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3724      	adds	r7, #36	; 0x24
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40021000 	.word	0x40021000
 80021e4:	0800ed60 	.word	0x0800ed60
 80021e8:	00f42400 	.word	0x00f42400
 80021ec:	007a1200 	.word	0x007a1200

080021f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_RCC_GetHCLKFreq+0x14>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	2000000c 	.word	0x2000000c

08002208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800220c:	f7ff fff0 	bl	80021f0 <HAL_RCC_GetHCLKFreq>
 8002210:	4601      	mov	r1, r0
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800221e:	5cd3      	ldrb	r3, [r2, r3]
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	0800ed58 	.word	0x0800ed58

08002234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002238:	f7ff ffda 	bl	80021f0 <HAL_RCC_GetHCLKFreq>
 800223c:	4601      	mov	r1, r0
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	0adb      	lsrs	r3, r3, #11
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	4a04      	ldr	r2, [pc, #16]	; (800225c <HAL_RCC_GetPCLK2Freq+0x28>)
 800224a:	5cd3      	ldrb	r3, [r2, r3]
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	0800ed58 	.word	0x0800ed58

08002260 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800226c:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002278:	f7ff fa3a 	bl	80016f0 <HAL_PWREx_GetVoltageRange>
 800227c:	6178      	str	r0, [r7, #20]
 800227e:	e014      	b.n	80022aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002280:	4b25      	ldr	r3, [pc, #148]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002284:	4a24      	ldr	r2, [pc, #144]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228a:	6593      	str	r3, [r2, #88]	; 0x58
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002298:	f7ff fa2a 	bl	80016f0 <HAL_PWREx_GetVoltageRange>
 800229c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b0:	d10b      	bne.n	80022ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b80      	cmp	r3, #128	; 0x80
 80022b6:	d919      	bls.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2ba0      	cmp	r3, #160	; 0xa0
 80022bc:	d902      	bls.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022be:	2302      	movs	r3, #2
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	e013      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c4:	2301      	movs	r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	e010      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b80      	cmp	r3, #128	; 0x80
 80022ce:	d902      	bls.n	80022d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022d0:	2303      	movs	r3, #3
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	e00a      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d102      	bne.n	80022e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022dc:	2302      	movs	r3, #2
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	e004      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b70      	cmp	r3, #112	; 0x70
 80022e6:	d101      	bne.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022e8:	2301      	movs	r3, #1
 80022ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 0207 	bic.w	r2, r3, #7
 80022f4:	4909      	ldr	r1, [pc, #36]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022fc:	4b07      	ldr	r3, [pc, #28]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	429a      	cmp	r2, r3
 8002308:	d001      	beq.n	800230e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	40022000 	.word	0x40022000

08002320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002328:	2300      	movs	r3, #0
 800232a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800232c:	2300      	movs	r3, #0
 800232e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002338:	2b00      	cmp	r3, #0
 800233a:	d03f      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002344:	d01c      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234a:	d802      	bhi.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00e      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002350:	e01f      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002352:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002356:	d003      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002358:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800235c:	d01c      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800235e:	e018      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002360:	4b85      	ldr	r3, [pc, #532]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a84      	ldr	r2, [pc, #528]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800236c:	e015      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3304      	adds	r3, #4
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fab9 	bl	80028ec <RCCEx_PLLSAI1_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800237e:	e00c      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3320      	adds	r3, #32
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fba0 	bl	8002acc <RCCEx_PLLSAI2_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002390:	e003      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	74fb      	strb	r3, [r7, #19]
      break;
 8002396:	e000      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10b      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023a0:	4b75      	ldr	r3, [pc, #468]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ae:	4972      	ldr	r1, [pc, #456]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023b6:	e001      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d03f      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d0:	d01c      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xec>
 80023d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d6:	d802      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00e      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0xda>
 80023dc:	e01f      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80023de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023e2:	d003      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80023e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023e8:	d01c      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80023ea:	e018      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023ec:	4b62      	ldr	r3, [pc, #392]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a61      	ldr	r2, [pc, #388]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023f8:	e015      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3304      	adds	r3, #4
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fa73 	bl	80028ec <RCCEx_PLLSAI1_Config>
 8002406:	4603      	mov	r3, r0
 8002408:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800240a:	e00c      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3320      	adds	r3, #32
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fb5a 	bl	8002acc <RCCEx_PLLSAI2_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800241c:	e003      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	74fb      	strb	r3, [r7, #19]
      break;
 8002422:	e000      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10b      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800242c:	4b52      	ldr	r3, [pc, #328]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800243a:	494f      	ldr	r1, [pc, #316]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002442:	e001      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002444:	7cfb      	ldrb	r3, [r7, #19]
 8002446:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a0 	beq.w	8002596 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800245a:	4b47      	ldr	r3, [pc, #284]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800246a:	2300      	movs	r3, #0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00d      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002470:	4b41      	ldr	r3, [pc, #260]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	4a40      	ldr	r2, [pc, #256]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247a:	6593      	str	r3, [r2, #88]	; 0x58
 800247c:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002488:	2301      	movs	r3, #1
 800248a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800248c:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a3a      	ldr	r2, [pc, #232]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002496:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002498:	f7fe fe0c 	bl	80010b4 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800249e:	e009      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a0:	f7fe fe08 	bl	80010b4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d902      	bls.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	74fb      	strb	r3, [r7, #19]
        break;
 80024b2:	e005      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024b4:	4b31      	ldr	r3, [pc, #196]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ef      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d15c      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024c6:	4b2c      	ldr	r3, [pc, #176]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01f      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d019      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024e4:	4b24      	ldr	r3, [pc, #144]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f6:	4a20      	ldr	r2, [pc, #128]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002506:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002510:	4a19      	ldr	r2, [pc, #100]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7fe fdc7 	bl	80010b4 <HAL_GetTick>
 8002526:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002528:	e00b      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7fe fdc3 	bl	80010b4 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	; 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d902      	bls.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	74fb      	strb	r3, [r7, #19]
            break;
 8002540:	e006      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002542:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0ec      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10c      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002566:	4904      	ldr	r1, [pc, #16]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800256e:	e009      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	74bb      	strb	r3, [r7, #18]
 8002574:	e006      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002584:	7c7b      	ldrb	r3, [r7, #17]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258a:	4b9e      	ldr	r3, [pc, #632]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	4a9d      	ldr	r2, [pc, #628]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002594:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a2:	4b98      	ldr	r3, [pc, #608]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f023 0203 	bic.w	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	4994      	ldr	r1, [pc, #592]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025c4:	4b8f      	ldr	r3, [pc, #572]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f023 020c 	bic.w	r2, r3, #12
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d2:	498c      	ldr	r1, [pc, #560]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025e6:	4b87      	ldr	r3, [pc, #540]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	4983      	ldr	r1, [pc, #524]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002608:	4b7e      	ldr	r3, [pc, #504]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	497b      	ldr	r1, [pc, #492]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800262a:	4b76      	ldr	r3, [pc, #472]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002638:	4972      	ldr	r1, [pc, #456]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800264c:	4b6d      	ldr	r3, [pc, #436]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265a:	496a      	ldr	r1, [pc, #424]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800266e:	4b65      	ldr	r3, [pc, #404]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002674:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	4961      	ldr	r1, [pc, #388]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002690:	4b5c      	ldr	r3, [pc, #368]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269e:	4959      	ldr	r1, [pc, #356]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b2:	4b54      	ldr	r3, [pc, #336]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c0:	4950      	ldr	r1, [pc, #320]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026d4:	4b4b      	ldr	r3, [pc, #300]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	4948      	ldr	r1, [pc, #288]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026f6:	4b43      	ldr	r3, [pc, #268]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	493f      	ldr	r1, [pc, #252]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d028      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002718:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002726:	4937      	ldr	r1, [pc, #220]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002736:	d106      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002738:	4b32      	ldr	r3, [pc, #200]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a31      	ldr	r2, [pc, #196]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800273e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002742:	60d3      	str	r3, [r2, #12]
 8002744:	e011      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800274e:	d10c      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3304      	adds	r3, #4
 8002754:	2101      	movs	r1, #1
 8002756:	4618      	mov	r0, r3
 8002758:	f000 f8c8 	bl	80028ec <RCCEx_PLLSAI1_Config>
 800275c:	4603      	mov	r3, r0
 800275e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002766:	7cfb      	ldrb	r3, [r7, #19]
 8002768:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d028      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002776:	4b23      	ldr	r3, [pc, #140]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	491f      	ldr	r1, [pc, #124]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002794:	d106      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	4a1a      	ldr	r2, [pc, #104]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800279c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a0:	60d3      	str	r3, [r2, #12]
 80027a2:	e011      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3304      	adds	r3, #4
 80027b2:	2101      	movs	r1, #1
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 f899 	bl	80028ec <RCCEx_PLLSAI1_Config>
 80027ba:	4603      	mov	r3, r0
 80027bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027be:	7cfb      	ldrb	r3, [r7, #19]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02b      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e2:	4908      	ldr	r1, [pc, #32]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f2:	d109      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	4a02      	ldr	r2, [pc, #8]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027fe:	60d3      	str	r3, [r2, #12]
 8002800:	e014      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002810:	d10c      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3304      	adds	r3, #4
 8002816:	2101      	movs	r1, #1
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f867 	bl	80028ec <RCCEx_PLLSAI1_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d02f      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002846:	4928      	ldr	r1, [pc, #160]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002856:	d10d      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3304      	adds	r3, #4
 800285c:	2102      	movs	r1, #2
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f844 	bl	80028ec <RCCEx_PLLSAI1_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d014      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800286e:	7cfb      	ldrb	r3, [r7, #19]
 8002870:	74bb      	strb	r3, [r7, #18]
 8002872:	e011      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800287c:	d10c      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3320      	adds	r3, #32
 8002882:	2102      	movs	r1, #2
 8002884:	4618      	mov	r0, r3
 8002886:	f000 f921 	bl	8002acc <RCCEx_PLLSAI2_Config>
 800288a:	4603      	mov	r3, r0
 800288c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800288e:	7cfb      	ldrb	r3, [r7, #19]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002894:	7cfb      	ldrb	r3, [r7, #19]
 8002896:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028a4:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b2:	490d      	ldr	r1, [pc, #52]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028d6:	4904      	ldr	r1, [pc, #16]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028de:	7cbb      	ldrb	r3, [r7, #18]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000

080028ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028fa:	4b73      	ldr	r3, [pc, #460]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d018      	beq.n	8002938 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002906:	4b70      	ldr	r3, [pc, #448]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f003 0203 	and.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d10d      	bne.n	8002932 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
       ||
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800291e:	4b6a      	ldr	r3, [pc, #424]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
       ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d044      	beq.n	80029bc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
 8002936:	e041      	b.n	80029bc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d00c      	beq.n	800295a <RCCEx_PLLSAI1_Config+0x6e>
 8002940:	2b03      	cmp	r3, #3
 8002942:	d013      	beq.n	800296c <RCCEx_PLLSAI1_Config+0x80>
 8002944:	2b01      	cmp	r3, #1
 8002946:	d120      	bne.n	800298a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002948:	4b5f      	ldr	r3, [pc, #380]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d11d      	bne.n	8002990 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002958:	e01a      	b.n	8002990 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800295a:	4b5b      	ldr	r3, [pc, #364]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002962:	2b00      	cmp	r3, #0
 8002964:	d116      	bne.n	8002994 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800296a:	e013      	b.n	8002994 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800296c:	4b56      	ldr	r3, [pc, #344]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10f      	bne.n	8002998 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002988:	e006      	b.n	8002998 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
      break;
 800298e:	e004      	b.n	800299a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002990:	bf00      	nop
 8002992:	e002      	b.n	800299a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002994:	bf00      	nop
 8002996:	e000      	b.n	800299a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002998:	bf00      	nop
    }

    if(status == HAL_OK)
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10d      	bne.n	80029bc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029a0:	4b49      	ldr	r3, [pc, #292]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	430b      	orrs	r3, r1
 80029b6:	4944      	ldr	r1, [pc, #272]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d17d      	bne.n	8002abe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029c2:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a40      	ldr	r2, [pc, #256]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ce:	f7fe fb71 	bl	80010b4 <HAL_GetTick>
 80029d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029d4:	e009      	b.n	80029ea <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029d6:	f7fe fb6d 	bl	80010b4 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d902      	bls.n	80029ea <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	73fb      	strb	r3, [r7, #15]
        break;
 80029e8:	e005      	b.n	80029f6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1ef      	bne.n	80029d6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d160      	bne.n	8002abe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d111      	bne.n	8002a26 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a02:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6892      	ldr	r2, [r2, #8]
 8002a12:	0211      	lsls	r1, r2, #8
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68d2      	ldr	r2, [r2, #12]
 8002a18:	0912      	lsrs	r2, r2, #4
 8002a1a:	0452      	lsls	r2, r2, #17
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	492a      	ldr	r1, [pc, #168]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	610b      	str	r3, [r1, #16]
 8002a24:	e027      	b.n	8002a76 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d112      	bne.n	8002a52 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a2c:	4b26      	ldr	r3, [pc, #152]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6892      	ldr	r2, [r2, #8]
 8002a3c:	0211      	lsls	r1, r2, #8
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6912      	ldr	r2, [r2, #16]
 8002a42:	0852      	lsrs	r2, r2, #1
 8002a44:	3a01      	subs	r2, #1
 8002a46:	0552      	lsls	r2, r2, #21
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	491f      	ldr	r1, [pc, #124]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	610b      	str	r3, [r1, #16]
 8002a50:	e011      	b.n	8002a76 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6892      	ldr	r2, [r2, #8]
 8002a62:	0211      	lsls	r1, r2, #8
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6952      	ldr	r2, [r2, #20]
 8002a68:	0852      	lsrs	r2, r2, #1
 8002a6a:	3a01      	subs	r2, #1
 8002a6c:	0652      	lsls	r2, r2, #25
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	4915      	ldr	r1, [pc, #84]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a80:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a82:	f7fe fb17 	bl	80010b4 <HAL_GetTick>
 8002a86:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a88:	e009      	b.n	8002a9e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a8a:	f7fe fb13 	bl	80010b4 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d902      	bls.n	8002a9e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	73fb      	strb	r3, [r7, #15]
          break;
 8002a9c:	e005      	b.n	8002aaa <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0ef      	beq.n	8002a8a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d106      	bne.n	8002abe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	4903      	ldr	r1, [pc, #12]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40021000 	.word	0x40021000

08002acc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ada:	4b68      	ldr	r3, [pc, #416]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d018      	beq.n	8002b18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ae6:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0203 	and.w	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d10d      	bne.n	8002b12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
       ||
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002afe:	4b5f      	ldr	r3, [pc, #380]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d044      	beq.n	8002b9c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
 8002b16:	e041      	b.n	8002b9c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d00c      	beq.n	8002b3a <RCCEx_PLLSAI2_Config+0x6e>
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d013      	beq.n	8002b4c <RCCEx_PLLSAI2_Config+0x80>
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d120      	bne.n	8002b6a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b28:	4b54      	ldr	r3, [pc, #336]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d11d      	bne.n	8002b70 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b38:	e01a      	b.n	8002b70 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b3a:	4b50      	ldr	r3, [pc, #320]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d116      	bne.n	8002b74 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4a:	e013      	b.n	8002b74 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b4c:	4b4b      	ldr	r3, [pc, #300]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10f      	bne.n	8002b78 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b58:	4b48      	ldr	r3, [pc, #288]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b68:	e006      	b.n	8002b78 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b6e:	e004      	b.n	8002b7a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b70:	bf00      	nop
 8002b72:	e002      	b.n	8002b7a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b74:	bf00      	nop
 8002b76:	e000      	b.n	8002b7a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b78:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10d      	bne.n	8002b9c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b80:	4b3e      	ldr	r3, [pc, #248]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	430b      	orrs	r3, r1
 8002b96:	4939      	ldr	r1, [pc, #228]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d167      	bne.n	8002c72 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ba2:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a35      	ldr	r2, [pc, #212]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bae:	f7fe fa81 	bl	80010b4 <HAL_GetTick>
 8002bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bb4:	e009      	b.n	8002bca <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bb6:	f7fe fa7d 	bl	80010b4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d902      	bls.n	8002bca <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	73fb      	strb	r3, [r7, #15]
        break;
 8002bc8:	e005      	b.n	8002bd6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bca:	4b2c      	ldr	r3, [pc, #176]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1ef      	bne.n	8002bb6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d14a      	bne.n	8002c72 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d111      	bne.n	8002c06 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6892      	ldr	r2, [r2, #8]
 8002bf2:	0211      	lsls	r1, r2, #8
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	68d2      	ldr	r2, [r2, #12]
 8002bf8:	0912      	lsrs	r2, r2, #4
 8002bfa:	0452      	lsls	r2, r2, #17
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	491f      	ldr	r1, [pc, #124]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	614b      	str	r3, [r1, #20]
 8002c04:	e011      	b.n	8002c2a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6892      	ldr	r2, [r2, #8]
 8002c16:	0211      	lsls	r1, r2, #8
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6912      	ldr	r2, [r2, #16]
 8002c1c:	0852      	lsrs	r2, r2, #1
 8002c1e:	3a01      	subs	r2, #1
 8002c20:	0652      	lsls	r2, r2, #25
 8002c22:	430a      	orrs	r2, r1
 8002c24:	4915      	ldr	r1, [pc, #84]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c36:	f7fe fa3d 	bl	80010b4 <HAL_GetTick>
 8002c3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c3c:	e009      	b.n	8002c52 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c3e:	f7fe fa39 	bl	80010b4 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d902      	bls.n	8002c52 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	73fb      	strb	r3, [r7, #15]
          break;
 8002c50:	e005      	b.n	8002c5e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ef      	beq.n	8002c3e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d106      	bne.n	8002c72 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	4903      	ldr	r1, [pc, #12]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021000 	.word	0x40021000

08002c80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e07c      	b.n	8002d8c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d106      	bne.n	8002cb2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f004 fbdd 	bl	800746c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cd2:	d902      	bls.n	8002cda <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	e002      	b.n	8002ce0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cde:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ce8:	d007      	beq.n	8002cfa <HAL_SPI_Init+0x7a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10b      	bne.n	8002d1a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d0a:	d903      	bls.n	8002d14 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
 8002d12:	e002      	b.n	8002d1a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	ea42 0103 	orr.w	r1, r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	f003 0204 	and.w	r2, r3, #4
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	ea42 0103 	orr.w	r1, r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e01d      	b.n	8002de2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f004 fc36 	bl	800762c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	f000 fbcc 	bl	8003570 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	6839      	ldr	r1, [r7, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 ff26 	bl	8003c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <HAL_TIM_PWM_Start+0x98>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <HAL_TIM_PWM_Start+0x4a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <HAL_TIM_PWM_Start+0x9c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00e      	beq.n	8002e36 <HAL_TIM_PWM_Start+0x4a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_TIM_PWM_Start+0xa0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d009      	beq.n	8002e36 <HAL_TIM_PWM_Start+0x4a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <HAL_TIM_PWM_Start+0xa4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d004      	beq.n	8002e36 <HAL_TIM_PWM_Start+0x4a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <HAL_TIM_PWM_Start+0xa8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_PWM_Start+0x4e>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_TIM_PWM_Start+0x50>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_TIM_PWM_Start+0xac>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d00b      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x8e>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e68:	d007      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0201 	orr.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	40013400 	.word	0x40013400
 8002e8c:	40014000 	.word	0x40014000
 8002e90:	40014400 	.word	0x40014400
 8002e94:	40014800 	.word	0x40014800
 8002e98:	00010007 	.word	0x00010007

08002e9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fece 	bl	8003c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a2a      	ldr	r2, [pc, #168]	; (8002f64 <HAL_TIM_PWM_Stop+0xc8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <HAL_TIM_PWM_Stop+0x4a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a29      	ldr	r2, [pc, #164]	; (8002f68 <HAL_TIM_PWM_Stop+0xcc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_TIM_PWM_Stop+0x4a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a27      	ldr	r2, [pc, #156]	; (8002f6c <HAL_TIM_PWM_Stop+0xd0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d009      	beq.n	8002ee6 <HAL_TIM_PWM_Stop+0x4a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a26      	ldr	r2, [pc, #152]	; (8002f70 <HAL_TIM_PWM_Stop+0xd4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d004      	beq.n	8002ee6 <HAL_TIM_PWM_Stop+0x4a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <HAL_TIM_PWM_Stop+0xd8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d101      	bne.n	8002eea <HAL_TIM_PWM_Stop+0x4e>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <HAL_TIM_PWM_Stop+0x50>
 8002eea:	2300      	movs	r3, #0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d017      	beq.n	8002f20 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6a1a      	ldr	r2, [r3, #32]
 8002ef6:	f241 1311 	movw	r3, #4369	; 0x1111
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10f      	bne.n	8002f20 <HAL_TIM_PWM_Stop+0x84>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	f240 4344 	movw	r3, #1092	; 0x444
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d107      	bne.n	8002f20 <HAL_TIM_PWM_Stop+0x84>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a1a      	ldr	r2, [r3, #32]
 8002f26:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10f      	bne.n	8002f50 <HAL_TIM_PWM_Stop+0xb4>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a1a      	ldr	r2, [r3, #32]
 8002f36:	f240 4344 	movw	r3, #1092	; 0x444
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_TIM_PWM_Stop+0xb4>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40013400 	.word	0x40013400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40014400 	.word	0x40014400
 8002f74:	40014800 	.word	0x40014800

08002f78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e083      	b.n	8003094 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d106      	bne.n	8002fa6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f004 fac5 	bl	8007530 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002fbc:	f023 0307 	bic.w	r3, r3, #7
 8002fc0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4610      	mov	r0, r2
 8002fce:	f000 facf 	bl	8003570 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	4313      	orrs	r3, r2
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003018:	f023 030c 	bic.w	r3, r3, #12
 800301c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003024:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	4313      	orrs	r3, r2
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	011a      	lsls	r2, r3, #4
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	031b      	lsls	r3, r3, #12
 8003048:	4313      	orrs	r3, r2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003056:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800305e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	4313      	orrs	r3, r2
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d122      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d11b      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0202 	mvn.w	r2, #2
 80030c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fa28 	bl	8003534 <HAL_TIM_IC_CaptureCallback>
 80030e4:	e005      	b.n	80030f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fa1a 	bl	8003520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fa2b 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d122      	bne.n	800314c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b04      	cmp	r3, #4
 8003112:	d11b      	bne.n	800314c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0204 	mvn.w	r2, #4
 800311c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2202      	movs	r2, #2
 8003122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f9fe 	bl	8003534 <HAL_TIM_IC_CaptureCallback>
 8003138:	e005      	b.n	8003146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f9f0 	bl	8003520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fa01 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b08      	cmp	r3, #8
 8003158:	d122      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b08      	cmp	r3, #8
 8003166:	d11b      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0208 	mvn.w	r2, #8
 8003170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2204      	movs	r2, #4
 8003176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f9d4 	bl	8003534 <HAL_TIM_IC_CaptureCallback>
 800318c:	e005      	b.n	800319a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f9c6 	bl	8003520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f9d7 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b10      	cmp	r3, #16
 80031ac:	d122      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d11b      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0210 	mvn.w	r2, #16
 80031c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2208      	movs	r2, #8
 80031ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f9aa 	bl	8003534 <HAL_TIM_IC_CaptureCallback>
 80031e0:	e005      	b.n	80031ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f99c 	bl	8003520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f9ad 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d10e      	bne.n	8003220 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d107      	bne.n	8003220 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0201 	mvn.w	r2, #1
 8003218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f976 	bl	800350c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	2b80      	cmp	r3, #128	; 0x80
 800322c:	d10e      	bne.n	800324c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003238:	2b80      	cmp	r3, #128	; 0x80
 800323a:	d107      	bne.n	800324c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fd8e 	bl	8003d68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325a:	d10e      	bne.n	800327a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	2b80      	cmp	r3, #128	; 0x80
 8003268:	d107      	bne.n	800327a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fd81 	bl	8003d7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d10e      	bne.n	80032a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003292:	2b40      	cmp	r3, #64	; 0x40
 8003294:	d107      	bne.n	80032a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800329e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f95b 	bl	800355c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d10e      	bne.n	80032d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d107      	bne.n	80032d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f06f 0220 	mvn.w	r2, #32
 80032ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fd41 	bl	8003d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e105      	b.n	8003502 <HAL_TIM_PWM_ConfigChannel+0x226>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b14      	cmp	r3, #20
 800330a:	f200 80f0 	bhi.w	80034ee <HAL_TIM_PWM_ConfigChannel+0x212>
 800330e:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003314:	08003369 	.word	0x08003369
 8003318:	080034ef 	.word	0x080034ef
 800331c:	080034ef 	.word	0x080034ef
 8003320:	080034ef 	.word	0x080034ef
 8003324:	080033a9 	.word	0x080033a9
 8003328:	080034ef 	.word	0x080034ef
 800332c:	080034ef 	.word	0x080034ef
 8003330:	080034ef 	.word	0x080034ef
 8003334:	080033eb 	.word	0x080033eb
 8003338:	080034ef 	.word	0x080034ef
 800333c:	080034ef 	.word	0x080034ef
 8003340:	080034ef 	.word	0x080034ef
 8003344:	0800342b 	.word	0x0800342b
 8003348:	080034ef 	.word	0x080034ef
 800334c:	080034ef 	.word	0x080034ef
 8003350:	080034ef 	.word	0x080034ef
 8003354:	0800346d 	.word	0x0800346d
 8003358:	080034ef 	.word	0x080034ef
 800335c:	080034ef 	.word	0x080034ef
 8003360:	080034ef 	.word	0x080034ef
 8003364:	080034ad 	.word	0x080034ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f998 	bl	80036a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0208 	orr.w	r2, r2, #8
 8003382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0204 	bic.w	r2, r2, #4
 8003392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6999      	ldr	r1, [r3, #24]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	619a      	str	r2, [r3, #24]
      break;
 80033a6:	e0a3      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fa08 	bl	80037c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6999      	ldr	r1, [r3, #24]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	021a      	lsls	r2, r3, #8
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	619a      	str	r2, [r3, #24]
      break;
 80033e8:	e082      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fa71 	bl	80038d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0208 	orr.w	r2, r2, #8
 8003404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0204 	bic.w	r2, r2, #4
 8003414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69d9      	ldr	r1, [r3, #28]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	61da      	str	r2, [r3, #28]
      break;
 8003428:	e062      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fad9 	bl	80039e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69d9      	ldr	r1, [r3, #28]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	021a      	lsls	r2, r3, #8
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	61da      	str	r2, [r3, #28]
      break;
 800346a:	e041      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fb22 	bl	8003abc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0208 	orr.w	r2, r2, #8
 8003486:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0204 	bic.w	r2, r2, #4
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034aa:	e021      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fb66 	bl	8003b84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	021a      	lsls	r2, r3, #8
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034ec:	e000      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80034ee:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop

0800350c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a40      	ldr	r2, [pc, #256]	; (8003684 <TIM_Base_SetConfig+0x114>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d013      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358e:	d00f      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a3d      	ldr	r2, [pc, #244]	; (8003688 <TIM_Base_SetConfig+0x118>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00b      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a3c      	ldr	r2, [pc, #240]	; (800368c <TIM_Base_SetConfig+0x11c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d007      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a3b      	ldr	r2, [pc, #236]	; (8003690 <TIM_Base_SetConfig+0x120>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3a      	ldr	r2, [pc, #232]	; (8003694 <TIM_Base_SetConfig+0x124>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d108      	bne.n	80035c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a2f      	ldr	r2, [pc, #188]	; (8003684 <TIM_Base_SetConfig+0x114>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d01f      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d01b      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a2c      	ldr	r2, [pc, #176]	; (8003688 <TIM_Base_SetConfig+0x118>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d017      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2b      	ldr	r2, [pc, #172]	; (800368c <TIM_Base_SetConfig+0x11c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a2a      	ldr	r2, [pc, #168]	; (8003690 <TIM_Base_SetConfig+0x120>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00f      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a29      	ldr	r2, [pc, #164]	; (8003694 <TIM_Base_SetConfig+0x124>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00b      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a28      	ldr	r2, [pc, #160]	; (8003698 <TIM_Base_SetConfig+0x128>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d007      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a27      	ldr	r2, [pc, #156]	; (800369c <TIM_Base_SetConfig+0x12c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d003      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a26      	ldr	r2, [pc, #152]	; (80036a0 <TIM_Base_SetConfig+0x130>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d108      	bne.n	800361c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a10      	ldr	r2, [pc, #64]	; (8003684 <TIM_Base_SetConfig+0x114>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00f      	beq.n	8003668 <TIM_Base_SetConfig+0xf8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a12      	ldr	r2, [pc, #72]	; (8003694 <TIM_Base_SetConfig+0x124>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00b      	beq.n	8003668 <TIM_Base_SetConfig+0xf8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a11      	ldr	r2, [pc, #68]	; (8003698 <TIM_Base_SetConfig+0x128>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d007      	beq.n	8003668 <TIM_Base_SetConfig+0xf8>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a10      	ldr	r2, [pc, #64]	; (800369c <TIM_Base_SetConfig+0x12c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d003      	beq.n	8003668 <TIM_Base_SetConfig+0xf8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a0f      	ldr	r2, [pc, #60]	; (80036a0 <TIM_Base_SetConfig+0x130>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d103      	bne.n	8003670 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	615a      	str	r2, [r3, #20]
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40012c00 	.word	0x40012c00
 8003688:	40000400 	.word	0x40000400
 800368c:	40000800 	.word	0x40000800
 8003690:	40000c00 	.word	0x40000c00
 8003694:	40013400 	.word	0x40013400
 8003698:	40014000 	.word	0x40014000
 800369c:	40014400 	.word	0x40014400
 80036a0:	40014800 	.word	0x40014800

080036a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	f023 0201 	bic.w	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f023 0302 	bic.w	r3, r3, #2
 80036f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a2c      	ldr	r2, [pc, #176]	; (80037b0 <TIM_OC1_SetConfig+0x10c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00f      	beq.n	8003724 <TIM_OC1_SetConfig+0x80>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a2b      	ldr	r2, [pc, #172]	; (80037b4 <TIM_OC1_SetConfig+0x110>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00b      	beq.n	8003724 <TIM_OC1_SetConfig+0x80>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a2a      	ldr	r2, [pc, #168]	; (80037b8 <TIM_OC1_SetConfig+0x114>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d007      	beq.n	8003724 <TIM_OC1_SetConfig+0x80>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a29      	ldr	r2, [pc, #164]	; (80037bc <TIM_OC1_SetConfig+0x118>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d003      	beq.n	8003724 <TIM_OC1_SetConfig+0x80>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a28      	ldr	r2, [pc, #160]	; (80037c0 <TIM_OC1_SetConfig+0x11c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d10c      	bne.n	800373e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f023 0308 	bic.w	r3, r3, #8
 800372a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f023 0304 	bic.w	r3, r3, #4
 800373c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a1b      	ldr	r2, [pc, #108]	; (80037b0 <TIM_OC1_SetConfig+0x10c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00f      	beq.n	8003766 <TIM_OC1_SetConfig+0xc2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a1a      	ldr	r2, [pc, #104]	; (80037b4 <TIM_OC1_SetConfig+0x110>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00b      	beq.n	8003766 <TIM_OC1_SetConfig+0xc2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <TIM_OC1_SetConfig+0x114>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d007      	beq.n	8003766 <TIM_OC1_SetConfig+0xc2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a18      	ldr	r2, [pc, #96]	; (80037bc <TIM_OC1_SetConfig+0x118>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d003      	beq.n	8003766 <TIM_OC1_SetConfig+0xc2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a17      	ldr	r2, [pc, #92]	; (80037c0 <TIM_OC1_SetConfig+0x11c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d111      	bne.n	800378a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800376c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	621a      	str	r2, [r3, #32]
}
 80037a4:	bf00      	nop
 80037a6:	371c      	adds	r7, #28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	40012c00 	.word	0x40012c00
 80037b4:	40013400 	.word	0x40013400
 80037b8:	40014000 	.word	0x40014000
 80037bc:	40014400 	.word	0x40014400
 80037c0:	40014800 	.word	0x40014800

080037c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f023 0210 	bic.w	r2, r3, #16
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0320 	bic.w	r3, r3, #32
 8003812:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a28      	ldr	r2, [pc, #160]	; (80038c4 <TIM_OC2_SetConfig+0x100>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d003      	beq.n	8003830 <TIM_OC2_SetConfig+0x6c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a27      	ldr	r2, [pc, #156]	; (80038c8 <TIM_OC2_SetConfig+0x104>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d10d      	bne.n	800384c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800384a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a1d      	ldr	r2, [pc, #116]	; (80038c4 <TIM_OC2_SetConfig+0x100>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00f      	beq.n	8003874 <TIM_OC2_SetConfig+0xb0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a1c      	ldr	r2, [pc, #112]	; (80038c8 <TIM_OC2_SetConfig+0x104>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00b      	beq.n	8003874 <TIM_OC2_SetConfig+0xb0>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a1b      	ldr	r2, [pc, #108]	; (80038cc <TIM_OC2_SetConfig+0x108>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d007      	beq.n	8003874 <TIM_OC2_SetConfig+0xb0>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a1a      	ldr	r2, [pc, #104]	; (80038d0 <TIM_OC2_SetConfig+0x10c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d003      	beq.n	8003874 <TIM_OC2_SetConfig+0xb0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a19      	ldr	r2, [pc, #100]	; (80038d4 <TIM_OC2_SetConfig+0x110>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d113      	bne.n	800389c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800387a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003882:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40013400 	.word	0x40013400
 80038cc:	40014000 	.word	0x40014000
 80038d0:	40014400 	.word	0x40014400
 80038d4:	40014800 	.word	0x40014800

080038d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0303 	bic.w	r3, r3, #3
 8003912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a27      	ldr	r2, [pc, #156]	; (80039d4 <TIM_OC3_SetConfig+0xfc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d003      	beq.n	8003942 <TIM_OC3_SetConfig+0x6a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <TIM_OC3_SetConfig+0x100>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d10d      	bne.n	800395e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800395c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <TIM_OC3_SetConfig+0xfc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00f      	beq.n	8003986 <TIM_OC3_SetConfig+0xae>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1b      	ldr	r2, [pc, #108]	; (80039d8 <TIM_OC3_SetConfig+0x100>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00b      	beq.n	8003986 <TIM_OC3_SetConfig+0xae>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1a      	ldr	r2, [pc, #104]	; (80039dc <TIM_OC3_SetConfig+0x104>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <TIM_OC3_SetConfig+0xae>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a19      	ldr	r2, [pc, #100]	; (80039e0 <TIM_OC3_SetConfig+0x108>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d003      	beq.n	8003986 <TIM_OC3_SetConfig+0xae>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a18      	ldr	r2, [pc, #96]	; (80039e4 <TIM_OC3_SetConfig+0x10c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d113      	bne.n	80039ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800398c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	621a      	str	r2, [r3, #32]
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	40013400 	.word	0x40013400
 80039dc:	40014000 	.word	0x40014000
 80039e0:	40014400 	.word	0x40014400
 80039e4:	40014800 	.word	0x40014800

080039e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	031b      	lsls	r3, r3, #12
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a18      	ldr	r2, [pc, #96]	; (8003aa8 <TIM_OC4_SetConfig+0xc0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00f      	beq.n	8003a6c <TIM_OC4_SetConfig+0x84>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a17      	ldr	r2, [pc, #92]	; (8003aac <TIM_OC4_SetConfig+0xc4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <TIM_OC4_SetConfig+0x84>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <TIM_OC4_SetConfig+0xc8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <TIM_OC4_SetConfig+0x84>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <TIM_OC4_SetConfig+0xcc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_OC4_SetConfig+0x84>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a14      	ldr	r2, [pc, #80]	; (8003ab8 <TIM_OC4_SetConfig+0xd0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d109      	bne.n	8003a80 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	019b      	lsls	r3, r3, #6
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	621a      	str	r2, [r3, #32]
}
 8003a9a:	bf00      	nop
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	40013400 	.word	0x40013400
 8003ab0:	40014000 	.word	0x40014000
 8003ab4:	40014400 	.word	0x40014400
 8003ab8:	40014800 	.word	0x40014800

08003abc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	041b      	lsls	r3, r3, #16
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a17      	ldr	r2, [pc, #92]	; (8003b70 <TIM_OC5_SetConfig+0xb4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00f      	beq.n	8003b36 <TIM_OC5_SetConfig+0x7a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a16      	ldr	r2, [pc, #88]	; (8003b74 <TIM_OC5_SetConfig+0xb8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00b      	beq.n	8003b36 <TIM_OC5_SetConfig+0x7a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a15      	ldr	r2, [pc, #84]	; (8003b78 <TIM_OC5_SetConfig+0xbc>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <TIM_OC5_SetConfig+0x7a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <TIM_OC5_SetConfig+0xc0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_OC5_SetConfig+0x7a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <TIM_OC5_SetConfig+0xc4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d109      	bne.n	8003b4a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	621a      	str	r2, [r3, #32]
}
 8003b64:	bf00      	nop
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40013400 	.word	0x40013400
 8003b78:	40014000 	.word	0x40014000
 8003b7c:	40014400 	.word	0x40014400
 8003b80:	40014800 	.word	0x40014800

08003b84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	051b      	lsls	r3, r3, #20
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a18      	ldr	r2, [pc, #96]	; (8003c3c <TIM_OC6_SetConfig+0xb8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00f      	beq.n	8003c00 <TIM_OC6_SetConfig+0x7c>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <TIM_OC6_SetConfig+0xbc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00b      	beq.n	8003c00 <TIM_OC6_SetConfig+0x7c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a16      	ldr	r2, [pc, #88]	; (8003c44 <TIM_OC6_SetConfig+0xc0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d007      	beq.n	8003c00 <TIM_OC6_SetConfig+0x7c>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <TIM_OC6_SetConfig+0xc4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <TIM_OC6_SetConfig+0x7c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <TIM_OC6_SetConfig+0xc8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d109      	bne.n	8003c14 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	029b      	lsls	r3, r3, #10
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	621a      	str	r2, [r3, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	40013400 	.word	0x40013400
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800

08003c50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f003 031f 	and.w	r3, r3, #31
 8003c62:	2201      	movs	r2, #1
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a1a      	ldr	r2, [r3, #32]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	401a      	ands	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a1a      	ldr	r2, [r3, #32]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	fa01 f303 	lsl.w	r3, r1, r3
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	621a      	str	r2, [r3, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
	...

08003c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e045      	b.n	8003d40 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d004      	beq.n	8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1b      	ldr	r2, [pc, #108]	; (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d108      	bne.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003cee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d12:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40013400 	.word	0x40013400

08003d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e040      	b.n	8003e24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f003 fcc6 	bl	8007744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2224      	movs	r2, #36	; 0x24
 8003dbc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 faa6 	bl	8004320 <UART_SetConfig>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e022      	b.n	8003e24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fde2 	bl	80049b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fe69 	bl	8004af4 <UART_CheckIdleState>
 8003e22:	4603      	mov	r3, r0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	f040 8081 	bne.w	8003f48 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_UART_Transmit+0x26>
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e079      	b.n	8003f4a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_UART_Transmit+0x38>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e072      	b.n	8003f4a <HAL_UART_Transmit+0x11e>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2221      	movs	r2, #33	; 0x21
 8003e76:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003e78:	f7fd f91c 	bl	80010b4 <HAL_GetTick>
 8003e7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	88fa      	ldrh	r2, [r7, #6]
 8003e82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	88fa      	ldrh	r2, [r7, #6]
 8003e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e96:	d108      	bne.n	8003eaa <HAL_UART_Transmit+0x7e>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d104      	bne.n	8003eaa <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	61bb      	str	r3, [r7, #24]
 8003ea8:	e003      	b.n	8003eb2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003eb2:	e02d      	b.n	8003f10 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2180      	movs	r1, #128	; 0x80
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fe5d 	bl	8004b7e <UART_WaitOnFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e03d      	b.n	8003f4a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10b      	bne.n	8003eec <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	881a      	ldrh	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee0:	b292      	uxth	r2, r2
 8003ee2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	3302      	adds	r3, #2
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	e008      	b.n	8003efe <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	781a      	ldrb	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	b292      	uxth	r2, r2
 8003ef6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	3301      	adds	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1cb      	bne.n	8003eb4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2200      	movs	r2, #0
 8003f24:	2140      	movs	r1, #64	; 0x40
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fe29 	bl	8004b7e <UART_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e009      	b.n	8003f4a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003f48:	2302      	movs	r3, #2
  }
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	f040 808a 	bne.w	8004080 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_UART_Receive_IT+0x24>
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e082      	b.n	8004082 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_UART_Receive_IT+0x36>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e07b      	b.n	8004082 <HAL_UART_Receive_IT+0x12e>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	88fa      	ldrh	r2, [r7, #6]
 8003f9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb6:	d10e      	bne.n	8003fd6 <HAL_UART_Receive_IT+0x82>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <HAL_UART_Receive_IT+0x78>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003fc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fca:	e02d      	b.n	8004028 <HAL_UART_Receive_IT+0xd4>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	22ff      	movs	r2, #255	; 0xff
 8003fd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fd4:	e028      	b.n	8004028 <HAL_UART_Receive_IT+0xd4>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10d      	bne.n	8003ffa <HAL_UART_Receive_IT+0xa6>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d104      	bne.n	8003ff0 <HAL_UART_Receive_IT+0x9c>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	22ff      	movs	r2, #255	; 0xff
 8003fea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fee:	e01b      	b.n	8004028 <HAL_UART_Receive_IT+0xd4>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	227f      	movs	r2, #127	; 0x7f
 8003ff4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ff8:	e016      	b.n	8004028 <HAL_UART_Receive_IT+0xd4>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004002:	d10d      	bne.n	8004020 <HAL_UART_Receive_IT+0xcc>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d104      	bne.n	8004016 <HAL_UART_Receive_IT+0xc2>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	227f      	movs	r2, #127	; 0x7f
 8004010:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004014:	e008      	b.n	8004028 <HAL_UART_Receive_IT+0xd4>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	223f      	movs	r2, #63	; 0x3f
 800401a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800401e:	e003      	b.n	8004028 <HAL_UART_Receive_IT+0xd4>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2222      	movs	r2, #34	; 0x22
 8004032:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404c:	d107      	bne.n	800405e <HAL_UART_Receive_IT+0x10a>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4a0d      	ldr	r2, [pc, #52]	; (8004090 <HAL_UART_Receive_IT+0x13c>)
 800405a:	661a      	str	r2, [r3, #96]	; 0x60
 800405c:	e002      	b.n	8004064 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4a0c      	ldr	r2, [pc, #48]	; (8004094 <HAL_UART_Receive_IT+0x140>)
 8004062:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800407a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004080:	2302      	movs	r3, #2
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	08004d57 	.word	0x08004d57
 8004094:	08004cad 	.word	0x08004cad

08004098 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d113      	bne.n	80040ee <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f003 0320 	and.w	r3, r3, #32
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00e      	beq.n	80040ee <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80ff 	beq.w	80042e2 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	4798      	blx	r3
      }
      return;
 80040ec:	e0f9      	b.n	80042e2 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80c1 	beq.w	8004278 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d105      	bne.n	800410c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 80b6 	beq.w	8004278 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00e      	beq.n	8004134 <HAL_UART_IRQHandler+0x9c>
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2201      	movs	r2, #1
 8004126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800412c:	f043 0201 	orr.w	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00e      	beq.n	800415c <HAL_UART_IRQHandler+0xc4>
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2202      	movs	r2, #2
 800414e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004154:	f043 0204 	orr.w	r2, r3, #4
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00e      	beq.n	8004184 <HAL_UART_IRQHandler+0xec>
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2204      	movs	r2, #4
 8004176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800417c:	f043 0202 	orr.w	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d013      	beq.n	80041b6 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d104      	bne.n	80041a2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2208      	movs	r2, #8
 80041a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ae:	f043 0208 	orr.w	r2, r3, #8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8093 	beq.w	80042e6 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00c      	beq.n	80041e4 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b40      	cmp	r3, #64	; 0x40
 80041f6:	d004      	beq.n	8004202 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d031      	beq.n	8004266 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fd03 	bl	8004c0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	2b40      	cmp	r3, #64	; 0x40
 8004214:	d123      	bne.n	800425e <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004224:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800422a:	2b00      	cmp	r3, #0
 800422c:	d013      	beq.n	8004256 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004232:	4a30      	ldr	r2, [pc, #192]	; (80042f4 <HAL_UART_IRQHandler+0x25c>)
 8004234:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800423a:	4618      	mov	r0, r3
 800423c:	f7fd f857 	bl	80012ee <HAL_DMA_Abort_IT>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d016      	beq.n	8004274 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004250:	4610      	mov	r0, r2
 8004252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004254:	e00e      	b.n	8004274 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f858 	bl	800430c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425c:	e00a      	b.n	8004274 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f854 	bl	800430c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004264:	e006      	b.n	8004274 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f850 	bl	800430c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004272:	e038      	b.n	80042e6 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004274:	bf00      	nop
    return;
 8004276:	e036      	b.n	80042e6 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00d      	beq.n	800429e <HAL_UART_IRQHandler+0x206>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004294:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fdb2 	bl	8004e00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800429c:	e026      	b.n	80042ec <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00d      	beq.n	80042c4 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d008      	beq.n	80042c4 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d017      	beq.n	80042ea <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	4798      	blx	r3
    }
    return;
 80042c2:	e012      	b.n	80042ea <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00e      	beq.n	80042ec <HAL_UART_IRQHandler+0x254>
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d009      	beq.n	80042ec <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fcce 	bl	8004c7a <UART_EndTransmit_IT>
    return;
 80042de:	bf00      	nop
 80042e0:	e004      	b.n	80042ec <HAL_UART_IRQHandler+0x254>
      return;
 80042e2:	bf00      	nop
 80042e4:	e002      	b.n	80042ec <HAL_UART_IRQHandler+0x254>
    return;
 80042e6:	bf00      	nop
 80042e8:	e000      	b.n	80042ec <HAL_UART_IRQHandler+0x254>
    return;
 80042ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80042ec:	3720      	adds	r7, #32
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	08004c4f 	.word	0x08004c4f

080042f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004320:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004324:	b088      	sub	sp, #32
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	4313      	orrs	r3, r2
 800434c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4bac      	ldr	r3, [pc, #688]	; (8004608 <UART_SetConfig+0x2e8>)
 8004356:	4013      	ands	r3, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	69f9      	ldr	r1, [r7, #28]
 800435e:	430b      	orrs	r3, r1
 8004360:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4aa2      	ldr	r2, [pc, #648]	; (800460c <UART_SetConfig+0x2ec>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	4313      	orrs	r3, r2
 8004390:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a99      	ldr	r2, [pc, #612]	; (8004610 <UART_SetConfig+0x2f0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d121      	bne.n	80043f4 <UART_SetConfig+0xd4>
 80043b0:	4b98      	ldr	r3, [pc, #608]	; (8004614 <UART_SetConfig+0x2f4>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d816      	bhi.n	80043ec <UART_SetConfig+0xcc>
 80043be:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <UART_SetConfig+0xa4>)
 80043c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c4:	080043d5 	.word	0x080043d5
 80043c8:	080043e1 	.word	0x080043e1
 80043cc:	080043db 	.word	0x080043db
 80043d0:	080043e7 	.word	0x080043e7
 80043d4:	2301      	movs	r3, #1
 80043d6:	76fb      	strb	r3, [r7, #27]
 80043d8:	e0e8      	b.n	80045ac <UART_SetConfig+0x28c>
 80043da:	2302      	movs	r3, #2
 80043dc:	76fb      	strb	r3, [r7, #27]
 80043de:	e0e5      	b.n	80045ac <UART_SetConfig+0x28c>
 80043e0:	2304      	movs	r3, #4
 80043e2:	76fb      	strb	r3, [r7, #27]
 80043e4:	e0e2      	b.n	80045ac <UART_SetConfig+0x28c>
 80043e6:	2308      	movs	r3, #8
 80043e8:	76fb      	strb	r3, [r7, #27]
 80043ea:	e0df      	b.n	80045ac <UART_SetConfig+0x28c>
 80043ec:	2310      	movs	r3, #16
 80043ee:	76fb      	strb	r3, [r7, #27]
 80043f0:	bf00      	nop
 80043f2:	e0db      	b.n	80045ac <UART_SetConfig+0x28c>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a87      	ldr	r2, [pc, #540]	; (8004618 <UART_SetConfig+0x2f8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d134      	bne.n	8004468 <UART_SetConfig+0x148>
 80043fe:	4b85      	ldr	r3, [pc, #532]	; (8004614 <UART_SetConfig+0x2f4>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f003 030c 	and.w	r3, r3, #12
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d829      	bhi.n	8004460 <UART_SetConfig+0x140>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <UART_SetConfig+0xf4>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004449 	.word	0x08004449
 8004418:	08004461 	.word	0x08004461
 800441c:	08004461 	.word	0x08004461
 8004420:	08004461 	.word	0x08004461
 8004424:	08004455 	.word	0x08004455
 8004428:	08004461 	.word	0x08004461
 800442c:	08004461 	.word	0x08004461
 8004430:	08004461 	.word	0x08004461
 8004434:	0800444f 	.word	0x0800444f
 8004438:	08004461 	.word	0x08004461
 800443c:	08004461 	.word	0x08004461
 8004440:	08004461 	.word	0x08004461
 8004444:	0800445b 	.word	0x0800445b
 8004448:	2300      	movs	r3, #0
 800444a:	76fb      	strb	r3, [r7, #27]
 800444c:	e0ae      	b.n	80045ac <UART_SetConfig+0x28c>
 800444e:	2302      	movs	r3, #2
 8004450:	76fb      	strb	r3, [r7, #27]
 8004452:	e0ab      	b.n	80045ac <UART_SetConfig+0x28c>
 8004454:	2304      	movs	r3, #4
 8004456:	76fb      	strb	r3, [r7, #27]
 8004458:	e0a8      	b.n	80045ac <UART_SetConfig+0x28c>
 800445a:	2308      	movs	r3, #8
 800445c:	76fb      	strb	r3, [r7, #27]
 800445e:	e0a5      	b.n	80045ac <UART_SetConfig+0x28c>
 8004460:	2310      	movs	r3, #16
 8004462:	76fb      	strb	r3, [r7, #27]
 8004464:	bf00      	nop
 8004466:	e0a1      	b.n	80045ac <UART_SetConfig+0x28c>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a6b      	ldr	r2, [pc, #428]	; (800461c <UART_SetConfig+0x2fc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d120      	bne.n	80044b4 <UART_SetConfig+0x194>
 8004472:	4b68      	ldr	r3, [pc, #416]	; (8004614 <UART_SetConfig+0x2f4>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004478:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800447c:	2b10      	cmp	r3, #16
 800447e:	d00f      	beq.n	80044a0 <UART_SetConfig+0x180>
 8004480:	2b10      	cmp	r3, #16
 8004482:	d802      	bhi.n	800448a <UART_SetConfig+0x16a>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <UART_SetConfig+0x174>
 8004488:	e010      	b.n	80044ac <UART_SetConfig+0x18c>
 800448a:	2b20      	cmp	r3, #32
 800448c:	d005      	beq.n	800449a <UART_SetConfig+0x17a>
 800448e:	2b30      	cmp	r3, #48	; 0x30
 8004490:	d009      	beq.n	80044a6 <UART_SetConfig+0x186>
 8004492:	e00b      	b.n	80044ac <UART_SetConfig+0x18c>
 8004494:	2300      	movs	r3, #0
 8004496:	76fb      	strb	r3, [r7, #27]
 8004498:	e088      	b.n	80045ac <UART_SetConfig+0x28c>
 800449a:	2302      	movs	r3, #2
 800449c:	76fb      	strb	r3, [r7, #27]
 800449e:	e085      	b.n	80045ac <UART_SetConfig+0x28c>
 80044a0:	2304      	movs	r3, #4
 80044a2:	76fb      	strb	r3, [r7, #27]
 80044a4:	e082      	b.n	80045ac <UART_SetConfig+0x28c>
 80044a6:	2308      	movs	r3, #8
 80044a8:	76fb      	strb	r3, [r7, #27]
 80044aa:	e07f      	b.n	80045ac <UART_SetConfig+0x28c>
 80044ac:	2310      	movs	r3, #16
 80044ae:	76fb      	strb	r3, [r7, #27]
 80044b0:	bf00      	nop
 80044b2:	e07b      	b.n	80045ac <UART_SetConfig+0x28c>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a59      	ldr	r2, [pc, #356]	; (8004620 <UART_SetConfig+0x300>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d120      	bne.n	8004500 <UART_SetConfig+0x1e0>
 80044be:	4b55      	ldr	r3, [pc, #340]	; (8004614 <UART_SetConfig+0x2f4>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044c8:	2b40      	cmp	r3, #64	; 0x40
 80044ca:	d00f      	beq.n	80044ec <UART_SetConfig+0x1cc>
 80044cc:	2b40      	cmp	r3, #64	; 0x40
 80044ce:	d802      	bhi.n	80044d6 <UART_SetConfig+0x1b6>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <UART_SetConfig+0x1c0>
 80044d4:	e010      	b.n	80044f8 <UART_SetConfig+0x1d8>
 80044d6:	2b80      	cmp	r3, #128	; 0x80
 80044d8:	d005      	beq.n	80044e6 <UART_SetConfig+0x1c6>
 80044da:	2bc0      	cmp	r3, #192	; 0xc0
 80044dc:	d009      	beq.n	80044f2 <UART_SetConfig+0x1d2>
 80044de:	e00b      	b.n	80044f8 <UART_SetConfig+0x1d8>
 80044e0:	2300      	movs	r3, #0
 80044e2:	76fb      	strb	r3, [r7, #27]
 80044e4:	e062      	b.n	80045ac <UART_SetConfig+0x28c>
 80044e6:	2302      	movs	r3, #2
 80044e8:	76fb      	strb	r3, [r7, #27]
 80044ea:	e05f      	b.n	80045ac <UART_SetConfig+0x28c>
 80044ec:	2304      	movs	r3, #4
 80044ee:	76fb      	strb	r3, [r7, #27]
 80044f0:	e05c      	b.n	80045ac <UART_SetConfig+0x28c>
 80044f2:	2308      	movs	r3, #8
 80044f4:	76fb      	strb	r3, [r7, #27]
 80044f6:	e059      	b.n	80045ac <UART_SetConfig+0x28c>
 80044f8:	2310      	movs	r3, #16
 80044fa:	76fb      	strb	r3, [r7, #27]
 80044fc:	bf00      	nop
 80044fe:	e055      	b.n	80045ac <UART_SetConfig+0x28c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a47      	ldr	r2, [pc, #284]	; (8004624 <UART_SetConfig+0x304>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d124      	bne.n	8004554 <UART_SetConfig+0x234>
 800450a:	4b42      	ldr	r3, [pc, #264]	; (8004614 <UART_SetConfig+0x2f4>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004518:	d012      	beq.n	8004540 <UART_SetConfig+0x220>
 800451a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800451e:	d802      	bhi.n	8004526 <UART_SetConfig+0x206>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <UART_SetConfig+0x214>
 8004524:	e012      	b.n	800454c <UART_SetConfig+0x22c>
 8004526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800452a:	d006      	beq.n	800453a <UART_SetConfig+0x21a>
 800452c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004530:	d009      	beq.n	8004546 <UART_SetConfig+0x226>
 8004532:	e00b      	b.n	800454c <UART_SetConfig+0x22c>
 8004534:	2300      	movs	r3, #0
 8004536:	76fb      	strb	r3, [r7, #27]
 8004538:	e038      	b.n	80045ac <UART_SetConfig+0x28c>
 800453a:	2302      	movs	r3, #2
 800453c:	76fb      	strb	r3, [r7, #27]
 800453e:	e035      	b.n	80045ac <UART_SetConfig+0x28c>
 8004540:	2304      	movs	r3, #4
 8004542:	76fb      	strb	r3, [r7, #27]
 8004544:	e032      	b.n	80045ac <UART_SetConfig+0x28c>
 8004546:	2308      	movs	r3, #8
 8004548:	76fb      	strb	r3, [r7, #27]
 800454a:	e02f      	b.n	80045ac <UART_SetConfig+0x28c>
 800454c:	2310      	movs	r3, #16
 800454e:	76fb      	strb	r3, [r7, #27]
 8004550:	bf00      	nop
 8004552:	e02b      	b.n	80045ac <UART_SetConfig+0x28c>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a2c      	ldr	r2, [pc, #176]	; (800460c <UART_SetConfig+0x2ec>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d124      	bne.n	80045a8 <UART_SetConfig+0x288>
 800455e:	4b2d      	ldr	r3, [pc, #180]	; (8004614 <UART_SetConfig+0x2f4>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800456c:	d012      	beq.n	8004594 <UART_SetConfig+0x274>
 800456e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004572:	d802      	bhi.n	800457a <UART_SetConfig+0x25a>
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <UART_SetConfig+0x268>
 8004578:	e012      	b.n	80045a0 <UART_SetConfig+0x280>
 800457a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457e:	d006      	beq.n	800458e <UART_SetConfig+0x26e>
 8004580:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004584:	d009      	beq.n	800459a <UART_SetConfig+0x27a>
 8004586:	e00b      	b.n	80045a0 <UART_SetConfig+0x280>
 8004588:	2300      	movs	r3, #0
 800458a:	76fb      	strb	r3, [r7, #27]
 800458c:	e00e      	b.n	80045ac <UART_SetConfig+0x28c>
 800458e:	2302      	movs	r3, #2
 8004590:	76fb      	strb	r3, [r7, #27]
 8004592:	e00b      	b.n	80045ac <UART_SetConfig+0x28c>
 8004594:	2304      	movs	r3, #4
 8004596:	76fb      	strb	r3, [r7, #27]
 8004598:	e008      	b.n	80045ac <UART_SetConfig+0x28c>
 800459a:	2308      	movs	r3, #8
 800459c:	76fb      	strb	r3, [r7, #27]
 800459e:	e005      	b.n	80045ac <UART_SetConfig+0x28c>
 80045a0:	2310      	movs	r3, #16
 80045a2:	76fb      	strb	r3, [r7, #27]
 80045a4:	bf00      	nop
 80045a6:	e001      	b.n	80045ac <UART_SetConfig+0x28c>
 80045a8:	2310      	movs	r3, #16
 80045aa:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a16      	ldr	r2, [pc, #88]	; (800460c <UART_SetConfig+0x2ec>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	f040 80fa 	bne.w	80047ac <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045b8:	7efb      	ldrb	r3, [r7, #27]
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d836      	bhi.n	800462c <UART_SetConfig+0x30c>
 80045be:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <UART_SetConfig+0x2a4>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080045e9 	.word	0x080045e9
 80045c8:	0800462d 	.word	0x0800462d
 80045cc:	080045f1 	.word	0x080045f1
 80045d0:	0800462d 	.word	0x0800462d
 80045d4:	080045f7 	.word	0x080045f7
 80045d8:	0800462d 	.word	0x0800462d
 80045dc:	0800462d 	.word	0x0800462d
 80045e0:	0800462d 	.word	0x0800462d
 80045e4:	080045ff 	.word	0x080045ff
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80045e8:	f7fd fe0e 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 80045ec:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045ee:	e020      	b.n	8004632 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80045f0:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <UART_SetConfig+0x308>)
 80045f2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045f4:	e01d      	b.n	8004632 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80045f6:	f7fd fd71 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 80045fa:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045fc:	e019      	b.n	8004632 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80045fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004602:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004604:	e015      	b.n	8004632 <UART_SetConfig+0x312>
 8004606:	bf00      	nop
 8004608:	efff69f3 	.word	0xefff69f3
 800460c:	40008000 	.word	0x40008000
 8004610:	40013800 	.word	0x40013800
 8004614:	40021000 	.word	0x40021000
 8004618:	40004400 	.word	0x40004400
 800461c:	40004800 	.word	0x40004800
 8004620:	40004c00 	.word	0x40004c00
 8004624:	40005000 	.word	0x40005000
 8004628:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	74fb      	strb	r3, [r7, #19]
        break;
 8004630:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 81ac 	beq.w	8004992 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	4413      	add	r3, r2
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	429a      	cmp	r2, r3
 8004648:	d305      	bcc.n	8004656 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	429a      	cmp	r2, r3
 8004654:	d902      	bls.n	800465c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	74fb      	strb	r3, [r7, #19]
 800465a:	e19a      	b.n	8004992 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 800465c:	7efb      	ldrb	r3, [r7, #27]
 800465e:	2b08      	cmp	r3, #8
 8004660:	f200 8091 	bhi.w	8004786 <UART_SetConfig+0x466>
 8004664:	a201      	add	r2, pc, #4	; (adr r2, 800466c <UART_SetConfig+0x34c>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	08004691 	.word	0x08004691
 8004670:	08004787 	.word	0x08004787
 8004674:	080046dd 	.word	0x080046dd
 8004678:	08004787 	.word	0x08004787
 800467c:	08004711 	.word	0x08004711
 8004680:	08004787 	.word	0x08004787
 8004684:	08004787 	.word	0x08004787
 8004688:	08004787 	.word	0x08004787
 800468c:	0800475d 	.word	0x0800475d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004690:	f7fd fdba 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 8004694:	4603      	mov	r3, r0
 8004696:	4619      	mov	r1, r3
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	f04f 0400 	mov.w	r4, #0
 80046a4:	0214      	lsls	r4, r2, #8
 80046a6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80046aa:	020b      	lsls	r3, r1, #8
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6852      	ldr	r2, [r2, #4]
 80046b0:	0852      	lsrs	r2, r2, #1
 80046b2:	4611      	mov	r1, r2
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	eb13 0b01 	adds.w	fp, r3, r1
 80046bc:	eb44 0c02 	adc.w	ip, r4, r2
 80046c0:	4658      	mov	r0, fp
 80046c2:	4661      	mov	r1, ip
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f04f 0400 	mov.w	r4, #0
 80046cc:	461a      	mov	r2, r3
 80046ce:	4623      	mov	r3, r4
 80046d0:	f7fc fada 	bl	8000c88 <__aeabi_uldivmod>
 80046d4:	4603      	mov	r3, r0
 80046d6:	460c      	mov	r4, r1
 80046d8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80046da:	e057      	b.n	800478c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	085b      	lsrs	r3, r3, #1
 80046e2:	f04f 0400 	mov.w	r4, #0
 80046e6:	49b1      	ldr	r1, [pc, #708]	; (80049ac <UART_SetConfig+0x68c>)
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	eb13 0b01 	adds.w	fp, r3, r1
 80046f0:	eb44 0c02 	adc.w	ip, r4, r2
 80046f4:	4658      	mov	r0, fp
 80046f6:	4661      	mov	r1, ip
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f04f 0400 	mov.w	r4, #0
 8004700:	461a      	mov	r2, r3
 8004702:	4623      	mov	r3, r4
 8004704:	f7fc fac0 	bl	8000c88 <__aeabi_uldivmod>
 8004708:	4603      	mov	r3, r0
 800470a:	460c      	mov	r4, r1
 800470c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800470e:	e03d      	b.n	800478c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004710:	f7fd fce4 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 8004714:	4603      	mov	r3, r0
 8004716:	4619      	mov	r1, r3
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	f04f 0400 	mov.w	r4, #0
 8004724:	0214      	lsls	r4, r2, #8
 8004726:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800472a:	020b      	lsls	r3, r1, #8
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6852      	ldr	r2, [r2, #4]
 8004730:	0852      	lsrs	r2, r2, #1
 8004732:	4611      	mov	r1, r2
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	eb13 0b01 	adds.w	fp, r3, r1
 800473c:	eb44 0c02 	adc.w	ip, r4, r2
 8004740:	4658      	mov	r0, fp
 8004742:	4661      	mov	r1, ip
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f04f 0400 	mov.w	r4, #0
 800474c:	461a      	mov	r2, r3
 800474e:	4623      	mov	r3, r4
 8004750:	f7fc fa9a 	bl	8000c88 <__aeabi_uldivmod>
 8004754:	4603      	mov	r3, r0
 8004756:	460c      	mov	r4, r1
 8004758:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800475a:	e017      	b.n	800478c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	085b      	lsrs	r3, r3, #1
 8004762:	f04f 0400 	mov.w	r4, #0
 8004766:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800476a:	f144 0100 	adc.w	r1, r4, #0
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f04f 0400 	mov.w	r4, #0
 8004776:	461a      	mov	r2, r3
 8004778:	4623      	mov	r3, r4
 800477a:	f7fc fa85 	bl	8000c88 <__aeabi_uldivmod>
 800477e:	4603      	mov	r3, r0
 8004780:	460c      	mov	r4, r1
 8004782:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004784:	e002      	b.n	800478c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	74fb      	strb	r3, [r7, #19]
            break;
 800478a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004792:	d308      	bcc.n	80047a6 <UART_SetConfig+0x486>
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800479a:	d204      	bcs.n	80047a6 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	60da      	str	r2, [r3, #12]
 80047a4:	e0f5      	b.n	8004992 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	74fb      	strb	r3, [r7, #19]
 80047aa:	e0f2      	b.n	8004992 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b4:	d17f      	bne.n	80048b6 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80047b6:	7efb      	ldrb	r3, [r7, #27]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d85c      	bhi.n	8004876 <UART_SetConfig+0x556>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <UART_SetConfig+0x4a4>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047e9 	.word	0x080047e9
 80047c8:	08004807 	.word	0x08004807
 80047cc:	08004825 	.word	0x08004825
 80047d0:	08004877 	.word	0x08004877
 80047d4:	08004841 	.word	0x08004841
 80047d8:	08004877 	.word	0x08004877
 80047dc:	08004877 	.word	0x08004877
 80047e0:	08004877 	.word	0x08004877
 80047e4:	0800485f 	.word	0x0800485f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80047e8:	f7fd fd0e 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 80047ec:	4603      	mov	r3, r0
 80047ee:	005a      	lsls	r2, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	085b      	lsrs	r3, r3, #1
 80047f6:	441a      	add	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	b29b      	uxth	r3, r3
 8004802:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004804:	e03a      	b.n	800487c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004806:	f7fd fd15 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 800480a:	4603      	mov	r3, r0
 800480c:	005a      	lsls	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	085b      	lsrs	r3, r3, #1
 8004814:	441a      	add	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	b29b      	uxth	r3, r3
 8004820:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004822:	e02b      	b.n	800487c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	085b      	lsrs	r3, r3, #1
 800482a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800482e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6852      	ldr	r2, [r2, #4]
 8004836:	fbb3 f3f2 	udiv	r3, r3, r2
 800483a:	b29b      	uxth	r3, r3
 800483c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800483e:	e01d      	b.n	800487c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004840:	f7fd fc4c 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 8004844:	4603      	mov	r3, r0
 8004846:	005a      	lsls	r2, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	085b      	lsrs	r3, r3, #1
 800484e:	441a      	add	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	fbb2 f3f3 	udiv	r3, r2, r3
 8004858:	b29b      	uxth	r3, r3
 800485a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800485c:	e00e      	b.n	800487c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	085b      	lsrs	r3, r3, #1
 8004864:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004870:	b29b      	uxth	r3, r3
 8004872:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004874:	e002      	b.n	800487c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	74fb      	strb	r3, [r7, #19]
        break;
 800487a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b0f      	cmp	r3, #15
 8004880:	d916      	bls.n	80048b0 <UART_SetConfig+0x590>
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004888:	d212      	bcs.n	80048b0 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f023 030f 	bic.w	r3, r3, #15
 8004892:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	b29b      	uxth	r3, r3
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	b29a      	uxth	r2, r3
 80048a0:	897b      	ldrh	r3, [r7, #10]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	897a      	ldrh	r2, [r7, #10]
 80048ac:	60da      	str	r2, [r3, #12]
 80048ae:	e070      	b.n	8004992 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	74fb      	strb	r3, [r7, #19]
 80048b4:	e06d      	b.n	8004992 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80048b6:	7efb      	ldrb	r3, [r7, #27]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d859      	bhi.n	8004970 <UART_SetConfig+0x650>
 80048bc:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <UART_SetConfig+0x5a4>)
 80048be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c2:	bf00      	nop
 80048c4:	080048e9 	.word	0x080048e9
 80048c8:	08004905 	.word	0x08004905
 80048cc:	08004921 	.word	0x08004921
 80048d0:	08004971 	.word	0x08004971
 80048d4:	0800493d 	.word	0x0800493d
 80048d8:	08004971 	.word	0x08004971
 80048dc:	08004971 	.word	0x08004971
 80048e0:	08004971 	.word	0x08004971
 80048e4:	08004959 	.word	0x08004959
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80048e8:	f7fd fc8e 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	085b      	lsrs	r3, r3, #1
 80048f4:	441a      	add	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fe:	b29b      	uxth	r3, r3
 8004900:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004902:	e038      	b.n	8004976 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004904:	f7fd fc96 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 8004908:	4602      	mov	r2, r0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	441a      	add	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	fbb2 f3f3 	udiv	r3, r2, r3
 800491a:	b29b      	uxth	r3, r3
 800491c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800491e:	e02a      	b.n	8004976 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800492a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6852      	ldr	r2, [r2, #4]
 8004932:	fbb3 f3f2 	udiv	r3, r3, r2
 8004936:	b29b      	uxth	r3, r3
 8004938:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800493a:	e01c      	b.n	8004976 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800493c:	f7fd fbce 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	441a      	add	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004952:	b29b      	uxth	r3, r3
 8004954:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004956:	e00e      	b.n	8004976 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	fbb2 f3f3 	udiv	r3, r2, r3
 800496a:	b29b      	uxth	r3, r3
 800496c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800496e:	e002      	b.n	8004976 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	74fb      	strb	r3, [r7, #19]
        break;
 8004974:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b0f      	cmp	r3, #15
 800497a:	d908      	bls.n	800498e <UART_SetConfig+0x66e>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004982:	d204      	bcs.n	800498e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	60da      	str	r2, [r3, #12]
 800498c:	e001      	b.n	8004992 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800499e:	7cfb      	ldrb	r3, [r7, #19]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3720      	adds	r7, #32
 80049a4:	46bd      	mov	sp, r7
 80049a6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80049aa:	bf00      	nop
 80049ac:	f4240000 	.word	0xf4240000

080049b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01a      	beq.n	8004ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aae:	d10a      	bne.n	8004ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	605a      	str	r2, [r3, #4]
  }
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004b02:	f7fc fad7 	bl	80010b4 <HAL_GetTick>
 8004b06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d10e      	bne.n	8004b34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f82a 	bl	8004b7e <UART_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e020      	b.n	8004b76 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d10e      	bne.n	8004b60 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f814 	bl	8004b7e <UART_WaitOnFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e00a      	b.n	8004b76 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	603b      	str	r3, [r7, #0]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8e:	e02a      	b.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b96:	d026      	beq.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b98:	f7fc fa8c 	bl	80010b4 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d302      	bcc.n	8004bae <UART_WaitOnFlagUntilTimeout+0x30>
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d11b      	bne.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bbc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0201 	bic.w	r2, r2, #1
 8004bcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e00f      	b.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	bf0c      	ite	eq
 8004bf6:	2301      	moveq	r3, #1
 8004bf8:	2300      	movne	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d0c5      	beq.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c24:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0201 	bic.w	r2, r2, #1
 8004c34:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f7ff fb4d 	bl	800430c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b082      	sub	sp, #8
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c90:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff fb2a 	bl	80042f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ca4:	bf00      	nop
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cba:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc0:	2b22      	cmp	r3, #34	; 0x22
 8004cc2:	d13a      	bne.n	8004d3a <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004cca:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ccc:	89bb      	ldrh	r3, [r7, #12]
 8004cce:	b2d9      	uxtb	r1, r3
 8004cd0:	89fb      	ldrh	r3, [r7, #14]
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	400a      	ands	r2, r1
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d123      	bne.n	8004d4e <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d14:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f001 fcb4 	bl	80066a0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d38:	e009      	b.n	8004d4e <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	8b1b      	ldrh	r3, [r3, #24]
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0208 	orr.w	r2, r2, #8
 8004d4a:	b292      	uxth	r2, r2
 8004d4c:	831a      	strh	r2, [r3, #24]
}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d64:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d6a:	2b22      	cmp	r3, #34	; 0x22
 8004d6c:	d13a      	bne.n	8004de4 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d74:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d7c:	89ba      	ldrh	r2, [r7, #12]
 8004d7e:	89fb      	ldrh	r3, [r7, #14]
 8004d80:	4013      	ands	r3, r2
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	1c9a      	adds	r2, r3, #2
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d123      	bne.n	8004df8 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dbe:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0201 	bic.w	r2, r2, #1
 8004dce:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f001 fc5f 	bl	80066a0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004de2:	e009      	b.n	8004df8 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	8b1b      	ldrh	r3, [r3, #24]
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0208 	orr.w	r2, r2, #8
 8004df4:	b292      	uxth	r2, r2
 8004df6:	831a      	strh	r2, [r3, #24]
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <peekCommand>:
#include "command.h"


void peekCommand(gcodeCommand_context* command, diffDriveRobot_Context* robot, UART_HandleTypeDef *huart){
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08e      	sub	sp, #56	; 0x38
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
    if (hasM(command)) {
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 fe8f 	bl	8005b44 <hasM>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80ea 	beq.w	8005002 <peekCommand+0x1ee>
        float Kp,Ti,Td, d;
        switch (command->M)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	88db      	ldrh	r3, [r3, #6]
 8004e32:	f240 1239 	movw	r2, #313	; 0x139
 8004e36:	4293      	cmp	r3, r2
 8004e38:	f000 809f 	beq.w	8004f7a <peekCommand+0x166>
 8004e3c:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8004e40:	da10      	bge.n	8004e64 <peekCommand+0x50>
 8004e42:	2b72      	cmp	r3, #114	; 0x72
 8004e44:	d032      	beq.n	8004eac <peekCommand+0x98>
 8004e46:	2b72      	cmp	r3, #114	; 0x72
 8004e48:	dc04      	bgt.n	8004e54 <peekCommand+0x40>
 8004e4a:	2b12      	cmp	r3, #18
 8004e4c:	d026      	beq.n	8004e9c <peekCommand+0x88>
 8004e4e:	2b13      	cmp	r3, #19
 8004e50:	d028      	beq.n	8004ea4 <peekCommand+0x90>
                break;
            case 667:
                printSelf(huart);
                break;
            default:
            	break;// default statements
 8004e52:	e0df      	b.n	8005014 <peekCommand+0x200>
        switch (command->M)
 8004e54:	f240 122d 	movw	r2, #301	; 0x12d
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d02c      	beq.n	8004eb6 <peekCommand+0xa2>
 8004e5c:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8004e60:	d05a      	beq.n	8004f18 <peekCommand+0x104>
            	break;// default statements
 8004e62:	e0d7      	b.n	8005014 <peekCommand+0x200>
        switch (command->M)
 8004e64:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004e68:	f000 80b4 	beq.w	8004fd4 <peekCommand+0x1c0>
 8004e6c:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004e70:	dc09      	bgt.n	8004e86 <peekCommand+0x72>
 8004e72:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8004e76:	f000 808f 	beq.w	8004f98 <peekCommand+0x184>
 8004e7a:	f240 123b 	movw	r2, #315	; 0x13b
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	f000 8099 	beq.w	8004fb6 <peekCommand+0x1a2>
            	break;// default statements
 8004e84:	e0c6      	b.n	8005014 <peekCommand+0x200>
        switch (command->M)
 8004e86:	f240 229a 	movw	r2, #666	; 0x29a
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	f000 80b1 	beq.w	8004ff2 <peekCommand+0x1de>
 8004e90:	f240 229b 	movw	r2, #667	; 0x29b
 8004e94:	4293      	cmp	r3, r2
 8004e96:	f000 80b0 	beq.w	8004ffa <peekCommand+0x1e6>
            	break;// default statements
 8004e9a:	e0bb      	b.n	8005014 <peekCommand+0x200>
            	breakeMotors(robot);
 8004e9c:	68b8      	ldr	r0, [r7, #8]
 8004e9e:	f000 fa44 	bl	800532a <breakeMotors>
              	break;
 8004ea2:	e0b7      	b.n	8005014 <peekCommand+0x200>
            	unBreakeMotors(robot);
 8004ea4:	68b8      	ldr	r0, [r7, #8]
 8004ea6:	f000 fa52 	bl	800534e <unBreakeMotors>
              	break;
 8004eaa:	e0b3      	b.n	8005014 <peekCommand+0x200>
                printPosition(robot, huart);
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	68b8      	ldr	r0, [r7, #8]
 8004eb0:	f000 fa82 	bl	80053b8 <printPosition>
                break;
 8004eb4:	e0ae      	b.n	8005014 <peekCommand+0x200>
                if (hasP(command)) Kp = command->P;
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fea3 	bl	8005c02 <hasP>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <peekCommand+0xb6>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec8:	e002      	b.n	8004ed0 <peekCommand+0xbc>
                else Kp = 0.;
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
                if (hasI(command)) Ti = command->I;
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fea9 	bl	8005c28 <hasI>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <peekCommand+0xd0>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee2:	e002      	b.n	8004eea <peekCommand+0xd6>
                else Ti = 0.;
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	633b      	str	r3, [r7, #48]	; 0x30
                if (hasD(command)) Td = command->D;
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 feaf 	bl	8005c4e <hasD>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <peekCommand+0xea>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004efc:	e002      	b.n	8004f04 <peekCommand+0xf0>
                else Td = 0.;
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	62fb      	str	r3, [r7, #44]	; 0x2c
                setPID_D(robot, Kp, Ti, Td);
 8004f04:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8004f08:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8004f0c:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8004f10:	68b8      	ldr	r0, [r7, #8]
 8004f12:	f000 facb 	bl	80054ac <setPID_D>
                break;
 8004f16:	e07d      	b.n	8005014 <peekCommand+0x200>
                if (hasP(command)) Kp = command->P;
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 fe72 	bl	8005c02 <hasP>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <peekCommand+0x118>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	637b      	str	r3, [r7, #52]	; 0x34
 8004f2a:	e002      	b.n	8004f32 <peekCommand+0x11e>
                else Kp = 0.;
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	637b      	str	r3, [r7, #52]	; 0x34
                if (hasI(command)) Ti = command->I;
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fe78 	bl	8005c28 <hasI>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <peekCommand+0x132>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f42:	633b      	str	r3, [r7, #48]	; 0x30
 8004f44:	e002      	b.n	8004f4c <peekCommand+0x138>
                else Ti = 0.;
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	633b      	str	r3, [r7, #48]	; 0x30
                if (hasD(command)) Td = command->D;
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fe7e 	bl	8005c4e <hasD>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <peekCommand+0x14c>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f5e:	e002      	b.n	8004f66 <peekCommand+0x152>
                else Td = 0.;
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
                setPID_G(robot, Kp, Ti, Td);
 8004f66:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8004f6a:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8004f6e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8004f72:	68b8      	ldr	r0, [r7, #8]
 8004f74:	f000 fab6 	bl	80054e4 <setPID_G>
                break;
 8004f78:	e04c      	b.n	8005014 <peekCommand+0x200>
                if (hasD(command)){
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 fe67 	bl	8005c4e <hasD>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d03f      	beq.n	8005006 <peekCommand+0x1f2>
                     d = command->D;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8a:	617b      	str	r3, [r7, #20]
                     setLOdomWheelDia(robot, d);
 8004f8c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004f90:	68b8      	ldr	r0, [r7, #8]
 8004f92:	f000 fac3 	bl	800551c <setLOdomWheelDia>
            break;
 8004f96:	e036      	b.n	8005006 <peekCommand+0x1f2>
                if (hasD(command)){
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fe58 	bl	8005c4e <hasD>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d032      	beq.n	800500a <peekCommand+0x1f6>
                     d = command->D;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa8:	617b      	str	r3, [r7, #20]
                     setROdomWheelDia(robot, d);
 8004faa:	ed97 0a05 	vldr	s0, [r7, #20]
 8004fae:	68b8      	ldr	r0, [r7, #8]
 8004fb0:	f000 faca 	bl	8005548 <setROdomWheelDia>
            break;
 8004fb4:	e029      	b.n	800500a <peekCommand+0x1f6>
                if (hasD(command)){
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 fe49 	bl	8005c4e <hasD>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d025      	beq.n	800500e <peekCommand+0x1fa>
                     d = command->D;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc6:	617b      	str	r3, [r7, #20]
                     setOdomInnerDist(robot, d);
 8004fc8:	ed97 0a05 	vldr	s0, [r7, #20]
 8004fcc:	68b8      	ldr	r0, [r7, #8]
 8004fce:	f000 fad1 	bl	8005574 <setOdomInnerDist>
            break;
 8004fd2:	e01c      	b.n	800500e <peekCommand+0x1fa>
                if (hasD(command)){
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 fe3a 	bl	8005c4e <hasD>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d018      	beq.n	8005012 <peekCommand+0x1fe>
                     d = command->D;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe4:	617b      	str	r3, [r7, #20]
                     setMotorInnerDist(robot, d);
 8004fe6:	ed97 0a05 	vldr	s0, [r7, #20]
 8004fea:	68b8      	ldr	r0, [r7, #8]
 8004fec:	f000 fad2 	bl	8005594 <setMotorInnerDist>
            break;
 8004ff0:	e00f      	b.n	8005012 <peekCommand+0x1fe>
                printComTest(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fa24 	bl	8005440 <printComTest>
                break;
 8004ff8:	e00c      	b.n	8005014 <peekCommand+0x200>
                printSelf(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fa3c 	bl	8005478 <printSelf>
                break;
 8005000:	e008      	b.n	8005014 <peekCommand+0x200>
        }
    }
 8005002:	bf00      	nop
 8005004:	e006      	b.n	8005014 <peekCommand+0x200>
            break;
 8005006:	bf00      	nop
 8005008:	e004      	b.n	8005014 <peekCommand+0x200>
            break;
 800500a:	bf00      	nop
 800500c:	e002      	b.n	8005014 <peekCommand+0x200>
            break;
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <peekCommand+0x200>
            break;
 8005012:	bf00      	nop
    if (hasN(command)) {
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 fda8 	bl	8005b6a <hasN>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
        switch (command->N)
        {
            default:
            	break;// default statements
        }
    }
 800501e:	bf00      	nop
    if (hasG(command)) {
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 fdb5 	bl	8005b90 <hasG>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80b5 	beq.w	8005198 <peekCommand+0x384>
        switch (command->G)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	891b      	ldrh	r3, [r3, #8]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d03d      	beq.n	80050b2 <peekCommand+0x29e>
 8005036:	2b5c      	cmp	r3, #92	; 0x5c
 8005038:	d074      	beq.n	8005124 <peekCommand+0x310>
 800503a:	2b00      	cmp	r3, #0
 800503c:	d000      	beq.n	8005040 <peekCommand+0x22c>
                setPosition(robot, x, y, theta);
                linearMoveTheta(robot, x, y, theta);
                break;

            default:
                break;// default statements
 800503e:	e0ac      	b.n	800519a <peekCommand+0x386>
                xc = robot->odometry->position.x;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	62bb      	str	r3, [r7, #40]	; 0x28
                yc = robot->odometry->position.y;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
                thetac = robot->odometry->position.theta; // ne pas faire ça en vrai
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	613b      	str	r3, [r7, #16]
                if (hasX(command)) xc = command->X;
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fdac 	bl	8005bb6 <hasX>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <peekCommand+0x256>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
                if (hasY(command)) yc = command->Y;
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fdb6 	bl	8005bdc <hasY>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <peekCommand+0x268>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
                if (hasA(command)){
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fdf9 	bl	8005c74 <hasA>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00c      	beq.n	80050a2 <peekCommand+0x28e>
                    thetac = command->A;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	613b      	str	r3, [r7, #16]
                    fastMoveTheta(robot, xc, yc, thetac);
 800508e:	ed97 1a04 	vldr	s2, [r7, #16]
 8005092:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8005096:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800509a:	68b8      	ldr	r0, [r7, #8]
 800509c:	f000 f8c4 	bl	8005228 <fastMoveTheta>
                break;
 80050a0:	e07b      	b.n	800519a <peekCommand+0x386>
                    fastMove(robot, xc, yc);
 80050a2:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80050a6:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80050aa:	68b8      	ldr	r0, [r7, #8]
 80050ac:	f000 f879 	bl	80051a2 <fastMove>
                break;
 80050b0:	e073      	b.n	800519a <peekCommand+0x386>
                xc = robot->odometry->position.x;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	62bb      	str	r3, [r7, #40]	; 0x28
                yc = robot->odometry->position.y;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
                thetac = robot->odometry->position.theta; // ne pas faire ça en vrai
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	613b      	str	r3, [r7, #16]
                if (hasX(command)) xc = command->X;
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 fd73 	bl	8005bb6 <hasX>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <peekCommand+0x2c8>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
                if (hasY(command)) yc = command->Y;
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 fd7d 	bl	8005bdc <hasY>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <peekCommand+0x2da>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
                if (hasA(command)){
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fdc0 	bl	8005c74 <hasA>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00c      	beq.n	8005114 <peekCommand+0x300>
                    thetac = command->A;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	613b      	str	r3, [r7, #16]
                    linearMoveTheta(robot, xc, yc, thetac);
 8005100:	ed97 1a04 	vldr	s2, [r7, #16]
 8005104:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8005108:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800510c:	68b8      	ldr	r0, [r7, #8]
 800510e:	f000 f8ed 	bl	80052ec <linearMoveTheta>
                break;
 8005112:	e042      	b.n	800519a <peekCommand+0x386>
                    linearMove(robot, xc, yc);
 8005114:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8005118:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800511c:	68b8      	ldr	r0, [r7, #8]
 800511e:	f000 f8a2 	bl	8005266 <linearMove>
                break;
 8005122:	e03a      	b.n	800519a <peekCommand+0x386>
                x = robot->odometry->position.x;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	623b      	str	r3, [r7, #32]
                y = robot->odometry->position.y;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	61fb      	str	r3, [r7, #28]
                theta = robot->odometry->position.theta; // ne pas faire ça en vrai
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	61bb      	str	r3, [r7, #24]
                if (hasX(command)) x = command->X;
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fd3a 	bl	8005bb6 <hasX>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <peekCommand+0x33a>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	623b      	str	r3, [r7, #32]
                if (hasY(command)) y = command->Y;
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 fd44 	bl	8005bdc <hasY>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <peekCommand+0x34c>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	61fb      	str	r3, [r7, #28]
                if (hasA(command)) theta = command->A;
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fd87 	bl	8005c74 <hasA>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <peekCommand+0x35e>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	61bb      	str	r3, [r7, #24]
                setPosition(robot, x, y, theta);
 8005172:	ed97 1a06 	vldr	s2, [r7, #24]
 8005176:	edd7 0a07 	vldr	s1, [r7, #28]
 800517a:	ed97 0a08 	vldr	s0, [r7, #32]
 800517e:	68b8      	ldr	r0, [r7, #8]
 8005180:	f000 f901 	bl	8005386 <setPosition>
                linearMoveTheta(robot, x, y, theta);
 8005184:	ed97 1a06 	vldr	s2, [r7, #24]
 8005188:	edd7 0a07 	vldr	s1, [r7, #28]
 800518c:	ed97 0a08 	vldr	s0, [r7, #32]
 8005190:	68b8      	ldr	r0, [r7, #8]
 8005192:	f000 f8ab 	bl	80052ec <linearMoveTheta>
                break;
 8005196:	e000      	b.n	800519a <peekCommand+0x386>
        }
    }
 8005198:	bf00      	nop
}
 800519a:	bf00      	nop
 800519c:	3738      	adds	r7, #56	; 0x38
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <fastMove>:


void fastMove(diffDriveRobot_Context* robot, float xc, float yc){
 80051a2:	b5b0      	push	{r4, r5, r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	ed87 0a02 	vstr	s0, [r7, #8]
 80051ae:	edc7 0a01 	vstr	s1, [r7, #4]
    robot->motionController->consign.x = xc;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	601a      	str	r2, [r3, #0]
    robot->motionController->consign.y = yc;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	605a      	str	r2, [r3, #4]
    robot->motionController->consign.theta = atan2(yc - robot->odometry->position.y, xc - robot->odometry->position.x);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80051ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80051ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051d2:	ee17 0a90 	vmov	r0, s15
 80051d6:	f7fb f9b7 	bl	8000548 <__aeabi_f2d>
 80051da:	4604      	mov	r4, r0
 80051dc:	460d      	mov	r5, r1
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80051e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80051ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051ee:	ee17 0a90 	vmov	r0, s15
 80051f2:	f7fb f9a9 	bl	8000548 <__aeabi_f2d>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	ec43 2b11 	vmov	d1, r2, r3
 80051fe:	ec45 4b10 	vmov	d0, r4, r5
 8005202:	f007 f989 	bl	800c518 <atan2>
 8005206:	ec52 1b10 	vmov	r1, r2, d0
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	699c      	ldr	r4, [r3, #24]
 800520e:	4608      	mov	r0, r1
 8005210:	4611      	mov	r1, r2
 8005212:	f7fb fce9 	bl	8000be8 <__aeabi_d2f>
 8005216:	4603      	mov	r3, r0
 8005218:	60a3      	str	r3, [r4, #8]
    robot->mode = 0;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bdb0      	pop	{r4, r5, r7, pc}

08005228 <fastMoveTheta>:

void fastMoveTheta(diffDriveRobot_Context* robot, float xc, float yc, float thetac){
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	ed87 0a02 	vstr	s0, [r7, #8]
 8005234:	edc7 0a01 	vstr	s1, [r7, #4]
 8005238:	ed87 1a00 	vstr	s2, [r7]
    robot->motionController->consign.x = xc;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	601a      	str	r2, [r3, #0]
    robot->motionController->consign.y = yc;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	605a      	str	r2, [r3, #4]
    robot->motionController->consign.theta = thetac;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	609a      	str	r2, [r3, #8]
    robot->mode = 0;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	641a      	str	r2, [r3, #64]	; 0x40
}
 800525a:	bf00      	nop
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <linearMove>:

void linearMove(diffDriveRobot_Context* robot, float xc, float yc){
 8005266:	b5b0      	push	{r4, r5, r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	ed87 0a02 	vstr	s0, [r7, #8]
 8005272:	edc7 0a01 	vstr	s1, [r7, #4]
    robot->motionController->consign.x = xc;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	601a      	str	r2, [r3, #0]
    robot->motionController->consign.y = yc;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	605a      	str	r2, [r3, #4]
    robot->motionController->consign.theta = atan2(yc - robot->odometry->position.y, xc - robot->odometry->position.x);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	edd3 7a05 	vldr	s15, [r3, #20]
 800528e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005296:	ee17 0a90 	vmov	r0, s15
 800529a:	f7fb f955 	bl	8000548 <__aeabi_f2d>
 800529e:	4604      	mov	r4, r0
 80052a0:	460d      	mov	r5, r1
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80052aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80052ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052b2:	ee17 0a90 	vmov	r0, s15
 80052b6:	f7fb f947 	bl	8000548 <__aeabi_f2d>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	ec43 2b11 	vmov	d1, r2, r3
 80052c2:	ec45 4b10 	vmov	d0, r4, r5
 80052c6:	f007 f927 	bl	800c518 <atan2>
 80052ca:	ec52 1b10 	vmov	r1, r2, d0
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	699c      	ldr	r4, [r3, #24]
 80052d2:	4608      	mov	r0, r1
 80052d4:	4611      	mov	r1, r2
 80052d6:	f7fb fc87 	bl	8000be8 <__aeabi_d2f>
 80052da:	4603      	mov	r3, r0
 80052dc:	60a3      	str	r3, [r4, #8]
    robot->mode = 1;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80052e4:	bf00      	nop
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bdb0      	pop	{r4, r5, r7, pc}

080052ec <linearMoveTheta>:

void linearMoveTheta(diffDriveRobot_Context* robot, float xc, float yc, float thetac){
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80052f8:	edc7 0a01 	vstr	s1, [r7, #4]
 80052fc:	ed87 1a00 	vstr	s2, [r7]
    robot->motionController->consign.x = xc;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	601a      	str	r2, [r3, #0]
    robot->motionController->consign.y = yc;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	605a      	str	r2, [r3, #4]
    robot->motionController->consign.theta = thetac;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	609a      	str	r2, [r3, #8]
    robot->mode = 1;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <breakeMotors>:


void breakeMotors(diffDriveRobot_Context* robot){
 800532a:	b580      	push	{r7, lr}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
    motor_breake(robot->motorD);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f001 fcb5 	bl	8006ca6 <motor_breake>
    motor_breake(robot->motorG);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	4618      	mov	r0, r3
 8005342:	f001 fcb0 	bl	8006ca6 <motor_breake>
}
 8005346:	bf00      	nop
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <unBreakeMotors>:

void unBreakeMotors(diffDriveRobot_Context* robot){
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
    motor_unbreake(robot->motorD);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f001 fcb4 	bl	8006cc8 <motor_unbreake>
    motor_unbreake(robot->motorG);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4618      	mov	r0, r3
 8005366:	f001 fcaf 	bl	8006cc8 <motor_unbreake>
    // reset des integrateurs des pid
    pid_init(robot->pidD);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	4618      	mov	r0, r3
 8005370:	f001 fe52 	bl	8007018 <pid_init>
    pid_init(robot->pidG);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	4618      	mov	r0, r3
 800537a:	f001 fe4d 	bl	8007018 <pid_init>
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <setPosition>:

void setPosition(diffDriveRobot_Context* robot, float x, float y, float theta){
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	ed87 0a02 	vstr	s0, [r7, #8]
 8005392:	edc7 0a01 	vstr	s1, [r7, #4]
 8005396:	ed87 1a00 	vstr	s2, [r7]
    odometry_init(robot->odometry, x, y, theta);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	ed97 1a00 	vldr	s2, [r7]
 80053a2:	edd7 0a01 	vldr	s1, [r7, #4]
 80053a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f001 fccd 	bl	8006d4a <odometry_init>
}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <printPosition>:

void printPosition(diffDriveRobot_Context* robot, UART_HandleTypeDef *huart){
 80053b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80053bc:	b0ba      	sub	sp, #232	; 0xe8
 80053be:	af04      	add	r7, sp, #16
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
    float x,y,theta;
    x = robot->odometry->position.x;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    y = robot->odometry->position.y;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    theta = robot->odometry->position.theta;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    char buffer[190];
    HAL_UART_Transmit(huart, (uint8_t*)buffer, sprintf(buffer,"X%f Y%f A%f\n", x, y, theta), 90000);//s/ @suppress("Float formatting support")
 80053e2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80053e6:	f7fb f8af 	bl	8000548 <__aeabi_f2d>
 80053ea:	4680      	mov	r8, r0
 80053ec:	4689      	mov	r9, r1
 80053ee:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80053f2:	f7fb f8a9 	bl	8000548 <__aeabi_f2d>
 80053f6:	4604      	mov	r4, r0
 80053f8:	460d      	mov	r5, r1
 80053fa:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80053fe:	f7fb f8a3 	bl	8000548 <__aeabi_f2d>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	f107 000c 	add.w	r0, r7, #12
 800540a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800540e:	e9cd 4500 	strd	r4, r5, [sp]
 8005412:	4642      	mov	r2, r8
 8005414:	464b      	mov	r3, r9
 8005416:	4908      	ldr	r1, [pc, #32]	; (8005438 <printPosition+0x80>)
 8005418:	f002 fd28 	bl	8007e6c <sprintf>
 800541c:	4603      	mov	r3, r0
 800541e:	b29a      	uxth	r2, r3
 8005420:	f107 010c 	add.w	r1, r7, #12
 8005424:	4b05      	ldr	r3, [pc, #20]	; (800543c <printPosition+0x84>)
 8005426:	6838      	ldr	r0, [r7, #0]
 8005428:	f7fe fd00 	bl	8003e2c <HAL_UART_Transmit>
}
 800542c:	bf00      	nop
 800542e:	37d8      	adds	r7, #216	; 0xd8
 8005430:	46bd      	mov	sp, r7
 8005432:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005436:	bf00      	nop
 8005438:	0800ed18 	.word	0x0800ed18
 800543c:	00015f90 	.word	0x00015f90

08005440 <printComTest>:

void printComTest(UART_HandleTypeDef *huart){
 8005440:	b580      	push	{r7, lr}
 8005442:	b0b2      	sub	sp, #200	; 0xc8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
	char buffer[190];
    HAL_UART_Transmit(huart, (uint8_t*)buffer, sprintf(buffer,"Com OK\n"), 90000);
 8005448:	f107 0308 	add.w	r3, r7, #8
 800544c:	4a08      	ldr	r2, [pc, #32]	; (8005470 <printComTest+0x30>)
 800544e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005452:	e883 0003 	stmia.w	r3, {r0, r1}
 8005456:	2307      	movs	r3, #7
 8005458:	b29a      	uxth	r2, r3
 800545a:	f107 0108 	add.w	r1, r7, #8
 800545e:	4b05      	ldr	r3, [pc, #20]	; (8005474 <printComTest+0x34>)
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7fe fce3 	bl	8003e2c <HAL_UART_Transmit>
}
 8005466:	bf00      	nop
 8005468:	37c8      	adds	r7, #200	; 0xc8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	0800ed28 	.word	0x0800ed28
 8005474:	00015f90 	.word	0x00015f90

08005478 <printSelf>:
void printSelf(UART_HandleTypeDef *huart){
 8005478:	b580      	push	{r7, lr}
 800547a:	b0b2      	sub	sp, #200	; 0xc8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	char buffer[190];
    HAL_UART_Transmit(huart, (uint8_t*)buffer, sprintf(buffer,"CmdBoard\n"), 90000);
 8005480:	f107 0308 	add.w	r3, r7, #8
 8005484:	4a07      	ldr	r2, [pc, #28]	; (80054a4 <printSelf+0x2c>)
 8005486:	ca07      	ldmia	r2, {r0, r1, r2}
 8005488:	c303      	stmia	r3!, {r0, r1}
 800548a:	801a      	strh	r2, [r3, #0]
 800548c:	2309      	movs	r3, #9
 800548e:	b29a      	uxth	r2, r3
 8005490:	f107 0108 	add.w	r1, r7, #8
 8005494:	4b04      	ldr	r3, [pc, #16]	; (80054a8 <printSelf+0x30>)
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fe fcc8 	bl	8003e2c <HAL_UART_Transmit>
}
 800549c:	bf00      	nop
 800549e:	37c8      	adds	r7, #200	; 0xc8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	0800ed30 	.word	0x0800ed30
 80054a8:	00015f90 	.word	0x00015f90

080054ac <setPID_D>:

void setPID_D(diffDriveRobot_Context* robot, float Kp, float Ti, float Td){
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80054b8:	edc7 0a01 	vstr	s1, [r7, #4]
 80054bc:	ed87 1a00 	vstr	s2, [r7]
    robot->pidD->Kp = Kp;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	601a      	str	r2, [r3, #0]
    robot->pidD->Kp = Ti;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	601a      	str	r2, [r3, #0]
    robot->pidD->Kp = Td;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	601a      	str	r2, [r3, #0]
}
 80054d8:	bf00      	nop
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <setPID_G>:

void setPID_G(diffDriveRobot_Context* robot, float Kp, float Ti, float Td){
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80054f0:	edc7 0a01 	vstr	s1, [r7, #4]
 80054f4:	ed87 1a00 	vstr	s2, [r7]
    robot->pidG->Kp = Kp;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	601a      	str	r2, [r3, #0]
    robot->pidG->Kp = Ti;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	601a      	str	r2, [r3, #0]
    robot->pidG->Kp = Td;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	601a      	str	r2, [r3, #0]
}
 8005510:	bf00      	nop
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <setLOdomWheelDia>:

void setLOdomWheelDia(diffDriveRobot_Context* robot, float wheelDiameter) {
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	ed87 0a00 	vstr	s0, [r7]
    robot->odometry->wheelRadiusR = wheelDiameter/2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	ed97 7a00 	vldr	s14, [r7]
 8005530:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005534:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005538:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <setROdomWheelDia>:

void setROdomWheelDia(diffDriveRobot_Context* robot, float wheelDiameter) {
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	ed87 0a00 	vstr	s0, [r7]
    robot->odometry->wheelRadiusR = wheelDiameter/2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	ed97 7a00 	vldr	s14, [r7]
 800555c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005560:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005564:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <setOdomInnerDist>:

void setOdomInnerDist(diffDriveRobot_Context* robot, float innerDist) {
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	ed87 0a00 	vstr	s0, [r7]
    robot->odometry->distanceBetweenWheels = innerDist;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	60da      	str	r2, [r3, #12]
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <setMotorInnerDist>:

void setMotorInnerDist(diffDriveRobot_Context* robot, float innerDist) {
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	ed87 0a00 	vstr	s0, [r7]
    robot->distBetweenMotorWheels = innerDist;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	61da      	str	r2, [r3, #28]
    robot->differential->distanceBetweenWheels = innerDist;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	601a      	str	r2, [r3, #0]

}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <differential_update>:


void differential_update(differential_Context* diffDrive,
    float linearVelocity, float angularVelocity,
    float* rightWheelVelocity, float* leftWheelVelocity)
{
 80055bc:	b5b0      	push	{r4, r5, r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6178      	str	r0, [r7, #20]
 80055c4:	ed87 0a04 	vstr	s0, [r7, #16]
 80055c8:	edc7 0a03 	vstr	s1, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
    linearVelocity = linearVelocity / diffDrive->maxLinearVelocity;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80055d6:	edd7 6a04 	vldr	s13, [r7, #16]
 80055da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055de:	edc7 7a04 	vstr	s15, [r7, #16]
    angularVelocity = angularVelocity / diffDrive->maxAngularVelocity;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80055e8:	edd7 6a03 	vldr	s13, [r7, #12]
 80055ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f0:	edc7 7a03 	vstr	s15, [r7, #12]

    if ((fabs(angularVelocity)+fabs(linearVelocity)) > 1) {
 80055f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80055f8:	eef0 7ae7 	vabs.f32	s15, s15
 80055fc:	ee17 0a90 	vmov	r0, s15
 8005600:	f7fa ffa2 	bl	8000548 <__aeabi_f2d>
 8005604:	4604      	mov	r4, r0
 8005606:	460d      	mov	r5, r1
 8005608:	edd7 7a04 	vldr	s15, [r7, #16]
 800560c:	eef0 7ae7 	vabs.f32	s15, s15
 8005610:	ee17 0a90 	vmov	r0, s15
 8005614:	f7fa ff98 	bl	8000548 <__aeabi_f2d>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4620      	mov	r0, r4
 800561e:	4629      	mov	r1, r5
 8005620:	f7fa fe34 	bl	800028c <__adddf3>
 8005624:	4603      	mov	r3, r0
 8005626:	460c      	mov	r4, r1
 8005628:	4618      	mov	r0, r3
 800562a:	4621      	mov	r1, r4
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	4b2d      	ldr	r3, [pc, #180]	; (80056e8 <differential_update+0x12c>)
 8005632:	f7fb fa71 	bl	8000b18 <__aeabi_dcmpgt>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01b      	beq.n	8005674 <differential_update+0xb8>
        // set the point in the square maxvelocity maxangularVelocity.
        float m = fabs(angularVelocity)+fabs(linearVelocity);
 800563c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005640:	eeb0 7ae7 	vabs.f32	s14, s15
 8005644:	edd7 7a04 	vldr	s15, [r7, #16]
 8005648:	eef0 7ae7 	vabs.f32	s15, s15
 800564c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005650:	edc7 7a07 	vstr	s15, [r7, #28]
        angularVelocity = angularVelocity/m;
 8005654:	edd7 6a03 	vldr	s13, [r7, #12]
 8005658:	ed97 7a07 	vldr	s14, [r7, #28]
 800565c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005660:	edc7 7a03 	vstr	s15, [r7, #12]
        linearVelocity = linearVelocity/m;
 8005664:	edd7 6a04 	vldr	s13, [r7, #16]
 8005668:	ed97 7a07 	vldr	s14, [r7, #28]
 800566c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005670:	edc7 7a04 	vstr	s15, [r7, #16]
    }

    linearVelocity = linearVelocity * diffDrive->maxLinearVelocity;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	edd3 7a01 	vldr	s15, [r3, #4]
 800567a:	ed97 7a04 	vldr	s14, [r7, #16]
 800567e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005682:	edc7 7a04 	vstr	s15, [r7, #16]
    angularVelocity = angularVelocity * diffDrive->maxAngularVelocity;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	edd3 7a02 	vldr	s15, [r3, #8]
 800568c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005694:	edc7 7a03 	vstr	s15, [r7, #12]

    *rightWheelVelocity = (linearVelocity + angularVelocity*diffDrive->distanceBetweenWheels/2);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	ed93 7a00 	vldr	s14, [r3]
 800569e:	edd7 7a03 	vldr	s15, [r7, #12]
 80056a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80056aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80056ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80056b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	edc3 7a00 	vstr	s15, [r3]
    *leftWheelVelocity =  (linearVelocity - angularVelocity*diffDrive->distanceBetweenWheels/2);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	ed93 7a00 	vldr	s14, [r3]
 80056c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80056c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80056ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80056d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	edc3 7a00 	vstr	s15, [r3]
}
 80056e0:	bf00      	nop
 80056e2:	3720      	adds	r7, #32
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bdb0      	pop	{r4, r5, r7, pc}
 80056e8:	3ff00000 	.word	0x3ff00000

080056ec <gcode_parseAscii>:
#include "gcode.h"

bool gcode_parseAscii(gcodeCommand_context* gcodeCommand, char *line)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
    char *pos = line;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	60fb      	str	r3, [r7, #12]
    gcodeCommand->params = 0;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	801a      	strh	r2, [r3, #0]
    gcodeCommand->params2 = 0;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	805a      	strh	r2, [r3, #2]
	bool hasChecksum = false;
 8005706:	2300      	movs	r3, #0
 8005708:	72fb      	strb	r3, [r7, #11]
    char c;
    while ( (c = *(pos++)) )
 800570a:	e20d      	b.n	8005b28 <gcode_parseAscii+0x43c>
    {
        if(c == '(' || c == '%') break; // alternative comment or program block
 800570c:	7abb      	ldrb	r3, [r7, #10]
 800570e:	2b28      	cmp	r3, #40	; 0x28
 8005710:	f000 8213 	beq.w	8005b3a <gcode_parseAscii+0x44e>
 8005714:	7abb      	ldrb	r3, [r7, #10]
 8005716:	2b25      	cmp	r3, #37	; 0x25
 8005718:	f000 820f 	beq.w	8005b3a <gcode_parseAscii+0x44e>
        switch(c)
 800571c:	7abb      	ldrb	r3, [r7, #10]
 800571e:	3b2a      	subs	r3, #42	; 0x2a
 8005720:	2b50      	cmp	r3, #80	; 0x50
 8005722:	f200 8200 	bhi.w	8005b26 <gcode_parseAscii+0x43a>
 8005726:	a201      	add	r2, pc, #4	; (adr r2, 800572c <gcode_parseAscii+0x40>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	08005b29 	.word	0x08005b29
 8005730:	08005b27 	.word	0x08005b27
 8005734:	08005b27 	.word	0x08005b27
 8005738:	08005b27 	.word	0x08005b27
 800573c:	08005b27 	.word	0x08005b27
 8005740:	08005b27 	.word	0x08005b27
 8005744:	08005b27 	.word	0x08005b27
 8005748:	08005b27 	.word	0x08005b27
 800574c:	08005b27 	.word	0x08005b27
 8005750:	08005b27 	.word	0x08005b27
 8005754:	08005b27 	.word	0x08005b27
 8005758:	08005b27 	.word	0x08005b27
 800575c:	08005b27 	.word	0x08005b27
 8005760:	08005b27 	.word	0x08005b27
 8005764:	08005b27 	.word	0x08005b27
 8005768:	08005b27 	.word	0x08005b27
 800576c:	08005b27 	.word	0x08005b27
 8005770:	08005b27 	.word	0x08005b27
 8005774:	08005b27 	.word	0x08005b27
 8005778:	08005b27 	.word	0x08005b27
 800577c:	08005b27 	.word	0x08005b27
 8005780:	08005b27 	.word	0x08005b27
 8005784:	08005b27 	.word	0x08005b27
 8005788:	08005a87 	.word	0x08005a87
 800578c:	08005aa7 	.word	0x08005aa7
 8005790:	08005a47 	.word	0x08005a47
 8005794:	08005a27 	.word	0x08005a27
 8005798:	0800592b 	.word	0x0800592b
 800579c:	0800594b 	.word	0x0800594b
 80057a0:	0800588f 	.word	0x0800588f
 80057a4:	08005a67 	.word	0x08005a67
 80057a8:	080059c7 	.word	0x080059c7
 80057ac:	080059e7 	.word	0x080059e7
 80057b0:	08005ac7 	.word	0x08005ac7
 80057b4:	08005ae7 	.word	0x08005ae7
 80057b8:	080058ad 	.word	0x080058ad
 80057bc:	08005871 	.word	0x08005871
 80057c0:	08005b07 	.word	0x08005b07
 80057c4:	080059a7 	.word	0x080059a7
 80057c8:	08005b27 	.word	0x08005b27
 80057cc:	08005a07 	.word	0x08005a07
 80057d0:	0800598b 	.word	0x0800598b
 80057d4:	0800596b 	.word	0x0800596b
 80057d8:	08005b27 	.word	0x08005b27
 80057dc:	08005b27 	.word	0x08005b27
 80057e0:	08005b27 	.word	0x08005b27
 80057e4:	080058cb 	.word	0x080058cb
 80057e8:	080058eb 	.word	0x080058eb
 80057ec:	0800590b 	.word	0x0800590b
 80057f0:	08005b27 	.word	0x08005b27
 80057f4:	08005b27 	.word	0x08005b27
 80057f8:	08005b27 	.word	0x08005b27
 80057fc:	08005b27 	.word	0x08005b27
 8005800:	08005b27 	.word	0x08005b27
 8005804:	08005b27 	.word	0x08005b27
 8005808:	08005a87 	.word	0x08005a87
 800580c:	08005aa7 	.word	0x08005aa7
 8005810:	08005a47 	.word	0x08005a47
 8005814:	08005a27 	.word	0x08005a27
 8005818:	0800592b 	.word	0x0800592b
 800581c:	0800594b 	.word	0x0800594b
 8005820:	0800588f 	.word	0x0800588f
 8005824:	08005a67 	.word	0x08005a67
 8005828:	080059c7 	.word	0x080059c7
 800582c:	080059e7 	.word	0x080059e7
 8005830:	08005ac7 	.word	0x08005ac7
 8005834:	08005ae7 	.word	0x08005ae7
 8005838:	080058ad 	.word	0x080058ad
 800583c:	08005871 	.word	0x08005871
 8005840:	08005b07 	.word	0x08005b07
 8005844:	080059a7 	.word	0x080059a7
 8005848:	08005b27 	.word	0x08005b27
 800584c:	08005a07 	.word	0x08005a07
 8005850:	0800598b 	.word	0x0800598b
 8005854:	0800596b 	.word	0x0800596b
 8005858:	08005b27 	.word	0x08005b27
 800585c:	08005b27 	.word	0x08005b27
 8005860:	08005b27 	.word	0x08005b27
 8005864:	080058cb 	.word	0x080058cb
 8005868:	080058eb 	.word	0x080058eb
 800586c:	0800590b 	.word	0x0800590b
        {
        case 'N':
        case 'n':
        {
            gcodeCommand->N = parseLongValue(pos) & 0xffff;
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 fa3b 	bl	8005cec <parseLongValue>
 8005876:	4603      	mov	r3, r0
 8005878:	b29a      	uxth	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	809a      	strh	r2, [r3, #4]
            gcodeCommand->params |=1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	801a      	strh	r2, [r3, #0]
            break;
 800588c:	e14c      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'G':
        case 'g':
        {
            gcodeCommand->G = parseLongValue(pos) & 0xffff;
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 fa2c 	bl	8005cec <parseLongValue>
 8005894:	4603      	mov	r3, r0
 8005896:	b29a      	uxth	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	811a      	strh	r2, [r3, #8]
            gcodeCommand->params |= 4;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	f043 0304 	orr.w	r3, r3, #4
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	801a      	strh	r2, [r3, #0]
            break;
 80058aa:	e13d      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'M':
        case 'm':
        {
            gcodeCommand->M = parseLongValue(pos) & 0xffff;
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 fa1d 	bl	8005cec <parseLongValue>
 80058b2:	4603      	mov	r3, r0
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	80da      	strh	r2, [r3, #6]
            gcodeCommand->params |= 2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	f043 0302 	orr.w	r3, r3, #2
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	801a      	strh	r2, [r3, #0]
            break;
 80058c8:	e12e      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'X':
        case 'x':
        {
            gcodeCommand->X = parseFloatValue(pos);
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f9e5 	bl	8005c9a <parseFloatValue>
 80058d0:	eef0 7a40 	vmov.f32	s15, s0
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	edc3 7a03 	vstr	s15, [r3, #12]
            gcodeCommand->params |= 8;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	f043 0308 	orr.w	r3, r3, #8
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	801a      	strh	r2, [r3, #0]
            break;
 80058e8:	e11e      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'Y':
        case 'y':
        {
            gcodeCommand->Y = parseFloatValue(pos);
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 f9d5 	bl	8005c9a <parseFloatValue>
 80058f0:	eef0 7a40 	vmov.f32	s15, s0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	edc3 7a04 	vstr	s15, [r3, #16]
            gcodeCommand->params |= 16;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	f043 0310 	orr.w	r3, r3, #16
 8005902:	b29a      	uxth	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	801a      	strh	r2, [r3, #0]
            break;
 8005908:	e10e      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'Z':
        case 'z':
        {
            gcodeCommand->Z = parseFloatValue(pos);
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f9c5 	bl	8005c9a <parseFloatValue>
 8005910:	eef0 7a40 	vmov.f32	s15, s0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	edc3 7a05 	vstr	s15, [r3, #20]
            gcodeCommand->params |= 32;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	f043 0320 	orr.w	r3, r3, #32
 8005922:	b29a      	uxth	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	801a      	strh	r2, [r3, #0]
            break;
 8005928:	e0fe      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'E':
        case 'e':
        {
            gcodeCommand->E = parseFloatValue(pos);
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f9b5 	bl	8005c9a <parseFloatValue>
 8005930:	eef0 7a40 	vmov.f32	s15, s0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	edc3 7a06 	vstr	s15, [r3, #24]
            gcodeCommand->params |= 64;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005942:	b29a      	uxth	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	801a      	strh	r2, [r3, #0]
            break;
 8005948:	e0ee      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'F':
        case 'f':
        {
            gcodeCommand->F = parseFloatValue(pos);
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f9a5 	bl	8005c9a <parseFloatValue>
 8005950:	eef0 7a40 	vmov.f32	s15, s0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	edc3 7a07 	vstr	s15, [r3, #28]
            gcodeCommand->params |= 256;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005962:	b29a      	uxth	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	801a      	strh	r2, [r3, #0]
            break;
 8005968:	e0de      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'T':
        case 't':
        {
            gcodeCommand->T = parseLongValue(pos) & 0xff;
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 f9be 	bl	8005cec <parseLongValue>
 8005970:	4603      	mov	r3, r0
 8005972:	b2da      	uxtb	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
            gcodeCommand->params |= 512;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005982:	b29a      	uxth	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	801a      	strh	r2, [r3, #0]
            break;
 8005988:	e0ce      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'S':
        case 's':
        {
            gcodeCommand->S = parseLongValue(pos);
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 f9ae 	bl	8005cec <parseLongValue>
 8005990:	4602      	mov	r2, r0
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	621a      	str	r2, [r3, #32]
            gcodeCommand->params |= 1024;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800599e:	b29a      	uxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	801a      	strh	r2, [r3, #0]
            break;
 80059a4:	e0c0      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'P':
        case 'p':
        {
            gcodeCommand->P = parseFloatValue(pos);
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 f977 	bl	8005c9a <parseFloatValue>
 80059ac:	eef0 7a40 	vmov.f32	s15, s0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
            gcodeCommand->params |= 2048;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059be:	b29a      	uxth	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	801a      	strh	r2, [r3, #0]
            break;
 80059c4:	e0b0      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'I':
        case 'i':
        {
            gcodeCommand->I = parseFloatValue(pos);
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f967 	bl	8005c9a <parseFloatValue>
 80059cc:	eef0 7a40 	vmov.f32	s15, s0
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
            gcodeCommand->params2 |= 1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	885b      	ldrh	r3, [r3, #2]
 80059da:	f043 0301 	orr.w	r3, r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	805a      	strh	r2, [r3, #2]
            break;
 80059e4:	e0a0      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'J':
        case 'j':
        {
            gcodeCommand->J = parseFloatValue(pos);
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 f957 	bl	8005c9a <parseFloatValue>
 80059ec:	eef0 7a40 	vmov.f32	s15, s0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
            gcodeCommand->params2 |= 2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	885b      	ldrh	r3, [r3, #2]
 80059fa:	f043 0302 	orr.w	r3, r3, #2
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	805a      	strh	r2, [r3, #2]
            break;
 8005a04:	e090      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'R':
        case 'r':
        {
            gcodeCommand->R = parseFloatValue(pos);
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 f947 	bl	8005c9a <parseFloatValue>
 8005a0c:	eef0 7a40 	vmov.f32	s15, s0
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
            gcodeCommand->params2 |= 4;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	885b      	ldrh	r3, [r3, #2]
 8005a1a:	f043 0304 	orr.w	r3, r3, #4
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	805a      	strh	r2, [r3, #2]
            break;
 8005a24:	e080      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'D':
        case 'd':
        {
            gcodeCommand->D = parseFloatValue(pos);
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f937 	bl	8005c9a <parseFloatValue>
 8005a2c:	eef0 7a40 	vmov.f32	s15, s0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
            gcodeCommand->params2 |= 8;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	885b      	ldrh	r3, [r3, #2]
 8005a3a:	f043 0308 	orr.w	r3, r3, #8
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	805a      	strh	r2, [r3, #2]
            break;
 8005a44:	e070      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'C':
        case 'c':
        {
	        gcodeCommand->C = parseFloatValue(pos);
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 f927 	bl	8005c9a <parseFloatValue>
 8005a4c:	eef0 7a40 	vmov.f32	s15, s0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	        gcodeCommand->params2 |= 16;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	885b      	ldrh	r3, [r3, #2]
 8005a5a:	f043 0310 	orr.w	r3, r3, #16
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	805a      	strh	r2, [r3, #2]
	        break;
 8005a64:	e060      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'H':
        case 'h':
        {
	        gcodeCommand->H = parseFloatValue(pos);
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f917 	bl	8005c9a <parseFloatValue>
 8005a6c:	eef0 7a40 	vmov.f32	s15, s0
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	        gcodeCommand->params2 |= 32;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	885b      	ldrh	r3, [r3, #2]
 8005a7a:	f043 0320 	orr.w	r3, r3, #32
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	805a      	strh	r2, [r3, #2]
	        break;
 8005a84:	e050      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'A':
        case 'a':
        {
	        gcodeCommand->A = parseFloatValue(pos);
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f907 	bl	8005c9a <parseFloatValue>
 8005a8c:	eef0 7a40 	vmov.f32	s15, s0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	        gcodeCommand->params2 |= 64;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	885b      	ldrh	r3, [r3, #2]
 8005a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	805a      	strh	r2, [r3, #2]
	        break;
 8005aa4:	e040      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'B':
        case 'b':
        {
	        gcodeCommand->B = parseFloatValue(pos);
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f8f7 	bl	8005c9a <parseFloatValue>
 8005aac:	eef0 7a40 	vmov.f32	s15, s0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	        gcodeCommand->params2 |= 128;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	885b      	ldrh	r3, [r3, #2]
 8005aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	805a      	strh	r2, [r3, #2]
	        break;
 8005ac4:	e030      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'K':
        case 'k':
        {
	        gcodeCommand->K = parseFloatValue(pos);
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f8e7 	bl	8005c9a <parseFloatValue>
 8005acc:	eef0 7a40 	vmov.f32	s15, s0
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	        gcodeCommand->params2 |= 256;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	885b      	ldrh	r3, [r3, #2]
 8005ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	805a      	strh	r2, [r3, #2]
	        break;
 8005ae4:	e020      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'L':
        case 'l':
        {
	        gcodeCommand->L = parseFloatValue(pos);
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f8d7 	bl	8005c9a <parseFloatValue>
 8005aec:	eef0 7a40 	vmov.f32	s15, s0
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	        gcodeCommand->params2 |= 512;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	885b      	ldrh	r3, [r3, #2]
 8005afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	805a      	strh	r2, [r3, #2]
	        break;
 8005b04:	e010      	b.n	8005b28 <gcode_parseAscii+0x43c>
        }
        case 'O':
        case 'o':
        {
	        gcodeCommand->O = parseFloatValue(pos);
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 f8c7 	bl	8005c9a <parseFloatValue>
 8005b0c:	eef0 7a40 	vmov.f32	s15, s0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	        gcodeCommand->params2 |= 1024;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	885b      	ldrh	r3, [r3, #2]
 8005b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	805a      	strh	r2, [r3, #2]
	        break;
 8005b24:	e000      	b.n	8005b28 <gcode_parseAscii+0x43c>
        case '*' : //checksum
        {
            break;
        }
        default:
            break;
 8005b26:	bf00      	nop
    while ( (c = *(pos++)) )
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	60fa      	str	r2, [r7, #12]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	72bb      	strb	r3, [r7, #10]
 8005b32:	7abb      	ldrb	r3, [r7, #10]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f47f ade9 	bne.w	800570c <gcode_parseAscii+0x20>
        }// end switch
    }// end while
    return true;
 8005b3a:	2301      	movs	r3, #1
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <hasM>:



bool hasM(gcodeCommand_context* gcodeCommand)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params & 2)!=0);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	bf14      	ite	ne
 8005b58:	2301      	movne	r3, #1
 8005b5a:	2300      	moveq	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <hasN>:
bool hasN(gcodeCommand_context* gcodeCommand)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params & 1)!=0);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bf14      	ite	ne
 8005b7e:	2301      	movne	r3, #1
 8005b80:	2300      	moveq	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <hasG>:
bool hasG(gcodeCommand_context* gcodeCommand)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params & 4)!=0);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	bf14      	ite	ne
 8005ba4:	2301      	movne	r3, #1
 8005ba6:	2300      	moveq	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <hasX>:
bool hasX(gcodeCommand_context* gcodeCommand)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params & 8)!=0);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	bf14      	ite	ne
 8005bca:	2301      	movne	r3, #1
 8005bcc:	2300      	moveq	r3, #0
 8005bce:	b2db      	uxtb	r3, r3
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <hasY>:
bool hasY(gcodeCommand_context* gcodeCommand)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params & 16)!=0);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	bf14      	ite	ne
 8005bf0:	2301      	movne	r3, #1
 8005bf2:	2300      	moveq	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <hasP>:
bool hasS(gcodeCommand_context* gcodeCommand)
{
    return ((gcodeCommand->params & 1024)!=0);
}
bool hasP(gcodeCommand_context* gcodeCommand)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params & 2048)!=0);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	bf14      	ite	ne
 8005c16:	2301      	movne	r3, #1
 8005c18:	2300      	moveq	r3, #0
 8005c1a:	b2db      	uxtb	r3, r3
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <hasI>:
bool hasString(gcodeCommand_context* gcodeCommand)
{
    return ((gcodeCommand->params & 32768)!=0);
}
bool hasI(gcodeCommand_context* gcodeCommand)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params2 & 1)!=0);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	885b      	ldrh	r3, [r3, #2]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bf14      	ite	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	2300      	moveq	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <hasD>:
bool hasR(gcodeCommand_context* gcodeCommand)
{
    return ((gcodeCommand->params2 & 4)!=0);
}
bool hasD(gcodeCommand_context* gcodeCommand)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params2 & 8)!=0);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	885b      	ldrh	r3, [r3, #2]
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	bf14      	ite	ne
 8005c62:	2301      	movne	r3, #1
 8005c64:	2300      	moveq	r3, #0
 8005c66:	b2db      	uxtb	r3, r3
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <hasA>:
bool hasH(gcodeCommand_context* gcodeCommand)
{
    return ((gcodeCommand->params2 & 32)!=0);
}
bool hasA(gcodeCommand_context* gcodeCommand)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params2 & 64)!=0);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	885b      	ldrh	r3, [r3, #2]
 8005c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bf14      	ite	ne
 8005c88:	2301      	movne	r3, #1
 8005c8a:	2300      	moveq	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <parseFloatValue>:
    gcodeCommand->params2 |= 32768;
}


float parseFloatValue(char *s)
{
 8005c9a:	b590      	push	{r4, r7, lr}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
    char *endPtr;
    while(*s == 32) s++; // skip spaces
 8005ca2:	e002      	b.n	8005caa <parseFloatValue+0x10>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	607b      	str	r3, [r7, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	d0f8      	beq.n	8005ca4 <parseFloatValue+0xa>
    float f = (strtod(s, &endPtr));
 8005cb2:	f107 0308 	add.w	r3, r7, #8
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f002 ff09 	bl	8008ad0 <strtod>
 8005cbe:	ec54 3b10 	vmov	r3, r4, d0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	f7fa ff8f 	bl	8000be8 <__aeabi_d2f>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	60fb      	str	r3, [r7, #12]
    if(s == endPtr) f=0.0; // treat empty string "x " as "x0"
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d102      	bne.n	8005cdc <parseFloatValue+0x42>
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
    return f;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	ee07 3a90 	vmov	s15, r3
}
 8005ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd90      	pop	{r4, r7, pc}

08005cec <parseLongValue>:

long parseLongValue(char *s)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
    char *endPtr;
    while(*s == 32) s++; // skip spaces
 8005cf4:	e002      	b.n	8005cfc <parseLongValue+0x10>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	607b      	str	r3, [r7, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	d0f8      	beq.n	8005cf6 <parseLongValue+0xa>
    long l = (strtol(s, &endPtr, 10));
 8005d04:	f107 0308 	add.w	r3, r7, #8
 8005d08:	220a      	movs	r2, #10
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f002 ff6f 	bl	8008bf0 <strtol>
 8005d12:	60f8      	str	r0, [r7, #12]
    if(s == endPtr) l=0; // treat empty string argument "p " as "p0"
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d101      	bne.n	8005d20 <parseLongValue+0x34>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]
    return l;
 8005d20:	68fb      	ldr	r3, [r7, #12]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <uart_gpio_init>:
//	    HAL_UART_Receive_IT(&huart2, &byte, 1);
//  }
//}

void uart_gpio_init()
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8005d32:	4b10      	ldr	r3, [pc, #64]	; (8005d74 <uart_gpio_init+0x48>)
 8005d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d36:	4a0f      	ldr	r2, [pc, #60]	; (8005d74 <uart_gpio_init+0x48>)
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <uart_gpio_init+0x48>)
 8005d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8005d4a:	230c      	movs	r3, #12
 8005d4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d52:	2301      	movs	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005d56:	2300      	movs	r3, #0
 8005d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d5a:	2307      	movs	r3, #7
 8005d5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d5e:	1d3b      	adds	r3, r7, #4
 8005d60:	4619      	mov	r1, r3
 8005d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d66:	f7fb fb03 	bl	8001370 <HAL_GPIO_Init>
}
 8005d6a:	bf00      	nop
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40021000 	.word	0x40021000

08005d78 <uart_init>:

void uart_init()
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
  __USART2_CLK_ENABLE();
 8005d7e:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <uart_init+0x70>)
 8005d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d82:	4a19      	ldr	r2, [pc, #100]	; (8005de8 <uart_init+0x70>)
 8005d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d88:	6593      	str	r3, [r2, #88]	; 0x58
 8005d8a:	4b17      	ldr	r3, [pc, #92]	; (8005de8 <uart_init+0x70>)
 8005d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d92:	607b      	str	r3, [r7, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]

  huart2.Instance = USART2;
 8005d96:	4b15      	ldr	r3, [pc, #84]	; (8005dec <uart_init+0x74>)
 8005d98:	4a15      	ldr	r2, [pc, #84]	; (8005df0 <uart_init+0x78>)
 8005d9a:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005d9c:	4b13      	ldr	r3, [pc, #76]	; (8005dec <uart_init+0x74>)
 8005d9e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005da2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005da4:	4b11      	ldr	r3, [pc, #68]	; (8005dec <uart_init+0x74>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005daa:	4b10      	ldr	r3, [pc, #64]	; (8005dec <uart_init+0x74>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005db0:	4b0e      	ldr	r3, [pc, #56]	; (8005dec <uart_init+0x74>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005db6:	4b0d      	ldr	r3, [pc, #52]	; (8005dec <uart_init+0x74>)
 8005db8:	220c      	movs	r2, #12
 8005dba:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <uart_init+0x74>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005dc2:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <uart_init+0x74>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 8005dc8:	4808      	ldr	r0, [pc, #32]	; (8005dec <uart_init+0x74>)
 8005dca:	f7fd ffe1 	bl	8003d90 <HAL_UART_Init>

  /* Peripheral interrupt init*/
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	2026      	movs	r0, #38	; 0x26
 8005dd4:	f7fb fa55 	bl	8001282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005dd8:	2026      	movs	r0, #38	; 0x26
 8005dda:	f7fb fa6e 	bl	80012ba <HAL_NVIC_EnableIRQ>
}
 8005dde:	bf00      	nop
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	40021000 	.word	0x40021000
 8005dec:	20000ebc 	.word	0x20000ebc
 8005df0:	40004400 	.word	0x40004400

08005df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint32_t dt, t, t0, tloop;
  dt = 10;
 8005dfa:	230a      	movs	r3, #10
 8005dfc:	60fb      	str	r3, [r7, #12]
  t0 = HAL_GetTick();
 8005dfe:	f7fb f959 	bl	80010b4 <HAL_GetTick>
 8005e02:	60b8      	str	r0, [r7, #8]
  tloop = t0 + dt;
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]

  uint32_t dtAff, tAff;
  dtAff = 10;
 8005e0c:	230a      	movs	r3, #10
 8005e0e:	607b      	str	r3, [r7, #4]
  tAff = t0 + dtAff;
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4413      	add	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e18:	f7fb f8e0 	bl	8000fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e1c:	f000 f854 	bl	8005ec8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  uart_gpio_init();
 8005e20:	f7ff ff84 	bl	8005d2c <uart_gpio_init>
  uart_init();
 8005e24:	f7ff ffa8 	bl	8005d78 <uart_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e28:	f000 faca 	bl	80063c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005e2c:	f000 fa64 	bl	80062f8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8005e30:	f000 f8c0 	bl	8005fb4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8005e34:	f000 f956 	bl	80060e4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8005e38:	f000 fa06 	bl	8006248 <MX_TIM4_Init>
  MX_TIM1_Init();
 8005e3c:	f000 f8f4 	bl	8006028 <MX_TIM1_Init>
  MX_TIM3_Init();
 8005e40:	f000 f9a8 	bl	8006194 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "UART_OK\r\n"), 90000); //s/ @suppress("Float formatting support")
 8005e44:	4a1a      	ldr	r2, [pc, #104]	; (8005eb0 <main+0xbc>)
 8005e46:	4b1b      	ldr	r3, [pc, #108]	; (8005eb4 <main+0xc0>)
 8005e48:	cb03      	ldmia	r3!, {r0, r1}
 8005e4a:	6010      	str	r0, [r2, #0]
 8005e4c:	6051      	str	r1, [r2, #4]
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	8113      	strh	r3, [r2, #8]
 8005e52:	2309      	movs	r3, #9
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	4b18      	ldr	r3, [pc, #96]	; (8005eb8 <main+0xc4>)
 8005e58:	4915      	ldr	r1, [pc, #84]	; (8005eb0 <main+0xbc>)
 8005e5a:	4818      	ldr	r0, [pc, #96]	; (8005ebc <main+0xc8>)
 8005e5c:	f7fd ffe6 	bl	8003e2c <HAL_UART_Transmit>

    setup();
 8005e60:	f000 fb10 	bl	8006484 <setup>
	HAL_UART_Receive_IT(&huart2, &byte, 1);
 8005e64:	2201      	movs	r2, #1
 8005e66:	4916      	ldr	r1, [pc, #88]	; (8005ec0 <main+0xcc>)
 8005e68:	4814      	ldr	r0, [pc, #80]	; (8005ebc <main+0xc8>)
 8005e6a:	f7fe f873 	bl	8003f54 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		t = HAL_GetTick() - t0;
 8005e6e:	f7fb f921 	bl	80010b4 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	603b      	str	r3, [r7, #0]
		if (t>tloop) {
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d90d      	bls.n	8005e9e <main+0xaa>
			tloop = tloop + dt;
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]
			robot_update(&robot, dt);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	ee07 3a90 	vmov	s15, r3
 8005e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e94:	eeb0 0a67 	vmov.f32	s0, s15
 8005e98:	480a      	ldr	r0, [pc, #40]	; (8005ec4 <main+0xd0>)
 8005e9a:	f001 f9c5 	bl	8007228 <robot_update>
		}
		if (t>tAff){
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d9e3      	bls.n	8005e6e <main+0x7a>
			tAff = tAff + dtAff;
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4413      	add	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
		t = HAL_GetTick() - t0;
 8005eae:	e7de      	b.n	8005e6e <main+0x7a>
 8005eb0:	20000cdc 	.word	0x20000cdc
 8005eb4:	0800ed3c 	.word	0x0800ed3c
 8005eb8:	00015f90 	.word	0x00015f90
 8005ebc:	20000ebc 	.word	0x20000ebc
 8005ec0:	20000de0 	.word	0x20000de0
 8005ec4:	20000d9c 	.word	0x20000d9c

08005ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b0b8      	sub	sp, #224	; 0xe0
 8005ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ece:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005ed2:	2244      	movs	r2, #68	; 0x44
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f001 ffa4 	bl	8007e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005edc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	605a      	str	r2, [r3, #4]
 8005ee6:	609a      	str	r2, [r3, #8]
 8005ee8:	60da      	str	r2, [r3, #12]
 8005eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005eec:	463b      	mov	r3, r7
 8005eee:	2288      	movs	r2, #136	; 0x88
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 ff96 	bl	8007e24 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005f06:	2310      	movs	r3, #16
 8005f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005f12:	2302      	movs	r3, #2
 8005f14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8005f1e:	230a      	movs	r3, #10
 8005f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005f24:	2307      	movs	r3, #7
 8005f26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005f30:	2302      	movs	r3, #2
 8005f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fb fc3c 	bl	80017b8 <HAL_RCC_OscConfig>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005f46:	f000 fc09 	bl	800675c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f4a:	230f      	movs	r3, #15
 8005f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f50:	2303      	movs	r3, #3
 8005f52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f56:	2300      	movs	r3, #0
 8005f58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f62:	2300      	movs	r3, #0
 8005f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005f68:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005f6c:	2104      	movs	r1, #4
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fb ffd2 	bl	8001f18 <HAL_RCC_ClockConfig>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8005f7a:	f000 fbef 	bl	800675c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005f7e:	2302      	movs	r3, #2
 8005f80:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005f82:	2300      	movs	r3, #0
 8005f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f86:	463b      	mov	r3, r7
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fc f9c9 	bl	8002320 <HAL_RCCEx_PeriphCLKConfig>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8005f94:	f000 fbe2 	bl	800675c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005f98:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005f9c:	f7fb fbb6 	bl	800170c <HAL_PWREx_ControlVoltageScaling>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8005fa6:	f000 fbd9 	bl	800675c <Error_Handler>
  }
}
 8005faa:	bf00      	nop
 8005fac:	37e0      	adds	r7, #224	; 0xe0
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005fb8:	4b19      	ldr	r3, [pc, #100]	; (8006020 <MX_SPI2_Init+0x6c>)
 8005fba:	4a1a      	ldr	r2, [pc, #104]	; (8006024 <MX_SPI2_Init+0x70>)
 8005fbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8005fbe:	4b18      	ldr	r3, [pc, #96]	; (8006020 <MX_SPI2_Init+0x6c>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005fc4:	4b16      	ldr	r3, [pc, #88]	; (8006020 <MX_SPI2_Init+0x6c>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8005fca:	4b15      	ldr	r3, [pc, #84]	; (8006020 <MX_SPI2_Init+0x6c>)
 8005fcc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005fd0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fd2:	4b13      	ldr	r3, [pc, #76]	; (8006020 <MX_SPI2_Init+0x6c>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005fd8:	4b11      	ldr	r3, [pc, #68]	; (8006020 <MX_SPI2_Init+0x6c>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005fde:	4b10      	ldr	r3, [pc, #64]	; (8006020 <MX_SPI2_Init+0x6c>)
 8005fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fe4:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005fe6:	4b0e      	ldr	r3, [pc, #56]	; (8006020 <MX_SPI2_Init+0x6c>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005fec:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <MX_SPI2_Init+0x6c>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <MX_SPI2_Init+0x6c>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005ff8:	4b09      	ldr	r3, [pc, #36]	; (8006020 <MX_SPI2_Init+0x6c>)
 8005ffa:	2207      	movs	r2, #7
 8005ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005ffe:	4b08      	ldr	r3, [pc, #32]	; (8006020 <MX_SPI2_Init+0x6c>)
 8006000:	2200      	movs	r2, #0
 8006002:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006004:	4b06      	ldr	r3, [pc, #24]	; (8006020 <MX_SPI2_Init+0x6c>)
 8006006:	2200      	movs	r2, #0
 8006008:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800600a:	4805      	ldr	r0, [pc, #20]	; (8006020 <MX_SPI2_Init+0x6c>)
 800600c:	f7fc fe38 	bl	8002c80 <HAL_SPI_Init>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8006016:	f000 fba1 	bl	800675c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800601a:	bf00      	nop
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	20000a20 	.word	0x20000a20
 8006024:	40003800 	.word	0x40003800

08006028 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08c      	sub	sp, #48	; 0x30
 800602c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800602e:	f107 030c 	add.w	r3, r7, #12
 8006032:	2224      	movs	r2, #36	; 0x24
 8006034:	2100      	movs	r1, #0
 8006036:	4618      	mov	r0, r3
 8006038:	f001 fef4 	bl	8007e24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800603c:	463b      	mov	r3, r7
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	605a      	str	r2, [r3, #4]
 8006044:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006046:	4b25      	ldr	r3, [pc, #148]	; (80060dc <MX_TIM1_Init+0xb4>)
 8006048:	4a25      	ldr	r2, [pc, #148]	; (80060e0 <MX_TIM1_Init+0xb8>)
 800604a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800604c:	4b23      	ldr	r3, [pc, #140]	; (80060dc <MX_TIM1_Init+0xb4>)
 800604e:	2200      	movs	r2, #0
 8006050:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006052:	4b22      	ldr	r3, [pc, #136]	; (80060dc <MX_TIM1_Init+0xb4>)
 8006054:	2200      	movs	r2, #0
 8006056:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006058:	4b20      	ldr	r3, [pc, #128]	; (80060dc <MX_TIM1_Init+0xb4>)
 800605a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800605e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006060:	4b1e      	ldr	r3, [pc, #120]	; (80060dc <MX_TIM1_Init+0xb4>)
 8006062:	2200      	movs	r2, #0
 8006064:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006066:	4b1d      	ldr	r3, [pc, #116]	; (80060dc <MX_TIM1_Init+0xb4>)
 8006068:	2200      	movs	r2, #0
 800606a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800606c:	4b1b      	ldr	r3, [pc, #108]	; (80060dc <MX_TIM1_Init+0xb4>)
 800606e:	2200      	movs	r2, #0
 8006070:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006072:	2303      	movs	r3, #3
 8006074:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006076:	2300      	movs	r3, #0
 8006078:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800607a:	2301      	movs	r3, #1
 800607c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800607e:	2300      	movs	r3, #0
 8006080:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8006082:	230f      	movs	r3, #15
 8006084:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006086:	2300      	movs	r3, #0
 8006088:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800608a:	2301      	movs	r3, #1
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800608e:	2300      	movs	r3, #0
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8006092:	230f      	movs	r3, #15
 8006094:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006096:	f107 030c 	add.w	r3, r7, #12
 800609a:	4619      	mov	r1, r3
 800609c:	480f      	ldr	r0, [pc, #60]	; (80060dc <MX_TIM1_Init+0xb4>)
 800609e:	f7fc ff6b 	bl	8002f78 <HAL_TIM_Encoder_Init>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80060a8:	f000 fb58 	bl	800675c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060ac:	2300      	movs	r3, #0
 80060ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80060b0:	2300      	movs	r3, #0
 80060b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80060b8:	463b      	mov	r3, r7
 80060ba:	4619      	mov	r1, r3
 80060bc:	4807      	ldr	r0, [pc, #28]	; (80060dc <MX_TIM1_Init+0xb4>)
 80060be:	f7fd fded 	bl	8003c9c <HAL_TIMEx_MasterConfigSynchronization>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80060c8:	f000 fb48 	bl	800675c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->CR1 = 1;
 80060cc:	4b04      	ldr	r3, [pc, #16]	; (80060e0 <MX_TIM1_Init+0xb8>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 80060d2:	bf00      	nop
 80060d4:	3730      	adds	r7, #48	; 0x30
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	20000de4 	.word	0x20000de4
 80060e0:	40012c00 	.word	0x40012c00

080060e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08a      	sub	sp, #40	; 0x28
 80060e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060ea:	f107 031c 	add.w	r3, r7, #28
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	605a      	str	r2, [r3, #4]
 80060f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80060f6:	463b      	mov	r3, r7
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	605a      	str	r2, [r3, #4]
 80060fe:	609a      	str	r2, [r3, #8]
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	611a      	str	r2, [r3, #16]
 8006104:	615a      	str	r2, [r3, #20]
 8006106:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006108:	4b21      	ldr	r3, [pc, #132]	; (8006190 <MX_TIM2_Init+0xac>)
 800610a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800610e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006110:	4b1f      	ldr	r3, [pc, #124]	; (8006190 <MX_TIM2_Init+0xac>)
 8006112:	2200      	movs	r2, #0
 8006114:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006116:	4b1e      	ldr	r3, [pc, #120]	; (8006190 <MX_TIM2_Init+0xac>)
 8006118:	2200      	movs	r2, #0
 800611a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800611c:	4b1c      	ldr	r3, [pc, #112]	; (8006190 <MX_TIM2_Init+0xac>)
 800611e:	2200      	movs	r2, #0
 8006120:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006122:	4b1b      	ldr	r3, [pc, #108]	; (8006190 <MX_TIM2_Init+0xac>)
 8006124:	2200      	movs	r2, #0
 8006126:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006128:	4b19      	ldr	r3, [pc, #100]	; (8006190 <MX_TIM2_Init+0xac>)
 800612a:	2200      	movs	r2, #0
 800612c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800612e:	4818      	ldr	r0, [pc, #96]	; (8006190 <MX_TIM2_Init+0xac>)
 8006130:	f7fc fe30 	bl	8002d94 <HAL_TIM_PWM_Init>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800613a:	f000 fb0f 	bl	800675c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800613e:	2300      	movs	r3, #0
 8006140:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006142:	2300      	movs	r3, #0
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006146:	f107 031c 	add.w	r3, r7, #28
 800614a:	4619      	mov	r1, r3
 800614c:	4810      	ldr	r0, [pc, #64]	; (8006190 <MX_TIM2_Init+0xac>)
 800614e:	f7fd fda5 	bl	8003c9c <HAL_TIMEx_MasterConfigSynchronization>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8006158:	f000 fb00 	bl	800675c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800615c:	2360      	movs	r3, #96	; 0x60
 800615e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006160:	2300      	movs	r3, #0
 8006162:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006164:	2300      	movs	r3, #0
 8006166:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006168:	2300      	movs	r3, #0
 800616a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800616c:	463b      	mov	r3, r7
 800616e:	2204      	movs	r2, #4
 8006170:	4619      	mov	r1, r3
 8006172:	4807      	ldr	r0, [pc, #28]	; (8006190 <MX_TIM2_Init+0xac>)
 8006174:	f7fd f8b2 	bl	80032dc <HAL_TIM_PWM_ConfigChannel>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800617e:	f000 faed 	bl	800675c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006182:	4803      	ldr	r0, [pc, #12]	; (8006190 <MX_TIM2_Init+0xac>)
 8006184:	f001 fa84 	bl	8007690 <HAL_TIM_MspPostInit>

}
 8006188:	bf00      	nop
 800618a:	3728      	adds	r7, #40	; 0x28
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	20000e7c 	.word	0x20000e7c

08006194 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08a      	sub	sp, #40	; 0x28
 8006198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800619a:	f107 031c 	add.w	r3, r7, #28
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	605a      	str	r2, [r3, #4]
 80061a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80061a6:	463b      	mov	r3, r7
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	605a      	str	r2, [r3, #4]
 80061ae:	609a      	str	r2, [r3, #8]
 80061b0:	60da      	str	r2, [r3, #12]
 80061b2:	611a      	str	r2, [r3, #16]
 80061b4:	615a      	str	r2, [r3, #20]
 80061b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80061b8:	4b21      	ldr	r3, [pc, #132]	; (8006240 <MX_TIM3_Init+0xac>)
 80061ba:	4a22      	ldr	r2, [pc, #136]	; (8006244 <MX_TIM3_Init+0xb0>)
 80061bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80061be:	4b20      	ldr	r3, [pc, #128]	; (8006240 <MX_TIM3_Init+0xac>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061c4:	4b1e      	ldr	r3, [pc, #120]	; (8006240 <MX_TIM3_Init+0xac>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80061ca:	4b1d      	ldr	r3, [pc, #116]	; (8006240 <MX_TIM3_Init+0xac>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061d0:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <MX_TIM3_Init+0xac>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061d6:	4b1a      	ldr	r3, [pc, #104]	; (8006240 <MX_TIM3_Init+0xac>)
 80061d8:	2200      	movs	r2, #0
 80061da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80061dc:	4818      	ldr	r0, [pc, #96]	; (8006240 <MX_TIM3_Init+0xac>)
 80061de:	f7fc fdd9 	bl	8002d94 <HAL_TIM_PWM_Init>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80061e8:	f000 fab8 	bl	800675c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80061f4:	f107 031c 	add.w	r3, r7, #28
 80061f8:	4619      	mov	r1, r3
 80061fa:	4811      	ldr	r0, [pc, #68]	; (8006240 <MX_TIM3_Init+0xac>)
 80061fc:	f7fd fd4e 	bl	8003c9c <HAL_TIMEx_MasterConfigSynchronization>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006206:	f000 faa9 	bl	800675c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800620a:	2360      	movs	r3, #96	; 0x60
 800620c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006212:	2300      	movs	r3, #0
 8006214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006216:	2300      	movs	r3, #0
 8006218:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800621a:	463b      	mov	r3, r7
 800621c:	2204      	movs	r2, #4
 800621e:	4619      	mov	r1, r3
 8006220:	4807      	ldr	r0, [pc, #28]	; (8006240 <MX_TIM3_Init+0xac>)
 8006222:	f7fd f85b 	bl	80032dc <HAL_TIM_PWM_ConfigChannel>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800622c:	f000 fa96 	bl	800675c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006230:	4803      	ldr	r0, [pc, #12]	; (8006240 <MX_TIM3_Init+0xac>)
 8006232:	f001 fa2d 	bl	8007690 <HAL_TIM_MspPostInit>

}
 8006236:	bf00      	nop
 8006238:	3728      	adds	r7, #40	; 0x28
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20000c68 	.word	0x20000c68
 8006244:	40000400 	.word	0x40000400

08006248 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08c      	sub	sp, #48	; 0x30
 800624c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800624e:	f107 030c 	add.w	r3, r7, #12
 8006252:	2224      	movs	r2, #36	; 0x24
 8006254:	2100      	movs	r1, #0
 8006256:	4618      	mov	r0, r3
 8006258:	f001 fde4 	bl	8007e24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800625c:	463b      	mov	r3, r7
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	605a      	str	r2, [r3, #4]
 8006264:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006266:	4b22      	ldr	r3, [pc, #136]	; (80062f0 <MX_TIM4_Init+0xa8>)
 8006268:	4a22      	ldr	r2, [pc, #136]	; (80062f4 <MX_TIM4_Init+0xac>)
 800626a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800626c:	4b20      	ldr	r3, [pc, #128]	; (80062f0 <MX_TIM4_Init+0xa8>)
 800626e:	2200      	movs	r2, #0
 8006270:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006272:	4b1f      	ldr	r3, [pc, #124]	; (80062f0 <MX_TIM4_Init+0xa8>)
 8006274:	2200      	movs	r2, #0
 8006276:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006278:	4b1d      	ldr	r3, [pc, #116]	; (80062f0 <MX_TIM4_Init+0xa8>)
 800627a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800627e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006280:	4b1b      	ldr	r3, [pc, #108]	; (80062f0 <MX_TIM4_Init+0xa8>)
 8006282:	2200      	movs	r2, #0
 8006284:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006286:	4b1a      	ldr	r3, [pc, #104]	; (80062f0 <MX_TIM4_Init+0xa8>)
 8006288:	2200      	movs	r2, #0
 800628a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800628c:	2303      	movs	r3, #3
 800628e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006290:	2300      	movs	r3, #0
 8006292:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006294:	2301      	movs	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006298:	2300      	movs	r3, #0
 800629a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800629c:	2300      	movs	r3, #0
 800629e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80062a0:	2300      	movs	r3, #0
 80062a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80062a4:	2301      	movs	r3, #1
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80062a8:	2300      	movs	r3, #0
 80062aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80062b0:	f107 030c 	add.w	r3, r7, #12
 80062b4:	4619      	mov	r1, r3
 80062b6:	480e      	ldr	r0, [pc, #56]	; (80062f0 <MX_TIM4_Init+0xa8>)
 80062b8:	f7fc fe5e 	bl	8002f78 <HAL_TIM_Encoder_Init>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80062c2:	f000 fa4b 	bl	800675c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062c6:	2300      	movs	r3, #0
 80062c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80062ce:	463b      	mov	r3, r7
 80062d0:	4619      	mov	r1, r3
 80062d2:	4807      	ldr	r0, [pc, #28]	; (80062f0 <MX_TIM4_Init+0xa8>)
 80062d4:	f7fd fce2 	bl	8003c9c <HAL_TIMEx_MasterConfigSynchronization>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80062de:	f000 fa3d 	bl	800675c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  TIM4->CR1 = 1;
 80062e2:	4b04      	ldr	r3, [pc, #16]	; (80062f4 <MX_TIM4_Init+0xac>)
 80062e4:	2201      	movs	r2, #1
 80062e6:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM4_Init 2 */

}
 80062e8:	bf00      	nop
 80062ea:	3730      	adds	r7, #48	; 0x30
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	20000a84 	.word	0x20000a84
 80062f4:	40000800 	.word	0x40000800

080062f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80062fe:	4b2d      	ldr	r3, [pc, #180]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 8006300:	4a2d      	ldr	r2, [pc, #180]	; (80063b8 <MX_USART2_UART_Init+0xc0>)
 8006302:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006304:	4b2b      	ldr	r3, [pc, #172]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 8006306:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800630a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800630c:	4b29      	ldr	r3, [pc, #164]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 800630e:	2200      	movs	r2, #0
 8006310:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006312:	4b28      	ldr	r3, [pc, #160]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 8006314:	2200      	movs	r2, #0
 8006316:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006318:	4b26      	ldr	r3, [pc, #152]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 800631a:	2200      	movs	r2, #0
 800631c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800631e:	4b25      	ldr	r3, [pc, #148]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 8006320:	220c      	movs	r2, #12
 8006322:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006324:	4b23      	ldr	r3, [pc, #140]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 8006326:	2200      	movs	r2, #0
 8006328:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800632a:	4b22      	ldr	r3, [pc, #136]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 800632c:	2200      	movs	r2, #0
 800632e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006330:	4b20      	ldr	r3, [pc, #128]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 8006332:	2200      	movs	r2, #0
 8006334:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006336:	4b1f      	ldr	r3, [pc, #124]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 8006338:	2200      	movs	r2, #0
 800633a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800633c:	481d      	ldr	r0, [pc, #116]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 800633e:	f7fd fd27 	bl	8003d90 <HAL_UART_Init>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8006348:	f000 fa08 	bl	800675c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
	  __USART2_CLK_ENABLE();
 800634c:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <MX_USART2_UART_Init+0xc4>)
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	4a1a      	ldr	r2, [pc, #104]	; (80063bc <MX_USART2_UART_Init+0xc4>)
 8006352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006356:	6593      	str	r3, [r2, #88]	; 0x58
 8006358:	4b18      	ldr	r3, [pc, #96]	; (80063bc <MX_USART2_UART_Init+0xc4>)
 800635a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006360:	607b      	str	r3, [r7, #4]
 8006362:	687b      	ldr	r3, [r7, #4]

	  huart2.Instance = USART2;
 8006364:	4b13      	ldr	r3, [pc, #76]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 8006366:	4a14      	ldr	r2, [pc, #80]	; (80063b8 <MX_USART2_UART_Init+0xc0>)
 8006368:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 800636a:	4b12      	ldr	r3, [pc, #72]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 800636c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006370:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006372:	4b10      	ldr	r3, [pc, #64]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 8006374:	2200      	movs	r2, #0
 8006376:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8006378:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 800637a:	2200      	movs	r2, #0
 800637c:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 800637e:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 8006380:	2200      	movs	r2, #0
 8006382:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8006384:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 8006386:	220c      	movs	r2, #12
 8006388:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800638a:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 800638c:	2200      	movs	r2, #0
 800638e:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006390:	4b08      	ldr	r3, [pc, #32]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 8006392:	2200      	movs	r2, #0
 8006394:	61da      	str	r2, [r3, #28]
	  HAL_UART_Init(&huart2);
 8006396:	4807      	ldr	r0, [pc, #28]	; (80063b4 <MX_USART2_UART_Init+0xbc>)
 8006398:	f7fd fcfa 	bl	8003d90 <HAL_UART_Init>

	  /* Peripheral interrupt init*/
	  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800639c:	2200      	movs	r2, #0
 800639e:	2100      	movs	r1, #0
 80063a0:	2026      	movs	r0, #38	; 0x26
 80063a2:	f7fa ff6e 	bl	8001282 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80063a6:	2026      	movs	r0, #38	; 0x26
 80063a8:	f7fa ff87 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 80063ac:	bf00      	nop
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	20000ebc 	.word	0x20000ebc
 80063b8:	40004400 	.word	0x40004400
 80063bc:	40021000 	.word	0x40021000

080063c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063c6:	f107 030c 	add.w	r3, r7, #12
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	605a      	str	r2, [r3, #4]
 80063d0:	609a      	str	r2, [r3, #8]
 80063d2:	60da      	str	r2, [r3, #12]
 80063d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80063d6:	4b29      	ldr	r3, [pc, #164]	; (800647c <MX_GPIO_Init+0xbc>)
 80063d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063da:	4a28      	ldr	r2, [pc, #160]	; (800647c <MX_GPIO_Init+0xbc>)
 80063dc:	f043 0304 	orr.w	r3, r3, #4
 80063e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063e2:	4b26      	ldr	r3, [pc, #152]	; (800647c <MX_GPIO_Init+0xbc>)
 80063e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e6:	f003 0304 	and.w	r3, r3, #4
 80063ea:	60bb      	str	r3, [r7, #8]
 80063ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80063ee:	4b23      	ldr	r3, [pc, #140]	; (800647c <MX_GPIO_Init+0xbc>)
 80063f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f2:	4a22      	ldr	r2, [pc, #136]	; (800647c <MX_GPIO_Init+0xbc>)
 80063f4:	f043 0301 	orr.w	r3, r3, #1
 80063f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063fa:	4b20      	ldr	r3, [pc, #128]	; (800647c <MX_GPIO_Init+0xbc>)
 80063fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	607b      	str	r3, [r7, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006406:	4b1d      	ldr	r3, [pc, #116]	; (800647c <MX_GPIO_Init+0xbc>)
 8006408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800640a:	4a1c      	ldr	r2, [pc, #112]	; (800647c <MX_GPIO_Init+0xbc>)
 800640c:	f043 0302 	orr.w	r3, r3, #2
 8006410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006412:	4b1a      	ldr	r3, [pc, #104]	; (800647c <MX_GPIO_Init+0xbc>)
 8006414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	603b      	str	r3, [r7, #0]
 800641c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotB_Dir_Pin|MotA_Dir_Pin|MotB_Brake_Pin, GPIO_PIN_RESET);
 800641e:	2200      	movs	r2, #0
 8006420:	f44f 618c 	mov.w	r1, #1120	; 0x460
 8006424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006428:	f7fb f94a 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotA_Brake_GPIO_Port, MotA_Brake_Pin, GPIO_PIN_RESET);
 800642c:	2200      	movs	r2, #0
 800642e:	2180      	movs	r1, #128	; 0x80
 8006430:	4813      	ldr	r0, [pc, #76]	; (8006480 <MX_GPIO_Init+0xc0>)
 8006432:	f7fb f945 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotB_Dir_Pin MotA_Dir_Pin MotB_Brake_Pin */
  GPIO_InitStruct.Pin = MotB_Dir_Pin|MotA_Dir_Pin|MotB_Brake_Pin;
 8006436:	f44f 638c 	mov.w	r3, #1120	; 0x460
 800643a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800643c:	2301      	movs	r3, #1
 800643e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006440:	2300      	movs	r3, #0
 8006442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006444:	2300      	movs	r3, #0
 8006446:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006448:	f107 030c 	add.w	r3, r7, #12
 800644c:	4619      	mov	r1, r3
 800644e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006452:	f7fa ff8d 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : MotA_Brake_Pin */
  GPIO_InitStruct.Pin = MotA_Brake_Pin;
 8006456:	2380      	movs	r3, #128	; 0x80
 8006458:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800645a:	2301      	movs	r3, #1
 800645c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006462:	2300      	movs	r3, #0
 8006464:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MotA_Brake_GPIO_Port, &GPIO_InitStruct);
 8006466:	f107 030c 	add.w	r3, r7, #12
 800646a:	4619      	mov	r1, r3
 800646c:	4804      	ldr	r0, [pc, #16]	; (8006480 <MX_GPIO_Init+0xc0>)
 800646e:	f7fa ff7f 	bl	8001370 <HAL_GPIO_Init>

}
 8006472:	bf00      	nop
 8006474:	3720      	adds	r7, #32
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40021000 	.word	0x40021000
 8006480:	48000800 	.word	0x48000800

08006484 <setup>:

/* USER CODE BEGIN 4 */
void setup(){
 8006484:	b5b0      	push	{r4, r5, r7, lr}
 8006486:	af00      	add	r7, sp, #0
    motorD.timer	 		= htim3;
 8006488:	4a66      	ldr	r2, [pc, #408]	; (8006624 <setup+0x1a0>)
 800648a:	4b67      	ldr	r3, [pc, #412]	; (8006628 <setup+0x1a4>)
 800648c:	4614      	mov	r4, r2
 800648e:	461d      	mov	r5, r3
 8006490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800649a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800649c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80064a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    motorD.channel	 	= TIM_CHANNEL_2;
 80064a4:	4b5f      	ldr	r3, [pc, #380]	; (8006624 <setup+0x1a0>)
 80064a6:	2204      	movs	r2, #4
 80064a8:	641a      	str	r2, [r3, #64]	; 0x40
    motorD.motDir_Port	= MotB_Dir_GPIO_Port;
 80064aa:	4b5e      	ldr	r3, [pc, #376]	; (8006624 <setup+0x1a0>)
 80064ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80064b0:	645a      	str	r2, [r3, #68]	; 0x44
    motorD.motDir_Pin	 	= MotB_Dir_Pin;
 80064b2:	4b5c      	ldr	r3, [pc, #368]	; (8006624 <setup+0x1a0>)
 80064b4:	2220      	movs	r2, #32
 80064b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    motorD.motBrake_Port	= MotB_Brake_GPIO_Port;
 80064ba:	4b5a      	ldr	r3, [pc, #360]	; (8006624 <setup+0x1a0>)
 80064bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80064c0:	64da      	str	r2, [r3, #76]	; 0x4c
    motorD.motBrake_Pin	= MotB_Brake_Pin;
 80064c2:	4b58      	ldr	r3, [pc, #352]	; (8006624 <setup+0x1a0>)
 80064c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    motorD.reverseDir	 	= false;
 80064cc:	4b55      	ldr	r3, [pc, #340]	; (8006624 <setup+0x1a0>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    motorD.maxPWM = 255;
 80064d4:	4b53      	ldr	r3, [pc, #332]	; (8006624 <setup+0x1a0>)
 80064d6:	22ff      	movs	r2, #255	; 0xff
 80064d8:	655a      	str	r2, [r3, #84]	; 0x54

    motorG.timer	 		= htim2;
 80064da:	4a54      	ldr	r2, [pc, #336]	; (800662c <setup+0x1a8>)
 80064dc:	4b54      	ldr	r3, [pc, #336]	; (8006630 <setup+0x1ac>)
 80064de:	4614      	mov	r4, r2
 80064e0:	461d      	mov	r5, r3
 80064e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80064f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    motorG.channel	 	= TIM_CHANNEL_2;
 80064f6:	4b4d      	ldr	r3, [pc, #308]	; (800662c <setup+0x1a8>)
 80064f8:	2204      	movs	r2, #4
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40
    motorG.motDir_Port	= MotA_Dir_GPIO_Port;
 80064fc:	4b4b      	ldr	r3, [pc, #300]	; (800662c <setup+0x1a8>)
 80064fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006502:	645a      	str	r2, [r3, #68]	; 0x44
    motorG.motDir_Pin	 	= MotA_Dir_Pin;
 8006504:	4b49      	ldr	r3, [pc, #292]	; (800662c <setup+0x1a8>)
 8006506:	2240      	movs	r2, #64	; 0x40
 8006508:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    motorG.motBrake_Port	= MotA_Brake_GPIO_Port;
 800650c:	4b47      	ldr	r3, [pc, #284]	; (800662c <setup+0x1a8>)
 800650e:	4a49      	ldr	r2, [pc, #292]	; (8006634 <setup+0x1b0>)
 8006510:	64da      	str	r2, [r3, #76]	; 0x4c
    motorG.motBrake_Pin	= MotA_Brake_Pin;
 8006512:	4b46      	ldr	r3, [pc, #280]	; (800662c <setup+0x1a8>)
 8006514:	2280      	movs	r2, #128	; 0x80
 8006516:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    motorG.reverseDir	 	= true;
 800651a:	4b44      	ldr	r3, [pc, #272]	; (800662c <setup+0x1a8>)
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    motorG.maxPWM = 255;
 8006522:	4b42      	ldr	r3, [pc, #264]	; (800662c <setup+0x1a8>)
 8006524:	22ff      	movs	r2, #255	; 0xff
 8006526:	655a      	str	r2, [r3, #84]	; 0x54

    odometry.rightTicks = (int16_t*)&TIM4->CNT; // cast uint vers int
 8006528:	4b43      	ldr	r3, [pc, #268]	; (8006638 <setup+0x1b4>)
 800652a:	4a44      	ldr	r2, [pc, #272]	; (800663c <setup+0x1b8>)
 800652c:	625a      	str	r2, [r3, #36]	; 0x24
    odometry.leftTicks =  (int16_t*)&TIM1->CNT;
 800652e:	4b42      	ldr	r3, [pc, #264]	; (8006638 <setup+0x1b4>)
 8006530:	4a43      	ldr	r2, [pc, #268]	; (8006640 <setup+0x1bc>)
 8006532:	629a      	str	r2, [r3, #40]	; 0x28
    odometry.encoderRes = 				480; // tick/tour
 8006534:	4b40      	ldr	r3, [pc, #256]	; (8006638 <setup+0x1b4>)
 8006536:	4a43      	ldr	r2, [pc, #268]	; (8006644 <setup+0x1c0>)
 8006538:	601a      	str	r2, [r3, #0]
    odometry.wheelRadiusR = 			64.8/2.;
 800653a:	4b3f      	ldr	r3, [pc, #252]	; (8006638 <setup+0x1b4>)
 800653c:	4a42      	ldr	r2, [pc, #264]	; (8006648 <setup+0x1c4>)
 800653e:	605a      	str	r2, [r3, #4]
    odometry.wheelRadiusL = 			64.8/2.;
 8006540:	4b3d      	ldr	r3, [pc, #244]	; (8006638 <setup+0x1b4>)
 8006542:	4a41      	ldr	r2, [pc, #260]	; (8006648 <setup+0x1c4>)
 8006544:	609a      	str	r2, [r3, #8]
    odometry.distanceBetweenWheels = 	210.;
 8006546:	4b3c      	ldr	r3, [pc, #240]	; (8006638 <setup+0x1b4>)
 8006548:	4a40      	ldr	r2, [pc, #256]	; (800664c <setup+0x1c8>)
 800654a:	60da      	str	r2, [r3, #12]

    pidD.Kp			= 0.162;
 800654c:	4b40      	ldr	r3, [pc, #256]	; (8006650 <setup+0x1cc>)
 800654e:	4a41      	ldr	r2, [pc, #260]	; (8006654 <setup+0x1d0>)
 8006550:	601a      	str	r2, [r3, #0]
    pidD.Ti			= 0.024;
 8006552:	4b3f      	ldr	r3, [pc, #252]	; (8006650 <setup+0x1cc>)
 8006554:	4a40      	ldr	r2, [pc, #256]	; (8006658 <setup+0x1d4>)
 8006556:	605a      	str	r2, [r3, #4]
    pidD.Td			= 0.006;
 8006558:	4b3d      	ldr	r3, [pc, #244]	; (8006650 <setup+0x1cc>)
 800655a:	4a40      	ldr	r2, [pc, #256]	; (800665c <setup+0x1d8>)
 800655c:	609a      	str	r2, [r3, #8]
    pidD.minOut		= -255;
 800655e:	4b3c      	ldr	r3, [pc, #240]	; (8006650 <setup+0x1cc>)
 8006560:	4a3f      	ldr	r2, [pc, #252]	; (8006660 <setup+0x1dc>)
 8006562:	60da      	str	r2, [r3, #12]
    pidD.maxOut		= 255;
 8006564:	4b3a      	ldr	r3, [pc, #232]	; (8006650 <setup+0x1cc>)
 8006566:	4a3f      	ldr	r2, [pc, #252]	; (8006664 <setup+0x1e0>)
 8006568:	611a      	str	r2, [r3, #16]

    pidG.Kp			= 0.162;
 800656a:	4b3f      	ldr	r3, [pc, #252]	; (8006668 <setup+0x1e4>)
 800656c:	4a39      	ldr	r2, [pc, #228]	; (8006654 <setup+0x1d0>)
 800656e:	601a      	str	r2, [r3, #0]
    pidG.Ti			= 0.024;
 8006570:	4b3d      	ldr	r3, [pc, #244]	; (8006668 <setup+0x1e4>)
 8006572:	4a39      	ldr	r2, [pc, #228]	; (8006658 <setup+0x1d4>)
 8006574:	605a      	str	r2, [r3, #4]
    pidG.Td			= 0.006;
 8006576:	4b3c      	ldr	r3, [pc, #240]	; (8006668 <setup+0x1e4>)
 8006578:	4a38      	ldr	r2, [pc, #224]	; (800665c <setup+0x1d8>)
 800657a:	609a      	str	r2, [r3, #8]
    pidG.minOut		= -255;
 800657c:	4b3a      	ldr	r3, [pc, #232]	; (8006668 <setup+0x1e4>)
 800657e:	4a38      	ldr	r2, [pc, #224]	; (8006660 <setup+0x1dc>)
 8006580:	60da      	str	r2, [r3, #12]
    pidG.maxOut		= 255;
 8006582:	4b39      	ldr	r3, [pc, #228]	; (8006668 <setup+0x1e4>)
 8006584:	4a37      	ldr	r2, [pc, #220]	; (8006664 <setup+0x1e0>)
 8006586:	611a      	str	r2, [r3, #16]

    distBetweenMotorWheels = 180.;// mm
 8006588:	4b38      	ldr	r3, [pc, #224]	; (800666c <setup+0x1e8>)
 800658a:	4a39      	ldr	r2, [pc, #228]	; (8006670 <setup+0x1ec>)
 800658c:	601a      	str	r2, [r3, #0]

    differentiel.distanceBetweenWheels	= distBetweenMotorWheels;
 800658e:	4b37      	ldr	r3, [pc, #220]	; (800666c <setup+0x1e8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a38      	ldr	r2, [pc, #224]	; (8006674 <setup+0x1f0>)
 8006594:	6013      	str	r3, [r2, #0]
    differentiel.maxLinearVelocity	 	= 450.; // mm.s^-1
 8006596:	4b37      	ldr	r3, [pc, #220]	; (8006674 <setup+0x1f0>)
 8006598:	4a37      	ldr	r2, [pc, #220]	; (8006678 <setup+0x1f4>)
 800659a:	605a      	str	r2, [r3, #4]
    differentiel.maxAngularVelocity	 	= 5.55; // rad.s^-1
 800659c:	4b35      	ldr	r3, [pc, #212]	; (8006674 <setup+0x1f0>)
 800659e:	4a37      	ldr	r2, [pc, #220]	; (800667c <setup+0x1f8>)
 80065a0:	609a      	str	r2, [r3, #8]

    motionController.maxLinearAcceleration = 	100;
 80065a2:	4b37      	ldr	r3, [pc, #220]	; (8006680 <setup+0x1fc>)
 80065a4:	4a37      	ldr	r2, [pc, #220]	; (8006684 <setup+0x200>)
 80065a6:	60da      	str	r2, [r3, #12]
    motionController.maxLinearVelocity = 		450;
 80065a8:	4b35      	ldr	r3, [pc, #212]	; (8006680 <setup+0x1fc>)
 80065aa:	4a33      	ldr	r2, [pc, #204]	; (8006678 <setup+0x1f4>)
 80065ac:	611a      	str	r2, [r3, #16]
    motionController.maxAngularAcceleration = 	100;
 80065ae:	4b34      	ldr	r3, [pc, #208]	; (8006680 <setup+0x1fc>)
 80065b0:	4a34      	ldr	r2, [pc, #208]	; (8006684 <setup+0x200>)
 80065b2:	615a      	str	r2, [r3, #20]
    motionController.maxAngularVelocity = 		5.5;
 80065b4:	4b32      	ldr	r3, [pc, #200]	; (8006680 <setup+0x1fc>)
 80065b6:	4a34      	ldr	r2, [pc, #208]	; (8006688 <setup+0x204>)
 80065b8:	619a      	str	r2, [r3, #24]
    motionController.Krho = 					0.7;
 80065ba:	4b31      	ldr	r3, [pc, #196]	; (8006680 <setup+0x1fc>)
 80065bc:	4a33      	ldr	r2, [pc, #204]	; (800668c <setup+0x208>)
 80065be:	61da      	str	r2, [r3, #28]
    motionController.Kalpha = 					1.5;
 80065c0:	4b2f      	ldr	r3, [pc, #188]	; (8006680 <setup+0x1fc>)
 80065c2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80065c6:	621a      	str	r2, [r3, #32]

    motionController.Srho =                     5;
 80065c8:	4b2d      	ldr	r3, [pc, #180]	; (8006680 <setup+0x1fc>)
 80065ca:	4a31      	ldr	r2, [pc, #196]	; (8006690 <setup+0x20c>)
 80065cc:	625a      	str	r2, [r3, #36]	; 0x24
    motionController.Salpha =                   2*PI/180;
 80065ce:	4b2c      	ldr	r3, [pc, #176]	; (8006680 <setup+0x1fc>)
 80065d0:	4a30      	ldr	r2, [pc, #192]	; (8006694 <setup+0x210>)
 80065d2:	629a      	str	r2, [r3, #40]	; 0x28

    robot.odometry = &odometry;
 80065d4:	4b30      	ldr	r3, [pc, #192]	; (8006698 <setup+0x214>)
 80065d6:	4a18      	ldr	r2, [pc, #96]	; (8006638 <setup+0x1b4>)
 80065d8:	609a      	str	r2, [r3, #8]
    robot.differential = &differentiel;
 80065da:	4b2f      	ldr	r3, [pc, #188]	; (8006698 <setup+0x214>)
 80065dc:	4a25      	ldr	r2, [pc, #148]	; (8006674 <setup+0x1f0>)
 80065de:	615a      	str	r2, [r3, #20]
    robot.motionController = &motionController;
 80065e0:	4b2d      	ldr	r3, [pc, #180]	; (8006698 <setup+0x214>)
 80065e2:	4a27      	ldr	r2, [pc, #156]	; (8006680 <setup+0x1fc>)
 80065e4:	619a      	str	r2, [r3, #24]
    robot.motorD = &motorD;
 80065e6:	4b2c      	ldr	r3, [pc, #176]	; (8006698 <setup+0x214>)
 80065e8:	4a0e      	ldr	r2, [pc, #56]	; (8006624 <setup+0x1a0>)
 80065ea:	601a      	str	r2, [r3, #0]
    robot.motorG = &motorG;
 80065ec:	4b2a      	ldr	r3, [pc, #168]	; (8006698 <setup+0x214>)
 80065ee:	4a0f      	ldr	r2, [pc, #60]	; (800662c <setup+0x1a8>)
 80065f0:	605a      	str	r2, [r3, #4]
    robot.pidD = &pidD;
 80065f2:	4b29      	ldr	r3, [pc, #164]	; (8006698 <setup+0x214>)
 80065f4:	4a16      	ldr	r2, [pc, #88]	; (8006650 <setup+0x1cc>)
 80065f6:	60da      	str	r2, [r3, #12]
    robot.pidG = &pidG;
 80065f8:	4b27      	ldr	r3, [pc, #156]	; (8006698 <setup+0x214>)
 80065fa:	4a1b      	ldr	r2, [pc, #108]	; (8006668 <setup+0x1e4>)
 80065fc:	611a      	str	r2, [r3, #16]
    robot.distBetweenMotorWheels = distBetweenMotorWheels;
 80065fe:	4b1b      	ldr	r3, [pc, #108]	; (800666c <setup+0x1e8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a25      	ldr	r2, [pc, #148]	; (8006698 <setup+0x214>)
 8006604:	61d3      	str	r3, [r2, #28]
    robot.mode = 0;
 8006606:	4b24      	ldr	r3, [pc, #144]	; (8006698 <setup+0x214>)
 8006608:	2200      	movs	r2, #0
 800660a:	641a      	str	r2, [r3, #64]	; 0x40
    robot_init(&robot, 0., 0., 0.);
 800660c:	ed9f 1a23 	vldr	s2, [pc, #140]	; 800669c <setup+0x218>
 8006610:	eddf 0a22 	vldr	s1, [pc, #136]	; 800669c <setup+0x218>
 8006614:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800669c <setup+0x218>
 8006618:	481f      	ldr	r0, [pc, #124]	; (8006698 <setup+0x214>)
 800661a:	f000 fda9 	bl	8007170 <robot_init>
}
 800661e:	bf00      	nop
 8006620:	bdb0      	pop	{r4, r5, r7, pc}
 8006622:	bf00      	nop
 8006624:	20000e24 	.word	0x20000e24
 8006628:	20000c68 	.word	0x20000c68
 800662c:	20000c10 	.word	0x20000c10
 8006630:	20000e7c 	.word	0x20000e7c
 8006634:	48000800 	.word	0x48000800
 8006638:	20000b24 	.word	0x20000b24
 800663c:	40000824 	.word	0x40000824
 8006640:	40012c24 	.word	0x40012c24
 8006644:	43f00000 	.word	0x43f00000
 8006648:	4201999a 	.word	0x4201999a
 800664c:	43520000 	.word	0x43520000
 8006650:	20000f48 	.word	0x20000f48
 8006654:	3e25e354 	.word	0x3e25e354
 8006658:	3cc49ba6 	.word	0x3cc49ba6
 800665c:	3bc49ba6 	.word	0x3bc49ba6
 8006660:	c37f0000 	.word	0xc37f0000
 8006664:	437f0000 	.word	0x437f0000
 8006668:	20000f64 	.word	0x20000f64
 800666c:	20000b20 	.word	0x20000b20
 8006670:	43340000 	.word	0x43340000
 8006674:	20000f3c 	.word	0x20000f3c
 8006678:	43e10000 	.word	0x43e10000
 800667c:	40b1999a 	.word	0x40b1999a
 8006680:	20000ca8 	.word	0x20000ca8
 8006684:	42c80000 	.word	0x42c80000
 8006688:	40b00000 	.word	0x40b00000
 800668c:	3f333333 	.word	0x3f333333
 8006690:	40a00000 	.word	0x40a00000
 8006694:	3d0efa33 	.word	0x3d0efa33
 8006698:	20000d9c 	.word	0x20000d9c
 800669c:	00000000 	.word	0x00000000

080066a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a23      	ldr	r2, [pc, #140]	; (800673c <HAL_UART_RxCpltCallback+0x9c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d13f      	bne.n	8006732 <HAL_UART_RxCpltCallback+0x92>
  {
	  static int pos;

	  if (!pos)
 80066b2:	4b23      	ldr	r3, [pc, #140]	; (8006740 <HAL_UART_RxCpltCallback+0xa0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <HAL_UART_RxCpltCallback+0x20>
		  pos = 1;
 80066ba:	4b21      	ldr	r3, [pc, #132]	; (8006740 <HAL_UART_RxCpltCallback+0xa0>)
 80066bc:	2201      	movs	r2, #1
 80066be:	601a      	str	r2, [r3, #0]
	   *c = byte;
 80066c0:	4b20      	ldr	r3, [pc, #128]	; (8006744 <HAL_UART_RxCpltCallback+0xa4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a20      	ldr	r2, [pc, #128]	; (8006748 <HAL_UART_RxCpltCallback+0xa8>)
 80066c6:	7812      	ldrb	r2, [r2, #0]
 80066c8:	701a      	strb	r2, [r3, #0]
	    c = c+1;
 80066ca:	4b1e      	ldr	r3, [pc, #120]	; (8006744 <HAL_UART_RxCpltCallback+0xa4>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3301      	adds	r3, #1
 80066d0:	4a1c      	ldr	r2, [pc, #112]	; (8006744 <HAL_UART_RxCpltCallback+0xa4>)
 80066d2:	6013      	str	r3, [r2, #0]
	    pos++;
 80066d4:	4b1a      	ldr	r3, [pc, #104]	; (8006740 <HAL_UART_RxCpltCallback+0xa0>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3301      	adds	r3, #1
 80066da:	4a19      	ldr	r2, [pc, #100]	; (8006740 <HAL_UART_RxCpltCallback+0xa0>)
 80066dc:	6013      	str	r3, [r2, #0]

//    	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d", strlen(command)), 90000);

	    if (pos >= 190)//(int)(c-command) >= 190){
 80066de:	4b18      	ldr	r3, [pc, #96]	; (8006740 <HAL_UART_RxCpltCallback+0xa0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2bbd      	cmp	r3, #189	; 0xbd
 80066e4:	dd06      	ble.n	80066f4 <HAL_UART_RxCpltCallback+0x54>
	    {
	    	c = command;// error, command cannot be longer than 190 char.
 80066e6:	4b17      	ldr	r3, [pc, #92]	; (8006744 <HAL_UART_RxCpltCallback+0xa4>)
 80066e8:	4a18      	ldr	r2, [pc, #96]	; (800674c <HAL_UART_RxCpltCallback+0xac>)
 80066ea:	601a      	str	r2, [r3, #0]
	    	pos = 0;
 80066ec:	4b14      	ldr	r3, [pc, #80]	; (8006740 <HAL_UART_RxCpltCallback+0xa0>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	e019      	b.n	8006728 <HAL_UART_RxCpltCallback+0x88>
	    }else
	    if (byte == '\n'){ // ou fin de chaine
 80066f4:	4b14      	ldr	r3, [pc, #80]	; (8006748 <HAL_UART_RxCpltCallback+0xa8>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b0a      	cmp	r3, #10
 80066fa:	d115      	bne.n	8006728 <HAL_UART_RxCpltCallback+0x88>
            *c = '\0';
 80066fc:	4b11      	ldr	r3, [pc, #68]	; (8006744 <HAL_UART_RxCpltCallback+0xa4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2200      	movs	r2, #0
 8006702:	701a      	strb	r2, [r3, #0]
	        if (gcode_parseAscii(&gcodeCommand, command)){
 8006704:	4911      	ldr	r1, [pc, #68]	; (800674c <HAL_UART_RxCpltCallback+0xac>)
 8006706:	4812      	ldr	r0, [pc, #72]	; (8006750 <HAL_UART_RxCpltCallback+0xb0>)
 8006708:	f7fe fff0 	bl	80056ec <gcode_parseAscii>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d004      	beq.n	800671c <HAL_UART_RxCpltCallback+0x7c>
	            peekCommand(&gcodeCommand, &robot, huart);
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	490f      	ldr	r1, [pc, #60]	; (8006754 <HAL_UART_RxCpltCallback+0xb4>)
 8006716:	480e      	ldr	r0, [pc, #56]	; (8006750 <HAL_UART_RxCpltCallback+0xb0>)
 8006718:	f7fe fb7c 	bl	8004e14 <peekCommand>
	        	// HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, command), 90000);
	        }
	        else {
	            // error in command
            }
            c = command;
 800671c:	4b09      	ldr	r3, [pc, #36]	; (8006744 <HAL_UART_RxCpltCallback+0xa4>)
 800671e:	4a0b      	ldr	r2, [pc, #44]	; (800674c <HAL_UART_RxCpltCallback+0xac>)
 8006720:	601a      	str	r2, [r3, #0]
            pos = 0;
 8006722:	4b07      	ldr	r3, [pc, #28]	; (8006740 <HAL_UART_RxCpltCallback+0xa0>)
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]
	    }
	    /* Receive one byte in interrupt mode */
	    HAL_UART_Receive_IT(&huart2, &byte, 1);
 8006728:	2201      	movs	r2, #1
 800672a:	4907      	ldr	r1, [pc, #28]	; (8006748 <HAL_UART_RxCpltCallback+0xa8>)
 800672c:	480a      	ldr	r0, [pc, #40]	; (8006758 <HAL_UART_RxCpltCallback+0xb8>)
 800672e:	f7fd fc11 	bl	8003f54 <HAL_UART_Receive_IT>
  }
}
 8006732:	bf00      	nop
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40004400 	.word	0x40004400
 8006740:	200009e0 	.word	0x200009e0
 8006744:	20000008 	.word	0x20000008
 8006748:	20000de0 	.word	0x20000de0
 800674c:	20000b50 	.word	0x20000b50
 8006750:	20000ac4 	.word	0x20000ac4
 8006754:	20000d9c 	.word	0x20000d9c
 8006758:	20000ebc 	.word	0x20000ebc

0800675c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006760:	bf00      	nop
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <motionControl_init>:
#include "motionControl.h"

void motionControl_init(motionControl_Context *motionController, float xc, float yc, float thetac){
 800676a:	b480      	push	{r7}
 800676c:	b085      	sub	sp, #20
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	ed87 0a02 	vstr	s0, [r7, #8]
 8006776:	edc7 0a01 	vstr	s1, [r7, #4]
 800677a:	ed87 1a00 	vstr	s2, [r7]
    motionController->consign.x = xc;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	601a      	str	r2, [r3, #0]
    motionController->consign.y = yc;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	605a      	str	r2, [r3, #4]
    motionController->consign.theta = thetac;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	609a      	str	r2, [r3, #8]
}
 8006790:	bf00      	nop
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <motionControl_update>:

void motionControl_update(motionControl_Context* motionController, _position robotPos, float* linearVelocity, float* angularVelocity){
 800679c:	b5b0      	push	{r4, r5, r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6178      	str	r0, [r7, #20]
 80067a4:	eef0 6a40 	vmov.f32	s13, s0
 80067a8:	eeb0 7a60 	vmov.f32	s14, s1
 80067ac:	eef0 7a41 	vmov.f32	s15, s2
 80067b0:	6079      	str	r1, [r7, #4]
 80067b2:	603a      	str	r2, [r7, #0]
 80067b4:	edc7 6a02 	vstr	s13, [r7, #8]
 80067b8:	ed87 7a03 	vstr	s14, [r7, #12]
 80067bc:	edc7 7a04 	vstr	s15, [r7, #16]

    alphaRho(motionController->consign, robotPos, &motionController->alpha, &motionController->rho);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067cc:	ed97 5a02 	vldr	s10, [r7, #8]
 80067d0:	edd7 5a03 	vldr	s11, [r7, #12]
 80067d4:	ed97 6a04 	vldr	s12, [r7, #16]
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	edd3 6a00 	vldr	s13, [r3]
 80067de:	ed93 7a01 	vldr	s14, [r3, #4]
 80067e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80067e6:	4610      	mov	r0, r2
 80067e8:	eef0 1a45 	vmov.f32	s3, s10
 80067ec:	eeb0 2a65 	vmov.f32	s4, s11
 80067f0:	eef0 2a46 	vmov.f32	s5, s12
 80067f4:	eeb0 0a66 	vmov.f32	s0, s13
 80067f8:	eef0 0a47 	vmov.f32	s1, s14
 80067fc:	eeb0 1a67 	vmov.f32	s2, s15
 8006800:	f000 f932 	bl	8006a68 <alphaRho>

    *linearVelocity = motionController->Krho * motionController->rho * cos(motionController->alpha);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	ed93 7a07 	vldr	s14, [r3, #28]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006814:	ee17 0a90 	vmov	r0, s15
 8006818:	f7f9 fe96 	bl	8000548 <__aeabi_f2d>
 800681c:	4604      	mov	r4, r0
 800681e:	460d      	mov	r5, r1
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006824:	4618      	mov	r0, r3
 8006826:	f7f9 fe8f 	bl	8000548 <__aeabi_f2d>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	ec43 2b10 	vmov	d0, r2, r3
 8006832:	f005 fde5 	bl	800c400 <cos>
 8006836:	ec53 2b10 	vmov	r2, r3, d0
 800683a:	4620      	mov	r0, r4
 800683c:	4629      	mov	r1, r5
 800683e:	f7f9 fedb 	bl	80005f8 <__aeabi_dmul>
 8006842:	4603      	mov	r3, r0
 8006844:	460c      	mov	r4, r1
 8006846:	4618      	mov	r0, r3
 8006848:	4621      	mov	r1, r4
 800684a:	f7fa f9cd 	bl	8000be8 <__aeabi_d2f>
 800684e:	4602      	mov	r2, r0
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	601a      	str	r2, [r3, #0]
    *angularVelocity = motionController->Kalpha * sin(motionController->alpha);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	4618      	mov	r0, r3
 800685a:	f7f9 fe75 	bl	8000548 <__aeabi_f2d>
 800685e:	4604      	mov	r4, r0
 8006860:	460d      	mov	r5, r1
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006866:	4618      	mov	r0, r3
 8006868:	f7f9 fe6e 	bl	8000548 <__aeabi_f2d>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	ec43 2b10 	vmov	d0, r2, r3
 8006874:	f005 fe08 	bl	800c488 <sin>
 8006878:	ec53 2b10 	vmov	r2, r3, d0
 800687c:	4620      	mov	r0, r4
 800687e:	4629      	mov	r1, r5
 8006880:	f7f9 feba 	bl	80005f8 <__aeabi_dmul>
 8006884:	4603      	mov	r3, r0
 8006886:	460c      	mov	r4, r1
 8006888:	4618      	mov	r0, r3
 800688a:	4621      	mov	r1, r4
 800688c:	f7fa f9ac 	bl	8000be8 <__aeabi_d2f>
 8006890:	4602      	mov	r2, r0
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	601a      	str	r2, [r3, #0]

    if (motionController->rho < motionController->Srho){
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80068a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068aa:	d50e      	bpl.n	80068ca <motionControl_update+0x12e>
        *angularVelocity = motionController->Kalpha * (motionController->consign.theta - robotPos.theta);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	ed93 7a08 	vldr	s14, [r3, #32]
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	edd3 6a02 	vldr	s13, [r3, #8]
 80068b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80068bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80068c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	edc3 7a00 	vstr	s15, [r3]
    }

    // critère d'arrêt
    if (fabs(motionController->alpha) < motionController->Salpha &&
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80068d0:	eeb0 7ae7 	vabs.f32	s14, s15
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80068da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e2:	d400      	bmi.n	80068e6 <motionControl_update+0x14a>
        motionController->rho < motionController->Srho){
        *linearVelocity = 0.;
        *angularVelocity = 0.;
    }
}
 80068e4:	e013      	b.n	800690e <motionControl_update+0x172>
        motionController->rho < motionController->Srho){
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if (fabs(motionController->alpha) < motionController->Salpha &&
 80068f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068fa:	d400      	bmi.n	80068fe <motionControl_update+0x162>
}
 80068fc:	e007      	b.n	800690e <motionControl_update+0x172>
        *linearVelocity = 0.;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	601a      	str	r2, [r3, #0]
        *angularVelocity = 0.;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	601a      	str	r2, [r3, #0]
}
 800690e:	bf00      	nop
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bdb0      	pop	{r4, r5, r7, pc}

08006916 <motionControl_update2>:

// motion control with rotations firsts
void motionControl_update2(motionControl_Context* motionController, _position robotPos, float* linearVelocity, float* angularVelocity){
 8006916:	b5b0      	push	{r4, r5, r7, lr}
 8006918:	b086      	sub	sp, #24
 800691a:	af00      	add	r7, sp, #0
 800691c:	6178      	str	r0, [r7, #20]
 800691e:	eef0 6a40 	vmov.f32	s13, s0
 8006922:	eeb0 7a60 	vmov.f32	s14, s1
 8006926:	eef0 7a41 	vmov.f32	s15, s2
 800692a:	6079      	str	r1, [r7, #4]
 800692c:	603a      	str	r2, [r7, #0]
 800692e:	edc7 6a02 	vstr	s13, [r7, #8]
 8006932:	ed87 7a03 	vstr	s14, [r7, #12]
 8006936:	edc7 7a04 	vstr	s15, [r7, #16]

    alphaRho(motionController->consign, robotPos, &motionController->alpha, &motionController->rho);
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006946:	ed97 5a02 	vldr	s10, [r7, #8]
 800694a:	edd7 5a03 	vldr	s11, [r7, #12]
 800694e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	edd3 6a00 	vldr	s13, [r3]
 8006958:	ed93 7a01 	vldr	s14, [r3, #4]
 800695c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006960:	4610      	mov	r0, r2
 8006962:	eef0 1a45 	vmov.f32	s3, s10
 8006966:	eeb0 2a65 	vmov.f32	s4, s11
 800696a:	eef0 2a46 	vmov.f32	s5, s12
 800696e:	eeb0 0a66 	vmov.f32	s0, s13
 8006972:	eef0 0a47 	vmov.f32	s1, s14
 8006976:	eeb0 1a67 	vmov.f32	s2, s15
 800697a:	f000 f875 	bl	8006a68 <alphaRho>

    *linearVelocity = motionController->Krho * motionController->rho * cos(motionController->alpha);
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	ed93 7a07 	vldr	s14, [r3, #28]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800698a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698e:	ee17 0a90 	vmov	r0, s15
 8006992:	f7f9 fdd9 	bl	8000548 <__aeabi_f2d>
 8006996:	4604      	mov	r4, r0
 8006998:	460d      	mov	r5, r1
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699e:	4618      	mov	r0, r3
 80069a0:	f7f9 fdd2 	bl	8000548 <__aeabi_f2d>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	ec43 2b10 	vmov	d0, r2, r3
 80069ac:	f005 fd28 	bl	800c400 <cos>
 80069b0:	ec53 2b10 	vmov	r2, r3, d0
 80069b4:	4620      	mov	r0, r4
 80069b6:	4629      	mov	r1, r5
 80069b8:	f7f9 fe1e 	bl	80005f8 <__aeabi_dmul>
 80069bc:	4603      	mov	r3, r0
 80069be:	460c      	mov	r4, r1
 80069c0:	4618      	mov	r0, r3
 80069c2:	4621      	mov	r1, r4
 80069c4:	f7fa f910 	bl	8000be8 <__aeabi_d2f>
 80069c8:	4602      	mov	r2, r0
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	601a      	str	r2, [r3, #0]
    *angularVelocity = motionController->Kalpha * motionController->alpha;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	ed93 7a08 	vldr	s14, [r3, #32]
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80069da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	edc3 7a00 	vstr	s15, [r3]
    if (motionController->alpha > motionController->Salpha){
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80069f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f8:	dd0e      	ble.n	8006a18 <motionControl_update2+0x102>
        *linearVelocity = 0.;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	601a      	str	r2, [r3, #0]
        *angularVelocity = motionController->Kalpha * motionController->alpha ;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	ed93 7a08 	vldr	s14, [r3, #32]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	edc3 7a00 	vstr	s15, [r3]
    }

    // critère d'arrêt
    if (fabs(motionController->alpha) < motionController->Salpha &&
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006a1e:	eeb0 7ae7 	vabs.f32	s14, s15
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a30:	d400      	bmi.n	8006a34 <motionControl_update2+0x11e>
        motionController->rho < motionController->Srho){
        *linearVelocity = 0.;
        *angularVelocity = 0.;
    }

}
 8006a32:	e013      	b.n	8006a5c <motionControl_update2+0x146>
        motionController->rho < motionController->Srho){
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if (fabs(motionController->alpha) < motionController->Salpha &&
 8006a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a48:	d400      	bmi.n	8006a4c <motionControl_update2+0x136>
}
 8006a4a:	e007      	b.n	8006a5c <motionControl_update2+0x146>
        *linearVelocity = 0.;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f04f 0200 	mov.w	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
        *angularVelocity = 0.;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]
}
 8006a5c:	bf00      	nop
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bdb0      	pop	{r4, r5, r7, pc}
 8006a64:	0000      	movs	r0, r0
	...

08006a68 <alphaRho>:
    motionController->consign.y = yc;
    motionController->consign.theta = thetac;
}


void alphaRho(_position consign, _position robotPos, float* alpha, float* rho){
 8006a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a6a:	b089      	sub	sp, #36	; 0x24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	eeb0 5a40 	vmov.f32	s10, s0
 8006a72:	eef0 5a60 	vmov.f32	s11, s1
 8006a76:	eeb0 6a41 	vmov.f32	s12, s2
 8006a7a:	eef0 6a61 	vmov.f32	s13, s3
 8006a7e:	eeb0 7a42 	vmov.f32	s14, s4
 8006a82:	eef0 7a62 	vmov.f32	s15, s5
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
 8006a8a:	ed87 5a05 	vstr	s10, [r7, #20]
 8006a8e:	edc7 5a06 	vstr	s11, [r7, #24]
 8006a92:	ed87 6a07 	vstr	s12, [r7, #28]
 8006a96:	edc7 6a02 	vstr	s13, [r7, #8]
 8006a9a:	ed87 7a03 	vstr	s14, [r7, #12]
 8006a9e:	edc7 7a04 	vstr	s15, [r7, #16]
   *alpha = constrainAngle( atan2(consign.y - robotPos.y,consign.x - robotPos.x) - robotPos.theta );
 8006aa2:	ed97 7a06 	vldr	s14, [r7, #24]
 8006aa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006aae:	ee17 0a90 	vmov	r0, s15
 8006ab2:	f7f9 fd49 	bl	8000548 <__aeabi_f2d>
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	460d      	mov	r5, r1
 8006aba:	ed97 7a05 	vldr	s14, [r7, #20]
 8006abe:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ac6:	ee17 0a90 	vmov	r0, s15
 8006aca:	f7f9 fd3d 	bl	8000548 <__aeabi_f2d>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	ec43 2b11 	vmov	d1, r2, r3
 8006ad6:	ec45 4b10 	vmov	d0, r4, r5
 8006ada:	f005 fd1d 	bl	800c518 <atan2>
 8006ade:	ec56 5b10 	vmov	r5, r6, d0
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7f9 fd2f 	bl	8000548 <__aeabi_f2d>
 8006aea:	4603      	mov	r3, r0
 8006aec:	460c      	mov	r4, r1
 8006aee:	461a      	mov	r2, r3
 8006af0:	4623      	mov	r3, r4
 8006af2:	4628      	mov	r0, r5
 8006af4:	4631      	mov	r1, r6
 8006af6:	f7f9 fbc7 	bl	8000288 <__aeabi_dsub>
 8006afa:	4603      	mov	r3, r0
 8006afc:	460c      	mov	r4, r1
 8006afe:	ec44 3b17 	vmov	d7, r3, r4
 8006b02:	eeb0 0a47 	vmov.f32	s0, s14
 8006b06:	eef0 0a67 	vmov.f32	s1, s15
 8006b0a:	f000 fedd 	bl	80078c8 <constrainAngle>
 8006b0e:	ec54 3b10 	vmov	r3, r4, d0
 8006b12:	4618      	mov	r0, r3
 8006b14:	4621      	mov	r1, r4
 8006b16:	f7fa f867 	bl	8000be8 <__aeabi_d2f>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	601a      	str	r2, [r3, #0]
   *rho  = sqrt(pow(consign.x - robotPos.x,2) + pow(consign.y - robotPos.y,2));
 8006b20:	ed97 7a05 	vldr	s14, [r7, #20]
 8006b24:	edd7 7a02 	vldr	s15, [r7, #8]
 8006b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b2c:	ee17 0a90 	vmov	r0, s15
 8006b30:	f7f9 fd0a 	bl	8000548 <__aeabi_f2d>
 8006b34:	4603      	mov	r3, r0
 8006b36:	460c      	mov	r4, r1
 8006b38:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006ba8 <alphaRho+0x140>
 8006b3c:	ec44 3b10 	vmov	d0, r3, r4
 8006b40:	f005 fd50 	bl	800c5e4 <pow>
 8006b44:	ec55 4b10 	vmov	r4, r5, d0
 8006b48:	ed97 7a06 	vldr	s14, [r7, #24]
 8006b4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b54:	ee17 0a90 	vmov	r0, s15
 8006b58:	f7f9 fcf6 	bl	8000548 <__aeabi_f2d>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8006ba8 <alphaRho+0x140>
 8006b64:	ec43 2b10 	vmov	d0, r2, r3
 8006b68:	f005 fd3c 	bl	800c5e4 <pow>
 8006b6c:	ec53 2b10 	vmov	r2, r3, d0
 8006b70:	4620      	mov	r0, r4
 8006b72:	4629      	mov	r1, r5
 8006b74:	f7f9 fb8a 	bl	800028c <__adddf3>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	ec44 3b17 	vmov	d7, r3, r4
 8006b80:	eeb0 0a47 	vmov.f32	s0, s14
 8006b84:	eef0 0a67 	vmov.f32	s1, s15
 8006b88:	f005 fe9c 	bl	800c8c4 <sqrt>
 8006b8c:	ec54 3b10 	vmov	r3, r4, d0
 8006b90:	4618      	mov	r0, r3
 8006b92:	4621      	mov	r1, r4
 8006b94:	f7fa f828 	bl	8000be8 <__aeabi_d2f>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	601a      	str	r2, [r3, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	3724      	adds	r7, #36	; 0x24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	00000000 	.word	0x00000000
 8006bac:	40000000 	.word	0x40000000

08006bb0 <motor_init>:
#include "motor.h"

void motor_init(motor_Context *motor){
 8006bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bb2:	b093      	sub	sp, #76	; 0x4c
 8006bb4:	af10      	add	r7, sp, #64	; 0x40
 8006bb6:	6078      	str	r0, [r7, #4]
    setPWM(motor->timer, motor->channel, 255, 0); // reset PWM
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbc:	687e      	ldr	r6, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	920e      	str	r2, [sp, #56]	; 0x38
 8006bc2:	22ff      	movs	r2, #255	; 0xff
 8006bc4:	920d      	str	r2, [sp, #52]	; 0x34
 8006bc6:	930c      	str	r3, [sp, #48]	; 0x30
 8006bc8:	466d      	mov	r5, sp
 8006bca:	f106 0410 	add.w	r4, r6, #16
 8006bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006bda:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006bde:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006be2:	f000 f882 	bl	8006cea <setPWM>
    HAL_GPIO_WritePin(motor->motDir_Port, motor->motDir_Pin, GPIO_PIN_RESET); //
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	f7fa fd64 	bl	80016c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->motBrake_Port, motor->motBrake_Pin, GPIO_PIN_RESET);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c02:	2200      	movs	r2, #0
 8006c04:	4619      	mov	r1, r3
 8006c06:	f7fa fd5b 	bl	80016c0 <HAL_GPIO_WritePin>
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c12 <motor_setSpeed>:

void motor_setSpeed(motor_Context *motor, int speed){
 8006c12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c14:	b093      	sub	sp, #76	; 0x4c
 8006c16:	af10      	add	r7, sp, #64	; 0x40
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
	if (motor->reverseDir){
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <motor_setSpeed+0x1a>
        speed = -speed;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	425b      	negs	r3, r3
 8006c2a:	603b      	str	r3, [r7, #0]
    }
    if (speed < 0){
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	da0c      	bge.n	8006c4c <motor_setSpeed+0x3a>
        speed = -speed;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	425b      	negs	r3, r3
 8006c36:	603b      	str	r3, [r7, #0]
        HAL_GPIO_WritePin(motor->motDir_Port, motor->motDir_Pin, GPIO_PIN_SET);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006c42:	2201      	movs	r2, #1
 8006c44:	4619      	mov	r1, r3
 8006c46:	f7fa fd3b 	bl	80016c0 <HAL_GPIO_WritePin>
 8006c4a:	e008      	b.n	8006c5e <motor_setSpeed+0x4c>
    }
    else {
        HAL_GPIO_WritePin(motor->motDir_Port, motor->motDir_Pin, GPIO_PIN_RESET);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006c56:	2200      	movs	r2, #0
 8006c58:	4619      	mov	r1, r3
 8006c5a:	f7fa fd31 	bl	80016c0 <HAL_GPIO_WritePin>
    }
    if (speed > motor->maxPWM){
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	dd02      	ble.n	8006c6e <motor_setSpeed+0x5c>
        speed = motor->maxPWM;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c6c:	603b      	str	r3, [r7, #0]
    }

    setPWM(motor->timer, motor->channel, 255, speed); // set PWM
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	b292      	uxth	r2, r2
 8006c76:	687e      	ldr	r6, [r7, #4]
 8006c78:	920e      	str	r2, [sp, #56]	; 0x38
 8006c7a:	22ff      	movs	r2, #255	; 0xff
 8006c7c:	920d      	str	r2, [sp, #52]	; 0x34
 8006c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8006c80:	466d      	mov	r5, sp
 8006c82:	f106 0410 	add.w	r4, r6, #16
 8006c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006c92:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006c96:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006c9a:	f000 f826 	bl	8006cea <setPWM>
}
 8006c9e:	bf00      	nop
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ca6 <motor_breake>:

void motor_breake(motor_Context *motor){
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->motBrake_Port, motor->motBrake_Pin, GPIO_PIN_SET);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cb8:	2201      	movs	r2, #1
 8006cba:	4619      	mov	r1, r3
 8006cbc:	f7fa fd00 	bl	80016c0 <HAL_GPIO_WritePin>
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <motor_unbreake>:

void motor_unbreake(motor_Context *motor){
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->motBrake_Port, motor->motBrake_Pin, GPIO_PIN_RESET);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4619      	mov	r1, r3
 8006cde:	f7fa fcef 	bl	80016c0 <HAL_GPIO_WritePin>
}
 8006ce2:	bf00      	nop
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <setPWM>:

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 8006cea:	b084      	sub	sp, #16
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8006cf6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  HAL_TIM_PWM_Stop(&timer, channel);    // stop generation of pwm
 8006cfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cfc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006d00:	f7fc f8cc 	bl	8002e9c <HAL_TIM_PWM_Stop>
	  TIM_OC_InitTypeDef sConfigOC;   timer.Init.Period = period;           // set the period duration
 8006d04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d08:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_TIM_PWM_Init(&timer);  // reinititialise with new period value
 8006d0a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006d0e:	f7fc f841 	bl	8002d94 <HAL_TIM_PWM_Init>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d12:	2360      	movs	r3, #96	; 0x60
 8006d14:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = pulse;              // set the pulse duration
 8006d16:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8006d1a:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]
	  HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8006d24:	1d3b      	adds	r3, r7, #4
 8006d26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d28:	4619      	mov	r1, r3
 8006d2a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006d2e:	f7fc fad5 	bl	80032dc <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_PWM_Start(&timer, channel);   // start pwm generation}
 8006d32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d34:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006d38:	f7fc f858 	bl	8002dec <HAL_TIM_PWM_Start>
}
 8006d3c:	bf00      	nop
 8006d3e:	3720      	adds	r7, #32
 8006d40:	46bd      	mov	sp, r7
 8006d42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d46:	b004      	add	sp, #16
 8006d48:	4770      	bx	lr

08006d4a <odometry_init>:
#include "odometry.h"

void odometry_init(odometry_Context *odometry, float x0, float y0, float theta0){
 8006d4a:	b590      	push	{r4, r7, lr}
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	ed87 0a02 	vstr	s0, [r7, #8]
 8006d56:	edc7 0a01 	vstr	s1, [r7, #4]
 8006d5a:	ed87 1a00 	vstr	s2, [r7]
    odometry->linearDisplacement =0.;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f04f 0200 	mov.w	r2, #0
 8006d64:	61da      	str	r2, [r3, #28]
    odometry->angularDisplacement =0.;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f04f 0200 	mov.w	r2, #0
 8006d6c:	621a      	str	r2, [r3, #32]

    odometry->position.x     = x0;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	611a      	str	r2, [r3, #16]
    odometry->position.y     = y0;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	615a      	str	r2, [r3, #20]
    odometry->position.theta = constrainAngle(theta0); // remise dans ]-pi pi]
 8006d7a:	6838      	ldr	r0, [r7, #0]
 8006d7c:	f7f9 fbe4 	bl	8000548 <__aeabi_f2d>
 8006d80:	4603      	mov	r3, r0
 8006d82:	460c      	mov	r4, r1
 8006d84:	ec44 3b10 	vmov	d0, r3, r4
 8006d88:	f000 fd9e 	bl	80078c8 <constrainAngle>
 8006d8c:	ec54 3b10 	vmov	r3, r4, d0
 8006d90:	4618      	mov	r0, r3
 8006d92:	4621      	mov	r1, r4
 8006d94:	f7f9 ff28 	bl	8000be8 <__aeabi_d2f>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	619a      	str	r2, [r3, #24]
}
 8006d9e:	bf00      	nop
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd90      	pop	{r4, r7, pc}
	...

08006da8 <odometry_update>:

void odometry_update(odometry_Context *odometry){
 8006da8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
    float distR =  odometry->wheelRadiusR * 2*PI/odometry->encoderRes * (float)(int16_t)*(odometry->rightTicks);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	edd3 7a01 	vldr	s15, [r3, #4]
 8006db8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006dbc:	ee17 0a90 	vmov	r0, s15
 8006dc0:	f7f9 fbc2 	bl	8000548 <__aeabi_f2d>
 8006dc4:	a392      	add	r3, pc, #584	; (adr r3, 8007010 <odometry_update+0x268>)
 8006dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dca:	f7f9 fc15 	bl	80005f8 <__aeabi_dmul>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	4625      	mov	r5, r4
 8006dd4:	461c      	mov	r4, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7f9 fbb4 	bl	8000548 <__aeabi_f2d>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4620      	mov	r0, r4
 8006de6:	4629      	mov	r1, r5
 8006de8:	f7f9 fd30 	bl	800084c <__aeabi_ddiv>
 8006dec:	4603      	mov	r3, r0
 8006dee:	460c      	mov	r4, r1
 8006df0:	4625      	mov	r5, r4
 8006df2:	461c      	mov	r4, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dfc:	ee07 3a90 	vmov	s15, r3
 8006e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e04:	ee17 0a90 	vmov	r0, s15
 8006e08:	f7f9 fb9e 	bl	8000548 <__aeabi_f2d>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4620      	mov	r0, r4
 8006e12:	4629      	mov	r1, r5
 8006e14:	f7f9 fbf0 	bl	80005f8 <__aeabi_dmul>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	4621      	mov	r1, r4
 8006e20:	f7f9 fee2 	bl	8000be8 <__aeabi_d2f>
 8006e24:	4603      	mov	r3, r0
 8006e26:	60fb      	str	r3, [r7, #12]
    float distL =  odometry->wheelRadiusL * 2*PI/odometry->encoderRes * (float)(int16_t)*(odometry->leftTicks);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8006e2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006e32:	ee17 0a90 	vmov	r0, s15
 8006e36:	f7f9 fb87 	bl	8000548 <__aeabi_f2d>
 8006e3a:	a375      	add	r3, pc, #468	; (adr r3, 8007010 <odometry_update+0x268>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 fbda 	bl	80005f8 <__aeabi_dmul>
 8006e44:	4603      	mov	r3, r0
 8006e46:	460c      	mov	r4, r1
 8006e48:	4625      	mov	r5, r4
 8006e4a:	461c      	mov	r4, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7f9 fb79 	bl	8000548 <__aeabi_f2d>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	f7f9 fcf5 	bl	800084c <__aeabi_ddiv>
 8006e62:	4603      	mov	r3, r0
 8006e64:	460c      	mov	r4, r1
 8006e66:	4625      	mov	r5, r4
 8006e68:	461c      	mov	r4, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e7a:	ee17 0a90 	vmov	r0, s15
 8006e7e:	f7f9 fb63 	bl	8000548 <__aeabi_f2d>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4620      	mov	r0, r4
 8006e88:	4629      	mov	r1, r5
 8006e8a:	f7f9 fbb5 	bl	80005f8 <__aeabi_dmul>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	460c      	mov	r4, r1
 8006e92:	4618      	mov	r0, r3
 8006e94:	4621      	mov	r1, r4
 8006e96:	f7f9 fea7 	bl	8000be8 <__aeabi_d2f>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	60bb      	str	r3, [r7, #8]
    *(odometry->rightTicks) = 0;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	801a      	strh	r2, [r3, #0]
	*(odometry->leftTicks) = 0;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eaa:	2200      	movs	r2, #0
 8006eac:	801a      	strh	r2, [r3, #0]

    odometry->linearDisplacement = (distR + distL)/2;
 8006eae:	ed97 7a03 	vldr	s14, [r7, #12]
 8006eb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8006eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006eba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006ebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	edc3 7a07 	vstr	s15, [r3, #28]
    odometry->angularDisplacement = (distR - distL)/odometry->distanceBetweenWheels;
 8006ec8:	ed97 7a03 	vldr	s14, [r7, #12]
 8006ecc:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ed0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	ed93 7a03 	vldr	s14, [r3, #12]
 8006eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	edc3 7a08 	vstr	s15, [r3, #32]

    odometry->position.x = odometry->position.x + odometry->linearDisplacement*cos(odometry->position.theta + odometry->angularDisplacement/2);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7f9 fb2d 	bl	8000548 <__aeabi_f2d>
 8006eee:	4604      	mov	r4, r0
 8006ef0:	460d      	mov	r5, r1
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7f9 fb26 	bl	8000548 <__aeabi_f2d>
 8006efc:	4680      	mov	r8, r0
 8006efe:	4689      	mov	r9, r1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	ed93 7a06 	vldr	s14, [r3, #24]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	edd3 6a08 	vldr	s13, [r3, #32]
 8006f0c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8006f10:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f18:	ee17 0a90 	vmov	r0, s15
 8006f1c:	f7f9 fb14 	bl	8000548 <__aeabi_f2d>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	ec43 2b10 	vmov	d0, r2, r3
 8006f28:	f005 fa6a 	bl	800c400 <cos>
 8006f2c:	ec53 2b10 	vmov	r2, r3, d0
 8006f30:	4640      	mov	r0, r8
 8006f32:	4649      	mov	r1, r9
 8006f34:	f7f9 fb60 	bl	80005f8 <__aeabi_dmul>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	4629      	mov	r1, r5
 8006f40:	f7f9 f9a4 	bl	800028c <__adddf3>
 8006f44:	4603      	mov	r3, r0
 8006f46:	460c      	mov	r4, r1
 8006f48:	4618      	mov	r0, r3
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	f7f9 fe4c 	bl	8000be8 <__aeabi_d2f>
 8006f50:	4602      	mov	r2, r0
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	611a      	str	r2, [r3, #16]
    odometry->position.y = odometry->position.y + odometry->linearDisplacement*sin(odometry->position.theta + odometry->angularDisplacement/2);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7f9 faf4 	bl	8000548 <__aeabi_f2d>
 8006f60:	4604      	mov	r4, r0
 8006f62:	460d      	mov	r5, r1
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7f9 faed 	bl	8000548 <__aeabi_f2d>
 8006f6e:	4680      	mov	r8, r0
 8006f70:	4689      	mov	r9, r1
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	ed93 7a06 	vldr	s14, [r3, #24]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	edd3 6a08 	vldr	s13, [r3, #32]
 8006f7e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8006f82:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f8a:	ee17 0a90 	vmov	r0, s15
 8006f8e:	f7f9 fadb 	bl	8000548 <__aeabi_f2d>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	ec43 2b10 	vmov	d0, r2, r3
 8006f9a:	f005 fa75 	bl	800c488 <sin>
 8006f9e:	ec53 2b10 	vmov	r2, r3, d0
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	f7f9 fb27 	bl	80005f8 <__aeabi_dmul>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4620      	mov	r0, r4
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	f7f9 f96b 	bl	800028c <__adddf3>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	460c      	mov	r4, r1
 8006fba:	4618      	mov	r0, r3
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	f7f9 fe13 	bl	8000be8 <__aeabi_d2f>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	615a      	str	r2, [r3, #20]
    odometry->position.theta = odometry->position.theta + odometry->angularDisplacement;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	ed93 7a06 	vldr	s14, [r3, #24]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	edd3 7a08 	vldr	s15, [r3, #32]
 8006fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	edc3 7a06 	vstr	s15, [r3, #24]
    odometry->position.theta = constrainAngle(odometry->position.theta);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7f9 fab0 	bl	8000548 <__aeabi_f2d>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	460c      	mov	r4, r1
 8006fec:	ec44 3b10 	vmov	d0, r3, r4
 8006ff0:	f000 fc6a 	bl	80078c8 <constrainAngle>
 8006ff4:	ec54 3b10 	vmov	r3, r4, d0
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	f7f9 fdf4 	bl	8000be8 <__aeabi_d2f>
 8007000:	4602      	mov	r2, r0
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	619a      	str	r2, [r3, #24]
}
 8007006:	bf00      	nop
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007010:	fc8b007a 	.word	0xfc8b007a
 8007014:	400921fa 	.word	0x400921fa

08007018 <pid_init>:
#include "pid.h"

void pid_init(pid_Context *pid){
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
   pid->integral =     0.;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	615a      	str	r2, [r3, #20]
   pid->last_error =   0.;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f04f 0200 	mov.w	r2, #0
 800702e:	619a      	str	r2, [r3, #24]
   }
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <pid_update>:

float pid_update(pid_Context *pid, float consign, float mesure){
 800703c:	b580      	push	{r7, lr}
 800703e:	b088      	sub	sp, #32
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	ed87 0a02 	vstr	s0, [r7, #8]
 8007048:	edc7 0a01 	vstr	s1, [r7, #4]
   float error = consign - mesure;
 800704c:	ed97 7a02 	vldr	s14, [r7, #8]
 8007050:	edd7 7a01 	vldr	s15, [r7, #4]
 8007054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007058:	edc7 7a07 	vstr	s15, [r7, #28]

   float proportional = pid->Kp * error;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	edd3 7a00 	vldr	s15, [r3]
 8007062:	ed97 7a07 	vldr	s14, [r7, #28]
 8007066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706a:	edc7 7a06 	vstr	s15, [r7, #24]
   pid->integral = pid->integral + pid->Ti * error; //euler integration
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	ed93 7a05 	vldr	s14, [r3, #20]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	edd3 6a01 	vldr	s13, [r3, #4]
 800707a:	edd7 7a07 	vldr	s15, [r7, #28]
 800707e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	edc3 7a05 	vstr	s15, [r3, #20]
   float derivate = pid->Td*(error - pid->last_error);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	ed93 7a02 	vldr	s14, [r3, #8]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	edd3 7a06 	vldr	s15, [r3, #24]
 8007098:	edd7 6a07 	vldr	s13, [r7, #28]
 800709c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80070a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a4:	edc7 7a05 	vstr	s15, [r7, #20]

   pid->last_error = error;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	619a      	str	r2, [r3, #24]
   pid->integral = constrain(pid->integral, pid->minOut, pid->maxOut);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	edd3 6a04 	vldr	s13, [r3, #16]
 80070c0:	eeb0 1a66 	vmov.f32	s2, s13
 80070c4:	eef0 0a47 	vmov.f32	s1, s14
 80070c8:	eeb0 0a67 	vmov.f32	s0, s15
 80070cc:	f000 f827 	bl	800711e <constrain>
 80070d0:	eef0 7a40 	vmov.f32	s15, s0
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	edc3 7a05 	vstr	s15, [r3, #20]
   float retval = proportional + derivate + pid->integral;
 80070da:	ed97 7a06 	vldr	s14, [r7, #24]
 80070de:	edd7 7a05 	vldr	s15, [r7, #20]
 80070e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80070ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070f0:	edc7 7a04 	vstr	s15, [r7, #16]
   return constrain(retval, pid->minOut, pid->maxOut);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8007100:	eeb0 1a47 	vmov.f32	s2, s14
 8007104:	eef0 0a67 	vmov.f32	s1, s15
 8007108:	ed97 0a04 	vldr	s0, [r7, #16]
 800710c:	f000 f807 	bl	800711e <constrain>
 8007110:	eef0 7a40 	vmov.f32	s15, s0
}
 8007114:	eeb0 0a67 	vmov.f32	s0, s15
 8007118:	3720      	adds	r7, #32
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <constrain>:

float constrain(float value,float min,float max){
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	ed87 0a03 	vstr	s0, [r7, #12]
 8007128:	edc7 0a02 	vstr	s1, [r7, #8]
 800712c:	ed87 1a01 	vstr	s2, [r7, #4]
   if (value < min){
 8007130:	ed97 7a03 	vldr	s14, [r7, #12]
 8007134:	edd7 7a02 	vldr	s15, [r7, #8]
 8007138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800713c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007140:	d501      	bpl.n	8007146 <constrain+0x28>
       return min;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	e00b      	b.n	800715e <constrain+0x40>
   }
   else if (value > max){
 8007146:	ed97 7a03 	vldr	s14, [r7, #12]
 800714a:	edd7 7a01 	vldr	s15, [r7, #4]
 800714e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007156:	dd01      	ble.n	800715c <constrain+0x3e>
       return max;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	e000      	b.n	800715e <constrain+0x40>
   }
   else {
       return value;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	ee07 3a90 	vmov	s15, r3
   }
}
 8007162:	eeb0 0a67 	vmov.f32	s0, s15
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <robot_init>:
#include "robot.h"

void robot_init(diffDriveRobot_Context *robot, float x0, float y0, float theta0){
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	ed87 0a02 	vstr	s0, [r7, #8]
 800717c:	edc7 0a01 	vstr	s1, [r7, #4]
 8007180:	ed87 1a00 	vstr	s2, [r7]
    odometry_init(robot->odometry, x0, y0, theta0);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	ed97 1a00 	vldr	s2, [r7]
 800718c:	edd7 0a01 	vldr	s1, [r7, #4]
 8007190:	ed97 0a02 	vldr	s0, [r7, #8]
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff fdd8 	bl	8006d4a <odometry_init>
    motionControl_init(robot->motionController, x0, y0, theta0);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	ed97 1a00 	vldr	s2, [r7]
 80071a2:	edd7 0a01 	vldr	s1, [r7, #4]
 80071a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7ff fadd 	bl	800676a <motionControl_init>
    pid_init(robot->pidD);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff ff2f 	bl	8007018 <pid_init>
    pid_init(robot->pidG);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff ff2a 	bl	8007018 <pid_init>
    motor_init(robot->motorG);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7ff fcf1 	bl	8006bb0 <motor_init>
    motor_init(robot->motorD);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff fcec 	bl	8006bb0 <motor_init>

    robot->vitD = 0.;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f04f 0200 	mov.w	r2, #0
 80071de:	621a      	str	r2, [r3, #32]
    robot->vitG = 0.; // vitesse consigne du point de contact de la roue et du sol
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f04f 0200 	mov.w	r2, #0
 80071e6:	625a      	str	r2, [r3, #36]	; 0x24
    robot->commandD = 0.;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f04f 0200 	mov.w	r2, #0
 80071ee:	629a      	str	r2, [r3, #40]	; 0x28
    robot->commandG = 0.;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	62da      	str	r2, [r3, #44]	; 0x2c
    robot->mesureD = 0.;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f04f 0200 	mov.w	r2, #0
 80071fe:	631a      	str	r2, [r3, #48]	; 0x30
    robot->mesureG = 0.; // vitesse mesuree du point de contact de la roue et du sol
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	635a      	str	r2, [r3, #52]	; 0x34
    robot->linearVelocity = 0.;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	639a      	str	r2, [r3, #56]	; 0x38
    robot->angularVelocity = 0.;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	63da      	str	r2, [r3, #60]	; 0x3c

    robot->mode = 0;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800721e:	bf00      	nop
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <robot_update>:

void robot_update(diffDriveRobot_Context *robot, float dt){
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	ed87 0a00 	vstr	s0, [r7]
    // odometry position and displacement update
      odometry_update(robot->odometry);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	4618      	mov	r0, r3
 800723a:	f7ff fdb5 	bl	8006da8 <odometry_update>

    // mesures vitesses des roues
      float wheelDistAng = robot->odometry->angularDisplacement * robot->distBetweenMotorWheels/2;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	ed93 7a08 	vldr	s14, [r3, #32]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	edd3 7a07 	vldr	s15, [r3, #28]
 800724c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007250:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007254:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007258:	edc7 7a03 	vstr	s15, [r7, #12]
      robot->mesureD = (robot->odometry->linearDisplacement + wheelDistAng)/dt*1000;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	ed93 7a07 	vldr	s14, [r3, #28]
 8007264:	edd7 7a03 	vldr	s15, [r7, #12]
 8007268:	ee77 6a27 	vadd.f32	s13, s14, s15
 800726c:	ed97 7a00 	vldr	s14, [r7]
 8007270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007274:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8007420 <robot_update+0x1f8>
 8007278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
      robot->mesureG = (robot->odometry->linearDisplacement - wheelDistAng)/dt*1000;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	ed93 7a07 	vldr	s14, [r3, #28]
 800728a:	edd7 7a03 	vldr	s15, [r7, #12]
 800728e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007292:	ed97 7a00 	vldr	s14, [r7]
 8007296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800729a:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8007420 <robot_update+0x1f8>
 800729e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // mise a jour de la consigne en vitesse et vitese angulaire.
    if (robot->mode == 0){
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d12b      	bne.n	8007308 <robot_update+0xe0>
        motionControl_update(robot->motionController, robot->odometry->position, &(robot->linearVelocity), &(robot->angularVelocity));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6998      	ldr	r0, [r3, #24]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	f102 0138 	add.w	r1, r2, #56	; 0x38
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	323c      	adds	r2, #60	; 0x3c
 80072c2:	edd3 6a04 	vldr	s13, [r3, #16]
 80072c6:	ed93 7a05 	vldr	s14, [r3, #20]
 80072ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80072ce:	eeb0 0a66 	vmov.f32	s0, s13
 80072d2:	eef0 0a47 	vmov.f32	s1, s14
 80072d6:	eeb0 1a67 	vmov.f32	s2, s15
 80072da:	f7ff fa5f 	bl	800679c <motionControl_update>
      // Conversion consignes vitesses et vitesses angulaires en vitesses roues gauche et droite et controle qu'on soit dans le carre des vitesses
        differential_update(robot->differential, robot->linearVelocity, robot->angularVelocity, &(robot->vitD), &(robot->vitG));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6958      	ldr	r0, [r3, #20]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f103 0120 	add.w	r1, r3, #32
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	3324      	adds	r3, #36	; 0x24
 80072f8:	461a      	mov	r2, r3
 80072fa:	eef0 0a47 	vmov.f32	s1, s14
 80072fe:	eeb0 0a67 	vmov.f32	s0, s15
 8007302:	f7fe f95b 	bl	80055bc <differential_update>
 8007306:	e02e      	b.n	8007366 <robot_update+0x13e>

    }
    else if(robot->mode == 1){
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	2b01      	cmp	r3, #1
 800730e:	d12a      	bne.n	8007366 <robot_update+0x13e>
        motionControl_update2(robot->motionController, robot->odometry->position, &(robot->linearVelocity), &(robot->angularVelocity));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6998      	ldr	r0, [r3, #24]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	f102 0138 	add.w	r1, r2, #56	; 0x38
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	323c      	adds	r2, #60	; 0x3c
 8007322:	edd3 6a04 	vldr	s13, [r3, #16]
 8007326:	ed93 7a05 	vldr	s14, [r3, #20]
 800732a:	edd3 7a06 	vldr	s15, [r3, #24]
 800732e:	eeb0 0a66 	vmov.f32	s0, s13
 8007332:	eef0 0a47 	vmov.f32	s1, s14
 8007336:	eeb0 1a67 	vmov.f32	s2, s15
 800733a:	f7ff faec 	bl	8006916 <motionControl_update2>
      // Conversion consignes vitesses et vitesses angulaires en vitesses roues gauche et droite et controle qu'on soit dans le carre des vitesses
        differential_update(robot->differential, robot->linearVelocity, robot->angularVelocity, &(robot->vitD), &(robot->vitG));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6958      	ldr	r0, [r3, #20]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f103 0120 	add.w	r1, r3, #32
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3324      	adds	r3, #36	; 0x24
 8007358:	461a      	mov	r2, r3
 800735a:	eef0 0a47 	vmov.f32	s1, s14
 800735e:	eeb0 0a67 	vmov.f32	s0, s15
 8007362:	f7fe f92b 	bl	80055bc <differential_update>

    }
    if (robot->mode == 20){
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	2b14      	cmp	r3, #20
 800736c:	d113      	bne.n	8007396 <robot_update+0x16e>
      // Conversion consignes vitesses et vitesses angulaires en vitesses roues gauche et droite et controle qu'on soit dans le carre des vitesses
        differential_update(robot->differential, robot->linearVelocity, robot->angularVelocity, &(robot->vitD), &(robot->vitG));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6958      	ldr	r0, [r3, #20]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f103 0120 	add.w	r1, r3, #32
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	3324      	adds	r3, #36	; 0x24
 8007388:	461a      	mov	r2, r3
 800738a:	eef0 0a47 	vmov.f32	s1, s14
 800738e:	eeb0 0a67 	vmov.f32	s0, s15
 8007392:	f7fe f913 	bl	80055bc <differential_update>
    }

    // calcul de la commande moteurs Corrigee par des pid.
      robot->commandD = pid_update(robot->pidD, robot->vitD, robot->mesureD);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	edd3 7a08 	vldr	s15, [r3, #32]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80073a6:	eef0 0a47 	vmov.f32	s1, s14
 80073aa:	eeb0 0a67 	vmov.f32	s0, s15
 80073ae:	4610      	mov	r0, r2
 80073b0:	f7ff fe44 	bl	800703c <pid_update>
 80073b4:	eef0 7a40 	vmov.f32	s15, s0
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
      robot->commandG = pid_update(robot->pidG, robot->vitG, robot->mesureG);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691a      	ldr	r2, [r3, #16]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80073ce:	eef0 0a47 	vmov.f32	s1, s14
 80073d2:	eeb0 0a67 	vmov.f32	s0, s15
 80073d6:	4610      	mov	r0, r2
 80073d8:	f7ff fe30 	bl	800703c <pid_update>
 80073dc:	eef0 7a40 	vmov.f32	s15, s0
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // envoie de la commande aux moteurs
      motor_setSpeed(robot->motorD, (int)robot->commandD);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80073f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073f4:	ee17 1a90 	vmov	r1, s15
 80073f8:	4610      	mov	r0, r2
 80073fa:	f7ff fc0a 	bl	8006c12 <motor_setSpeed>
      motor_setSpeed(robot->motorG, (int)robot->commandG);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800740c:	ee17 1a90 	vmov	r1, s15
 8007410:	4610      	mov	r0, r2
 8007412:	f7ff fbfe 	bl	8006c12 <motor_setSpeed>
}
 8007416:	bf00      	nop
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	447a0000 	.word	0x447a0000

08007424 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800742a:	4b0f      	ldr	r3, [pc, #60]	; (8007468 <HAL_MspInit+0x44>)
 800742c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800742e:	4a0e      	ldr	r2, [pc, #56]	; (8007468 <HAL_MspInit+0x44>)
 8007430:	f043 0301 	orr.w	r3, r3, #1
 8007434:	6613      	str	r3, [r2, #96]	; 0x60
 8007436:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <HAL_MspInit+0x44>)
 8007438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	607b      	str	r3, [r7, #4]
 8007440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007442:	4b09      	ldr	r3, [pc, #36]	; (8007468 <HAL_MspInit+0x44>)
 8007444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007446:	4a08      	ldr	r2, [pc, #32]	; (8007468 <HAL_MspInit+0x44>)
 8007448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800744c:	6593      	str	r3, [r2, #88]	; 0x58
 800744e:	4b06      	ldr	r3, [pc, #24]	; (8007468 <HAL_MspInit+0x44>)
 8007450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007456:	603b      	str	r3, [r7, #0]
 8007458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	40021000 	.word	0x40021000

0800746c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08a      	sub	sp, #40	; 0x28
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007474:	f107 0314 	add.w	r3, r7, #20
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	605a      	str	r2, [r3, #4]
 800747e:	609a      	str	r2, [r3, #8]
 8007480:	60da      	str	r2, [r3, #12]
 8007482:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a25      	ldr	r2, [pc, #148]	; (8007520 <HAL_SPI_MspInit+0xb4>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d144      	bne.n	8007518 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800748e:	4b25      	ldr	r3, [pc, #148]	; (8007524 <HAL_SPI_MspInit+0xb8>)
 8007490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007492:	4a24      	ldr	r2, [pc, #144]	; (8007524 <HAL_SPI_MspInit+0xb8>)
 8007494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007498:	6593      	str	r3, [r2, #88]	; 0x58
 800749a:	4b22      	ldr	r3, [pc, #136]	; (8007524 <HAL_SPI_MspInit+0xb8>)
 800749c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074a2:	613b      	str	r3, [r7, #16]
 80074a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074a6:	4b1f      	ldr	r3, [pc, #124]	; (8007524 <HAL_SPI_MspInit+0xb8>)
 80074a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074aa:	4a1e      	ldr	r2, [pc, #120]	; (8007524 <HAL_SPI_MspInit+0xb8>)
 80074ac:	f043 0304 	orr.w	r3, r3, #4
 80074b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074b2:	4b1c      	ldr	r3, [pc, #112]	; (8007524 <HAL_SPI_MspInit+0xb8>)
 80074b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b6:	f003 0304 	and.w	r3, r3, #4
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074be:	4b19      	ldr	r3, [pc, #100]	; (8007524 <HAL_SPI_MspInit+0xb8>)
 80074c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c2:	4a18      	ldr	r2, [pc, #96]	; (8007524 <HAL_SPI_MspInit+0xb8>)
 80074c4:	f043 0302 	orr.w	r3, r3, #2
 80074c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074ca:	4b16      	ldr	r3, [pc, #88]	; (8007524 <HAL_SPI_MspInit+0xb8>)
 80074cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	60bb      	str	r3, [r7, #8]
 80074d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80074d6:	230c      	movs	r3, #12
 80074d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074da:	2302      	movs	r3, #2
 80074dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074de:	2300      	movs	r3, #0
 80074e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074e2:	2303      	movs	r3, #3
 80074e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80074e6:	2305      	movs	r3, #5
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074ea:	f107 0314 	add.w	r3, r7, #20
 80074ee:	4619      	mov	r1, r3
 80074f0:	480d      	ldr	r0, [pc, #52]	; (8007528 <HAL_SPI_MspInit+0xbc>)
 80074f2:	f7f9 ff3d 	bl	8001370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80074f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074fc:	2302      	movs	r3, #2
 80074fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007500:	2300      	movs	r3, #0
 8007502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007504:	2303      	movs	r3, #3
 8007506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007508:	2305      	movs	r3, #5
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800750c:	f107 0314 	add.w	r3, r7, #20
 8007510:	4619      	mov	r1, r3
 8007512:	4806      	ldr	r0, [pc, #24]	; (800752c <HAL_SPI_MspInit+0xc0>)
 8007514:	f7f9 ff2c 	bl	8001370 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007518:	bf00      	nop
 800751a:	3728      	adds	r7, #40	; 0x28
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40003800 	.word	0x40003800
 8007524:	40021000 	.word	0x40021000
 8007528:	48000800 	.word	0x48000800
 800752c:	48000400 	.word	0x48000400

08007530 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b08c      	sub	sp, #48	; 0x30
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007538:	f107 031c 	add.w	r3, r7, #28
 800753c:	2200      	movs	r2, #0
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	605a      	str	r2, [r3, #4]
 8007542:	609a      	str	r2, [r3, #8]
 8007544:	60da      	str	r2, [r3, #12]
 8007546:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a33      	ldr	r2, [pc, #204]	; (800761c <HAL_TIM_Encoder_MspInit+0xec>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d12a      	bne.n	80075a8 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007552:	4b33      	ldr	r3, [pc, #204]	; (8007620 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007556:	4a32      	ldr	r2, [pc, #200]	; (8007620 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800755c:	6613      	str	r3, [r2, #96]	; 0x60
 800755e:	4b30      	ldr	r3, [pc, #192]	; (8007620 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007566:	61bb      	str	r3, [r7, #24]
 8007568:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800756a:	4b2d      	ldr	r3, [pc, #180]	; (8007620 <HAL_TIM_Encoder_MspInit+0xf0>)
 800756c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756e:	4a2c      	ldr	r2, [pc, #176]	; (8007620 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007570:	f043 0301 	orr.w	r3, r3, #1
 8007574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007576:	4b2a      	ldr	r3, [pc, #168]	; (8007620 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007582:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007588:	2302      	movs	r3, #2
 800758a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800758c:	2301      	movs	r3, #1
 800758e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007590:	2300      	movs	r3, #0
 8007592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007594:	2301      	movs	r3, #1
 8007596:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007598:	f107 031c 	add.w	r3, r7, #28
 800759c:	4619      	mov	r1, r3
 800759e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075a2:	f7f9 fee5 	bl	8001370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80075a6:	e034      	b.n	8007612 <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1d      	ldr	r2, [pc, #116]	; (8007624 <HAL_TIM_Encoder_MspInit+0xf4>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d12f      	bne.n	8007612 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80075b2:	4b1b      	ldr	r3, [pc, #108]	; (8007620 <HAL_TIM_Encoder_MspInit+0xf0>)
 80075b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b6:	4a1a      	ldr	r2, [pc, #104]	; (8007620 <HAL_TIM_Encoder_MspInit+0xf0>)
 80075b8:	f043 0304 	orr.w	r3, r3, #4
 80075bc:	6593      	str	r3, [r2, #88]	; 0x58
 80075be:	4b18      	ldr	r3, [pc, #96]	; (8007620 <HAL_TIM_Encoder_MspInit+0xf0>)
 80075c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c2:	f003 0304 	and.w	r3, r3, #4
 80075c6:	613b      	str	r3, [r7, #16]
 80075c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075ca:	4b15      	ldr	r3, [pc, #84]	; (8007620 <HAL_TIM_Encoder_MspInit+0xf0>)
 80075cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ce:	4a14      	ldr	r2, [pc, #80]	; (8007620 <HAL_TIM_Encoder_MspInit+0xf0>)
 80075d0:	f043 0302 	orr.w	r3, r3, #2
 80075d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075d6:	4b12      	ldr	r3, [pc, #72]	; (8007620 <HAL_TIM_Encoder_MspInit+0xf0>)
 80075d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80075e2:	23c0      	movs	r3, #192	; 0xc0
 80075e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075e6:	2302      	movs	r3, #2
 80075e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80075ea:	2301      	movs	r3, #1
 80075ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075ee:	2300      	movs	r3, #0
 80075f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80075f2:	2302      	movs	r3, #2
 80075f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075f6:	f107 031c 	add.w	r3, r7, #28
 80075fa:	4619      	mov	r1, r3
 80075fc:	480a      	ldr	r0, [pc, #40]	; (8007628 <HAL_TIM_Encoder_MspInit+0xf8>)
 80075fe:	f7f9 feb7 	bl	8001370 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007602:	2200      	movs	r2, #0
 8007604:	2100      	movs	r1, #0
 8007606:	201e      	movs	r0, #30
 8007608:	f7f9 fe3b 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800760c:	201e      	movs	r0, #30
 800760e:	f7f9 fe54 	bl	80012ba <HAL_NVIC_EnableIRQ>
}
 8007612:	bf00      	nop
 8007614:	3730      	adds	r7, #48	; 0x30
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	40012c00 	.word	0x40012c00
 8007620:	40021000 	.word	0x40021000
 8007624:	40000800 	.word	0x40000800
 8007628:	48000400 	.word	0x48000400

0800762c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800763c:	d10c      	bne.n	8007658 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800763e:	4b12      	ldr	r3, [pc, #72]	; (8007688 <HAL_TIM_PWM_MspInit+0x5c>)
 8007640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007642:	4a11      	ldr	r2, [pc, #68]	; (8007688 <HAL_TIM_PWM_MspInit+0x5c>)
 8007644:	f043 0301 	orr.w	r3, r3, #1
 8007648:	6593      	str	r3, [r2, #88]	; 0x58
 800764a:	4b0f      	ldr	r3, [pc, #60]	; (8007688 <HAL_TIM_PWM_MspInit+0x5c>)
 800764c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8007656:	e010      	b.n	800767a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a0b      	ldr	r2, [pc, #44]	; (800768c <HAL_TIM_PWM_MspInit+0x60>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d10b      	bne.n	800767a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007662:	4b09      	ldr	r3, [pc, #36]	; (8007688 <HAL_TIM_PWM_MspInit+0x5c>)
 8007664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007666:	4a08      	ldr	r2, [pc, #32]	; (8007688 <HAL_TIM_PWM_MspInit+0x5c>)
 8007668:	f043 0302 	orr.w	r3, r3, #2
 800766c:	6593      	str	r3, [r2, #88]	; 0x58
 800766e:	4b06      	ldr	r3, [pc, #24]	; (8007688 <HAL_TIM_PWM_MspInit+0x5c>)
 8007670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	60bb      	str	r3, [r7, #8]
 8007678:	68bb      	ldr	r3, [r7, #8]
}
 800767a:	bf00      	nop
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	40021000 	.word	0x40021000
 800768c:	40000400 	.word	0x40000400

08007690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b08a      	sub	sp, #40	; 0x28
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007698:	f107 0314 	add.w	r3, r7, #20
 800769c:	2200      	movs	r2, #0
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	605a      	str	r2, [r3, #4]
 80076a2:	609a      	str	r2, [r3, #8]
 80076a4:	60da      	str	r2, [r3, #12]
 80076a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b0:	d11c      	bne.n	80076ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076b2:	4b21      	ldr	r3, [pc, #132]	; (8007738 <HAL_TIM_MspPostInit+0xa8>)
 80076b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b6:	4a20      	ldr	r2, [pc, #128]	; (8007738 <HAL_TIM_MspPostInit+0xa8>)
 80076b8:	f043 0302 	orr.w	r3, r3, #2
 80076bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076be:	4b1e      	ldr	r3, [pc, #120]	; (8007738 <HAL_TIM_MspPostInit+0xa8>)
 80076c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	613b      	str	r3, [r7, #16]
 80076c8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = MotA_PWM_Pin;
 80076ca:	2308      	movs	r3, #8
 80076cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076ce:	2302      	movs	r3, #2
 80076d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076d6:	2300      	movs	r3, #0
 80076d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80076da:	2301      	movs	r3, #1
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MotA_PWM_GPIO_Port, &GPIO_InitStruct);
 80076de:	f107 0314 	add.w	r3, r7, #20
 80076e2:	4619      	mov	r1, r3
 80076e4:	4815      	ldr	r0, [pc, #84]	; (800773c <HAL_TIM_MspPostInit+0xac>)
 80076e6:	f7f9 fe43 	bl	8001370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80076ea:	e021      	b.n	8007730 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a13      	ldr	r2, [pc, #76]	; (8007740 <HAL_TIM_MspPostInit+0xb0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d11c      	bne.n	8007730 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076f6:	4b10      	ldr	r3, [pc, #64]	; (8007738 <HAL_TIM_MspPostInit+0xa8>)
 80076f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076fa:	4a0f      	ldr	r2, [pc, #60]	; (8007738 <HAL_TIM_MspPostInit+0xa8>)
 80076fc:	f043 0301 	orr.w	r3, r3, #1
 8007700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007702:	4b0d      	ldr	r3, [pc, #52]	; (8007738 <HAL_TIM_MspPostInit+0xa8>)
 8007704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MotB_PWM_Pin;
 800770e:	2380      	movs	r3, #128	; 0x80
 8007710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007712:	2302      	movs	r3, #2
 8007714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007716:	2300      	movs	r3, #0
 8007718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800771a:	2300      	movs	r3, #0
 800771c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800771e:	2302      	movs	r3, #2
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MotB_PWM_GPIO_Port, &GPIO_InitStruct);
 8007722:	f107 0314 	add.w	r3, r7, #20
 8007726:	4619      	mov	r1, r3
 8007728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800772c:	f7f9 fe20 	bl	8001370 <HAL_GPIO_Init>
}
 8007730:	bf00      	nop
 8007732:	3728      	adds	r7, #40	; 0x28
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	40021000 	.word	0x40021000
 800773c:	48000400 	.word	0x48000400
 8007740:	40000400 	.word	0x40000400

08007744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08a      	sub	sp, #40	; 0x28
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800774c:	f107 0314 	add.w	r3, r7, #20
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	605a      	str	r2, [r3, #4]
 8007756:	609a      	str	r2, [r3, #8]
 8007758:	60da      	str	r2, [r3, #12]
 800775a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a1b      	ldr	r2, [pc, #108]	; (80077d0 <HAL_UART_MspInit+0x8c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d130      	bne.n	80077c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007766:	4b1b      	ldr	r3, [pc, #108]	; (80077d4 <HAL_UART_MspInit+0x90>)
 8007768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800776a:	4a1a      	ldr	r2, [pc, #104]	; (80077d4 <HAL_UART_MspInit+0x90>)
 800776c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007770:	6593      	str	r3, [r2, #88]	; 0x58
 8007772:	4b18      	ldr	r3, [pc, #96]	; (80077d4 <HAL_UART_MspInit+0x90>)
 8007774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800777a:	613b      	str	r3, [r7, #16]
 800777c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800777e:	4b15      	ldr	r3, [pc, #84]	; (80077d4 <HAL_UART_MspInit+0x90>)
 8007780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007782:	4a14      	ldr	r2, [pc, #80]	; (80077d4 <HAL_UART_MspInit+0x90>)
 8007784:	f043 0301 	orr.w	r3, r3, #1
 8007788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800778a:	4b12      	ldr	r3, [pc, #72]	; (80077d4 <HAL_UART_MspInit+0x90>)
 800778c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007796:	230c      	movs	r3, #12
 8007798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800779a:	2302      	movs	r3, #2
 800779c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077a2:	2303      	movs	r3, #3
 80077a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80077a6:	2307      	movs	r3, #7
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077aa:	f107 0314 	add.w	r3, r7, #20
 80077ae:	4619      	mov	r1, r3
 80077b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80077b4:	f7f9 fddc 	bl	8001370 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80077b8:	2200      	movs	r2, #0
 80077ba:	2100      	movs	r1, #0
 80077bc:	2026      	movs	r0, #38	; 0x26
 80077be:	f7f9 fd60 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80077c2:	2026      	movs	r0, #38	; 0x26
 80077c4:	f7f9 fd79 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80077c8:	bf00      	nop
 80077ca:	3728      	adds	r7, #40	; 0x28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	40004400 	.word	0x40004400
 80077d4:	40021000 	.word	0x40021000

080077d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80077d8:	b480      	push	{r7}
 80077da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80077dc:	bf00      	nop
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80077e6:	b480      	push	{r7}
 80077e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80077ea:	e7fe      	b.n	80077ea <HardFault_Handler+0x4>

080077ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80077f0:	e7fe      	b.n	80077f0 <MemManage_Handler+0x4>

080077f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80077f2:	b480      	push	{r7}
 80077f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80077f6:	e7fe      	b.n	80077f6 <BusFault_Handler+0x4>

080077f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077f8:	b480      	push	{r7}
 80077fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80077fc:	e7fe      	b.n	80077fc <UsageFault_Handler+0x4>

080077fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80077fe:	b480      	push	{r7}
 8007800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007802:	bf00      	nop
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007810:	bf00      	nop
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800781a:	b480      	push	{r7}
 800781c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800781e:	bf00      	nop
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800782c:	f7f9 fc30 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007830:	bf00      	nop
 8007832:	bd80      	pop	{r7, pc}

08007834 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007838:	4802      	ldr	r0, [pc, #8]	; (8007844 <TIM4_IRQHandler+0x10>)
 800783a:	f7fb fc2f 	bl	800309c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800783e:	bf00      	nop
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	20000a84 	.word	0x20000a84

08007848 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800784c:	4802      	ldr	r0, [pc, #8]	; (8007858 <USART2_IRQHandler+0x10>)
 800784e:	f7fc fc23 	bl	8004098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007852:	bf00      	nop
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	20000ebc 	.word	0x20000ebc

0800785c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007860:	4b17      	ldr	r3, [pc, #92]	; (80078c0 <SystemInit+0x64>)
 8007862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007866:	4a16      	ldr	r2, [pc, #88]	; (80078c0 <SystemInit+0x64>)
 8007868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800786c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007870:	4b14      	ldr	r3, [pc, #80]	; (80078c4 <SystemInit+0x68>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a13      	ldr	r2, [pc, #76]	; (80078c4 <SystemInit+0x68>)
 8007876:	f043 0301 	orr.w	r3, r3, #1
 800787a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800787c:	4b11      	ldr	r3, [pc, #68]	; (80078c4 <SystemInit+0x68>)
 800787e:	2200      	movs	r2, #0
 8007880:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007882:	4b10      	ldr	r3, [pc, #64]	; (80078c4 <SystemInit+0x68>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a0f      	ldr	r2, [pc, #60]	; (80078c4 <SystemInit+0x68>)
 8007888:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800788c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007890:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8007892:	4b0c      	ldr	r3, [pc, #48]	; (80078c4 <SystemInit+0x68>)
 8007894:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007898:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800789a:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <SystemInit+0x68>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a09      	ldr	r2, [pc, #36]	; (80078c4 <SystemInit+0x68>)
 80078a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80078a6:	4b07      	ldr	r3, [pc, #28]	; (80078c4 <SystemInit+0x68>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80078ac:	4b04      	ldr	r3, [pc, #16]	; (80078c0 <SystemInit+0x64>)
 80078ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80078b2:	609a      	str	r2, [r3, #8]
#endif
}
 80078b4:	bf00      	nop
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	e000ed00 	.word	0xe000ed00
 80078c4:	40021000 	.word	0x40021000

080078c8 <constrainAngle>:
#include "utils.h"

double constrainAngle(double x){
 80078c8:	b590      	push	{r4, r7, lr}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	ed87 0b00 	vstr	d0, [r7]
    x = fmod(x + PI,2*PI);
 80078d2:	a321      	add	r3, pc, #132	; (adr r3, 8007958 <constrainAngle+0x90>)
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078dc:	f7f8 fcd6 	bl	800028c <__adddf3>
 80078e0:	4603      	mov	r3, r0
 80078e2:	460c      	mov	r4, r1
 80078e4:	ec44 3b17 	vmov	d7, r3, r4
 80078e8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8007950 <constrainAngle+0x88>
 80078ec:	eeb0 0a47 	vmov.f32	s0, s14
 80078f0:	eef0 0a67 	vmov.f32	s1, s15
 80078f4:	f004 fe12 	bl	800c51c <fmod>
 80078f8:	ed87 0b00 	vstr	d0, [r7]
    if (x < 0)
 80078fc:	f04f 0200 	mov.w	r2, #0
 8007900:	f04f 0300 	mov.w	r3, #0
 8007904:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007908:	f7f9 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00a      	beq.n	8007928 <constrainAngle+0x60>
        x += 2*PI;
 8007912:	a30f      	add	r3, pc, #60	; (adr r3, 8007950 <constrainAngle+0x88>)
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800791c:	f7f8 fcb6 	bl	800028c <__adddf3>
 8007920:	4603      	mov	r3, r0
 8007922:	460c      	mov	r4, r1
 8007924:	e9c7 3400 	strd	r3, r4, [r7]
    return x - PI;
 8007928:	a30b      	add	r3, pc, #44	; (adr r3, 8007958 <constrainAngle+0x90>)
 800792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007932:	f7f8 fca9 	bl	8000288 <__aeabi_dsub>
 8007936:	4603      	mov	r3, r0
 8007938:	460c      	mov	r4, r1
 800793a:	ec44 3b17 	vmov	d7, r3, r4
}
 800793e:	eeb0 0a47 	vmov.f32	s0, s14
 8007942:	eef0 0a67 	vmov.f32	s1, s15
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	bd90      	pop	{r4, r7, pc}
 800794c:	f3af 8000 	nop.w
 8007950:	54442d18 	.word	0x54442d18
 8007954:	401921fb 	.word	0x401921fb
 8007958:	54442d18 	.word	0x54442d18
 800795c:	400921fb 	.word	0x400921fb

08007960 <__libc_init_array>:
 8007960:	b570      	push	{r4, r5, r6, lr}
 8007962:	4e0d      	ldr	r6, [pc, #52]	; (8007998 <__libc_init_array+0x38>)
 8007964:	4c0d      	ldr	r4, [pc, #52]	; (800799c <__libc_init_array+0x3c>)
 8007966:	1ba4      	subs	r4, r4, r6
 8007968:	10a4      	asrs	r4, r4, #2
 800796a:	2500      	movs	r5, #0
 800796c:	42a5      	cmp	r5, r4
 800796e:	d109      	bne.n	8007984 <__libc_init_array+0x24>
 8007970:	4e0b      	ldr	r6, [pc, #44]	; (80079a0 <__libc_init_array+0x40>)
 8007972:	4c0c      	ldr	r4, [pc, #48]	; (80079a4 <__libc_init_array+0x44>)
 8007974:	f007 f9c4 	bl	800ed00 <_init>
 8007978:	1ba4      	subs	r4, r4, r6
 800797a:	10a4      	asrs	r4, r4, #2
 800797c:	2500      	movs	r5, #0
 800797e:	42a5      	cmp	r5, r4
 8007980:	d105      	bne.n	800798e <__libc_init_array+0x2e>
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007988:	4798      	blx	r3
 800798a:	3501      	adds	r5, #1
 800798c:	e7ee      	b.n	800796c <__libc_init_array+0xc>
 800798e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007992:	4798      	blx	r3
 8007994:	3501      	adds	r5, #1
 8007996:	e7f2      	b.n	800797e <__libc_init_array+0x1e>
 8007998:	0800f2d8 	.word	0x0800f2d8
 800799c:	0800f2d8 	.word	0x0800f2d8
 80079a0:	0800f2d8 	.word	0x0800f2d8
 80079a4:	0800f2e0 	.word	0x0800f2e0

080079a8 <malloc>:
 80079a8:	4b02      	ldr	r3, [pc, #8]	; (80079b4 <malloc+0xc>)
 80079aa:	4601      	mov	r1, r0
 80079ac:	6818      	ldr	r0, [r3, #0]
 80079ae:	f000 b803 	b.w	80079b8 <_malloc_r>
 80079b2:	bf00      	nop
 80079b4:	20000010 	.word	0x20000010

080079b8 <_malloc_r>:
 80079b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079bc:	f101 050b 	add.w	r5, r1, #11
 80079c0:	2d16      	cmp	r5, #22
 80079c2:	4606      	mov	r6, r0
 80079c4:	d906      	bls.n	80079d4 <_malloc_r+0x1c>
 80079c6:	f035 0507 	bics.w	r5, r5, #7
 80079ca:	d504      	bpl.n	80079d6 <_malloc_r+0x1e>
 80079cc:	230c      	movs	r3, #12
 80079ce:	6033      	str	r3, [r6, #0]
 80079d0:	2400      	movs	r4, #0
 80079d2:	e1a8      	b.n	8007d26 <_malloc_r+0x36e>
 80079d4:	2510      	movs	r5, #16
 80079d6:	428d      	cmp	r5, r1
 80079d8:	d3f8      	bcc.n	80079cc <_malloc_r+0x14>
 80079da:	4630      	mov	r0, r6
 80079dc:	f000 fa2a 	bl	8007e34 <__malloc_lock>
 80079e0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80079e4:	4fc0      	ldr	r7, [pc, #768]	; (8007ce8 <_malloc_r+0x330>)
 80079e6:	d238      	bcs.n	8007a5a <_malloc_r+0xa2>
 80079e8:	f105 0208 	add.w	r2, r5, #8
 80079ec:	443a      	add	r2, r7
 80079ee:	f1a2 0108 	sub.w	r1, r2, #8
 80079f2:	6854      	ldr	r4, [r2, #4]
 80079f4:	428c      	cmp	r4, r1
 80079f6:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 80079fa:	d102      	bne.n	8007a02 <_malloc_r+0x4a>
 80079fc:	68d4      	ldr	r4, [r2, #12]
 80079fe:	42a2      	cmp	r2, r4
 8007a00:	d010      	beq.n	8007a24 <_malloc_r+0x6c>
 8007a02:	6863      	ldr	r3, [r4, #4]
 8007a04:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007a08:	f023 0303 	bic.w	r3, r3, #3
 8007a0c:	60ca      	str	r2, [r1, #12]
 8007a0e:	4423      	add	r3, r4
 8007a10:	6091      	str	r1, [r2, #8]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	f042 0201 	orr.w	r2, r2, #1
 8007a18:	605a      	str	r2, [r3, #4]
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f000 fa10 	bl	8007e40 <__malloc_unlock>
 8007a20:	3408      	adds	r4, #8
 8007a22:	e180      	b.n	8007d26 <_malloc_r+0x36e>
 8007a24:	3302      	adds	r3, #2
 8007a26:	4ab1      	ldr	r2, [pc, #708]	; (8007cec <_malloc_r+0x334>)
 8007a28:	693c      	ldr	r4, [r7, #16]
 8007a2a:	4294      	cmp	r4, r2
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	d075      	beq.n	8007b1c <_malloc_r+0x164>
 8007a30:	6860      	ldr	r0, [r4, #4]
 8007a32:	f020 0c03 	bic.w	ip, r0, #3
 8007a36:	ebac 0005 	sub.w	r0, ip, r5
 8007a3a:	280f      	cmp	r0, #15
 8007a3c:	dd48      	ble.n	8007ad0 <_malloc_r+0x118>
 8007a3e:	1963      	adds	r3, r4, r5
 8007a40:	f045 0501 	orr.w	r5, r5, #1
 8007a44:	6065      	str	r5, [r4, #4]
 8007a46:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8007a4a:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8007a4e:	f040 0201 	orr.w	r2, r0, #1
 8007a52:	605a      	str	r2, [r3, #4]
 8007a54:	f844 000c 	str.w	r0, [r4, ip]
 8007a58:	e7df      	b.n	8007a1a <_malloc_r+0x62>
 8007a5a:	0a6b      	lsrs	r3, r5, #9
 8007a5c:	d02a      	beq.n	8007ab4 <_malloc_r+0xfc>
 8007a5e:	2b04      	cmp	r3, #4
 8007a60:	d812      	bhi.n	8007a88 <_malloc_r+0xd0>
 8007a62:	09ab      	lsrs	r3, r5, #6
 8007a64:	3338      	adds	r3, #56	; 0x38
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8007a6c:	f1a2 0c08 	sub.w	ip, r2, #8
 8007a70:	6854      	ldr	r4, [r2, #4]
 8007a72:	4564      	cmp	r4, ip
 8007a74:	d006      	beq.n	8007a84 <_malloc_r+0xcc>
 8007a76:	6862      	ldr	r2, [r4, #4]
 8007a78:	f022 0203 	bic.w	r2, r2, #3
 8007a7c:	1b50      	subs	r0, r2, r5
 8007a7e:	280f      	cmp	r0, #15
 8007a80:	dd1c      	ble.n	8007abc <_malloc_r+0x104>
 8007a82:	3b01      	subs	r3, #1
 8007a84:	3301      	adds	r3, #1
 8007a86:	e7ce      	b.n	8007a26 <_malloc_r+0x6e>
 8007a88:	2b14      	cmp	r3, #20
 8007a8a:	d801      	bhi.n	8007a90 <_malloc_r+0xd8>
 8007a8c:	335b      	adds	r3, #91	; 0x5b
 8007a8e:	e7ea      	b.n	8007a66 <_malloc_r+0xae>
 8007a90:	2b54      	cmp	r3, #84	; 0x54
 8007a92:	d802      	bhi.n	8007a9a <_malloc_r+0xe2>
 8007a94:	0b2b      	lsrs	r3, r5, #12
 8007a96:	336e      	adds	r3, #110	; 0x6e
 8007a98:	e7e5      	b.n	8007a66 <_malloc_r+0xae>
 8007a9a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007a9e:	d802      	bhi.n	8007aa6 <_malloc_r+0xee>
 8007aa0:	0beb      	lsrs	r3, r5, #15
 8007aa2:	3377      	adds	r3, #119	; 0x77
 8007aa4:	e7df      	b.n	8007a66 <_malloc_r+0xae>
 8007aa6:	f240 5254 	movw	r2, #1364	; 0x554
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d804      	bhi.n	8007ab8 <_malloc_r+0x100>
 8007aae:	0cab      	lsrs	r3, r5, #18
 8007ab0:	337c      	adds	r3, #124	; 0x7c
 8007ab2:	e7d8      	b.n	8007a66 <_malloc_r+0xae>
 8007ab4:	233f      	movs	r3, #63	; 0x3f
 8007ab6:	e7d6      	b.n	8007a66 <_malloc_r+0xae>
 8007ab8:	237e      	movs	r3, #126	; 0x7e
 8007aba:	e7d4      	b.n	8007a66 <_malloc_r+0xae>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	68e1      	ldr	r1, [r4, #12]
 8007ac0:	db04      	blt.n	8007acc <_malloc_r+0x114>
 8007ac2:	68a3      	ldr	r3, [r4, #8]
 8007ac4:	60d9      	str	r1, [r3, #12]
 8007ac6:	608b      	str	r3, [r1, #8]
 8007ac8:	18a3      	adds	r3, r4, r2
 8007aca:	e7a2      	b.n	8007a12 <_malloc_r+0x5a>
 8007acc:	460c      	mov	r4, r1
 8007ace:	e7d0      	b.n	8007a72 <_malloc_r+0xba>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8007ad6:	db07      	blt.n	8007ae8 <_malloc_r+0x130>
 8007ad8:	44a4      	add	ip, r4
 8007ada:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007ade:	f043 0301 	orr.w	r3, r3, #1
 8007ae2:	f8cc 3004 	str.w	r3, [ip, #4]
 8007ae6:	e798      	b.n	8007a1a <_malloc_r+0x62>
 8007ae8:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f080 8099 	bcs.w	8007c24 <_malloc_r+0x26c>
 8007af2:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8007af6:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8007afa:	2201      	movs	r2, #1
 8007afc:	f10c 0c01 	add.w	ip, ip, #1
 8007b00:	fa02 f20e 	lsl.w	r2, r2, lr
 8007b04:	4310      	orrs	r0, r2
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8007b0c:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8007b10:	3a08      	subs	r2, #8
 8007b12:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8007b16:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8007b1a:	60c4      	str	r4, [r0, #12]
 8007b1c:	2001      	movs	r0, #1
 8007b1e:	109a      	asrs	r2, r3, #2
 8007b20:	fa00 f202 	lsl.w	r2, r0, r2
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	4290      	cmp	r0, r2
 8007b28:	d326      	bcc.n	8007b78 <_malloc_r+0x1c0>
 8007b2a:	4210      	tst	r0, r2
 8007b2c:	d106      	bne.n	8007b3c <_malloc_r+0x184>
 8007b2e:	f023 0303 	bic.w	r3, r3, #3
 8007b32:	0052      	lsls	r2, r2, #1
 8007b34:	4210      	tst	r0, r2
 8007b36:	f103 0304 	add.w	r3, r3, #4
 8007b3a:	d0fa      	beq.n	8007b32 <_malloc_r+0x17a>
 8007b3c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8007b40:	46e1      	mov	r9, ip
 8007b42:	4698      	mov	r8, r3
 8007b44:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8007b48:	454c      	cmp	r4, r9
 8007b4a:	f040 80af 	bne.w	8007cac <_malloc_r+0x2f4>
 8007b4e:	f108 0801 	add.w	r8, r8, #1
 8007b52:	f018 0f03 	tst.w	r8, #3
 8007b56:	f109 0908 	add.w	r9, r9, #8
 8007b5a:	d1f3      	bne.n	8007b44 <_malloc_r+0x18c>
 8007b5c:	0798      	lsls	r0, r3, #30
 8007b5e:	f040 80e8 	bne.w	8007d32 <_malloc_r+0x37a>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	ea23 0302 	bic.w	r3, r3, r2
 8007b68:	607b      	str	r3, [r7, #4]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	0052      	lsls	r2, r2, #1
 8007b6e:	4290      	cmp	r0, r2
 8007b70:	d302      	bcc.n	8007b78 <_malloc_r+0x1c0>
 8007b72:	2a00      	cmp	r2, #0
 8007b74:	f040 80ec 	bne.w	8007d50 <_malloc_r+0x398>
 8007b78:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8007b7c:	f8da 4004 	ldr.w	r4, [sl, #4]
 8007b80:	f024 0203 	bic.w	r2, r4, #3
 8007b84:	42aa      	cmp	r2, r5
 8007b86:	d303      	bcc.n	8007b90 <_malloc_r+0x1d8>
 8007b88:	1b53      	subs	r3, r2, r5
 8007b8a:	2b0f      	cmp	r3, #15
 8007b8c:	f300 8140 	bgt.w	8007e10 <_malloc_r+0x458>
 8007b90:	4b57      	ldr	r3, [pc, #348]	; (8007cf0 <_malloc_r+0x338>)
 8007b92:	9200      	str	r2, [sp, #0]
 8007b94:	2008      	movs	r0, #8
 8007b96:	681c      	ldr	r4, [r3, #0]
 8007b98:	f002 fa60 	bl	800a05c <sysconf>
 8007b9c:	4b55      	ldr	r3, [pc, #340]	; (8007cf4 <_malloc_r+0x33c>)
 8007b9e:	9a00      	ldr	r2, [sp, #0]
 8007ba0:	6819      	ldr	r1, [r3, #0]
 8007ba2:	3410      	adds	r4, #16
 8007ba4:	3101      	adds	r1, #1
 8007ba6:	442c      	add	r4, r5
 8007ba8:	bf1f      	itttt	ne
 8007baa:	f104 34ff 	addne.w	r4, r4, #4294967295
 8007bae:	1824      	addne	r4, r4, r0
 8007bb0:	4241      	negne	r1, r0
 8007bb2:	400c      	andne	r4, r1
 8007bb4:	4680      	mov	r8, r0
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	4630      	mov	r0, r6
 8007bba:	e9cd 2300 	strd	r2, r3, [sp]
 8007bbe:	f000 f945 	bl	8007e4c <_sbrk_r>
 8007bc2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007bc6:	4683      	mov	fp, r0
 8007bc8:	f000 80fb 	beq.w	8007dc2 <_malloc_r+0x40a>
 8007bcc:	9a00      	ldr	r2, [sp, #0]
 8007bce:	9b01      	ldr	r3, [sp, #4]
 8007bd0:	eb0a 0102 	add.w	r1, sl, r2
 8007bd4:	4281      	cmp	r1, r0
 8007bd6:	d902      	bls.n	8007bde <_malloc_r+0x226>
 8007bd8:	45ba      	cmp	sl, r7
 8007bda:	f040 80f2 	bne.w	8007dc2 <_malloc_r+0x40a>
 8007bde:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8007d00 <_malloc_r+0x348>
 8007be2:	f8d9 0000 	ldr.w	r0, [r9]
 8007be6:	4559      	cmp	r1, fp
 8007be8:	eb00 0e04 	add.w	lr, r0, r4
 8007bec:	f8c9 e000 	str.w	lr, [r9]
 8007bf0:	f108 3cff 	add.w	ip, r8, #4294967295
 8007bf4:	f040 80ae 	bne.w	8007d54 <_malloc_r+0x39c>
 8007bf8:	ea11 0f0c 	tst.w	r1, ip
 8007bfc:	f040 80aa 	bne.w	8007d54 <_malloc_r+0x39c>
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4414      	add	r4, r2
 8007c04:	f044 0401 	orr.w	r4, r4, #1
 8007c08:	605c      	str	r4, [r3, #4]
 8007c0a:	4a3b      	ldr	r2, [pc, #236]	; (8007cf8 <_malloc_r+0x340>)
 8007c0c:	f8d9 3000 	ldr.w	r3, [r9]
 8007c10:	6811      	ldr	r1, [r2, #0]
 8007c12:	428b      	cmp	r3, r1
 8007c14:	bf88      	it	hi
 8007c16:	6013      	strhi	r3, [r2, #0]
 8007c18:	4a38      	ldr	r2, [pc, #224]	; (8007cfc <_malloc_r+0x344>)
 8007c1a:	6811      	ldr	r1, [r2, #0]
 8007c1c:	428b      	cmp	r3, r1
 8007c1e:	bf88      	it	hi
 8007c20:	6013      	strhi	r3, [r2, #0]
 8007c22:	e0ce      	b.n	8007dc2 <_malloc_r+0x40a>
 8007c24:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8007c28:	2a04      	cmp	r2, #4
 8007c2a:	d818      	bhi.n	8007c5e <_malloc_r+0x2a6>
 8007c2c:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8007c30:	3238      	adds	r2, #56	; 0x38
 8007c32:	f102 0e01 	add.w	lr, r2, #1
 8007c36:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8007c3a:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8007c3e:	45f0      	cmp	r8, lr
 8007c40:	d12b      	bne.n	8007c9a <_malloc_r+0x2e2>
 8007c42:	1092      	asrs	r2, r2, #2
 8007c44:	f04f 0c01 	mov.w	ip, #1
 8007c48:	fa0c f202 	lsl.w	r2, ip, r2
 8007c4c:	4310      	orrs	r0, r2
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8007c54:	f8c8 4008 	str.w	r4, [r8, #8]
 8007c58:	f8ce 400c 	str.w	r4, [lr, #12]
 8007c5c:	e75e      	b.n	8007b1c <_malloc_r+0x164>
 8007c5e:	2a14      	cmp	r2, #20
 8007c60:	d801      	bhi.n	8007c66 <_malloc_r+0x2ae>
 8007c62:	325b      	adds	r2, #91	; 0x5b
 8007c64:	e7e5      	b.n	8007c32 <_malloc_r+0x27a>
 8007c66:	2a54      	cmp	r2, #84	; 0x54
 8007c68:	d803      	bhi.n	8007c72 <_malloc_r+0x2ba>
 8007c6a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8007c6e:	326e      	adds	r2, #110	; 0x6e
 8007c70:	e7df      	b.n	8007c32 <_malloc_r+0x27a>
 8007c72:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007c76:	d803      	bhi.n	8007c80 <_malloc_r+0x2c8>
 8007c78:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8007c7c:	3277      	adds	r2, #119	; 0x77
 8007c7e:	e7d8      	b.n	8007c32 <_malloc_r+0x27a>
 8007c80:	f240 5e54 	movw	lr, #1364	; 0x554
 8007c84:	4572      	cmp	r2, lr
 8007c86:	bf9a      	itte	ls
 8007c88:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8007c8c:	327c      	addls	r2, #124	; 0x7c
 8007c8e:	227e      	movhi	r2, #126	; 0x7e
 8007c90:	e7cf      	b.n	8007c32 <_malloc_r+0x27a>
 8007c92:	f8de e008 	ldr.w	lr, [lr, #8]
 8007c96:	45f0      	cmp	r8, lr
 8007c98:	d005      	beq.n	8007ca6 <_malloc_r+0x2ee>
 8007c9a:	f8de 2004 	ldr.w	r2, [lr, #4]
 8007c9e:	f022 0203 	bic.w	r2, r2, #3
 8007ca2:	4562      	cmp	r2, ip
 8007ca4:	d8f5      	bhi.n	8007c92 <_malloc_r+0x2da>
 8007ca6:	f8de 800c 	ldr.w	r8, [lr, #12]
 8007caa:	e7d1      	b.n	8007c50 <_malloc_r+0x298>
 8007cac:	6860      	ldr	r0, [r4, #4]
 8007cae:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8007cb2:	f020 0003 	bic.w	r0, r0, #3
 8007cb6:	eba0 0a05 	sub.w	sl, r0, r5
 8007cba:	f1ba 0f0f 	cmp.w	sl, #15
 8007cbe:	dd21      	ble.n	8007d04 <_malloc_r+0x34c>
 8007cc0:	68a2      	ldr	r2, [r4, #8]
 8007cc2:	1963      	adds	r3, r4, r5
 8007cc4:	f045 0501 	orr.w	r5, r5, #1
 8007cc8:	6065      	str	r5, [r4, #4]
 8007cca:	f8c2 e00c 	str.w	lr, [r2, #12]
 8007cce:	f8ce 2008 	str.w	r2, [lr, #8]
 8007cd2:	f04a 0201 	orr.w	r2, sl, #1
 8007cd6:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8007cda:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8007cde:	605a      	str	r2, [r3, #4]
 8007ce0:	f844 a000 	str.w	sl, [r4, r0]
 8007ce4:	e699      	b.n	8007a1a <_malloc_r+0x62>
 8007ce6:	bf00      	nop
 8007ce8:	20000440 	.word	0x20000440
 8007cec:	20000448 	.word	0x20000448
 8007cf0:	20000a14 	.word	0x20000a14
 8007cf4:	20000848 	.word	0x20000848
 8007cf8:	20000a0c 	.word	0x20000a0c
 8007cfc:	20000a10 	.word	0x20000a10
 8007d00:	200009e4 	.word	0x200009e4
 8007d04:	f1ba 0f00 	cmp.w	sl, #0
 8007d08:	db11      	blt.n	8007d2e <_malloc_r+0x376>
 8007d0a:	4420      	add	r0, r4
 8007d0c:	6843      	ldr	r3, [r0, #4]
 8007d0e:	f043 0301 	orr.w	r3, r3, #1
 8007d12:	6043      	str	r3, [r0, #4]
 8007d14:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f8c3 e00c 	str.w	lr, [r3, #12]
 8007d1e:	f8ce 3008 	str.w	r3, [lr, #8]
 8007d22:	f000 f88d 	bl	8007e40 <__malloc_unlock>
 8007d26:	4620      	mov	r0, r4
 8007d28:	b003      	add	sp, #12
 8007d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2e:	4674      	mov	r4, lr
 8007d30:	e70a      	b.n	8007b48 <_malloc_r+0x190>
 8007d32:	f1ac 0008 	sub.w	r0, ip, #8
 8007d36:	f8dc c000 	ldr.w	ip, [ip]
 8007d3a:	4584      	cmp	ip, r0
 8007d3c:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d40:	f43f af0c 	beq.w	8007b5c <_malloc_r+0x1a4>
 8007d44:	e711      	b.n	8007b6a <_malloc_r+0x1b2>
 8007d46:	3304      	adds	r3, #4
 8007d48:	0052      	lsls	r2, r2, #1
 8007d4a:	4210      	tst	r0, r2
 8007d4c:	d0fb      	beq.n	8007d46 <_malloc_r+0x38e>
 8007d4e:	e6f5      	b.n	8007b3c <_malloc_r+0x184>
 8007d50:	4643      	mov	r3, r8
 8007d52:	e7fa      	b.n	8007d4a <_malloc_r+0x392>
 8007d54:	6818      	ldr	r0, [r3, #0]
 8007d56:	9200      	str	r2, [sp, #0]
 8007d58:	3001      	adds	r0, #1
 8007d5a:	bf1b      	ittet	ne
 8007d5c:	ebab 0101 	subne.w	r1, fp, r1
 8007d60:	4471      	addne	r1, lr
 8007d62:	f8c3 b000 	streq.w	fp, [r3]
 8007d66:	f8c9 1000 	strne.w	r1, [r9]
 8007d6a:	f01b 0307 	ands.w	r3, fp, #7
 8007d6e:	bf1c      	itt	ne
 8007d70:	f1c3 0308 	rsbne	r3, r3, #8
 8007d74:	449b      	addne	fp, r3
 8007d76:	445c      	add	r4, fp
 8007d78:	4498      	add	r8, r3
 8007d7a:	ea04 030c 	and.w	r3, r4, ip
 8007d7e:	eba8 0803 	sub.w	r8, r8, r3
 8007d82:	4641      	mov	r1, r8
 8007d84:	4630      	mov	r0, r6
 8007d86:	f000 f861 	bl	8007e4c <_sbrk_r>
 8007d8a:	1c43      	adds	r3, r0, #1
 8007d8c:	bf04      	itt	eq
 8007d8e:	4658      	moveq	r0, fp
 8007d90:	f04f 0800 	moveq.w	r8, #0
 8007d94:	f8d9 3000 	ldr.w	r3, [r9]
 8007d98:	f8c7 b008 	str.w	fp, [r7, #8]
 8007d9c:	eba0 000b 	sub.w	r0, r0, fp
 8007da0:	4440      	add	r0, r8
 8007da2:	4443      	add	r3, r8
 8007da4:	f040 0001 	orr.w	r0, r0, #1
 8007da8:	45ba      	cmp	sl, r7
 8007daa:	9a00      	ldr	r2, [sp, #0]
 8007dac:	f8c9 3000 	str.w	r3, [r9]
 8007db0:	f8cb 0004 	str.w	r0, [fp, #4]
 8007db4:	f43f af29 	beq.w	8007c0a <_malloc_r+0x252>
 8007db8:	2a0f      	cmp	r2, #15
 8007dba:	d810      	bhi.n	8007dde <_malloc_r+0x426>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	f8cb 3004 	str.w	r3, [fp, #4]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	f022 0203 	bic.w	r2, r2, #3
 8007dca:	42aa      	cmp	r2, r5
 8007dcc:	eba2 0305 	sub.w	r3, r2, r5
 8007dd0:	d301      	bcc.n	8007dd6 <_malloc_r+0x41e>
 8007dd2:	2b0f      	cmp	r3, #15
 8007dd4:	dc1c      	bgt.n	8007e10 <_malloc_r+0x458>
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	f000 f832 	bl	8007e40 <__malloc_unlock>
 8007ddc:	e5f8      	b.n	80079d0 <_malloc_r+0x18>
 8007dde:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007de2:	f1a2 040c 	sub.w	r4, r2, #12
 8007de6:	f024 0407 	bic.w	r4, r4, #7
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	4323      	orrs	r3, r4
 8007df0:	f8ca 3004 	str.w	r3, [sl, #4]
 8007df4:	2205      	movs	r2, #5
 8007df6:	eb0a 0304 	add.w	r3, sl, r4
 8007dfa:	2c0f      	cmp	r4, #15
 8007dfc:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8007e00:	f67f af03 	bls.w	8007c0a <_malloc_r+0x252>
 8007e04:	f10a 0108 	add.w	r1, sl, #8
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f002 ffe7 	bl	800addc <_free_r>
 8007e0e:	e6fc      	b.n	8007c0a <_malloc_r+0x252>
 8007e10:	68bc      	ldr	r4, [r7, #8]
 8007e12:	f045 0201 	orr.w	r2, r5, #1
 8007e16:	4425      	add	r5, r4
 8007e18:	f043 0301 	orr.w	r3, r3, #1
 8007e1c:	6062      	str	r2, [r4, #4]
 8007e1e:	60bd      	str	r5, [r7, #8]
 8007e20:	606b      	str	r3, [r5, #4]
 8007e22:	e5fa      	b.n	8007a1a <_malloc_r+0x62>

08007e24 <memset>:
 8007e24:	4402      	add	r2, r0
 8007e26:	4603      	mov	r3, r0
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d100      	bne.n	8007e2e <memset+0xa>
 8007e2c:	4770      	bx	lr
 8007e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e32:	e7f9      	b.n	8007e28 <memset+0x4>

08007e34 <__malloc_lock>:
 8007e34:	4801      	ldr	r0, [pc, #4]	; (8007e3c <__malloc_lock+0x8>)
 8007e36:	f003 bbc7 	b.w	800b5c8 <__retarget_lock_acquire_recursive>
 8007e3a:	bf00      	nop
 8007e3c:	20000f84 	.word	0x20000f84

08007e40 <__malloc_unlock>:
 8007e40:	4801      	ldr	r0, [pc, #4]	; (8007e48 <__malloc_unlock+0x8>)
 8007e42:	f003 bbc2 	b.w	800b5ca <__retarget_lock_release_recursive>
 8007e46:	bf00      	nop
 8007e48:	20000f84 	.word	0x20000f84

08007e4c <_sbrk_r>:
 8007e4c:	b538      	push	{r3, r4, r5, lr}
 8007e4e:	4c06      	ldr	r4, [pc, #24]	; (8007e68 <_sbrk_r+0x1c>)
 8007e50:	2300      	movs	r3, #0
 8007e52:	4605      	mov	r5, r0
 8007e54:	4608      	mov	r0, r1
 8007e56:	6023      	str	r3, [r4, #0]
 8007e58:	f006 ff44 	bl	800ece4 <_sbrk>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d102      	bne.n	8007e66 <_sbrk_r+0x1a>
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	b103      	cbz	r3, 8007e66 <_sbrk_r+0x1a>
 8007e64:	602b      	str	r3, [r5, #0]
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	20000f8c 	.word	0x20000f8c

08007e6c <sprintf>:
 8007e6c:	b40e      	push	{r1, r2, r3}
 8007e6e:	b500      	push	{lr}
 8007e70:	b09c      	sub	sp, #112	; 0x70
 8007e72:	ab1d      	add	r3, sp, #116	; 0x74
 8007e74:	9002      	str	r0, [sp, #8]
 8007e76:	9006      	str	r0, [sp, #24]
 8007e78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e7c:	4809      	ldr	r0, [pc, #36]	; (8007ea4 <sprintf+0x38>)
 8007e7e:	9107      	str	r1, [sp, #28]
 8007e80:	9104      	str	r1, [sp, #16]
 8007e82:	4909      	ldr	r1, [pc, #36]	; (8007ea8 <sprintf+0x3c>)
 8007e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e88:	9105      	str	r1, [sp, #20]
 8007e8a:	6800      	ldr	r0, [r0, #0]
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	a902      	add	r1, sp, #8
 8007e90:	f000 fec6 	bl	8008c20 <_svfprintf_r>
 8007e94:	9b02      	ldr	r3, [sp, #8]
 8007e96:	2200      	movs	r2, #0
 8007e98:	701a      	strb	r2, [r3, #0]
 8007e9a:	b01c      	add	sp, #112	; 0x70
 8007e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea0:	b003      	add	sp, #12
 8007ea2:	4770      	bx	lr
 8007ea4:	20000010 	.word	0x20000010
 8007ea8:	ffff0208 	.word	0xffff0208

08007eac <sulp>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	4604      	mov	r4, r0
 8007eb0:	460d      	mov	r5, r1
 8007eb2:	ec45 4b10 	vmov	d0, r4, r5
 8007eb6:	4616      	mov	r6, r2
 8007eb8:	f003 fe46 	bl	800bb48 <__ulp>
 8007ebc:	ec51 0b10 	vmov	r0, r1, d0
 8007ec0:	b17e      	cbz	r6, 8007ee2 <sulp+0x36>
 8007ec2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007ec6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	dd09      	ble.n	8007ee2 <sulp+0x36>
 8007ece:	051b      	lsls	r3, r3, #20
 8007ed0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007ed4:	2400      	movs	r4, #0
 8007ed6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007eda:	4622      	mov	r2, r4
 8007edc:	462b      	mov	r3, r5
 8007ede:	f7f8 fb8b 	bl	80005f8 <__aeabi_dmul>
 8007ee2:	bd70      	pop	{r4, r5, r6, pc}
 8007ee4:	0000      	movs	r0, r0
	...

08007ee8 <_strtod_l>:
 8007ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	461f      	mov	r7, r3
 8007eee:	b0a1      	sub	sp, #132	; 0x84
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	4681      	mov	r9, r0
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	460e      	mov	r6, r1
 8007ef8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007efa:	931c      	str	r3, [sp, #112]	; 0x70
 8007efc:	f003 fb53 	bl	800b5a6 <__localeconv_l>
 8007f00:	4680      	mov	r8, r0
 8007f02:	6800      	ldr	r0, [r0, #0]
 8007f04:	f7f8 f964 	bl	80001d0 <strlen>
 8007f08:	f04f 0a00 	mov.w	sl, #0
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	f04f 0b00 	mov.w	fp, #0
 8007f12:	961b      	str	r6, [sp, #108]	; 0x6c
 8007f14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f16:	781a      	ldrb	r2, [r3, #0]
 8007f18:	2a0d      	cmp	r2, #13
 8007f1a:	d832      	bhi.n	8007f82 <_strtod_l+0x9a>
 8007f1c:	2a09      	cmp	r2, #9
 8007f1e:	d236      	bcs.n	8007f8e <_strtod_l+0xa6>
 8007f20:	2a00      	cmp	r2, #0
 8007f22:	d03e      	beq.n	8007fa2 <_strtod_l+0xba>
 8007f24:	2300      	movs	r3, #0
 8007f26:	930d      	str	r3, [sp, #52]	; 0x34
 8007f28:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007f2a:	782b      	ldrb	r3, [r5, #0]
 8007f2c:	2b30      	cmp	r3, #48	; 0x30
 8007f2e:	f040 80ac 	bne.w	800808a <_strtod_l+0x1a2>
 8007f32:	786b      	ldrb	r3, [r5, #1]
 8007f34:	2b58      	cmp	r3, #88	; 0x58
 8007f36:	d001      	beq.n	8007f3c <_strtod_l+0x54>
 8007f38:	2b78      	cmp	r3, #120	; 0x78
 8007f3a:	d167      	bne.n	800800c <_strtod_l+0x124>
 8007f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	ab1c      	add	r3, sp, #112	; 0x70
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	9702      	str	r7, [sp, #8]
 8007f46:	ab1d      	add	r3, sp, #116	; 0x74
 8007f48:	4a88      	ldr	r2, [pc, #544]	; (800816c <_strtod_l+0x284>)
 8007f4a:	a91b      	add	r1, sp, #108	; 0x6c
 8007f4c:	4648      	mov	r0, r9
 8007f4e:	f003 f850 	bl	800aff2 <__gethex>
 8007f52:	f010 0407 	ands.w	r4, r0, #7
 8007f56:	4606      	mov	r6, r0
 8007f58:	d005      	beq.n	8007f66 <_strtod_l+0x7e>
 8007f5a:	2c06      	cmp	r4, #6
 8007f5c:	d12b      	bne.n	8007fb6 <_strtod_l+0xce>
 8007f5e:	3501      	adds	r5, #1
 8007f60:	2300      	movs	r3, #0
 8007f62:	951b      	str	r5, [sp, #108]	; 0x6c
 8007f64:	930d      	str	r3, [sp, #52]	; 0x34
 8007f66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f040 859a 	bne.w	8008aa2 <_strtod_l+0xbba>
 8007f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f70:	b1e3      	cbz	r3, 8007fac <_strtod_l+0xc4>
 8007f72:	4652      	mov	r2, sl
 8007f74:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f78:	ec43 2b10 	vmov	d0, r2, r3
 8007f7c:	b021      	add	sp, #132	; 0x84
 8007f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f82:	2a2b      	cmp	r2, #43	; 0x2b
 8007f84:	d015      	beq.n	8007fb2 <_strtod_l+0xca>
 8007f86:	2a2d      	cmp	r2, #45	; 0x2d
 8007f88:	d004      	beq.n	8007f94 <_strtod_l+0xac>
 8007f8a:	2a20      	cmp	r2, #32
 8007f8c:	d1ca      	bne.n	8007f24 <_strtod_l+0x3c>
 8007f8e:	3301      	adds	r3, #1
 8007f90:	931b      	str	r3, [sp, #108]	; 0x6c
 8007f92:	e7bf      	b.n	8007f14 <_strtod_l+0x2c>
 8007f94:	2201      	movs	r2, #1
 8007f96:	920d      	str	r2, [sp, #52]	; 0x34
 8007f98:	1c5a      	adds	r2, r3, #1
 8007f9a:	921b      	str	r2, [sp, #108]	; 0x6c
 8007f9c:	785b      	ldrb	r3, [r3, #1]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1c2      	bne.n	8007f28 <_strtod_l+0x40>
 8007fa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fa4:	961b      	str	r6, [sp, #108]	; 0x6c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f040 8579 	bne.w	8008a9e <_strtod_l+0xbb6>
 8007fac:	4652      	mov	r2, sl
 8007fae:	465b      	mov	r3, fp
 8007fb0:	e7e2      	b.n	8007f78 <_strtod_l+0x90>
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	e7ef      	b.n	8007f96 <_strtod_l+0xae>
 8007fb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007fb8:	b13a      	cbz	r2, 8007fca <_strtod_l+0xe2>
 8007fba:	2135      	movs	r1, #53	; 0x35
 8007fbc:	a81e      	add	r0, sp, #120	; 0x78
 8007fbe:	f003 febb 	bl	800bd38 <__copybits>
 8007fc2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007fc4:	4648      	mov	r0, r9
 8007fc6:	f003 fb43 	bl	800b650 <_Bfree>
 8007fca:	3c01      	subs	r4, #1
 8007fcc:	2c04      	cmp	r4, #4
 8007fce:	d806      	bhi.n	8007fde <_strtod_l+0xf6>
 8007fd0:	e8df f004 	tbb	[pc, r4]
 8007fd4:	1714030a 	.word	0x1714030a
 8007fd8:	0a          	.byte	0x0a
 8007fd9:	00          	.byte	0x00
 8007fda:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8007fde:	0730      	lsls	r0, r6, #28
 8007fe0:	d5c1      	bpl.n	8007f66 <_strtod_l+0x7e>
 8007fe2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007fe6:	e7be      	b.n	8007f66 <_strtod_l+0x7e>
 8007fe8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8007fec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007fee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007ff2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ff6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007ffa:	e7f0      	b.n	8007fde <_strtod_l+0xf6>
 8007ffc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008170 <_strtod_l+0x288>
 8008000:	e7ed      	b.n	8007fde <_strtod_l+0xf6>
 8008002:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008006:	f04f 3aff 	mov.w	sl, #4294967295
 800800a:	e7e8      	b.n	8007fde <_strtod_l+0xf6>
 800800c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	921b      	str	r2, [sp, #108]	; 0x6c
 8008012:	785b      	ldrb	r3, [r3, #1]
 8008014:	2b30      	cmp	r3, #48	; 0x30
 8008016:	d0f9      	beq.n	800800c <_strtod_l+0x124>
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0a4      	beq.n	8007f66 <_strtod_l+0x7e>
 800801c:	2301      	movs	r3, #1
 800801e:	2500      	movs	r5, #0
 8008020:	9306      	str	r3, [sp, #24]
 8008022:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008024:	9308      	str	r3, [sp, #32]
 8008026:	9507      	str	r5, [sp, #28]
 8008028:	9505      	str	r5, [sp, #20]
 800802a:	220a      	movs	r2, #10
 800802c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800802e:	7807      	ldrb	r7, [r0, #0]
 8008030:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008034:	b2d9      	uxtb	r1, r3
 8008036:	2909      	cmp	r1, #9
 8008038:	d929      	bls.n	800808e <_strtod_l+0x1a6>
 800803a:	4622      	mov	r2, r4
 800803c:	f8d8 1000 	ldr.w	r1, [r8]
 8008040:	f003 feec 	bl	800be1c <strncmp>
 8008044:	2800      	cmp	r0, #0
 8008046:	d031      	beq.n	80080ac <_strtod_l+0x1c4>
 8008048:	2000      	movs	r0, #0
 800804a:	9c05      	ldr	r4, [sp, #20]
 800804c:	9004      	str	r0, [sp, #16]
 800804e:	463b      	mov	r3, r7
 8008050:	4602      	mov	r2, r0
 8008052:	2b65      	cmp	r3, #101	; 0x65
 8008054:	d001      	beq.n	800805a <_strtod_l+0x172>
 8008056:	2b45      	cmp	r3, #69	; 0x45
 8008058:	d114      	bne.n	8008084 <_strtod_l+0x19c>
 800805a:	b924      	cbnz	r4, 8008066 <_strtod_l+0x17e>
 800805c:	b910      	cbnz	r0, 8008064 <_strtod_l+0x17c>
 800805e:	9b06      	ldr	r3, [sp, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d09e      	beq.n	8007fa2 <_strtod_l+0xba>
 8008064:	2400      	movs	r4, #0
 8008066:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008068:	1c73      	adds	r3, r6, #1
 800806a:	931b      	str	r3, [sp, #108]	; 0x6c
 800806c:	7873      	ldrb	r3, [r6, #1]
 800806e:	2b2b      	cmp	r3, #43	; 0x2b
 8008070:	d078      	beq.n	8008164 <_strtod_l+0x27c>
 8008072:	2b2d      	cmp	r3, #45	; 0x2d
 8008074:	d070      	beq.n	8008158 <_strtod_l+0x270>
 8008076:	f04f 0c00 	mov.w	ip, #0
 800807a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800807e:	2f09      	cmp	r7, #9
 8008080:	d97c      	bls.n	800817c <_strtod_l+0x294>
 8008082:	961b      	str	r6, [sp, #108]	; 0x6c
 8008084:	f04f 0e00 	mov.w	lr, #0
 8008088:	e09a      	b.n	80081c0 <_strtod_l+0x2d8>
 800808a:	2300      	movs	r3, #0
 800808c:	e7c7      	b.n	800801e <_strtod_l+0x136>
 800808e:	9905      	ldr	r1, [sp, #20]
 8008090:	2908      	cmp	r1, #8
 8008092:	bfdd      	ittte	le
 8008094:	9907      	ldrle	r1, [sp, #28]
 8008096:	fb02 3301 	mlale	r3, r2, r1, r3
 800809a:	9307      	strle	r3, [sp, #28]
 800809c:	fb02 3505 	mlagt	r5, r2, r5, r3
 80080a0:	9b05      	ldr	r3, [sp, #20]
 80080a2:	3001      	adds	r0, #1
 80080a4:	3301      	adds	r3, #1
 80080a6:	9305      	str	r3, [sp, #20]
 80080a8:	901b      	str	r0, [sp, #108]	; 0x6c
 80080aa:	e7bf      	b.n	800802c <_strtod_l+0x144>
 80080ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080ae:	191a      	adds	r2, r3, r4
 80080b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80080b2:	9a05      	ldr	r2, [sp, #20]
 80080b4:	5d1b      	ldrb	r3, [r3, r4]
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	d037      	beq.n	800812a <_strtod_l+0x242>
 80080ba:	9c05      	ldr	r4, [sp, #20]
 80080bc:	4602      	mov	r2, r0
 80080be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80080c2:	2909      	cmp	r1, #9
 80080c4:	d913      	bls.n	80080ee <_strtod_l+0x206>
 80080c6:	2101      	movs	r1, #1
 80080c8:	9104      	str	r1, [sp, #16]
 80080ca:	e7c2      	b.n	8008052 <_strtod_l+0x16a>
 80080cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80080d2:	785b      	ldrb	r3, [r3, #1]
 80080d4:	3001      	adds	r0, #1
 80080d6:	2b30      	cmp	r3, #48	; 0x30
 80080d8:	d0f8      	beq.n	80080cc <_strtod_l+0x1e4>
 80080da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80080de:	2a08      	cmp	r2, #8
 80080e0:	f200 84e4 	bhi.w	8008aac <_strtod_l+0xbc4>
 80080e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80080e6:	9208      	str	r2, [sp, #32]
 80080e8:	4602      	mov	r2, r0
 80080ea:	2000      	movs	r0, #0
 80080ec:	4604      	mov	r4, r0
 80080ee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80080f2:	f100 0101 	add.w	r1, r0, #1
 80080f6:	d012      	beq.n	800811e <_strtod_l+0x236>
 80080f8:	440a      	add	r2, r1
 80080fa:	eb00 0c04 	add.w	ip, r0, r4
 80080fe:	4621      	mov	r1, r4
 8008100:	270a      	movs	r7, #10
 8008102:	458c      	cmp	ip, r1
 8008104:	d113      	bne.n	800812e <_strtod_l+0x246>
 8008106:	1821      	adds	r1, r4, r0
 8008108:	2908      	cmp	r1, #8
 800810a:	f104 0401 	add.w	r4, r4, #1
 800810e:	4404      	add	r4, r0
 8008110:	dc19      	bgt.n	8008146 <_strtod_l+0x25e>
 8008112:	9b07      	ldr	r3, [sp, #28]
 8008114:	210a      	movs	r1, #10
 8008116:	fb01 e303 	mla	r3, r1, r3, lr
 800811a:	9307      	str	r3, [sp, #28]
 800811c:	2100      	movs	r1, #0
 800811e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008120:	1c58      	adds	r0, r3, #1
 8008122:	901b      	str	r0, [sp, #108]	; 0x6c
 8008124:	785b      	ldrb	r3, [r3, #1]
 8008126:	4608      	mov	r0, r1
 8008128:	e7c9      	b.n	80080be <_strtod_l+0x1d6>
 800812a:	9805      	ldr	r0, [sp, #20]
 800812c:	e7d3      	b.n	80080d6 <_strtod_l+0x1ee>
 800812e:	2908      	cmp	r1, #8
 8008130:	f101 0101 	add.w	r1, r1, #1
 8008134:	dc03      	bgt.n	800813e <_strtod_l+0x256>
 8008136:	9b07      	ldr	r3, [sp, #28]
 8008138:	437b      	muls	r3, r7
 800813a:	9307      	str	r3, [sp, #28]
 800813c:	e7e1      	b.n	8008102 <_strtod_l+0x21a>
 800813e:	2910      	cmp	r1, #16
 8008140:	bfd8      	it	le
 8008142:	437d      	mulle	r5, r7
 8008144:	e7dd      	b.n	8008102 <_strtod_l+0x21a>
 8008146:	2c10      	cmp	r4, #16
 8008148:	bfdc      	itt	le
 800814a:	210a      	movle	r1, #10
 800814c:	fb01 e505 	mlale	r5, r1, r5, lr
 8008150:	e7e4      	b.n	800811c <_strtod_l+0x234>
 8008152:	2301      	movs	r3, #1
 8008154:	9304      	str	r3, [sp, #16]
 8008156:	e781      	b.n	800805c <_strtod_l+0x174>
 8008158:	f04f 0c01 	mov.w	ip, #1
 800815c:	1cb3      	adds	r3, r6, #2
 800815e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008160:	78b3      	ldrb	r3, [r6, #2]
 8008162:	e78a      	b.n	800807a <_strtod_l+0x192>
 8008164:	f04f 0c00 	mov.w	ip, #0
 8008168:	e7f8      	b.n	800815c <_strtod_l+0x274>
 800816a:	bf00      	nop
 800816c:	0800ed94 	.word	0x0800ed94
 8008170:	7ff00000 	.word	0x7ff00000
 8008174:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008176:	1c5f      	adds	r7, r3, #1
 8008178:	971b      	str	r7, [sp, #108]	; 0x6c
 800817a:	785b      	ldrb	r3, [r3, #1]
 800817c:	2b30      	cmp	r3, #48	; 0x30
 800817e:	d0f9      	beq.n	8008174 <_strtod_l+0x28c>
 8008180:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008184:	2f08      	cmp	r7, #8
 8008186:	f63f af7d 	bhi.w	8008084 <_strtod_l+0x19c>
 800818a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800818e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008190:	930a      	str	r3, [sp, #40]	; 0x28
 8008192:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008194:	1c5f      	adds	r7, r3, #1
 8008196:	971b      	str	r7, [sp, #108]	; 0x6c
 8008198:	785b      	ldrb	r3, [r3, #1]
 800819a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800819e:	f1b8 0f09 	cmp.w	r8, #9
 80081a2:	d937      	bls.n	8008214 <_strtod_l+0x32c>
 80081a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081a6:	1a7f      	subs	r7, r7, r1
 80081a8:	2f08      	cmp	r7, #8
 80081aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80081ae:	dc37      	bgt.n	8008220 <_strtod_l+0x338>
 80081b0:	45be      	cmp	lr, r7
 80081b2:	bfa8      	it	ge
 80081b4:	46be      	movge	lr, r7
 80081b6:	f1bc 0f00 	cmp.w	ip, #0
 80081ba:	d001      	beq.n	80081c0 <_strtod_l+0x2d8>
 80081bc:	f1ce 0e00 	rsb	lr, lr, #0
 80081c0:	2c00      	cmp	r4, #0
 80081c2:	d151      	bne.n	8008268 <_strtod_l+0x380>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	f47f aece 	bne.w	8007f66 <_strtod_l+0x7e>
 80081ca:	9a06      	ldr	r2, [sp, #24]
 80081cc:	2a00      	cmp	r2, #0
 80081ce:	f47f aeca 	bne.w	8007f66 <_strtod_l+0x7e>
 80081d2:	9a04      	ldr	r2, [sp, #16]
 80081d4:	2a00      	cmp	r2, #0
 80081d6:	f47f aee4 	bne.w	8007fa2 <_strtod_l+0xba>
 80081da:	2b4e      	cmp	r3, #78	; 0x4e
 80081dc:	d027      	beq.n	800822e <_strtod_l+0x346>
 80081de:	dc21      	bgt.n	8008224 <_strtod_l+0x33c>
 80081e0:	2b49      	cmp	r3, #73	; 0x49
 80081e2:	f47f aede 	bne.w	8007fa2 <_strtod_l+0xba>
 80081e6:	49a0      	ldr	r1, [pc, #640]	; (8008468 <_strtod_l+0x580>)
 80081e8:	a81b      	add	r0, sp, #108	; 0x6c
 80081ea:	f003 f935 	bl	800b458 <__match>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	f43f aed7 	beq.w	8007fa2 <_strtod_l+0xba>
 80081f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081f6:	499d      	ldr	r1, [pc, #628]	; (800846c <_strtod_l+0x584>)
 80081f8:	3b01      	subs	r3, #1
 80081fa:	a81b      	add	r0, sp, #108	; 0x6c
 80081fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80081fe:	f003 f92b 	bl	800b458 <__match>
 8008202:	b910      	cbnz	r0, 800820a <_strtod_l+0x322>
 8008204:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008206:	3301      	adds	r3, #1
 8008208:	931b      	str	r3, [sp, #108]	; 0x6c
 800820a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008480 <_strtod_l+0x598>
 800820e:	f04f 0a00 	mov.w	sl, #0
 8008212:	e6a8      	b.n	8007f66 <_strtod_l+0x7e>
 8008214:	210a      	movs	r1, #10
 8008216:	fb01 3e0e 	mla	lr, r1, lr, r3
 800821a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800821e:	e7b8      	b.n	8008192 <_strtod_l+0x2aa>
 8008220:	46be      	mov	lr, r7
 8008222:	e7c8      	b.n	80081b6 <_strtod_l+0x2ce>
 8008224:	2b69      	cmp	r3, #105	; 0x69
 8008226:	d0de      	beq.n	80081e6 <_strtod_l+0x2fe>
 8008228:	2b6e      	cmp	r3, #110	; 0x6e
 800822a:	f47f aeba 	bne.w	8007fa2 <_strtod_l+0xba>
 800822e:	4990      	ldr	r1, [pc, #576]	; (8008470 <_strtod_l+0x588>)
 8008230:	a81b      	add	r0, sp, #108	; 0x6c
 8008232:	f003 f911 	bl	800b458 <__match>
 8008236:	2800      	cmp	r0, #0
 8008238:	f43f aeb3 	beq.w	8007fa2 <_strtod_l+0xba>
 800823c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	2b28      	cmp	r3, #40	; 0x28
 8008242:	d10e      	bne.n	8008262 <_strtod_l+0x37a>
 8008244:	aa1e      	add	r2, sp, #120	; 0x78
 8008246:	498b      	ldr	r1, [pc, #556]	; (8008474 <_strtod_l+0x58c>)
 8008248:	a81b      	add	r0, sp, #108	; 0x6c
 800824a:	f003 f919 	bl	800b480 <__hexnan>
 800824e:	2805      	cmp	r0, #5
 8008250:	d107      	bne.n	8008262 <_strtod_l+0x37a>
 8008252:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008254:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008258:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800825c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008260:	e681      	b.n	8007f66 <_strtod_l+0x7e>
 8008262:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008488 <_strtod_l+0x5a0>
 8008266:	e7d2      	b.n	800820e <_strtod_l+0x326>
 8008268:	ebae 0302 	sub.w	r3, lr, r2
 800826c:	9306      	str	r3, [sp, #24]
 800826e:	9b05      	ldr	r3, [sp, #20]
 8008270:	9807      	ldr	r0, [sp, #28]
 8008272:	2b00      	cmp	r3, #0
 8008274:	bf08      	it	eq
 8008276:	4623      	moveq	r3, r4
 8008278:	2c10      	cmp	r4, #16
 800827a:	9305      	str	r3, [sp, #20]
 800827c:	46a0      	mov	r8, r4
 800827e:	bfa8      	it	ge
 8008280:	f04f 0810 	movge.w	r8, #16
 8008284:	f7f8 f93e 	bl	8000504 <__aeabi_ui2d>
 8008288:	2c09      	cmp	r4, #9
 800828a:	4682      	mov	sl, r0
 800828c:	468b      	mov	fp, r1
 800828e:	dc13      	bgt.n	80082b8 <_strtod_l+0x3d0>
 8008290:	9b06      	ldr	r3, [sp, #24]
 8008292:	2b00      	cmp	r3, #0
 8008294:	f43f ae67 	beq.w	8007f66 <_strtod_l+0x7e>
 8008298:	9b06      	ldr	r3, [sp, #24]
 800829a:	dd7a      	ble.n	8008392 <_strtod_l+0x4aa>
 800829c:	2b16      	cmp	r3, #22
 800829e:	dc61      	bgt.n	8008364 <_strtod_l+0x47c>
 80082a0:	4a75      	ldr	r2, [pc, #468]	; (8008478 <_strtod_l+0x590>)
 80082a2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80082a6:	e9de 0100 	ldrd	r0, r1, [lr]
 80082aa:	4652      	mov	r2, sl
 80082ac:	465b      	mov	r3, fp
 80082ae:	f7f8 f9a3 	bl	80005f8 <__aeabi_dmul>
 80082b2:	4682      	mov	sl, r0
 80082b4:	468b      	mov	fp, r1
 80082b6:	e656      	b.n	8007f66 <_strtod_l+0x7e>
 80082b8:	4b6f      	ldr	r3, [pc, #444]	; (8008478 <_strtod_l+0x590>)
 80082ba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80082be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80082c2:	f7f8 f999 	bl	80005f8 <__aeabi_dmul>
 80082c6:	4606      	mov	r6, r0
 80082c8:	4628      	mov	r0, r5
 80082ca:	460f      	mov	r7, r1
 80082cc:	f7f8 f91a 	bl	8000504 <__aeabi_ui2d>
 80082d0:	4602      	mov	r2, r0
 80082d2:	460b      	mov	r3, r1
 80082d4:	4630      	mov	r0, r6
 80082d6:	4639      	mov	r1, r7
 80082d8:	f7f7 ffd8 	bl	800028c <__adddf3>
 80082dc:	2c0f      	cmp	r4, #15
 80082de:	4682      	mov	sl, r0
 80082e0:	468b      	mov	fp, r1
 80082e2:	ddd5      	ble.n	8008290 <_strtod_l+0x3a8>
 80082e4:	9b06      	ldr	r3, [sp, #24]
 80082e6:	eba4 0808 	sub.w	r8, r4, r8
 80082ea:	4498      	add	r8, r3
 80082ec:	f1b8 0f00 	cmp.w	r8, #0
 80082f0:	f340 8096 	ble.w	8008420 <_strtod_l+0x538>
 80082f4:	f018 030f 	ands.w	r3, r8, #15
 80082f8:	d00a      	beq.n	8008310 <_strtod_l+0x428>
 80082fa:	495f      	ldr	r1, [pc, #380]	; (8008478 <_strtod_l+0x590>)
 80082fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008300:	4652      	mov	r2, sl
 8008302:	465b      	mov	r3, fp
 8008304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008308:	f7f8 f976 	bl	80005f8 <__aeabi_dmul>
 800830c:	4682      	mov	sl, r0
 800830e:	468b      	mov	fp, r1
 8008310:	f038 080f 	bics.w	r8, r8, #15
 8008314:	d073      	beq.n	80083fe <_strtod_l+0x516>
 8008316:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800831a:	dd47      	ble.n	80083ac <_strtod_l+0x4c4>
 800831c:	2400      	movs	r4, #0
 800831e:	46a0      	mov	r8, r4
 8008320:	9407      	str	r4, [sp, #28]
 8008322:	9405      	str	r4, [sp, #20]
 8008324:	2322      	movs	r3, #34	; 0x22
 8008326:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008480 <_strtod_l+0x598>
 800832a:	f8c9 3000 	str.w	r3, [r9]
 800832e:	f04f 0a00 	mov.w	sl, #0
 8008332:	9b07      	ldr	r3, [sp, #28]
 8008334:	2b00      	cmp	r3, #0
 8008336:	f43f ae16 	beq.w	8007f66 <_strtod_l+0x7e>
 800833a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800833c:	4648      	mov	r0, r9
 800833e:	f003 f987 	bl	800b650 <_Bfree>
 8008342:	9905      	ldr	r1, [sp, #20]
 8008344:	4648      	mov	r0, r9
 8008346:	f003 f983 	bl	800b650 <_Bfree>
 800834a:	4641      	mov	r1, r8
 800834c:	4648      	mov	r0, r9
 800834e:	f003 f97f 	bl	800b650 <_Bfree>
 8008352:	9907      	ldr	r1, [sp, #28]
 8008354:	4648      	mov	r0, r9
 8008356:	f003 f97b 	bl	800b650 <_Bfree>
 800835a:	4621      	mov	r1, r4
 800835c:	4648      	mov	r0, r9
 800835e:	f003 f977 	bl	800b650 <_Bfree>
 8008362:	e600      	b.n	8007f66 <_strtod_l+0x7e>
 8008364:	9a06      	ldr	r2, [sp, #24]
 8008366:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800836a:	4293      	cmp	r3, r2
 800836c:	dbba      	blt.n	80082e4 <_strtod_l+0x3fc>
 800836e:	4d42      	ldr	r5, [pc, #264]	; (8008478 <_strtod_l+0x590>)
 8008370:	f1c4 040f 	rsb	r4, r4, #15
 8008374:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008378:	4652      	mov	r2, sl
 800837a:	465b      	mov	r3, fp
 800837c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008380:	f7f8 f93a 	bl	80005f8 <__aeabi_dmul>
 8008384:	9b06      	ldr	r3, [sp, #24]
 8008386:	1b1c      	subs	r4, r3, r4
 8008388:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800838c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008390:	e78d      	b.n	80082ae <_strtod_l+0x3c6>
 8008392:	f113 0f16 	cmn.w	r3, #22
 8008396:	dba5      	blt.n	80082e4 <_strtod_l+0x3fc>
 8008398:	4a37      	ldr	r2, [pc, #220]	; (8008478 <_strtod_l+0x590>)
 800839a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800839e:	e9d2 2300 	ldrd	r2, r3, [r2]
 80083a2:	4650      	mov	r0, sl
 80083a4:	4659      	mov	r1, fp
 80083a6:	f7f8 fa51 	bl	800084c <__aeabi_ddiv>
 80083aa:	e782      	b.n	80082b2 <_strtod_l+0x3ca>
 80083ac:	2300      	movs	r3, #0
 80083ae:	4e33      	ldr	r6, [pc, #204]	; (800847c <_strtod_l+0x594>)
 80083b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80083b4:	4650      	mov	r0, sl
 80083b6:	4659      	mov	r1, fp
 80083b8:	461d      	mov	r5, r3
 80083ba:	f1b8 0f01 	cmp.w	r8, #1
 80083be:	dc21      	bgt.n	8008404 <_strtod_l+0x51c>
 80083c0:	b10b      	cbz	r3, 80083c6 <_strtod_l+0x4de>
 80083c2:	4682      	mov	sl, r0
 80083c4:	468b      	mov	fp, r1
 80083c6:	4b2d      	ldr	r3, [pc, #180]	; (800847c <_strtod_l+0x594>)
 80083c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80083cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80083d0:	4652      	mov	r2, sl
 80083d2:	465b      	mov	r3, fp
 80083d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80083d8:	f7f8 f90e 	bl	80005f8 <__aeabi_dmul>
 80083dc:	4b28      	ldr	r3, [pc, #160]	; (8008480 <_strtod_l+0x598>)
 80083de:	460a      	mov	r2, r1
 80083e0:	400b      	ands	r3, r1
 80083e2:	4928      	ldr	r1, [pc, #160]	; (8008484 <_strtod_l+0x59c>)
 80083e4:	428b      	cmp	r3, r1
 80083e6:	4682      	mov	sl, r0
 80083e8:	d898      	bhi.n	800831c <_strtod_l+0x434>
 80083ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80083ee:	428b      	cmp	r3, r1
 80083f0:	bf86      	itte	hi
 80083f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800848c <_strtod_l+0x5a4>
 80083f6:	f04f 3aff 	movhi.w	sl, #4294967295
 80083fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80083fe:	2300      	movs	r3, #0
 8008400:	9304      	str	r3, [sp, #16]
 8008402:	e077      	b.n	80084f4 <_strtod_l+0x60c>
 8008404:	f018 0f01 	tst.w	r8, #1
 8008408:	d006      	beq.n	8008418 <_strtod_l+0x530>
 800840a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800840e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008412:	f7f8 f8f1 	bl	80005f8 <__aeabi_dmul>
 8008416:	2301      	movs	r3, #1
 8008418:	3501      	adds	r5, #1
 800841a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800841e:	e7cc      	b.n	80083ba <_strtod_l+0x4d2>
 8008420:	d0ed      	beq.n	80083fe <_strtod_l+0x516>
 8008422:	f1c8 0800 	rsb	r8, r8, #0
 8008426:	f018 020f 	ands.w	r2, r8, #15
 800842a:	d00a      	beq.n	8008442 <_strtod_l+0x55a>
 800842c:	4b12      	ldr	r3, [pc, #72]	; (8008478 <_strtod_l+0x590>)
 800842e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008432:	4650      	mov	r0, sl
 8008434:	4659      	mov	r1, fp
 8008436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843a:	f7f8 fa07 	bl	800084c <__aeabi_ddiv>
 800843e:	4682      	mov	sl, r0
 8008440:	468b      	mov	fp, r1
 8008442:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008446:	d0da      	beq.n	80083fe <_strtod_l+0x516>
 8008448:	f1b8 0f1f 	cmp.w	r8, #31
 800844c:	dd20      	ble.n	8008490 <_strtod_l+0x5a8>
 800844e:	2400      	movs	r4, #0
 8008450:	46a0      	mov	r8, r4
 8008452:	9407      	str	r4, [sp, #28]
 8008454:	9405      	str	r4, [sp, #20]
 8008456:	2322      	movs	r3, #34	; 0x22
 8008458:	f04f 0a00 	mov.w	sl, #0
 800845c:	f04f 0b00 	mov.w	fp, #0
 8008460:	f8c9 3000 	str.w	r3, [r9]
 8008464:	e765      	b.n	8008332 <_strtod_l+0x44a>
 8008466:	bf00      	nop
 8008468:	0800eded 	.word	0x0800eded
 800846c:	0800ee3f 	.word	0x0800ee3f
 8008470:	0800edf5 	.word	0x0800edf5
 8008474:	0800eda8 	.word	0x0800eda8
 8008478:	0800ee80 	.word	0x0800ee80
 800847c:	0800ee58 	.word	0x0800ee58
 8008480:	7ff00000 	.word	0x7ff00000
 8008484:	7ca00000 	.word	0x7ca00000
 8008488:	fff80000 	.word	0xfff80000
 800848c:	7fefffff 	.word	0x7fefffff
 8008490:	f018 0310 	ands.w	r3, r8, #16
 8008494:	bf18      	it	ne
 8008496:	236a      	movne	r3, #106	; 0x6a
 8008498:	4da0      	ldr	r5, [pc, #640]	; (800871c <_strtod_l+0x834>)
 800849a:	9304      	str	r3, [sp, #16]
 800849c:	4650      	mov	r0, sl
 800849e:	4659      	mov	r1, fp
 80084a0:	2300      	movs	r3, #0
 80084a2:	f1b8 0f00 	cmp.w	r8, #0
 80084a6:	f300 810a 	bgt.w	80086be <_strtod_l+0x7d6>
 80084aa:	b10b      	cbz	r3, 80084b0 <_strtod_l+0x5c8>
 80084ac:	4682      	mov	sl, r0
 80084ae:	468b      	mov	fp, r1
 80084b0:	9b04      	ldr	r3, [sp, #16]
 80084b2:	b1bb      	cbz	r3, 80084e4 <_strtod_l+0x5fc>
 80084b4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80084b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80084bc:	2b00      	cmp	r3, #0
 80084be:	4659      	mov	r1, fp
 80084c0:	dd10      	ble.n	80084e4 <_strtod_l+0x5fc>
 80084c2:	2b1f      	cmp	r3, #31
 80084c4:	f340 8107 	ble.w	80086d6 <_strtod_l+0x7ee>
 80084c8:	2b34      	cmp	r3, #52	; 0x34
 80084ca:	bfde      	ittt	le
 80084cc:	3b20      	suble	r3, #32
 80084ce:	f04f 32ff 	movle.w	r2, #4294967295
 80084d2:	fa02 f303 	lslle.w	r3, r2, r3
 80084d6:	f04f 0a00 	mov.w	sl, #0
 80084da:	bfcc      	ite	gt
 80084dc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80084e0:	ea03 0b01 	andle.w	fp, r3, r1
 80084e4:	2200      	movs	r2, #0
 80084e6:	2300      	movs	r3, #0
 80084e8:	4650      	mov	r0, sl
 80084ea:	4659      	mov	r1, fp
 80084ec:	f7f8 faec 	bl	8000ac8 <__aeabi_dcmpeq>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d1ac      	bne.n	800844e <_strtod_l+0x566>
 80084f4:	9b07      	ldr	r3, [sp, #28]
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	9a05      	ldr	r2, [sp, #20]
 80084fa:	9908      	ldr	r1, [sp, #32]
 80084fc:	4623      	mov	r3, r4
 80084fe:	4648      	mov	r0, r9
 8008500:	f003 f8ea 	bl	800b6d8 <__s2b>
 8008504:	9007      	str	r0, [sp, #28]
 8008506:	2800      	cmp	r0, #0
 8008508:	f43f af08 	beq.w	800831c <_strtod_l+0x434>
 800850c:	9a06      	ldr	r2, [sp, #24]
 800850e:	9b06      	ldr	r3, [sp, #24]
 8008510:	2a00      	cmp	r2, #0
 8008512:	f1c3 0300 	rsb	r3, r3, #0
 8008516:	bfa8      	it	ge
 8008518:	2300      	movge	r3, #0
 800851a:	930e      	str	r3, [sp, #56]	; 0x38
 800851c:	2400      	movs	r4, #0
 800851e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008522:	9316      	str	r3, [sp, #88]	; 0x58
 8008524:	46a0      	mov	r8, r4
 8008526:	9b07      	ldr	r3, [sp, #28]
 8008528:	4648      	mov	r0, r9
 800852a:	6859      	ldr	r1, [r3, #4]
 800852c:	f003 f86b 	bl	800b606 <_Balloc>
 8008530:	9005      	str	r0, [sp, #20]
 8008532:	2800      	cmp	r0, #0
 8008534:	f43f aef6 	beq.w	8008324 <_strtod_l+0x43c>
 8008538:	9b07      	ldr	r3, [sp, #28]
 800853a:	691a      	ldr	r2, [r3, #16]
 800853c:	3202      	adds	r2, #2
 800853e:	f103 010c 	add.w	r1, r3, #12
 8008542:	0092      	lsls	r2, r2, #2
 8008544:	300c      	adds	r0, #12
 8008546:	f003 f853 	bl	800b5f0 <memcpy>
 800854a:	aa1e      	add	r2, sp, #120	; 0x78
 800854c:	a91d      	add	r1, sp, #116	; 0x74
 800854e:	ec4b ab10 	vmov	d0, sl, fp
 8008552:	4648      	mov	r0, r9
 8008554:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008558:	f003 fb6c 	bl	800bc34 <__d2b>
 800855c:	901c      	str	r0, [sp, #112]	; 0x70
 800855e:	2800      	cmp	r0, #0
 8008560:	f43f aee0 	beq.w	8008324 <_strtod_l+0x43c>
 8008564:	2101      	movs	r1, #1
 8008566:	4648      	mov	r0, r9
 8008568:	f003 f942 	bl	800b7f0 <__i2b>
 800856c:	4680      	mov	r8, r0
 800856e:	2800      	cmp	r0, #0
 8008570:	f43f aed8 	beq.w	8008324 <_strtod_l+0x43c>
 8008574:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008576:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008578:	2e00      	cmp	r6, #0
 800857a:	bfab      	itete	ge
 800857c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800857e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008580:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008582:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008584:	bfac      	ite	ge
 8008586:	18f7      	addge	r7, r6, r3
 8008588:	1b9d      	sublt	r5, r3, r6
 800858a:	9b04      	ldr	r3, [sp, #16]
 800858c:	1af6      	subs	r6, r6, r3
 800858e:	4416      	add	r6, r2
 8008590:	4b63      	ldr	r3, [pc, #396]	; (8008720 <_strtod_l+0x838>)
 8008592:	3e01      	subs	r6, #1
 8008594:	429e      	cmp	r6, r3
 8008596:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800859a:	f280 80af 	bge.w	80086fc <_strtod_l+0x814>
 800859e:	1b9b      	subs	r3, r3, r6
 80085a0:	2b1f      	cmp	r3, #31
 80085a2:	eba2 0203 	sub.w	r2, r2, r3
 80085a6:	f04f 0101 	mov.w	r1, #1
 80085aa:	f300 809b 	bgt.w	80086e4 <_strtod_l+0x7fc>
 80085ae:	fa01 f303 	lsl.w	r3, r1, r3
 80085b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80085b4:	2300      	movs	r3, #0
 80085b6:	930a      	str	r3, [sp, #40]	; 0x28
 80085b8:	18be      	adds	r6, r7, r2
 80085ba:	9b04      	ldr	r3, [sp, #16]
 80085bc:	42b7      	cmp	r7, r6
 80085be:	4415      	add	r5, r2
 80085c0:	441d      	add	r5, r3
 80085c2:	463b      	mov	r3, r7
 80085c4:	bfa8      	it	ge
 80085c6:	4633      	movge	r3, r6
 80085c8:	42ab      	cmp	r3, r5
 80085ca:	bfa8      	it	ge
 80085cc:	462b      	movge	r3, r5
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	bfc2      	ittt	gt
 80085d2:	1af6      	subgt	r6, r6, r3
 80085d4:	1aed      	subgt	r5, r5, r3
 80085d6:	1aff      	subgt	r7, r7, r3
 80085d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085da:	b1bb      	cbz	r3, 800860c <_strtod_l+0x724>
 80085dc:	4641      	mov	r1, r8
 80085de:	461a      	mov	r2, r3
 80085e0:	4648      	mov	r0, r9
 80085e2:	f003 f9a5 	bl	800b930 <__pow5mult>
 80085e6:	4680      	mov	r8, r0
 80085e8:	2800      	cmp	r0, #0
 80085ea:	f43f ae9b 	beq.w	8008324 <_strtod_l+0x43c>
 80085ee:	4601      	mov	r1, r0
 80085f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80085f2:	4648      	mov	r0, r9
 80085f4:	f003 f905 	bl	800b802 <__multiply>
 80085f8:	900c      	str	r0, [sp, #48]	; 0x30
 80085fa:	2800      	cmp	r0, #0
 80085fc:	f43f ae92 	beq.w	8008324 <_strtod_l+0x43c>
 8008600:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008602:	4648      	mov	r0, r9
 8008604:	f003 f824 	bl	800b650 <_Bfree>
 8008608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800860a:	931c      	str	r3, [sp, #112]	; 0x70
 800860c:	2e00      	cmp	r6, #0
 800860e:	dc7a      	bgt.n	8008706 <_strtod_l+0x81e>
 8008610:	9b06      	ldr	r3, [sp, #24]
 8008612:	2b00      	cmp	r3, #0
 8008614:	dd08      	ble.n	8008628 <_strtod_l+0x740>
 8008616:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008618:	9905      	ldr	r1, [sp, #20]
 800861a:	4648      	mov	r0, r9
 800861c:	f003 f988 	bl	800b930 <__pow5mult>
 8008620:	9005      	str	r0, [sp, #20]
 8008622:	2800      	cmp	r0, #0
 8008624:	f43f ae7e 	beq.w	8008324 <_strtod_l+0x43c>
 8008628:	2d00      	cmp	r5, #0
 800862a:	dd08      	ble.n	800863e <_strtod_l+0x756>
 800862c:	462a      	mov	r2, r5
 800862e:	9905      	ldr	r1, [sp, #20]
 8008630:	4648      	mov	r0, r9
 8008632:	f003 f9bd 	bl	800b9b0 <__lshift>
 8008636:	9005      	str	r0, [sp, #20]
 8008638:	2800      	cmp	r0, #0
 800863a:	f43f ae73 	beq.w	8008324 <_strtod_l+0x43c>
 800863e:	2f00      	cmp	r7, #0
 8008640:	dd08      	ble.n	8008654 <_strtod_l+0x76c>
 8008642:	4641      	mov	r1, r8
 8008644:	463a      	mov	r2, r7
 8008646:	4648      	mov	r0, r9
 8008648:	f003 f9b2 	bl	800b9b0 <__lshift>
 800864c:	4680      	mov	r8, r0
 800864e:	2800      	cmp	r0, #0
 8008650:	f43f ae68 	beq.w	8008324 <_strtod_l+0x43c>
 8008654:	9a05      	ldr	r2, [sp, #20]
 8008656:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008658:	4648      	mov	r0, r9
 800865a:	f003 fa17 	bl	800ba8c <__mdiff>
 800865e:	4604      	mov	r4, r0
 8008660:	2800      	cmp	r0, #0
 8008662:	f43f ae5f 	beq.w	8008324 <_strtod_l+0x43c>
 8008666:	68c3      	ldr	r3, [r0, #12]
 8008668:	930c      	str	r3, [sp, #48]	; 0x30
 800866a:	2300      	movs	r3, #0
 800866c:	60c3      	str	r3, [r0, #12]
 800866e:	4641      	mov	r1, r8
 8008670:	f003 f9f2 	bl	800ba58 <__mcmp>
 8008674:	2800      	cmp	r0, #0
 8008676:	da55      	bge.n	8008724 <_strtod_l+0x83c>
 8008678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800867a:	b9e3      	cbnz	r3, 80086b6 <_strtod_l+0x7ce>
 800867c:	f1ba 0f00 	cmp.w	sl, #0
 8008680:	d119      	bne.n	80086b6 <_strtod_l+0x7ce>
 8008682:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008686:	b9b3      	cbnz	r3, 80086b6 <_strtod_l+0x7ce>
 8008688:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800868c:	0d1b      	lsrs	r3, r3, #20
 800868e:	051b      	lsls	r3, r3, #20
 8008690:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008694:	d90f      	bls.n	80086b6 <_strtod_l+0x7ce>
 8008696:	6963      	ldr	r3, [r4, #20]
 8008698:	b913      	cbnz	r3, 80086a0 <_strtod_l+0x7b8>
 800869a:	6923      	ldr	r3, [r4, #16]
 800869c:	2b01      	cmp	r3, #1
 800869e:	dd0a      	ble.n	80086b6 <_strtod_l+0x7ce>
 80086a0:	4621      	mov	r1, r4
 80086a2:	2201      	movs	r2, #1
 80086a4:	4648      	mov	r0, r9
 80086a6:	f003 f983 	bl	800b9b0 <__lshift>
 80086aa:	4641      	mov	r1, r8
 80086ac:	4604      	mov	r4, r0
 80086ae:	f003 f9d3 	bl	800ba58 <__mcmp>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	dc67      	bgt.n	8008786 <_strtod_l+0x89e>
 80086b6:	9b04      	ldr	r3, [sp, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d171      	bne.n	80087a0 <_strtod_l+0x8b8>
 80086bc:	e63d      	b.n	800833a <_strtod_l+0x452>
 80086be:	f018 0f01 	tst.w	r8, #1
 80086c2:	d004      	beq.n	80086ce <_strtod_l+0x7e6>
 80086c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086c8:	f7f7 ff96 	bl	80005f8 <__aeabi_dmul>
 80086cc:	2301      	movs	r3, #1
 80086ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 80086d2:	3508      	adds	r5, #8
 80086d4:	e6e5      	b.n	80084a2 <_strtod_l+0x5ba>
 80086d6:	f04f 32ff 	mov.w	r2, #4294967295
 80086da:	fa02 f303 	lsl.w	r3, r2, r3
 80086de:	ea03 0a0a 	and.w	sl, r3, sl
 80086e2:	e6ff      	b.n	80084e4 <_strtod_l+0x5fc>
 80086e4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80086e8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80086ec:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80086f0:	36e2      	adds	r6, #226	; 0xe2
 80086f2:	fa01 f306 	lsl.w	r3, r1, r6
 80086f6:	930a      	str	r3, [sp, #40]	; 0x28
 80086f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80086fa:	e75d      	b.n	80085b8 <_strtod_l+0x6d0>
 80086fc:	2300      	movs	r3, #0
 80086fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008700:	2301      	movs	r3, #1
 8008702:	930f      	str	r3, [sp, #60]	; 0x3c
 8008704:	e758      	b.n	80085b8 <_strtod_l+0x6d0>
 8008706:	4632      	mov	r2, r6
 8008708:	991c      	ldr	r1, [sp, #112]	; 0x70
 800870a:	4648      	mov	r0, r9
 800870c:	f003 f950 	bl	800b9b0 <__lshift>
 8008710:	901c      	str	r0, [sp, #112]	; 0x70
 8008712:	2800      	cmp	r0, #0
 8008714:	f47f af7c 	bne.w	8008610 <_strtod_l+0x728>
 8008718:	e604      	b.n	8008324 <_strtod_l+0x43c>
 800871a:	bf00      	nop
 800871c:	0800edc0 	.word	0x0800edc0
 8008720:	fffffc02 	.word	0xfffffc02
 8008724:	465d      	mov	r5, fp
 8008726:	f040 8086 	bne.w	8008836 <_strtod_l+0x94e>
 800872a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800872c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008730:	b32a      	cbz	r2, 800877e <_strtod_l+0x896>
 8008732:	4aaf      	ldr	r2, [pc, #700]	; (80089f0 <_strtod_l+0xb08>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d153      	bne.n	80087e0 <_strtod_l+0x8f8>
 8008738:	9b04      	ldr	r3, [sp, #16]
 800873a:	4650      	mov	r0, sl
 800873c:	b1d3      	cbz	r3, 8008774 <_strtod_l+0x88c>
 800873e:	4aad      	ldr	r2, [pc, #692]	; (80089f4 <_strtod_l+0xb0c>)
 8008740:	402a      	ands	r2, r5
 8008742:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008746:	f04f 31ff 	mov.w	r1, #4294967295
 800874a:	d816      	bhi.n	800877a <_strtod_l+0x892>
 800874c:	0d12      	lsrs	r2, r2, #20
 800874e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008752:	fa01 f303 	lsl.w	r3, r1, r3
 8008756:	4298      	cmp	r0, r3
 8008758:	d142      	bne.n	80087e0 <_strtod_l+0x8f8>
 800875a:	4ba7      	ldr	r3, [pc, #668]	; (80089f8 <_strtod_l+0xb10>)
 800875c:	429d      	cmp	r5, r3
 800875e:	d102      	bne.n	8008766 <_strtod_l+0x87e>
 8008760:	3001      	adds	r0, #1
 8008762:	f43f addf 	beq.w	8008324 <_strtod_l+0x43c>
 8008766:	4ba3      	ldr	r3, [pc, #652]	; (80089f4 <_strtod_l+0xb0c>)
 8008768:	402b      	ands	r3, r5
 800876a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800876e:	f04f 0a00 	mov.w	sl, #0
 8008772:	e7a0      	b.n	80086b6 <_strtod_l+0x7ce>
 8008774:	f04f 33ff 	mov.w	r3, #4294967295
 8008778:	e7ed      	b.n	8008756 <_strtod_l+0x86e>
 800877a:	460b      	mov	r3, r1
 800877c:	e7eb      	b.n	8008756 <_strtod_l+0x86e>
 800877e:	bb7b      	cbnz	r3, 80087e0 <_strtod_l+0x8f8>
 8008780:	f1ba 0f00 	cmp.w	sl, #0
 8008784:	d12c      	bne.n	80087e0 <_strtod_l+0x8f8>
 8008786:	9904      	ldr	r1, [sp, #16]
 8008788:	4a9a      	ldr	r2, [pc, #616]	; (80089f4 <_strtod_l+0xb0c>)
 800878a:	465b      	mov	r3, fp
 800878c:	b1f1      	cbz	r1, 80087cc <_strtod_l+0x8e4>
 800878e:	ea02 010b 	and.w	r1, r2, fp
 8008792:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008796:	dc19      	bgt.n	80087cc <_strtod_l+0x8e4>
 8008798:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800879c:	f77f ae5b 	ble.w	8008456 <_strtod_l+0x56e>
 80087a0:	4a96      	ldr	r2, [pc, #600]	; (80089fc <_strtod_l+0xb14>)
 80087a2:	2300      	movs	r3, #0
 80087a4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80087a8:	4650      	mov	r0, sl
 80087aa:	4659      	mov	r1, fp
 80087ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80087b0:	f7f7 ff22 	bl	80005f8 <__aeabi_dmul>
 80087b4:	4682      	mov	sl, r0
 80087b6:	468b      	mov	fp, r1
 80087b8:	2900      	cmp	r1, #0
 80087ba:	f47f adbe 	bne.w	800833a <_strtod_l+0x452>
 80087be:	2800      	cmp	r0, #0
 80087c0:	f47f adbb 	bne.w	800833a <_strtod_l+0x452>
 80087c4:	2322      	movs	r3, #34	; 0x22
 80087c6:	f8c9 3000 	str.w	r3, [r9]
 80087ca:	e5b6      	b.n	800833a <_strtod_l+0x452>
 80087cc:	4013      	ands	r3, r2
 80087ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80087d2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80087d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80087da:	f04f 3aff 	mov.w	sl, #4294967295
 80087de:	e76a      	b.n	80086b6 <_strtod_l+0x7ce>
 80087e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e2:	b193      	cbz	r3, 800880a <_strtod_l+0x922>
 80087e4:	422b      	tst	r3, r5
 80087e6:	f43f af66 	beq.w	80086b6 <_strtod_l+0x7ce>
 80087ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087ec:	9a04      	ldr	r2, [sp, #16]
 80087ee:	4650      	mov	r0, sl
 80087f0:	4659      	mov	r1, fp
 80087f2:	b173      	cbz	r3, 8008812 <_strtod_l+0x92a>
 80087f4:	f7ff fb5a 	bl	8007eac <sulp>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008800:	f7f7 fd44 	bl	800028c <__adddf3>
 8008804:	4682      	mov	sl, r0
 8008806:	468b      	mov	fp, r1
 8008808:	e755      	b.n	80086b6 <_strtod_l+0x7ce>
 800880a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800880c:	ea13 0f0a 	tst.w	r3, sl
 8008810:	e7e9      	b.n	80087e6 <_strtod_l+0x8fe>
 8008812:	f7ff fb4b 	bl	8007eac <sulp>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800881e:	f7f7 fd33 	bl	8000288 <__aeabi_dsub>
 8008822:	2200      	movs	r2, #0
 8008824:	2300      	movs	r3, #0
 8008826:	4682      	mov	sl, r0
 8008828:	468b      	mov	fp, r1
 800882a:	f7f8 f94d 	bl	8000ac8 <__aeabi_dcmpeq>
 800882e:	2800      	cmp	r0, #0
 8008830:	f47f ae11 	bne.w	8008456 <_strtod_l+0x56e>
 8008834:	e73f      	b.n	80086b6 <_strtod_l+0x7ce>
 8008836:	4641      	mov	r1, r8
 8008838:	4620      	mov	r0, r4
 800883a:	f003 fa4a 	bl	800bcd2 <__ratio>
 800883e:	ec57 6b10 	vmov	r6, r7, d0
 8008842:	2200      	movs	r2, #0
 8008844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008848:	ee10 0a10 	vmov	r0, s0
 800884c:	4639      	mov	r1, r7
 800884e:	f7f8 f94f 	bl	8000af0 <__aeabi_dcmple>
 8008852:	2800      	cmp	r0, #0
 8008854:	d077      	beq.n	8008946 <_strtod_l+0xa5e>
 8008856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008858:	2b00      	cmp	r3, #0
 800885a:	d04a      	beq.n	80088f2 <_strtod_l+0xa0a>
 800885c:	4b68      	ldr	r3, [pc, #416]	; (8008a00 <_strtod_l+0xb18>)
 800885e:	2200      	movs	r2, #0
 8008860:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008864:	4f66      	ldr	r7, [pc, #408]	; (8008a00 <_strtod_l+0xb18>)
 8008866:	2600      	movs	r6, #0
 8008868:	4b62      	ldr	r3, [pc, #392]	; (80089f4 <_strtod_l+0xb0c>)
 800886a:	402b      	ands	r3, r5
 800886c:	930f      	str	r3, [sp, #60]	; 0x3c
 800886e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008870:	4b64      	ldr	r3, [pc, #400]	; (8008a04 <_strtod_l+0xb1c>)
 8008872:	429a      	cmp	r2, r3
 8008874:	f040 80ce 	bne.w	8008a14 <_strtod_l+0xb2c>
 8008878:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800887c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008880:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008884:	ec4b ab10 	vmov	d0, sl, fp
 8008888:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800888c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008890:	f003 f95a 	bl	800bb48 <__ulp>
 8008894:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008898:	ec53 2b10 	vmov	r2, r3, d0
 800889c:	f7f7 feac 	bl	80005f8 <__aeabi_dmul>
 80088a0:	4652      	mov	r2, sl
 80088a2:	465b      	mov	r3, fp
 80088a4:	f7f7 fcf2 	bl	800028c <__adddf3>
 80088a8:	460b      	mov	r3, r1
 80088aa:	4952      	ldr	r1, [pc, #328]	; (80089f4 <_strtod_l+0xb0c>)
 80088ac:	4a56      	ldr	r2, [pc, #344]	; (8008a08 <_strtod_l+0xb20>)
 80088ae:	4019      	ands	r1, r3
 80088b0:	4291      	cmp	r1, r2
 80088b2:	4682      	mov	sl, r0
 80088b4:	d95b      	bls.n	800896e <_strtod_l+0xa86>
 80088b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80088bc:	4293      	cmp	r3, r2
 80088be:	d103      	bne.n	80088c8 <_strtod_l+0x9e0>
 80088c0:	9b08      	ldr	r3, [sp, #32]
 80088c2:	3301      	adds	r3, #1
 80088c4:	f43f ad2e 	beq.w	8008324 <_strtod_l+0x43c>
 80088c8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80089f8 <_strtod_l+0xb10>
 80088cc:	f04f 3aff 	mov.w	sl, #4294967295
 80088d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80088d2:	4648      	mov	r0, r9
 80088d4:	f002 febc 	bl	800b650 <_Bfree>
 80088d8:	9905      	ldr	r1, [sp, #20]
 80088da:	4648      	mov	r0, r9
 80088dc:	f002 feb8 	bl	800b650 <_Bfree>
 80088e0:	4641      	mov	r1, r8
 80088e2:	4648      	mov	r0, r9
 80088e4:	f002 feb4 	bl	800b650 <_Bfree>
 80088e8:	4621      	mov	r1, r4
 80088ea:	4648      	mov	r0, r9
 80088ec:	f002 feb0 	bl	800b650 <_Bfree>
 80088f0:	e619      	b.n	8008526 <_strtod_l+0x63e>
 80088f2:	f1ba 0f00 	cmp.w	sl, #0
 80088f6:	d11a      	bne.n	800892e <_strtod_l+0xa46>
 80088f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088fc:	b9eb      	cbnz	r3, 800893a <_strtod_l+0xa52>
 80088fe:	2200      	movs	r2, #0
 8008900:	4b3f      	ldr	r3, [pc, #252]	; (8008a00 <_strtod_l+0xb18>)
 8008902:	4630      	mov	r0, r6
 8008904:	4639      	mov	r1, r7
 8008906:	f7f8 f8e9 	bl	8000adc <__aeabi_dcmplt>
 800890a:	b9c8      	cbnz	r0, 8008940 <_strtod_l+0xa58>
 800890c:	4630      	mov	r0, r6
 800890e:	4639      	mov	r1, r7
 8008910:	2200      	movs	r2, #0
 8008912:	4b3e      	ldr	r3, [pc, #248]	; (8008a0c <_strtod_l+0xb24>)
 8008914:	f7f7 fe70 	bl	80005f8 <__aeabi_dmul>
 8008918:	4606      	mov	r6, r0
 800891a:	460f      	mov	r7, r1
 800891c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008920:	9618      	str	r6, [sp, #96]	; 0x60
 8008922:	9319      	str	r3, [sp, #100]	; 0x64
 8008924:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008928:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800892c:	e79c      	b.n	8008868 <_strtod_l+0x980>
 800892e:	f1ba 0f01 	cmp.w	sl, #1
 8008932:	d102      	bne.n	800893a <_strtod_l+0xa52>
 8008934:	2d00      	cmp	r5, #0
 8008936:	f43f ad8e 	beq.w	8008456 <_strtod_l+0x56e>
 800893a:	2200      	movs	r2, #0
 800893c:	4b34      	ldr	r3, [pc, #208]	; (8008a10 <_strtod_l+0xb28>)
 800893e:	e78f      	b.n	8008860 <_strtod_l+0x978>
 8008940:	2600      	movs	r6, #0
 8008942:	4f32      	ldr	r7, [pc, #200]	; (8008a0c <_strtod_l+0xb24>)
 8008944:	e7ea      	b.n	800891c <_strtod_l+0xa34>
 8008946:	4b31      	ldr	r3, [pc, #196]	; (8008a0c <_strtod_l+0xb24>)
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	2200      	movs	r2, #0
 800894e:	f7f7 fe53 	bl	80005f8 <__aeabi_dmul>
 8008952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008954:	4606      	mov	r6, r0
 8008956:	460f      	mov	r7, r1
 8008958:	b933      	cbnz	r3, 8008968 <_strtod_l+0xa80>
 800895a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800895e:	9010      	str	r0, [sp, #64]	; 0x40
 8008960:	9311      	str	r3, [sp, #68]	; 0x44
 8008962:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008966:	e7df      	b.n	8008928 <_strtod_l+0xa40>
 8008968:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800896c:	e7f9      	b.n	8008962 <_strtod_l+0xa7a>
 800896e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008972:	9b04      	ldr	r3, [sp, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1ab      	bne.n	80088d0 <_strtod_l+0x9e8>
 8008978:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800897c:	0d1b      	lsrs	r3, r3, #20
 800897e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008980:	051b      	lsls	r3, r3, #20
 8008982:	429a      	cmp	r2, r3
 8008984:	465d      	mov	r5, fp
 8008986:	d1a3      	bne.n	80088d0 <_strtod_l+0x9e8>
 8008988:	4639      	mov	r1, r7
 800898a:	4630      	mov	r0, r6
 800898c:	f7f8 f8e4 	bl	8000b58 <__aeabi_d2iz>
 8008990:	f7f7 fdc8 	bl	8000524 <__aeabi_i2d>
 8008994:	460b      	mov	r3, r1
 8008996:	4602      	mov	r2, r0
 8008998:	4639      	mov	r1, r7
 800899a:	4630      	mov	r0, r6
 800899c:	f7f7 fc74 	bl	8000288 <__aeabi_dsub>
 80089a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089a2:	4606      	mov	r6, r0
 80089a4:	460f      	mov	r7, r1
 80089a6:	b933      	cbnz	r3, 80089b6 <_strtod_l+0xace>
 80089a8:	f1ba 0f00 	cmp.w	sl, #0
 80089ac:	d103      	bne.n	80089b6 <_strtod_l+0xace>
 80089ae:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80089b2:	2d00      	cmp	r5, #0
 80089b4:	d06d      	beq.n	8008a92 <_strtod_l+0xbaa>
 80089b6:	a30a      	add	r3, pc, #40	; (adr r3, 80089e0 <_strtod_l+0xaf8>)
 80089b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089bc:	4630      	mov	r0, r6
 80089be:	4639      	mov	r1, r7
 80089c0:	f7f8 f88c 	bl	8000adc <__aeabi_dcmplt>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	f47f acb8 	bne.w	800833a <_strtod_l+0x452>
 80089ca:	a307      	add	r3, pc, #28	; (adr r3, 80089e8 <_strtod_l+0xb00>)
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	4630      	mov	r0, r6
 80089d2:	4639      	mov	r1, r7
 80089d4:	f7f8 f8a0 	bl	8000b18 <__aeabi_dcmpgt>
 80089d8:	2800      	cmp	r0, #0
 80089da:	f43f af79 	beq.w	80088d0 <_strtod_l+0x9e8>
 80089de:	e4ac      	b.n	800833a <_strtod_l+0x452>
 80089e0:	94a03595 	.word	0x94a03595
 80089e4:	3fdfffff 	.word	0x3fdfffff
 80089e8:	35afe535 	.word	0x35afe535
 80089ec:	3fe00000 	.word	0x3fe00000
 80089f0:	000fffff 	.word	0x000fffff
 80089f4:	7ff00000 	.word	0x7ff00000
 80089f8:	7fefffff 	.word	0x7fefffff
 80089fc:	39500000 	.word	0x39500000
 8008a00:	3ff00000 	.word	0x3ff00000
 8008a04:	7fe00000 	.word	0x7fe00000
 8008a08:	7c9fffff 	.word	0x7c9fffff
 8008a0c:	3fe00000 	.word	0x3fe00000
 8008a10:	bff00000 	.word	0xbff00000
 8008a14:	9b04      	ldr	r3, [sp, #16]
 8008a16:	b333      	cbz	r3, 8008a66 <_strtod_l+0xb7e>
 8008a18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a1a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008a1e:	d822      	bhi.n	8008a66 <_strtod_l+0xb7e>
 8008a20:	a327      	add	r3, pc, #156	; (adr r3, 8008ac0 <_strtod_l+0xbd8>)
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	4630      	mov	r0, r6
 8008a28:	4639      	mov	r1, r7
 8008a2a:	f7f8 f861 	bl	8000af0 <__aeabi_dcmple>
 8008a2e:	b1a0      	cbz	r0, 8008a5a <_strtod_l+0xb72>
 8008a30:	4639      	mov	r1, r7
 8008a32:	4630      	mov	r0, r6
 8008a34:	f7f8 f8b8 	bl	8000ba8 <__aeabi_d2uiz>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	bf08      	it	eq
 8008a3c:	2001      	moveq	r0, #1
 8008a3e:	f7f7 fd61 	bl	8000504 <__aeabi_ui2d>
 8008a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a44:	4606      	mov	r6, r0
 8008a46:	460f      	mov	r7, r1
 8008a48:	bb03      	cbnz	r3, 8008a8c <_strtod_l+0xba4>
 8008a4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a4e:	9012      	str	r0, [sp, #72]	; 0x48
 8008a50:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a52:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008a56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a5e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008a62:	1a9b      	subs	r3, r3, r2
 8008a64:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a66:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008a6a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008a6e:	f003 f86b 	bl	800bb48 <__ulp>
 8008a72:	4650      	mov	r0, sl
 8008a74:	ec53 2b10 	vmov	r2, r3, d0
 8008a78:	4659      	mov	r1, fp
 8008a7a:	f7f7 fdbd 	bl	80005f8 <__aeabi_dmul>
 8008a7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a82:	f7f7 fc03 	bl	800028c <__adddf3>
 8008a86:	4682      	mov	sl, r0
 8008a88:	468b      	mov	fp, r1
 8008a8a:	e772      	b.n	8008972 <_strtod_l+0xa8a>
 8008a8c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008a90:	e7df      	b.n	8008a52 <_strtod_l+0xb6a>
 8008a92:	a30d      	add	r3, pc, #52	; (adr r3, 8008ac8 <_strtod_l+0xbe0>)
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	f7f8 f820 	bl	8000adc <__aeabi_dcmplt>
 8008a9c:	e79c      	b.n	80089d8 <_strtod_l+0xaf0>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	930d      	str	r3, [sp, #52]	; 0x34
 8008aa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008aa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	f7ff ba61 	b.w	8007f6e <_strtod_l+0x86>
 8008aac:	2b65      	cmp	r3, #101	; 0x65
 8008aae:	f04f 0200 	mov.w	r2, #0
 8008ab2:	f43f ab4e 	beq.w	8008152 <_strtod_l+0x26a>
 8008ab6:	2101      	movs	r1, #1
 8008ab8:	4614      	mov	r4, r2
 8008aba:	9104      	str	r1, [sp, #16]
 8008abc:	f7ff bacb 	b.w	8008056 <_strtod_l+0x16e>
 8008ac0:	ffc00000 	.word	0xffc00000
 8008ac4:	41dfffff 	.word	0x41dfffff
 8008ac8:	94a03595 	.word	0x94a03595
 8008acc:	3fcfffff 	.word	0x3fcfffff

08008ad0 <strtod>:
 8008ad0:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <strtod+0x20>)
 8008ad2:	4a08      	ldr	r2, [pc, #32]	; (8008af4 <strtod+0x24>)
 8008ad4:	b410      	push	{r4}
 8008ad6:	681c      	ldr	r4, [r3, #0]
 8008ad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	bf08      	it	eq
 8008ade:	4613      	moveq	r3, r2
 8008ae0:	460a      	mov	r2, r1
 8008ae2:	4601      	mov	r1, r0
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aea:	f7ff b9fd 	b.w	8007ee8 <_strtod_l>
 8008aee:	bf00      	nop
 8008af0:	20000010 	.word	0x20000010
 8008af4:	20000854 	.word	0x20000854

08008af8 <_strtol_l.isra.0>:
 8008af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008afc:	4680      	mov	r8, r0
 8008afe:	4689      	mov	r9, r1
 8008b00:	4692      	mov	sl, r2
 8008b02:	461e      	mov	r6, r3
 8008b04:	460f      	mov	r7, r1
 8008b06:	463d      	mov	r5, r7
 8008b08:	9808      	ldr	r0, [sp, #32]
 8008b0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b0e:	f002 fd47 	bl	800b5a0 <__locale_ctype_ptr_l>
 8008b12:	4420      	add	r0, r4
 8008b14:	7843      	ldrb	r3, [r0, #1]
 8008b16:	f013 0308 	ands.w	r3, r3, #8
 8008b1a:	d132      	bne.n	8008b82 <_strtol_l.isra.0+0x8a>
 8008b1c:	2c2d      	cmp	r4, #45	; 0x2d
 8008b1e:	d132      	bne.n	8008b86 <_strtol_l.isra.0+0x8e>
 8008b20:	787c      	ldrb	r4, [r7, #1]
 8008b22:	1cbd      	adds	r5, r7, #2
 8008b24:	2201      	movs	r2, #1
 8008b26:	2e00      	cmp	r6, #0
 8008b28:	d05d      	beq.n	8008be6 <_strtol_l.isra.0+0xee>
 8008b2a:	2e10      	cmp	r6, #16
 8008b2c:	d109      	bne.n	8008b42 <_strtol_l.isra.0+0x4a>
 8008b2e:	2c30      	cmp	r4, #48	; 0x30
 8008b30:	d107      	bne.n	8008b42 <_strtol_l.isra.0+0x4a>
 8008b32:	782b      	ldrb	r3, [r5, #0]
 8008b34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b38:	2b58      	cmp	r3, #88	; 0x58
 8008b3a:	d14f      	bne.n	8008bdc <_strtol_l.isra.0+0xe4>
 8008b3c:	786c      	ldrb	r4, [r5, #1]
 8008b3e:	2610      	movs	r6, #16
 8008b40:	3502      	adds	r5, #2
 8008b42:	2a00      	cmp	r2, #0
 8008b44:	bf14      	ite	ne
 8008b46:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008b4a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008b4e:	2700      	movs	r7, #0
 8008b50:	fbb1 fcf6 	udiv	ip, r1, r6
 8008b54:	4638      	mov	r0, r7
 8008b56:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008b5a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008b5e:	2b09      	cmp	r3, #9
 8008b60:	d817      	bhi.n	8008b92 <_strtol_l.isra.0+0x9a>
 8008b62:	461c      	mov	r4, r3
 8008b64:	42a6      	cmp	r6, r4
 8008b66:	dd23      	ble.n	8008bb0 <_strtol_l.isra.0+0xb8>
 8008b68:	1c7b      	adds	r3, r7, #1
 8008b6a:	d007      	beq.n	8008b7c <_strtol_l.isra.0+0x84>
 8008b6c:	4584      	cmp	ip, r0
 8008b6e:	d31c      	bcc.n	8008baa <_strtol_l.isra.0+0xb2>
 8008b70:	d101      	bne.n	8008b76 <_strtol_l.isra.0+0x7e>
 8008b72:	45a6      	cmp	lr, r4
 8008b74:	db19      	blt.n	8008baa <_strtol_l.isra.0+0xb2>
 8008b76:	fb00 4006 	mla	r0, r0, r6, r4
 8008b7a:	2701      	movs	r7, #1
 8008b7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b80:	e7eb      	b.n	8008b5a <_strtol_l.isra.0+0x62>
 8008b82:	462f      	mov	r7, r5
 8008b84:	e7bf      	b.n	8008b06 <_strtol_l.isra.0+0xe>
 8008b86:	2c2b      	cmp	r4, #43	; 0x2b
 8008b88:	bf04      	itt	eq
 8008b8a:	1cbd      	addeq	r5, r7, #2
 8008b8c:	787c      	ldrbeq	r4, [r7, #1]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	e7c9      	b.n	8008b26 <_strtol_l.isra.0+0x2e>
 8008b92:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008b96:	2b19      	cmp	r3, #25
 8008b98:	d801      	bhi.n	8008b9e <_strtol_l.isra.0+0xa6>
 8008b9a:	3c37      	subs	r4, #55	; 0x37
 8008b9c:	e7e2      	b.n	8008b64 <_strtol_l.isra.0+0x6c>
 8008b9e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008ba2:	2b19      	cmp	r3, #25
 8008ba4:	d804      	bhi.n	8008bb0 <_strtol_l.isra.0+0xb8>
 8008ba6:	3c57      	subs	r4, #87	; 0x57
 8008ba8:	e7dc      	b.n	8008b64 <_strtol_l.isra.0+0x6c>
 8008baa:	f04f 37ff 	mov.w	r7, #4294967295
 8008bae:	e7e5      	b.n	8008b7c <_strtol_l.isra.0+0x84>
 8008bb0:	1c7b      	adds	r3, r7, #1
 8008bb2:	d108      	bne.n	8008bc6 <_strtol_l.isra.0+0xce>
 8008bb4:	2322      	movs	r3, #34	; 0x22
 8008bb6:	f8c8 3000 	str.w	r3, [r8]
 8008bba:	4608      	mov	r0, r1
 8008bbc:	f1ba 0f00 	cmp.w	sl, #0
 8008bc0:	d107      	bne.n	8008bd2 <_strtol_l.isra.0+0xda>
 8008bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc6:	b102      	cbz	r2, 8008bca <_strtol_l.isra.0+0xd2>
 8008bc8:	4240      	negs	r0, r0
 8008bca:	f1ba 0f00 	cmp.w	sl, #0
 8008bce:	d0f8      	beq.n	8008bc2 <_strtol_l.isra.0+0xca>
 8008bd0:	b10f      	cbz	r7, 8008bd6 <_strtol_l.isra.0+0xde>
 8008bd2:	f105 39ff 	add.w	r9, r5, #4294967295
 8008bd6:	f8ca 9000 	str.w	r9, [sl]
 8008bda:	e7f2      	b.n	8008bc2 <_strtol_l.isra.0+0xca>
 8008bdc:	2430      	movs	r4, #48	; 0x30
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	d1af      	bne.n	8008b42 <_strtol_l.isra.0+0x4a>
 8008be2:	2608      	movs	r6, #8
 8008be4:	e7ad      	b.n	8008b42 <_strtol_l.isra.0+0x4a>
 8008be6:	2c30      	cmp	r4, #48	; 0x30
 8008be8:	d0a3      	beq.n	8008b32 <_strtol_l.isra.0+0x3a>
 8008bea:	260a      	movs	r6, #10
 8008bec:	e7a9      	b.n	8008b42 <_strtol_l.isra.0+0x4a>
	...

08008bf0 <strtol>:
 8008bf0:	4b08      	ldr	r3, [pc, #32]	; (8008c14 <strtol+0x24>)
 8008bf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bf4:	681c      	ldr	r4, [r3, #0]
 8008bf6:	4d08      	ldr	r5, [pc, #32]	; (8008c18 <strtol+0x28>)
 8008bf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	bf08      	it	eq
 8008bfe:	462b      	moveq	r3, r5
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	4613      	mov	r3, r2
 8008c04:	460a      	mov	r2, r1
 8008c06:	4601      	mov	r1, r0
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f7ff ff75 	bl	8008af8 <_strtol_l.isra.0>
 8008c0e:	b003      	add	sp, #12
 8008c10:	bd30      	pop	{r4, r5, pc}
 8008c12:	bf00      	nop
 8008c14:	20000010 	.word	0x20000010
 8008c18:	20000854 	.word	0x20000854
 8008c1c:	00000000 	.word	0x00000000

08008c20 <_svfprintf_r>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	b0d3      	sub	sp, #332	; 0x14c
 8008c26:	4688      	mov	r8, r1
 8008c28:	4693      	mov	fp, r2
 8008c2a:	461e      	mov	r6, r3
 8008c2c:	9003      	str	r0, [sp, #12]
 8008c2e:	f002 fcbd 	bl	800b5ac <_localeconv_r>
 8008c32:	6803      	ldr	r3, [r0, #0]
 8008c34:	9316      	str	r3, [sp, #88]	; 0x58
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7f7 faca 	bl	80001d0 <strlen>
 8008c3c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008c40:	900d      	str	r0, [sp, #52]	; 0x34
 8008c42:	0618      	lsls	r0, r3, #24
 8008c44:	d518      	bpl.n	8008c78 <_svfprintf_r+0x58>
 8008c46:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008c4a:	b9ab      	cbnz	r3, 8008c78 <_svfprintf_r+0x58>
 8008c4c:	2140      	movs	r1, #64	; 0x40
 8008c4e:	9803      	ldr	r0, [sp, #12]
 8008c50:	f7fe feb2 	bl	80079b8 <_malloc_r>
 8008c54:	f8c8 0000 	str.w	r0, [r8]
 8008c58:	f8c8 0010 	str.w	r0, [r8, #16]
 8008c5c:	b948      	cbnz	r0, 8008c72 <_svfprintf_r+0x52>
 8008c5e:	9a03      	ldr	r2, [sp, #12]
 8008c60:	230c      	movs	r3, #12
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	f04f 33ff 	mov.w	r3, #4294967295
 8008c68:	930e      	str	r3, [sp, #56]	; 0x38
 8008c6a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008c6c:	b053      	add	sp, #332	; 0x14c
 8008c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c72:	2340      	movs	r3, #64	; 0x40
 8008c74:	f8c8 3014 	str.w	r3, [r8, #20]
 8008c78:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 8008fa0 <_svfprintf_r+0x380>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8008c82:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008c86:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8008c8a:	ac29      	add	r4, sp, #164	; 0xa4
 8008c8c:	9426      	str	r4, [sp, #152]	; 0x98
 8008c8e:	9304      	str	r3, [sp, #16]
 8008c90:	9309      	str	r3, [sp, #36]	; 0x24
 8008c92:	9312      	str	r3, [sp, #72]	; 0x48
 8008c94:	9319      	str	r3, [sp, #100]	; 0x64
 8008c96:	930e      	str	r3, [sp, #56]	; 0x38
 8008c98:	465d      	mov	r5, fp
 8008c9a:	462b      	mov	r3, r5
 8008c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ca0:	b112      	cbz	r2, 8008ca8 <_svfprintf_r+0x88>
 8008ca2:	2a25      	cmp	r2, #37	; 0x25
 8008ca4:	f040 80e4 	bne.w	8008e70 <_svfprintf_r+0x250>
 8008ca8:	ebb5 070b 	subs.w	r7, r5, fp
 8008cac:	d00e      	beq.n	8008ccc <_svfprintf_r+0xac>
 8008cae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008cb0:	443b      	add	r3, r7
 8008cb2:	9328      	str	r3, [sp, #160]	; 0xa0
 8008cb4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	2b07      	cmp	r3, #7
 8008cba:	e9c4 b700 	strd	fp, r7, [r4]
 8008cbe:	9327      	str	r3, [sp, #156]	; 0x9c
 8008cc0:	f300 80d8 	bgt.w	8008e74 <_svfprintf_r+0x254>
 8008cc4:	3408      	adds	r4, #8
 8008cc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cc8:	443b      	add	r3, r7
 8008cca:	930e      	str	r3, [sp, #56]	; 0x38
 8008ccc:	782b      	ldrb	r3, [r5, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f001 81b4 	beq.w	800a03c <_svfprintf_r+0x141c>
 8008cd4:	1c6b      	adds	r3, r5, #1
 8008cd6:	930c      	str	r3, [sp, #48]	; 0x30
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8008cde:	f04f 35ff 	mov.w	r5, #4294967295
 8008ce2:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ce4:	469a      	mov	sl, r3
 8008ce6:	270a      	movs	r7, #10
 8008ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	9306      	str	r3, [sp, #24]
 8008cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	930c      	str	r3, [sp, #48]	; 0x30
 8008cf4:	9b06      	ldr	r3, [sp, #24]
 8008cf6:	3b20      	subs	r3, #32
 8008cf8:	2b5a      	cmp	r3, #90	; 0x5a
 8008cfa:	f200 8624 	bhi.w	8009946 <_svfprintf_r+0xd26>
 8008cfe:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <_svfprintf_r+0xe4>)
 8008d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d04:	08008f07 	.word	0x08008f07
 8008d08:	08009947 	.word	0x08009947
 8008d0c:	08009947 	.word	0x08009947
 8008d10:	08008f19 	.word	0x08008f19
 8008d14:	08009947 	.word	0x08009947
 8008d18:	08009947 	.word	0x08009947
 8008d1c:	08009947 	.word	0x08009947
 8008d20:	08008ecd 	.word	0x08008ecd
 8008d24:	08009947 	.word	0x08009947
 8008d28:	08009947 	.word	0x08009947
 8008d2c:	08008f1f 	.word	0x08008f1f
 8008d30:	08008f37 	.word	0x08008f37
 8008d34:	08009947 	.word	0x08009947
 8008d38:	08008f31 	.word	0x08008f31
 8008d3c:	08008f3b 	.word	0x08008f3b
 8008d40:	08009947 	.word	0x08009947
 8008d44:	08008f6f 	.word	0x08008f6f
 8008d48:	08008f75 	.word	0x08008f75
 8008d4c:	08008f75 	.word	0x08008f75
 8008d50:	08008f75 	.word	0x08008f75
 8008d54:	08008f75 	.word	0x08008f75
 8008d58:	08008f75 	.word	0x08008f75
 8008d5c:	08008f75 	.word	0x08008f75
 8008d60:	08008f75 	.word	0x08008f75
 8008d64:	08008f75 	.word	0x08008f75
 8008d68:	08008f75 	.word	0x08008f75
 8008d6c:	08009947 	.word	0x08009947
 8008d70:	08009947 	.word	0x08009947
 8008d74:	08009947 	.word	0x08009947
 8008d78:	08009947 	.word	0x08009947
 8008d7c:	08009947 	.word	0x08009947
 8008d80:	08009947 	.word	0x08009947
 8008d84:	08009947 	.word	0x08009947
 8008d88:	08009077 	.word	0x08009077
 8008d8c:	08009947 	.word	0x08009947
 8008d90:	08008fe1 	.word	0x08008fe1
 8008d94:	08009003 	.word	0x08009003
 8008d98:	08009077 	.word	0x08009077
 8008d9c:	08009077 	.word	0x08009077
 8008da0:	08009077 	.word	0x08009077
 8008da4:	08009947 	.word	0x08009947
 8008da8:	08009947 	.word	0x08009947
 8008dac:	08009947 	.word	0x08009947
 8008db0:	08009947 	.word	0x08009947
 8008db4:	08008f95 	.word	0x08008f95
 8008db8:	08009947 	.word	0x08009947
 8008dbc:	08009947 	.word	0x08009947
 8008dc0:	08009549 	.word	0x08009549
 8008dc4:	08009947 	.word	0x08009947
 8008dc8:	08009947 	.word	0x08009947
 8008dcc:	08009947 	.word	0x08009947
 8008dd0:	080095d5 	.word	0x080095d5
 8008dd4:	08009947 	.word	0x08009947
 8008dd8:	080097b7 	.word	0x080097b7
 8008ddc:	08009947 	.word	0x08009947
 8008de0:	08009947 	.word	0x08009947
 8008de4:	08008e8d 	.word	0x08008e8d
 8008de8:	08009947 	.word	0x08009947
 8008dec:	08009947 	.word	0x08009947
 8008df0:	08009947 	.word	0x08009947
 8008df4:	08009947 	.word	0x08009947
 8008df8:	08009947 	.word	0x08009947
 8008dfc:	08009947 	.word	0x08009947
 8008e00:	08009947 	.word	0x08009947
 8008e04:	08009947 	.word	0x08009947
 8008e08:	08009077 	.word	0x08009077
 8008e0c:	08009947 	.word	0x08009947
 8008e10:	08008fe1 	.word	0x08008fe1
 8008e14:	08009007 	.word	0x08009007
 8008e18:	08009077 	.word	0x08009077
 8008e1c:	08009077 	.word	0x08009077
 8008e20:	08009077 	.word	0x08009077
 8008e24:	08008fad 	.word	0x08008fad
 8008e28:	08009007 	.word	0x08009007
 8008e2c:	08008fd5 	.word	0x08008fd5
 8008e30:	08009947 	.word	0x08009947
 8008e34:	08008fc7 	.word	0x08008fc7
 8008e38:	08009947 	.word	0x08009947
 8008e3c:	08009503 	.word	0x08009503
 8008e40:	0800954d 	.word	0x0800954d
 8008e44:	080095b5 	.word	0x080095b5
 8008e48:	08008fd5 	.word	0x08008fd5
 8008e4c:	08009947 	.word	0x08009947
 8008e50:	080095d5 	.word	0x080095d5
 8008e54:	08008ce9 	.word	0x08008ce9
 8008e58:	080097bb 	.word	0x080097bb
 8008e5c:	08009947 	.word	0x08009947
 8008e60:	08009947 	.word	0x08009947
 8008e64:	080097f9 	.word	0x080097f9
 8008e68:	08009947 	.word	0x08009947
 8008e6c:	08008ce9 	.word	0x08008ce9
 8008e70:	461d      	mov	r5, r3
 8008e72:	e712      	b.n	8008c9a <_svfprintf_r+0x7a>
 8008e74:	aa26      	add	r2, sp, #152	; 0x98
 8008e76:	4641      	mov	r1, r8
 8008e78:	9803      	ldr	r0, [sp, #12]
 8008e7a:	f002 fff6 	bl	800be6a <__ssprint_r>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	f040 8166 	bne.w	8009150 <_svfprintf_r+0x530>
 8008e84:	ac29      	add	r4, sp, #164	; 0xa4
 8008e86:	e71e      	b.n	8008cc6 <_svfprintf_r+0xa6>
 8008e88:	461e      	mov	r6, r3
 8008e8a:	e72d      	b.n	8008ce8 <_svfprintf_r+0xc8>
 8008e8c:	4b46      	ldr	r3, [pc, #280]	; (8008fa8 <_svfprintf_r+0x388>)
 8008e8e:	9318      	str	r3, [sp, #96]	; 0x60
 8008e90:	f01a 0f20 	tst.w	sl, #32
 8008e94:	f000 84b3 	beq.w	80097fe <_svfprintf_r+0xbde>
 8008e98:	3607      	adds	r6, #7
 8008e9a:	f026 0607 	bic.w	r6, r6, #7
 8008e9e:	f106 0308 	add.w	r3, r6, #8
 8008ea2:	e9d6 6700 	ldrd	r6, r7, [r6]
 8008ea6:	9308      	str	r3, [sp, #32]
 8008ea8:	f01a 0f01 	tst.w	sl, #1
 8008eac:	d00a      	beq.n	8008ec4 <_svfprintf_r+0x2a4>
 8008eae:	ea56 0307 	orrs.w	r3, r6, r7
 8008eb2:	d007      	beq.n	8008ec4 <_svfprintf_r+0x2a4>
 8008eb4:	2330      	movs	r3, #48	; 0x30
 8008eb6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8008eba:	9b06      	ldr	r3, [sp, #24]
 8008ebc:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8008ec0:	f04a 0a02 	orr.w	sl, sl, #2
 8008ec4:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008ec8:	2302      	movs	r3, #2
 8008eca:	e34d      	b.n	8009568 <_svfprintf_r+0x948>
 8008ecc:	9803      	ldr	r0, [sp, #12]
 8008ece:	f002 fb6d 	bl	800b5ac <_localeconv_r>
 8008ed2:	6843      	ldr	r3, [r0, #4]
 8008ed4:	9319      	str	r3, [sp, #100]	; 0x64
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7f7 f97a 	bl	80001d0 <strlen>
 8008edc:	9012      	str	r0, [sp, #72]	; 0x48
 8008ede:	9803      	ldr	r0, [sp, #12]
 8008ee0:	f002 fb64 	bl	800b5ac <_localeconv_r>
 8008ee4:	6883      	ldr	r3, [r0, #8]
 8008ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f43f aefc 	beq.w	8008ce8 <_svfprintf_r+0xc8>
 8008ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f43f aef8 	beq.w	8008ce8 <_svfprintf_r+0xc8>
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f43f aef4 	beq.w	8008ce8 <_svfprintf_r+0xc8>
 8008f00:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8008f04:	e6f0      	b.n	8008ce8 <_svfprintf_r+0xc8>
 8008f06:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f47f aeec 	bne.w	8008ce8 <_svfprintf_r+0xc8>
 8008f10:	2320      	movs	r3, #32
 8008f12:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8008f16:	e6e7      	b.n	8008ce8 <_svfprintf_r+0xc8>
 8008f18:	f04a 0a01 	orr.w	sl, sl, #1
 8008f1c:	e6e4      	b.n	8008ce8 <_svfprintf_r+0xc8>
 8008f1e:	6832      	ldr	r2, [r6, #0]
 8008f20:	920f      	str	r2, [sp, #60]	; 0x3c
 8008f22:	2a00      	cmp	r2, #0
 8008f24:	f106 0304 	add.w	r3, r6, #4
 8008f28:	daae      	bge.n	8008e88 <_svfprintf_r+0x268>
 8008f2a:	4252      	negs	r2, r2
 8008f2c:	920f      	str	r2, [sp, #60]	; 0x3c
 8008f2e:	461e      	mov	r6, r3
 8008f30:	f04a 0a04 	orr.w	sl, sl, #4
 8008f34:	e6d8      	b.n	8008ce8 <_svfprintf_r+0xc8>
 8008f36:	232b      	movs	r3, #43	; 0x2b
 8008f38:	e7eb      	b.n	8008f12 <_svfprintf_r+0x2f2>
 8008f3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f3e:	7812      	ldrb	r2, [r2, #0]
 8008f40:	9206      	str	r2, [sp, #24]
 8008f42:	2a2a      	cmp	r2, #42	; 0x2a
 8008f44:	f103 0301 	add.w	r3, r3, #1
 8008f48:	d10f      	bne.n	8008f6a <_svfprintf_r+0x34a>
 8008f4a:	6835      	ldr	r5, [r6, #0]
 8008f4c:	930c      	str	r3, [sp, #48]	; 0x30
 8008f4e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8008f52:	3604      	adds	r6, #4
 8008f54:	e6c8      	b.n	8008ce8 <_svfprintf_r+0xc8>
 8008f56:	fb07 2505 	mla	r5, r7, r5, r2
 8008f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f5e:	9206      	str	r2, [sp, #24]
 8008f60:	9a06      	ldr	r2, [sp, #24]
 8008f62:	3a30      	subs	r2, #48	; 0x30
 8008f64:	2a09      	cmp	r2, #9
 8008f66:	d9f6      	bls.n	8008f56 <_svfprintf_r+0x336>
 8008f68:	e6c3      	b.n	8008cf2 <_svfprintf_r+0xd2>
 8008f6a:	2500      	movs	r5, #0
 8008f6c:	e7f8      	b.n	8008f60 <_svfprintf_r+0x340>
 8008f6e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8008f72:	e6b9      	b.n	8008ce8 <_svfprintf_r+0xc8>
 8008f74:	2200      	movs	r2, #0
 8008f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f78:	920f      	str	r2, [sp, #60]	; 0x3c
 8008f7a:	9a06      	ldr	r2, [sp, #24]
 8008f7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008f7e:	3a30      	subs	r2, #48	; 0x30
 8008f80:	fb07 2201 	mla	r2, r7, r1, r2
 8008f84:	920f      	str	r2, [sp, #60]	; 0x3c
 8008f86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f8a:	9206      	str	r2, [sp, #24]
 8008f8c:	3a30      	subs	r2, #48	; 0x30
 8008f8e:	2a09      	cmp	r2, #9
 8008f90:	d9f3      	bls.n	8008f7a <_svfprintf_r+0x35a>
 8008f92:	e6ae      	b.n	8008cf2 <_svfprintf_r+0xd2>
 8008f94:	f04a 0a08 	orr.w	sl, sl, #8
 8008f98:	e6a6      	b.n	8008ce8 <_svfprintf_r+0xc8>
 8008f9a:	bf00      	nop
 8008f9c:	f3af 8000 	nop.w
	...
 8008fa8:	0800ee09 	.word	0x0800ee09
 8008fac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b68      	cmp	r3, #104	; 0x68
 8008fb2:	bf01      	itttt	eq
 8008fb4:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 8008fb6:	3301      	addeq	r3, #1
 8008fb8:	930c      	streq	r3, [sp, #48]	; 0x30
 8008fba:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8008fbe:	bf18      	it	ne
 8008fc0:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8008fc4:	e690      	b.n	8008ce8 <_svfprintf_r+0xc8>
 8008fc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	2b6c      	cmp	r3, #108	; 0x6c
 8008fcc:	d105      	bne.n	8008fda <_svfprintf_r+0x3ba>
 8008fce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	930c      	str	r3, [sp, #48]	; 0x30
 8008fd4:	f04a 0a20 	orr.w	sl, sl, #32
 8008fd8:	e686      	b.n	8008ce8 <_svfprintf_r+0xc8>
 8008fda:	f04a 0a10 	orr.w	sl, sl, #16
 8008fde:	e683      	b.n	8008ce8 <_svfprintf_r+0xc8>
 8008fe0:	1d33      	adds	r3, r6, #4
 8008fe2:	9308      	str	r3, [sp, #32]
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	6833      	ldr	r3, [r6, #0]
 8008fe8:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8008fec:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8008ff0:	4681      	mov	r9, r0
 8008ff2:	2501      	movs	r5, #1
 8008ff4:	9010      	str	r0, [sp, #64]	; 0x40
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	9007      	str	r0, [sp, #28]
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8009000:	e301      	b.n	8009606 <_svfprintf_r+0x9e6>
 8009002:	f04a 0a10 	orr.w	sl, sl, #16
 8009006:	f01a 0f20 	tst.w	sl, #32
 800900a:	d021      	beq.n	8009050 <_svfprintf_r+0x430>
 800900c:	3607      	adds	r6, #7
 800900e:	f026 0607 	bic.w	r6, r6, #7
 8009012:	f106 0308 	add.w	r3, r6, #8
 8009016:	e9d6 6700 	ldrd	r6, r7, [r6]
 800901a:	9308      	str	r3, [sp, #32]
 800901c:	2e00      	cmp	r6, #0
 800901e:	f177 0300 	sbcs.w	r3, r7, #0
 8009022:	da06      	bge.n	8009032 <_svfprintf_r+0x412>
 8009024:	4276      	negs	r6, r6
 8009026:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800902a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800902e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8009032:	1c6b      	adds	r3, r5, #1
 8009034:	f040 83f6 	bne.w	8009824 <_svfprintf_r+0xc04>
 8009038:	2f00      	cmp	r7, #0
 800903a:	bf08      	it	eq
 800903c:	2e0a      	cmpeq	r6, #10
 800903e:	f080 8427 	bcs.w	8009890 <_svfprintf_r+0xc70>
 8009042:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8009046:	3630      	adds	r6, #48	; 0x30
 8009048:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 800904c:	f000 bc0d 	b.w	800986a <_svfprintf_r+0xc4a>
 8009050:	1d33      	adds	r3, r6, #4
 8009052:	f01a 0f10 	tst.w	sl, #16
 8009056:	9308      	str	r3, [sp, #32]
 8009058:	d002      	beq.n	8009060 <_svfprintf_r+0x440>
 800905a:	6836      	ldr	r6, [r6, #0]
 800905c:	17f7      	asrs	r7, r6, #31
 800905e:	e7dd      	b.n	800901c <_svfprintf_r+0x3fc>
 8009060:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009064:	6836      	ldr	r6, [r6, #0]
 8009066:	d001      	beq.n	800906c <_svfprintf_r+0x44c>
 8009068:	b236      	sxth	r6, r6
 800906a:	e7f7      	b.n	800905c <_svfprintf_r+0x43c>
 800906c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009070:	bf18      	it	ne
 8009072:	b276      	sxtbne	r6, r6
 8009074:	e7f2      	b.n	800905c <_svfprintf_r+0x43c>
 8009076:	3607      	adds	r6, #7
 8009078:	f026 0607 	bic.w	r6, r6, #7
 800907c:	ed96 7b00 	vldr	d7, [r6]
 8009080:	f106 0308 	add.w	r3, r6, #8
 8009084:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009088:	9308      	str	r3, [sp, #32]
 800908a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800908c:	931a      	str	r3, [sp, #104]	; 0x68
 800908e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009094:	931b      	str	r3, [sp, #108]	; 0x6c
 8009096:	f04f 32ff 	mov.w	r2, #4294967295
 800909a:	4bb2      	ldr	r3, [pc, #712]	; (8009364 <_svfprintf_r+0x744>)
 800909c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80090a0:	f7f7 fd44 	bl	8000b2c <__aeabi_dcmpun>
 80090a4:	bb00      	cbnz	r0, 80090e8 <_svfprintf_r+0x4c8>
 80090a6:	f04f 32ff 	mov.w	r2, #4294967295
 80090aa:	4bae      	ldr	r3, [pc, #696]	; (8009364 <_svfprintf_r+0x744>)
 80090ac:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80090b0:	f7f7 fd1e 	bl	8000af0 <__aeabi_dcmple>
 80090b4:	b9c0      	cbnz	r0, 80090e8 <_svfprintf_r+0x4c8>
 80090b6:	2200      	movs	r2, #0
 80090b8:	2300      	movs	r3, #0
 80090ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090be:	f7f7 fd0d 	bl	8000adc <__aeabi_dcmplt>
 80090c2:	b110      	cbz	r0, 80090ca <_svfprintf_r+0x4aa>
 80090c4:	232d      	movs	r3, #45	; 0x2d
 80090c6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80090ca:	4aa7      	ldr	r2, [pc, #668]	; (8009368 <_svfprintf_r+0x748>)
 80090cc:	4ba7      	ldr	r3, [pc, #668]	; (800936c <_svfprintf_r+0x74c>)
 80090ce:	9906      	ldr	r1, [sp, #24]
 80090d0:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 80090d4:	2947      	cmp	r1, #71	; 0x47
 80090d6:	bfcc      	ite	gt
 80090d8:	4693      	movgt	fp, r2
 80090da:	469b      	movle	fp, r3
 80090dc:	f04f 0900 	mov.w	r9, #0
 80090e0:	2503      	movs	r5, #3
 80090e2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80090e6:	e3c6      	b.n	8009876 <_svfprintf_r+0xc56>
 80090e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80090ec:	4610      	mov	r0, r2
 80090ee:	4619      	mov	r1, r3
 80090f0:	f7f7 fd1c 	bl	8000b2c <__aeabi_dcmpun>
 80090f4:	4681      	mov	r9, r0
 80090f6:	b140      	cbz	r0, 800910a <_svfprintf_r+0x4ea>
 80090f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090fa:	4a9d      	ldr	r2, [pc, #628]	; (8009370 <_svfprintf_r+0x750>)
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	bfbc      	itt	lt
 8009100:	232d      	movlt	r3, #45	; 0x2d
 8009102:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8009106:	4b9b      	ldr	r3, [pc, #620]	; (8009374 <_svfprintf_r+0x754>)
 8009108:	e7e1      	b.n	80090ce <_svfprintf_r+0x4ae>
 800910a:	9b06      	ldr	r3, [sp, #24]
 800910c:	f023 0320 	bic.w	r3, r3, #32
 8009110:	2b41      	cmp	r3, #65	; 0x41
 8009112:	9307      	str	r3, [sp, #28]
 8009114:	d125      	bne.n	8009162 <_svfprintf_r+0x542>
 8009116:	2330      	movs	r3, #48	; 0x30
 8009118:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800911c:	9b06      	ldr	r3, [sp, #24]
 800911e:	2b61      	cmp	r3, #97	; 0x61
 8009120:	bf14      	ite	ne
 8009122:	2358      	movne	r3, #88	; 0x58
 8009124:	2378      	moveq	r3, #120	; 0x78
 8009126:	2d63      	cmp	r5, #99	; 0x63
 8009128:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800912c:	f04a 0a02 	orr.w	sl, sl, #2
 8009130:	f340 8108 	ble.w	8009344 <_svfprintf_r+0x724>
 8009134:	1c69      	adds	r1, r5, #1
 8009136:	9803      	ldr	r0, [sp, #12]
 8009138:	f7fe fc3e 	bl	80079b8 <_malloc_r>
 800913c:	4683      	mov	fp, r0
 800913e:	2800      	cmp	r0, #0
 8009140:	f040 8103 	bne.w	800934a <_svfprintf_r+0x72a>
 8009144:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8009148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800914c:	f8a8 300c 	strh.w	r3, [r8, #12]
 8009150:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8009154:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800915a:	bf18      	it	ne
 800915c:	f04f 33ff 	movne.w	r3, #4294967295
 8009160:	e582      	b.n	8008c68 <_svfprintf_r+0x48>
 8009162:	1c69      	adds	r1, r5, #1
 8009164:	f000 80f3 	beq.w	800934e <_svfprintf_r+0x72e>
 8009168:	9b07      	ldr	r3, [sp, #28]
 800916a:	2b47      	cmp	r3, #71	; 0x47
 800916c:	d102      	bne.n	8009174 <_svfprintf_r+0x554>
 800916e:	2d00      	cmp	r5, #0
 8009170:	f000 80ef 	beq.w	8009352 <_svfprintf_r+0x732>
 8009174:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8009178:	9310      	str	r3, [sp, #64]	; 0x40
 800917a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800917c:	2b00      	cmp	r3, #0
 800917e:	f280 80eb 	bge.w	8009358 <_svfprintf_r+0x738>
 8009182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009184:	9314      	str	r3, [sp, #80]	; 0x50
 8009186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009188:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800918c:	9315      	str	r3, [sp, #84]	; 0x54
 800918e:	232d      	movs	r3, #45	; 0x2d
 8009190:	9313      	str	r3, [sp, #76]	; 0x4c
 8009192:	9b07      	ldr	r3, [sp, #28]
 8009194:	2b41      	cmp	r3, #65	; 0x41
 8009196:	f040 8105 	bne.w	80093a4 <_svfprintf_r+0x784>
 800919a:	a820      	add	r0, sp, #128	; 0x80
 800919c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80091a0:	f002 fe06 	bl	800bdb0 <frexp>
 80091a4:	2200      	movs	r2, #0
 80091a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80091aa:	ec51 0b10 	vmov	r0, r1, d0
 80091ae:	f7f7 fa23 	bl	80005f8 <__aeabi_dmul>
 80091b2:	2200      	movs	r2, #0
 80091b4:	2300      	movs	r3, #0
 80091b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091ba:	f7f7 fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 80091be:	b108      	cbz	r0, 80091c4 <_svfprintf_r+0x5a4>
 80091c0:	2301      	movs	r3, #1
 80091c2:	9320      	str	r3, [sp, #128]	; 0x80
 80091c4:	4f6c      	ldr	r7, [pc, #432]	; (8009378 <_svfprintf_r+0x758>)
 80091c6:	4b6d      	ldr	r3, [pc, #436]	; (800937c <_svfprintf_r+0x75c>)
 80091c8:	9a06      	ldr	r2, [sp, #24]
 80091ca:	2a61      	cmp	r2, #97	; 0x61
 80091cc:	bf08      	it	eq
 80091ce:	461f      	moveq	r7, r3
 80091d0:	9711      	str	r7, [sp, #68]	; 0x44
 80091d2:	465e      	mov	r6, fp
 80091d4:	1e6f      	subs	r7, r5, #1
 80091d6:	2200      	movs	r2, #0
 80091d8:	4b69      	ldr	r3, [pc, #420]	; (8009380 <_svfprintf_r+0x760>)
 80091da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091de:	f7f7 fa0b 	bl	80005f8 <__aeabi_dmul>
 80091e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091e6:	f7f7 fcb7 	bl	8000b58 <__aeabi_d2iz>
 80091ea:	901c      	str	r0, [sp, #112]	; 0x70
 80091ec:	f7f7 f99a 	bl	8000524 <__aeabi_i2d>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091f8:	f7f7 f846 	bl	8000288 <__aeabi_dsub>
 80091fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80091fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009200:	971d      	str	r7, [sp, #116]	; 0x74
 8009202:	5c9b      	ldrb	r3, [r3, r2]
 8009204:	f806 3b01 	strb.w	r3, [r6], #1
 8009208:	1c7a      	adds	r2, r7, #1
 800920a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800920e:	d006      	beq.n	800921e <_svfprintf_r+0x5fe>
 8009210:	2200      	movs	r2, #0
 8009212:	2300      	movs	r3, #0
 8009214:	3f01      	subs	r7, #1
 8009216:	f7f7 fc57 	bl	8000ac8 <__aeabi_dcmpeq>
 800921a:	2800      	cmp	r0, #0
 800921c:	d0db      	beq.n	80091d6 <_svfprintf_r+0x5b6>
 800921e:	2200      	movs	r2, #0
 8009220:	4b58      	ldr	r3, [pc, #352]	; (8009384 <_svfprintf_r+0x764>)
 8009222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009226:	f7f7 fc77 	bl	8000b18 <__aeabi_dcmpgt>
 800922a:	b960      	cbnz	r0, 8009246 <_svfprintf_r+0x626>
 800922c:	2200      	movs	r2, #0
 800922e:	4b55      	ldr	r3, [pc, #340]	; (8009384 <_svfprintf_r+0x764>)
 8009230:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009234:	f7f7 fc48 	bl	8000ac8 <__aeabi_dcmpeq>
 8009238:	2800      	cmp	r0, #0
 800923a:	f000 80ae 	beq.w	800939a <_svfprintf_r+0x77a>
 800923e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009240:	07db      	lsls	r3, r3, #31
 8009242:	f140 80aa 	bpl.w	800939a <_svfprintf_r+0x77a>
 8009246:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009248:	9624      	str	r6, [sp, #144]	; 0x90
 800924a:	7bd9      	ldrb	r1, [r3, #15]
 800924c:	2030      	movs	r0, #48	; 0x30
 800924e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009250:	1e53      	subs	r3, r2, #1
 8009252:	9324      	str	r3, [sp, #144]	; 0x90
 8009254:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8009258:	428b      	cmp	r3, r1
 800925a:	f000 8095 	beq.w	8009388 <_svfprintf_r+0x768>
 800925e:	2b39      	cmp	r3, #57	; 0x39
 8009260:	bf0b      	itete	eq
 8009262:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 8009264:	3301      	addne	r3, #1
 8009266:	7a9b      	ldrbeq	r3, [r3, #10]
 8009268:	b2db      	uxtbne	r3, r3
 800926a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800926e:	4633      	mov	r3, r6
 8009270:	eba3 030b 	sub.w	r3, r3, fp
 8009274:	9304      	str	r3, [sp, #16]
 8009276:	9b07      	ldr	r3, [sp, #28]
 8009278:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800927a:	2b47      	cmp	r3, #71	; 0x47
 800927c:	f040 80d7 	bne.w	800942e <_svfprintf_r+0x80e>
 8009280:	1cf7      	adds	r7, r6, #3
 8009282:	db02      	blt.n	800928a <_svfprintf_r+0x66a>
 8009284:	42b5      	cmp	r5, r6
 8009286:	f280 80fd 	bge.w	8009484 <_svfprintf_r+0x864>
 800928a:	9b06      	ldr	r3, [sp, #24]
 800928c:	3b02      	subs	r3, #2
 800928e:	9306      	str	r3, [sp, #24]
 8009290:	9906      	ldr	r1, [sp, #24]
 8009292:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8009296:	f021 0120 	bic.w	r1, r1, #32
 800929a:	2941      	cmp	r1, #65	; 0x41
 800929c:	bf08      	it	eq
 800929e:	320f      	addeq	r2, #15
 80092a0:	f106 33ff 	add.w	r3, r6, #4294967295
 80092a4:	bf06      	itte	eq
 80092a6:	b2d2      	uxtbeq	r2, r2
 80092a8:	2101      	moveq	r1, #1
 80092aa:	2100      	movne	r1, #0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	9320      	str	r3, [sp, #128]	; 0x80
 80092b0:	bfb8      	it	lt
 80092b2:	f1c6 0301 	rsblt	r3, r6, #1
 80092b6:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 80092ba:	bfb4      	ite	lt
 80092bc:	222d      	movlt	r2, #45	; 0x2d
 80092be:	222b      	movge	r2, #43	; 0x2b
 80092c0:	2b09      	cmp	r3, #9
 80092c2:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 80092c6:	f340 80c9 	ble.w	800945c <_svfprintf_r+0x83c>
 80092ca:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 80092ce:	250a      	movs	r5, #10
 80092d0:	fb93 f0f5 	sdiv	r0, r3, r5
 80092d4:	fb05 3310 	mls	r3, r5, r0, r3
 80092d8:	3330      	adds	r3, #48	; 0x30
 80092da:	2809      	cmp	r0, #9
 80092dc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80092e0:	f102 31ff 	add.w	r1, r2, #4294967295
 80092e4:	4603      	mov	r3, r0
 80092e6:	f300 80b2 	bgt.w	800944e <_svfprintf_r+0x82e>
 80092ea:	3330      	adds	r3, #48	; 0x30
 80092ec:	f801 3c01 	strb.w	r3, [r1, #-1]
 80092f0:	3a02      	subs	r2, #2
 80092f2:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 80092f6:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 80092fa:	4282      	cmp	r2, r0
 80092fc:	4619      	mov	r1, r3
 80092fe:	f0c0 80a8 	bcc.w	8009452 <_svfprintf_r+0x832>
 8009302:	9a04      	ldr	r2, [sp, #16]
 8009304:	ab22      	add	r3, sp, #136	; 0x88
 8009306:	1acb      	subs	r3, r1, r3
 8009308:	2a01      	cmp	r2, #1
 800930a:	9317      	str	r3, [sp, #92]	; 0x5c
 800930c:	eb03 0502 	add.w	r5, r3, r2
 8009310:	dc02      	bgt.n	8009318 <_svfprintf_r+0x6f8>
 8009312:	f01a 0f01 	tst.w	sl, #1
 8009316:	d001      	beq.n	800931c <_svfprintf_r+0x6fc>
 8009318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800931a:	441d      	add	r5, r3
 800931c:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8009320:	2700      	movs	r7, #0
 8009322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009326:	9310      	str	r3, [sp, #64]	; 0x40
 8009328:	9707      	str	r7, [sp, #28]
 800932a:	463e      	mov	r6, r7
 800932c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 8315 	beq.w	800995e <_svfprintf_r+0xd3e>
 8009334:	232d      	movs	r3, #45	; 0x2d
 8009336:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800933a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800933e:	2300      	movs	r3, #0
 8009340:	9310      	str	r3, [sp, #64]	; 0x40
 8009342:	e160      	b.n	8009606 <_svfprintf_r+0x9e6>
 8009344:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8009348:	e714      	b.n	8009174 <_svfprintf_r+0x554>
 800934a:	4681      	mov	r9, r0
 800934c:	e712      	b.n	8009174 <_svfprintf_r+0x554>
 800934e:	2506      	movs	r5, #6
 8009350:	e710      	b.n	8009174 <_svfprintf_r+0x554>
 8009352:	46a9      	mov	r9, r5
 8009354:	2501      	movs	r5, #1
 8009356:	e70d      	b.n	8009174 <_svfprintf_r+0x554>
 8009358:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800935c:	2300      	movs	r3, #0
 800935e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8009362:	e715      	b.n	8009190 <_svfprintf_r+0x570>
 8009364:	7fefffff 	.word	0x7fefffff
 8009368:	0800edec 	.word	0x0800edec
 800936c:	0800ede8 	.word	0x0800ede8
 8009370:	0800edf4 	.word	0x0800edf4
 8009374:	0800edf0 	.word	0x0800edf0
 8009378:	0800ee09 	.word	0x0800ee09
 800937c:	0800edf8 	.word	0x0800edf8
 8009380:	40300000 	.word	0x40300000
 8009384:	3fe00000 	.word	0x3fe00000
 8009388:	f802 0c01 	strb.w	r0, [r2, #-1]
 800938c:	e75f      	b.n	800924e <_svfprintf_r+0x62e>
 800938e:	f803 1b01 	strb.w	r1, [r3], #1
 8009392:	1af2      	subs	r2, r6, r3
 8009394:	2a00      	cmp	r2, #0
 8009396:	dafa      	bge.n	800938e <_svfprintf_r+0x76e>
 8009398:	e76a      	b.n	8009270 <_svfprintf_r+0x650>
 800939a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800939c:	4633      	mov	r3, r6
 800939e:	2130      	movs	r1, #48	; 0x30
 80093a0:	4416      	add	r6, r2
 80093a2:	e7f6      	b.n	8009392 <_svfprintf_r+0x772>
 80093a4:	9b07      	ldr	r3, [sp, #28]
 80093a6:	2b46      	cmp	r3, #70	; 0x46
 80093a8:	d004      	beq.n	80093b4 <_svfprintf_r+0x794>
 80093aa:	2b45      	cmp	r3, #69	; 0x45
 80093ac:	d13a      	bne.n	8009424 <_svfprintf_r+0x804>
 80093ae:	1c6e      	adds	r6, r5, #1
 80093b0:	2102      	movs	r1, #2
 80093b2:	e001      	b.n	80093b8 <_svfprintf_r+0x798>
 80093b4:	462e      	mov	r6, r5
 80093b6:	2103      	movs	r1, #3
 80093b8:	ab24      	add	r3, sp, #144	; 0x90
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	ab21      	add	r3, sp, #132	; 0x84
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	4632      	mov	r2, r6
 80093c2:	ab20      	add	r3, sp, #128	; 0x80
 80093c4:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80093c8:	9803      	ldr	r0, [sp, #12]
 80093ca:	f000 fef1 	bl	800a1b0 <_dtoa_r>
 80093ce:	9b07      	ldr	r3, [sp, #28]
 80093d0:	2b47      	cmp	r3, #71	; 0x47
 80093d2:	4683      	mov	fp, r0
 80093d4:	d102      	bne.n	80093dc <_svfprintf_r+0x7bc>
 80093d6:	f01a 0f01 	tst.w	sl, #1
 80093da:	d026      	beq.n	800942a <_svfprintf_r+0x80a>
 80093dc:	9b07      	ldr	r3, [sp, #28]
 80093de:	2b46      	cmp	r3, #70	; 0x46
 80093e0:	eb0b 0706 	add.w	r7, fp, r6
 80093e4:	d10f      	bne.n	8009406 <_svfprintf_r+0x7e6>
 80093e6:	f89b 3000 	ldrb.w	r3, [fp]
 80093ea:	2b30      	cmp	r3, #48	; 0x30
 80093ec:	d109      	bne.n	8009402 <_svfprintf_r+0x7e2>
 80093ee:	2200      	movs	r2, #0
 80093f0:	2300      	movs	r3, #0
 80093f2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80093f6:	f7f7 fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 80093fa:	b910      	cbnz	r0, 8009402 <_svfprintf_r+0x7e2>
 80093fc:	f1c6 0601 	rsb	r6, r6, #1
 8009400:	9620      	str	r6, [sp, #128]	; 0x80
 8009402:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009404:	441f      	add	r7, r3
 8009406:	2200      	movs	r2, #0
 8009408:	2300      	movs	r3, #0
 800940a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800940e:	f7f7 fb5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009412:	b948      	cbnz	r0, 8009428 <_svfprintf_r+0x808>
 8009414:	2230      	movs	r2, #48	; 0x30
 8009416:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009418:	429f      	cmp	r7, r3
 800941a:	d906      	bls.n	800942a <_svfprintf_r+0x80a>
 800941c:	1c59      	adds	r1, r3, #1
 800941e:	9124      	str	r1, [sp, #144]	; 0x90
 8009420:	701a      	strb	r2, [r3, #0]
 8009422:	e7f8      	b.n	8009416 <_svfprintf_r+0x7f6>
 8009424:	462e      	mov	r6, r5
 8009426:	e7c3      	b.n	80093b0 <_svfprintf_r+0x790>
 8009428:	9724      	str	r7, [sp, #144]	; 0x90
 800942a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800942c:	e720      	b.n	8009270 <_svfprintf_r+0x650>
 800942e:	9b07      	ldr	r3, [sp, #28]
 8009430:	2b46      	cmp	r3, #70	; 0x46
 8009432:	f47f af2d 	bne.w	8009290 <_svfprintf_r+0x670>
 8009436:	2e00      	cmp	r6, #0
 8009438:	dd1d      	ble.n	8009476 <_svfprintf_r+0x856>
 800943a:	b915      	cbnz	r5, 8009442 <_svfprintf_r+0x822>
 800943c:	f01a 0f01 	tst.w	sl, #1
 8009440:	d034      	beq.n	80094ac <_svfprintf_r+0x88c>
 8009442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009444:	18f3      	adds	r3, r6, r3
 8009446:	441d      	add	r5, r3
 8009448:	2366      	movs	r3, #102	; 0x66
 800944a:	9306      	str	r3, [sp, #24]
 800944c:	e033      	b.n	80094b6 <_svfprintf_r+0x896>
 800944e:	460a      	mov	r2, r1
 8009450:	e73e      	b.n	80092d0 <_svfprintf_r+0x6b0>
 8009452:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009456:	f803 1b01 	strb.w	r1, [r3], #1
 800945a:	e74e      	b.n	80092fa <_svfprintf_r+0x6da>
 800945c:	b941      	cbnz	r1, 8009470 <_svfprintf_r+0x850>
 800945e:	2230      	movs	r2, #48	; 0x30
 8009460:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8009464:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8009468:	3330      	adds	r3, #48	; 0x30
 800946a:	1c51      	adds	r1, r2, #1
 800946c:	7013      	strb	r3, [r2, #0]
 800946e:	e748      	b.n	8009302 <_svfprintf_r+0x6e2>
 8009470:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8009474:	e7f8      	b.n	8009468 <_svfprintf_r+0x848>
 8009476:	b915      	cbnz	r5, 800947e <_svfprintf_r+0x85e>
 8009478:	f01a 0f01 	tst.w	sl, #1
 800947c:	d018      	beq.n	80094b0 <_svfprintf_r+0x890>
 800947e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009480:	3301      	adds	r3, #1
 8009482:	e7e0      	b.n	8009446 <_svfprintf_r+0x826>
 8009484:	9b04      	ldr	r3, [sp, #16]
 8009486:	42b3      	cmp	r3, r6
 8009488:	dc06      	bgt.n	8009498 <_svfprintf_r+0x878>
 800948a:	f01a 0f01 	tst.w	sl, #1
 800948e:	d025      	beq.n	80094dc <_svfprintf_r+0x8bc>
 8009490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009492:	18f5      	adds	r5, r6, r3
 8009494:	2367      	movs	r3, #103	; 0x67
 8009496:	e7d8      	b.n	800944a <_svfprintf_r+0x82a>
 8009498:	9b04      	ldr	r3, [sp, #16]
 800949a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800949c:	2e00      	cmp	r6, #0
 800949e:	eb03 0502 	add.w	r5, r3, r2
 80094a2:	dcf7      	bgt.n	8009494 <_svfprintf_r+0x874>
 80094a4:	f1c6 0301 	rsb	r3, r6, #1
 80094a8:	441d      	add	r5, r3
 80094aa:	e7f3      	b.n	8009494 <_svfprintf_r+0x874>
 80094ac:	4635      	mov	r5, r6
 80094ae:	e7cb      	b.n	8009448 <_svfprintf_r+0x828>
 80094b0:	2366      	movs	r3, #102	; 0x66
 80094b2:	9306      	str	r3, [sp, #24]
 80094b4:	2501      	movs	r5, #1
 80094b6:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 80094ba:	9307      	str	r3, [sp, #28]
 80094bc:	d01f      	beq.n	80094fe <_svfprintf_r+0x8de>
 80094be:	2700      	movs	r7, #0
 80094c0:	2e00      	cmp	r6, #0
 80094c2:	9707      	str	r7, [sp, #28]
 80094c4:	f77f af32 	ble.w	800932c <_svfprintf_r+0x70c>
 80094c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	2bff      	cmp	r3, #255	; 0xff
 80094ce:	d107      	bne.n	80094e0 <_svfprintf_r+0x8c0>
 80094d0:	9b07      	ldr	r3, [sp, #28]
 80094d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094d4:	443b      	add	r3, r7
 80094d6:	fb02 5503 	mla	r5, r2, r3, r5
 80094da:	e727      	b.n	800932c <_svfprintf_r+0x70c>
 80094dc:	4635      	mov	r5, r6
 80094de:	e7d9      	b.n	8009494 <_svfprintf_r+0x874>
 80094e0:	42b3      	cmp	r3, r6
 80094e2:	daf5      	bge.n	80094d0 <_svfprintf_r+0x8b0>
 80094e4:	1af6      	subs	r6, r6, r3
 80094e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094e8:	785b      	ldrb	r3, [r3, #1]
 80094ea:	b133      	cbz	r3, 80094fa <_svfprintf_r+0x8da>
 80094ec:	9b07      	ldr	r3, [sp, #28]
 80094ee:	3301      	adds	r3, #1
 80094f0:	9307      	str	r3, [sp, #28]
 80094f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f4:	3301      	adds	r3, #1
 80094f6:	9309      	str	r3, [sp, #36]	; 0x24
 80094f8:	e7e6      	b.n	80094c8 <_svfprintf_r+0x8a8>
 80094fa:	3701      	adds	r7, #1
 80094fc:	e7e4      	b.n	80094c8 <_svfprintf_r+0x8a8>
 80094fe:	9f07      	ldr	r7, [sp, #28]
 8009500:	e714      	b.n	800932c <_svfprintf_r+0x70c>
 8009502:	4632      	mov	r2, r6
 8009504:	f01a 0f20 	tst.w	sl, #32
 8009508:	f852 3b04 	ldr.w	r3, [r2], #4
 800950c:	9208      	str	r2, [sp, #32]
 800950e:	d009      	beq.n	8009524 <_svfprintf_r+0x904>
 8009510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009512:	4610      	mov	r0, r2
 8009514:	17d1      	asrs	r1, r2, #31
 8009516:	e9c3 0100 	strd	r0, r1, [r3]
 800951a:	9e08      	ldr	r6, [sp, #32]
 800951c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8009520:	f7ff bbba 	b.w	8008c98 <_svfprintf_r+0x78>
 8009524:	f01a 0f10 	tst.w	sl, #16
 8009528:	d002      	beq.n	8009530 <_svfprintf_r+0x910>
 800952a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	e7f4      	b.n	800951a <_svfprintf_r+0x8fa>
 8009530:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009534:	d002      	beq.n	800953c <_svfprintf_r+0x91c>
 8009536:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009538:	801a      	strh	r2, [r3, #0]
 800953a:	e7ee      	b.n	800951a <_svfprintf_r+0x8fa>
 800953c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009540:	d0f3      	beq.n	800952a <_svfprintf_r+0x90a>
 8009542:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009544:	701a      	strb	r2, [r3, #0]
 8009546:	e7e8      	b.n	800951a <_svfprintf_r+0x8fa>
 8009548:	f04a 0a10 	orr.w	sl, sl, #16
 800954c:	f01a 0f20 	tst.w	sl, #32
 8009550:	d01e      	beq.n	8009590 <_svfprintf_r+0x970>
 8009552:	3607      	adds	r6, #7
 8009554:	f026 0607 	bic.w	r6, r6, #7
 8009558:	f106 0308 	add.w	r3, r6, #8
 800955c:	e9d6 6700 	ldrd	r6, r7, [r6]
 8009560:	9308      	str	r3, [sp, #32]
 8009562:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009566:	2300      	movs	r3, #0
 8009568:	2200      	movs	r2, #0
 800956a:	1c69      	adds	r1, r5, #1
 800956c:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8009570:	f000 815b 	beq.w	800982a <_svfprintf_r+0xc0a>
 8009574:	4652      	mov	r2, sl
 8009576:	ea56 0107 	orrs.w	r1, r6, r7
 800957a:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800957e:	f040 8154 	bne.w	800982a <_svfprintf_r+0xc0a>
 8009582:	2d00      	cmp	r5, #0
 8009584:	f000 81d5 	beq.w	8009932 <_svfprintf_r+0xd12>
 8009588:	2b01      	cmp	r3, #1
 800958a:	f040 8151 	bne.w	8009830 <_svfprintf_r+0xc10>
 800958e:	e558      	b.n	8009042 <_svfprintf_r+0x422>
 8009590:	1d33      	adds	r3, r6, #4
 8009592:	f01a 0f10 	tst.w	sl, #16
 8009596:	9308      	str	r3, [sp, #32]
 8009598:	d001      	beq.n	800959e <_svfprintf_r+0x97e>
 800959a:	6836      	ldr	r6, [r6, #0]
 800959c:	e003      	b.n	80095a6 <_svfprintf_r+0x986>
 800959e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80095a2:	d002      	beq.n	80095aa <_svfprintf_r+0x98a>
 80095a4:	8836      	ldrh	r6, [r6, #0]
 80095a6:	2700      	movs	r7, #0
 80095a8:	e7db      	b.n	8009562 <_svfprintf_r+0x942>
 80095aa:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80095ae:	d0f4      	beq.n	800959a <_svfprintf_r+0x97a>
 80095b0:	7836      	ldrb	r6, [r6, #0]
 80095b2:	e7f8      	b.n	80095a6 <_svfprintf_r+0x986>
 80095b4:	1d33      	adds	r3, r6, #4
 80095b6:	9308      	str	r3, [sp, #32]
 80095b8:	f647 0330 	movw	r3, #30768	; 0x7830
 80095bc:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 80095c0:	2278      	movs	r2, #120	; 0x78
 80095c2:	4bb0      	ldr	r3, [pc, #704]	; (8009884 <_svfprintf_r+0xc64>)
 80095c4:	9318      	str	r3, [sp, #96]	; 0x60
 80095c6:	6836      	ldr	r6, [r6, #0]
 80095c8:	9206      	str	r2, [sp, #24]
 80095ca:	2700      	movs	r7, #0
 80095cc:	f04a 0a02 	orr.w	sl, sl, #2
 80095d0:	2302      	movs	r3, #2
 80095d2:	e7c9      	b.n	8009568 <_svfprintf_r+0x948>
 80095d4:	1d33      	adds	r3, r6, #4
 80095d6:	f8d6 b000 	ldr.w	fp, [r6]
 80095da:	9308      	str	r3, [sp, #32]
 80095dc:	2600      	movs	r6, #0
 80095de:	1c68      	adds	r0, r5, #1
 80095e0:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 80095e4:	f000 80e1 	beq.w	80097aa <_svfprintf_r+0xb8a>
 80095e8:	462a      	mov	r2, r5
 80095ea:	4631      	mov	r1, r6
 80095ec:	4658      	mov	r0, fp
 80095ee:	f7f6 fdf7 	bl	80001e0 <memchr>
 80095f2:	4681      	mov	r9, r0
 80095f4:	2800      	cmp	r0, #0
 80095f6:	f43f ad74 	beq.w	80090e2 <_svfprintf_r+0x4c2>
 80095fa:	eba0 050b 	sub.w	r5, r0, fp
 80095fe:	46b1      	mov	r9, r6
 8009600:	9610      	str	r6, [sp, #64]	; 0x40
 8009602:	4637      	mov	r7, r6
 8009604:	9607      	str	r6, [sp, #28]
 8009606:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009608:	42ab      	cmp	r3, r5
 800960a:	bfb8      	it	lt
 800960c:	462b      	movlt	r3, r5
 800960e:	9311      	str	r3, [sp, #68]	; 0x44
 8009610:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8009614:	b113      	cbz	r3, 800961c <_svfprintf_r+0x9fc>
 8009616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009618:	3301      	adds	r3, #1
 800961a:	9311      	str	r3, [sp, #68]	; 0x44
 800961c:	f01a 0302 	ands.w	r3, sl, #2
 8009620:	931c      	str	r3, [sp, #112]	; 0x70
 8009622:	bf1e      	ittt	ne
 8009624:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8009626:	3302      	addne	r3, #2
 8009628:	9311      	strne	r3, [sp, #68]	; 0x44
 800962a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800962e:	931d      	str	r3, [sp, #116]	; 0x74
 8009630:	d122      	bne.n	8009678 <_svfprintf_r+0xa58>
 8009632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009634:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009636:	1a9b      	subs	r3, r3, r2
 8009638:	2b00      	cmp	r3, #0
 800963a:	9313      	str	r3, [sp, #76]	; 0x4c
 800963c:	dd1c      	ble.n	8009678 <_svfprintf_r+0xa58>
 800963e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009640:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8009644:	2810      	cmp	r0, #16
 8009646:	4890      	ldr	r0, [pc, #576]	; (8009888 <_svfprintf_r+0xc68>)
 8009648:	6020      	str	r0, [r4, #0]
 800964a:	f102 0201 	add.w	r2, r2, #1
 800964e:	f104 0108 	add.w	r1, r4, #8
 8009652:	f300 8188 	bgt.w	8009966 <_svfprintf_r+0xd46>
 8009656:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009658:	6060      	str	r0, [r4, #4]
 800965a:	4403      	add	r3, r0
 800965c:	2a07      	cmp	r2, #7
 800965e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8009662:	f340 8195 	ble.w	8009990 <_svfprintf_r+0xd70>
 8009666:	aa26      	add	r2, sp, #152	; 0x98
 8009668:	4641      	mov	r1, r8
 800966a:	9803      	ldr	r0, [sp, #12]
 800966c:	f002 fbfd 	bl	800be6a <__ssprint_r>
 8009670:	2800      	cmp	r0, #0
 8009672:	f040 84c1 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009676:	ac29      	add	r4, sp, #164	; 0xa4
 8009678:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800967c:	b173      	cbz	r3, 800969c <_svfprintf_r+0xa7c>
 800967e:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8009682:	6023      	str	r3, [r4, #0]
 8009684:	2301      	movs	r3, #1
 8009686:	6063      	str	r3, [r4, #4]
 8009688:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800968a:	3301      	adds	r3, #1
 800968c:	9328      	str	r3, [sp, #160]	; 0xa0
 800968e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009690:	3301      	adds	r3, #1
 8009692:	2b07      	cmp	r3, #7
 8009694:	9327      	str	r3, [sp, #156]	; 0x9c
 8009696:	f300 817d 	bgt.w	8009994 <_svfprintf_r+0xd74>
 800969a:	3408      	adds	r4, #8
 800969c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800969e:	b16b      	cbz	r3, 80096bc <_svfprintf_r+0xa9c>
 80096a0:	ab1f      	add	r3, sp, #124	; 0x7c
 80096a2:	6023      	str	r3, [r4, #0]
 80096a4:	2302      	movs	r3, #2
 80096a6:	6063      	str	r3, [r4, #4]
 80096a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80096aa:	3302      	adds	r3, #2
 80096ac:	9328      	str	r3, [sp, #160]	; 0xa0
 80096ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80096b0:	3301      	adds	r3, #1
 80096b2:	2b07      	cmp	r3, #7
 80096b4:	9327      	str	r3, [sp, #156]	; 0x9c
 80096b6:	f300 8177 	bgt.w	80099a8 <_svfprintf_r+0xd88>
 80096ba:	3408      	adds	r4, #8
 80096bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80096be:	2b80      	cmp	r3, #128	; 0x80
 80096c0:	d122      	bne.n	8009708 <_svfprintf_r+0xae8>
 80096c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80096c6:	1a9b      	subs	r3, r3, r2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80096cc:	dd1c      	ble.n	8009708 <_svfprintf_r+0xae8>
 80096ce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80096d0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 80096d4:	2810      	cmp	r0, #16
 80096d6:	486d      	ldr	r0, [pc, #436]	; (800988c <_svfprintf_r+0xc6c>)
 80096d8:	6020      	str	r0, [r4, #0]
 80096da:	f102 0201 	add.w	r2, r2, #1
 80096de:	f104 0108 	add.w	r1, r4, #8
 80096e2:	f300 816b 	bgt.w	80099bc <_svfprintf_r+0xd9c>
 80096e6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80096e8:	6060      	str	r0, [r4, #4]
 80096ea:	4403      	add	r3, r0
 80096ec:	2a07      	cmp	r2, #7
 80096ee:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80096f2:	f340 8178 	ble.w	80099e6 <_svfprintf_r+0xdc6>
 80096f6:	aa26      	add	r2, sp, #152	; 0x98
 80096f8:	4641      	mov	r1, r8
 80096fa:	9803      	ldr	r0, [sp, #12]
 80096fc:	f002 fbb5 	bl	800be6a <__ssprint_r>
 8009700:	2800      	cmp	r0, #0
 8009702:	f040 8479 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009706:	ac29      	add	r4, sp, #164	; 0xa4
 8009708:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800970a:	1b5b      	subs	r3, r3, r5
 800970c:	2b00      	cmp	r3, #0
 800970e:	9310      	str	r3, [sp, #64]	; 0x40
 8009710:	dd1c      	ble.n	800974c <_svfprintf_r+0xb2c>
 8009712:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009714:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8009718:	2810      	cmp	r0, #16
 800971a:	485c      	ldr	r0, [pc, #368]	; (800988c <_svfprintf_r+0xc6c>)
 800971c:	6020      	str	r0, [r4, #0]
 800971e:	f102 0201 	add.w	r2, r2, #1
 8009722:	f104 0108 	add.w	r1, r4, #8
 8009726:	f300 8160 	bgt.w	80099ea <_svfprintf_r+0xdca>
 800972a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800972c:	6060      	str	r0, [r4, #4]
 800972e:	4403      	add	r3, r0
 8009730:	2a07      	cmp	r2, #7
 8009732:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8009736:	f340 816d 	ble.w	8009a14 <_svfprintf_r+0xdf4>
 800973a:	aa26      	add	r2, sp, #152	; 0x98
 800973c:	4641      	mov	r1, r8
 800973e:	9803      	ldr	r0, [sp, #12]
 8009740:	f002 fb93 	bl	800be6a <__ssprint_r>
 8009744:	2800      	cmp	r0, #0
 8009746:	f040 8457 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 800974a:	ac29      	add	r4, sp, #164	; 0xa4
 800974c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800974e:	9310      	str	r3, [sp, #64]	; 0x40
 8009750:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009754:	f040 8160 	bne.w	8009a18 <_svfprintf_r+0xdf8>
 8009758:	e9c4 b500 	strd	fp, r5, [r4]
 800975c:	441d      	add	r5, r3
 800975e:	9528      	str	r5, [sp, #160]	; 0xa0
 8009760:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009762:	3301      	adds	r3, #1
 8009764:	2b07      	cmp	r3, #7
 8009766:	9327      	str	r3, [sp, #156]	; 0x9c
 8009768:	f300 819c 	bgt.w	8009aa4 <_svfprintf_r+0xe84>
 800976c:	3408      	adds	r4, #8
 800976e:	f01a 0f04 	tst.w	sl, #4
 8009772:	f040 8423 	bne.w	8009fbc <_svfprintf_r+0x139c>
 8009776:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800977a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800977c:	428a      	cmp	r2, r1
 800977e:	bfac      	ite	ge
 8009780:	189b      	addge	r3, r3, r2
 8009782:	185b      	addlt	r3, r3, r1
 8009784:	930e      	str	r3, [sp, #56]	; 0x38
 8009786:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009788:	b13b      	cbz	r3, 800979a <_svfprintf_r+0xb7a>
 800978a:	aa26      	add	r2, sp, #152	; 0x98
 800978c:	4641      	mov	r1, r8
 800978e:	9803      	ldr	r0, [sp, #12]
 8009790:	f002 fb6b 	bl	800be6a <__ssprint_r>
 8009794:	2800      	cmp	r0, #0
 8009796:	f040 842f 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 800979a:	2300      	movs	r3, #0
 800979c:	9327      	str	r3, [sp, #156]	; 0x9c
 800979e:	f1b9 0f00 	cmp.w	r9, #0
 80097a2:	f040 8445 	bne.w	800a030 <_svfprintf_r+0x1410>
 80097a6:	ac29      	add	r4, sp, #164	; 0xa4
 80097a8:	e6b7      	b.n	800951a <_svfprintf_r+0x8fa>
 80097aa:	4658      	mov	r0, fp
 80097ac:	f7f6 fd10 	bl	80001d0 <strlen>
 80097b0:	46b1      	mov	r9, r6
 80097b2:	4605      	mov	r5, r0
 80097b4:	e495      	b.n	80090e2 <_svfprintf_r+0x4c2>
 80097b6:	f04a 0a10 	orr.w	sl, sl, #16
 80097ba:	f01a 0f20 	tst.w	sl, #32
 80097be:	d009      	beq.n	80097d4 <_svfprintf_r+0xbb4>
 80097c0:	3607      	adds	r6, #7
 80097c2:	f026 0607 	bic.w	r6, r6, #7
 80097c6:	f106 0308 	add.w	r3, r6, #8
 80097ca:	e9d6 6700 	ldrd	r6, r7, [r6]
 80097ce:	9308      	str	r3, [sp, #32]
 80097d0:	2301      	movs	r3, #1
 80097d2:	e6c9      	b.n	8009568 <_svfprintf_r+0x948>
 80097d4:	1d33      	adds	r3, r6, #4
 80097d6:	f01a 0f10 	tst.w	sl, #16
 80097da:	9308      	str	r3, [sp, #32]
 80097dc:	d001      	beq.n	80097e2 <_svfprintf_r+0xbc2>
 80097de:	6836      	ldr	r6, [r6, #0]
 80097e0:	e003      	b.n	80097ea <_svfprintf_r+0xbca>
 80097e2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80097e6:	d002      	beq.n	80097ee <_svfprintf_r+0xbce>
 80097e8:	8836      	ldrh	r6, [r6, #0]
 80097ea:	2700      	movs	r7, #0
 80097ec:	e7f0      	b.n	80097d0 <_svfprintf_r+0xbb0>
 80097ee:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80097f2:	d0f4      	beq.n	80097de <_svfprintf_r+0xbbe>
 80097f4:	7836      	ldrb	r6, [r6, #0]
 80097f6:	e7f8      	b.n	80097ea <_svfprintf_r+0xbca>
 80097f8:	4b22      	ldr	r3, [pc, #136]	; (8009884 <_svfprintf_r+0xc64>)
 80097fa:	f7ff bb48 	b.w	8008e8e <_svfprintf_r+0x26e>
 80097fe:	1d33      	adds	r3, r6, #4
 8009800:	f01a 0f10 	tst.w	sl, #16
 8009804:	9308      	str	r3, [sp, #32]
 8009806:	d001      	beq.n	800980c <_svfprintf_r+0xbec>
 8009808:	6836      	ldr	r6, [r6, #0]
 800980a:	e003      	b.n	8009814 <_svfprintf_r+0xbf4>
 800980c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009810:	d003      	beq.n	800981a <_svfprintf_r+0xbfa>
 8009812:	8836      	ldrh	r6, [r6, #0]
 8009814:	2700      	movs	r7, #0
 8009816:	f7ff bb47 	b.w	8008ea8 <_svfprintf_r+0x288>
 800981a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800981e:	d0f3      	beq.n	8009808 <_svfprintf_r+0xbe8>
 8009820:	7836      	ldrb	r6, [r6, #0]
 8009822:	e7f7      	b.n	8009814 <_svfprintf_r+0xbf4>
 8009824:	4652      	mov	r2, sl
 8009826:	2301      	movs	r3, #1
 8009828:	e6a5      	b.n	8009576 <_svfprintf_r+0x956>
 800982a:	2b01      	cmp	r3, #1
 800982c:	f43f ac04 	beq.w	8009038 <_svfprintf_r+0x418>
 8009830:	2b02      	cmp	r3, #2
 8009832:	d06c      	beq.n	800990e <_svfprintf_r+0xcee>
 8009834:	ab52      	add	r3, sp, #328	; 0x148
 8009836:	08f1      	lsrs	r1, r6, #3
 8009838:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800983c:	08f8      	lsrs	r0, r7, #3
 800983e:	f006 0207 	and.w	r2, r6, #7
 8009842:	4607      	mov	r7, r0
 8009844:	460e      	mov	r6, r1
 8009846:	3230      	adds	r2, #48	; 0x30
 8009848:	ea56 0107 	orrs.w	r1, r6, r7
 800984c:	f103 3bff 	add.w	fp, r3, #4294967295
 8009850:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009854:	d114      	bne.n	8009880 <_svfprintf_r+0xc60>
 8009856:	f01a 0f01 	tst.w	sl, #1
 800985a:	d006      	beq.n	800986a <_svfprintf_r+0xc4a>
 800985c:	2a30      	cmp	r2, #48	; 0x30
 800985e:	d004      	beq.n	800986a <_svfprintf_r+0xc4a>
 8009860:	2230      	movs	r2, #48	; 0x30
 8009862:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8009866:	f1a3 0b02 	sub.w	fp, r3, #2
 800986a:	ab52      	add	r3, sp, #328	; 0x148
 800986c:	9510      	str	r5, [sp, #64]	; 0x40
 800986e:	f04f 0900 	mov.w	r9, #0
 8009872:	eba3 050b 	sub.w	r5, r3, fp
 8009876:	464f      	mov	r7, r9
 8009878:	f8cd 901c 	str.w	r9, [sp, #28]
 800987c:	464e      	mov	r6, r9
 800987e:	e6c2      	b.n	8009606 <_svfprintf_r+0x9e6>
 8009880:	465b      	mov	r3, fp
 8009882:	e7d8      	b.n	8009836 <_svfprintf_r+0xc16>
 8009884:	0800edf8 	.word	0x0800edf8
 8009888:	0800ee1c 	.word	0x0800ee1c
 800988c:	0800ee2c 	.word	0x0800ee2c
 8009890:	2300      	movs	r3, #0
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8009898:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 800989c:	9307      	str	r3, [sp, #28]
 800989e:	220a      	movs	r2, #10
 80098a0:	2300      	movs	r3, #0
 80098a2:	4630      	mov	r0, r6
 80098a4:	4639      	mov	r1, r7
 80098a6:	f7f7 f9ef 	bl	8000c88 <__aeabi_uldivmod>
 80098aa:	9b04      	ldr	r3, [sp, #16]
 80098ac:	3301      	adds	r3, #1
 80098ae:	9304      	str	r3, [sp, #16]
 80098b0:	9b07      	ldr	r3, [sp, #28]
 80098b2:	3230      	adds	r2, #48	; 0x30
 80098b4:	f109 3bff 	add.w	fp, r9, #4294967295
 80098b8:	f809 2c01 	strb.w	r2, [r9, #-1]
 80098bc:	b1d3      	cbz	r3, 80098f4 <_svfprintf_r+0xcd4>
 80098be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c0:	9a04      	ldr	r2, [sp, #16]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d115      	bne.n	80098f4 <_svfprintf_r+0xcd4>
 80098c8:	2aff      	cmp	r2, #255	; 0xff
 80098ca:	d013      	beq.n	80098f4 <_svfprintf_r+0xcd4>
 80098cc:	2f00      	cmp	r7, #0
 80098ce:	bf08      	it	eq
 80098d0:	2e0a      	cmpeq	r6, #10
 80098d2:	d30f      	bcc.n	80098f4 <_svfprintf_r+0xcd4>
 80098d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098d6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80098d8:	ebab 0b03 	sub.w	fp, fp, r3
 80098dc:	461a      	mov	r2, r3
 80098de:	4658      	mov	r0, fp
 80098e0:	f002 faae 	bl	800be40 <strncpy>
 80098e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e6:	785b      	ldrb	r3, [r3, #1]
 80098e8:	b11b      	cbz	r3, 80098f2 <_svfprintf_r+0xcd2>
 80098ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ec:	3301      	adds	r3, #1
 80098ee:	9309      	str	r3, [sp, #36]	; 0x24
 80098f0:	2300      	movs	r3, #0
 80098f2:	9304      	str	r3, [sp, #16]
 80098f4:	2300      	movs	r3, #0
 80098f6:	4630      	mov	r0, r6
 80098f8:	4639      	mov	r1, r7
 80098fa:	220a      	movs	r2, #10
 80098fc:	f7f7 f9c4 	bl	8000c88 <__aeabi_uldivmod>
 8009900:	4606      	mov	r6, r0
 8009902:	460f      	mov	r7, r1
 8009904:	ea56 0307 	orrs.w	r3, r6, r7
 8009908:	d0af      	beq.n	800986a <_svfprintf_r+0xc4a>
 800990a:	46d9      	mov	r9, fp
 800990c:	e7c7      	b.n	800989e <_svfprintf_r+0xc7e>
 800990e:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8009912:	f006 030f 	and.w	r3, r6, #15
 8009916:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009918:	5cd3      	ldrb	r3, [r2, r3]
 800991a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800991e:	0933      	lsrs	r3, r6, #4
 8009920:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8009924:	093a      	lsrs	r2, r7, #4
 8009926:	461e      	mov	r6, r3
 8009928:	4617      	mov	r7, r2
 800992a:	ea56 0307 	orrs.w	r3, r6, r7
 800992e:	d1f0      	bne.n	8009912 <_svfprintf_r+0xcf2>
 8009930:	e79b      	b.n	800986a <_svfprintf_r+0xc4a>
 8009932:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8009936:	2b00      	cmp	r3, #0
 8009938:	d197      	bne.n	800986a <_svfprintf_r+0xc4a>
 800993a:	07d2      	lsls	r2, r2, #31
 800993c:	bf44      	itt	mi
 800993e:	2330      	movmi	r3, #48	; 0x30
 8009940:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8009944:	e791      	b.n	800986a <_svfprintf_r+0xc4a>
 8009946:	9b06      	ldr	r3, [sp, #24]
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 8377 	beq.w	800a03c <_svfprintf_r+0x141c>
 800994e:	2000      	movs	r0, #0
 8009950:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8009954:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8009958:	9608      	str	r6, [sp, #32]
 800995a:	f7ff bb49 	b.w	8008ff0 <_svfprintf_r+0x3d0>
 800995e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8009962:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009964:	e4ec      	b.n	8009340 <_svfprintf_r+0x720>
 8009966:	2010      	movs	r0, #16
 8009968:	4403      	add	r3, r0
 800996a:	2a07      	cmp	r2, #7
 800996c:	6060      	str	r0, [r4, #4]
 800996e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8009972:	dd08      	ble.n	8009986 <_svfprintf_r+0xd66>
 8009974:	aa26      	add	r2, sp, #152	; 0x98
 8009976:	4641      	mov	r1, r8
 8009978:	9803      	ldr	r0, [sp, #12]
 800997a:	f002 fa76 	bl	800be6a <__ssprint_r>
 800997e:	2800      	cmp	r0, #0
 8009980:	f040 833a 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009984:	a929      	add	r1, sp, #164	; 0xa4
 8009986:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009988:	3b10      	subs	r3, #16
 800998a:	9313      	str	r3, [sp, #76]	; 0x4c
 800998c:	460c      	mov	r4, r1
 800998e:	e656      	b.n	800963e <_svfprintf_r+0xa1e>
 8009990:	460c      	mov	r4, r1
 8009992:	e671      	b.n	8009678 <_svfprintf_r+0xa58>
 8009994:	aa26      	add	r2, sp, #152	; 0x98
 8009996:	4641      	mov	r1, r8
 8009998:	9803      	ldr	r0, [sp, #12]
 800999a:	f002 fa66 	bl	800be6a <__ssprint_r>
 800999e:	2800      	cmp	r0, #0
 80099a0:	f040 832a 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 80099a4:	ac29      	add	r4, sp, #164	; 0xa4
 80099a6:	e679      	b.n	800969c <_svfprintf_r+0xa7c>
 80099a8:	aa26      	add	r2, sp, #152	; 0x98
 80099aa:	4641      	mov	r1, r8
 80099ac:	9803      	ldr	r0, [sp, #12]
 80099ae:	f002 fa5c 	bl	800be6a <__ssprint_r>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	f040 8320 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 80099b8:	ac29      	add	r4, sp, #164	; 0xa4
 80099ba:	e67f      	b.n	80096bc <_svfprintf_r+0xa9c>
 80099bc:	2010      	movs	r0, #16
 80099be:	4403      	add	r3, r0
 80099c0:	2a07      	cmp	r2, #7
 80099c2:	6060      	str	r0, [r4, #4]
 80099c4:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80099c8:	dd08      	ble.n	80099dc <_svfprintf_r+0xdbc>
 80099ca:	aa26      	add	r2, sp, #152	; 0x98
 80099cc:	4641      	mov	r1, r8
 80099ce:	9803      	ldr	r0, [sp, #12]
 80099d0:	f002 fa4b 	bl	800be6a <__ssprint_r>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f040 830f 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 80099da:	a929      	add	r1, sp, #164	; 0xa4
 80099dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80099de:	3b10      	subs	r3, #16
 80099e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80099e2:	460c      	mov	r4, r1
 80099e4:	e673      	b.n	80096ce <_svfprintf_r+0xaae>
 80099e6:	460c      	mov	r4, r1
 80099e8:	e68e      	b.n	8009708 <_svfprintf_r+0xae8>
 80099ea:	2010      	movs	r0, #16
 80099ec:	4403      	add	r3, r0
 80099ee:	2a07      	cmp	r2, #7
 80099f0:	6060      	str	r0, [r4, #4]
 80099f2:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80099f6:	dd08      	ble.n	8009a0a <_svfprintf_r+0xdea>
 80099f8:	aa26      	add	r2, sp, #152	; 0x98
 80099fa:	4641      	mov	r1, r8
 80099fc:	9803      	ldr	r0, [sp, #12]
 80099fe:	f002 fa34 	bl	800be6a <__ssprint_r>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	f040 82f8 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009a08:	a929      	add	r1, sp, #164	; 0xa4
 8009a0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a0c:	3b10      	subs	r3, #16
 8009a0e:	9310      	str	r3, [sp, #64]	; 0x40
 8009a10:	460c      	mov	r4, r1
 8009a12:	e67e      	b.n	8009712 <_svfprintf_r+0xaf2>
 8009a14:	460c      	mov	r4, r1
 8009a16:	e699      	b.n	800974c <_svfprintf_r+0xb2c>
 8009a18:	9b06      	ldr	r3, [sp, #24]
 8009a1a:	2b65      	cmp	r3, #101	; 0x65
 8009a1c:	f340 8234 	ble.w	8009e88 <_svfprintf_r+0x1268>
 8009a20:	2200      	movs	r2, #0
 8009a22:	2300      	movs	r3, #0
 8009a24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a28:	f7f7 f84e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d069      	beq.n	8009b04 <_svfprintf_r+0xee4>
 8009a30:	4b6e      	ldr	r3, [pc, #440]	; (8009bec <_svfprintf_r+0xfcc>)
 8009a32:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	2301      	movs	r3, #1
 8009a38:	441d      	add	r5, r3
 8009a3a:	6063      	str	r3, [r4, #4]
 8009a3c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009a3e:	9528      	str	r5, [sp, #160]	; 0xa0
 8009a40:	3301      	adds	r3, #1
 8009a42:	2b07      	cmp	r3, #7
 8009a44:	9327      	str	r3, [sp, #156]	; 0x9c
 8009a46:	dc37      	bgt.n	8009ab8 <_svfprintf_r+0xe98>
 8009a48:	3408      	adds	r4, #8
 8009a4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009a4c:	9a04      	ldr	r2, [sp, #16]
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	db03      	blt.n	8009a5a <_svfprintf_r+0xe3a>
 8009a52:	f01a 0f01 	tst.w	sl, #1
 8009a56:	f43f ae8a 	beq.w	800976e <_svfprintf_r+0xb4e>
 8009a5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a60:	6063      	str	r3, [r4, #4]
 8009a62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009a66:	4413      	add	r3, r2
 8009a68:	9328      	str	r3, [sp, #160]	; 0xa0
 8009a6a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	2b07      	cmp	r3, #7
 8009a70:	9327      	str	r3, [sp, #156]	; 0x9c
 8009a72:	dc2b      	bgt.n	8009acc <_svfprintf_r+0xeac>
 8009a74:	3408      	adds	r4, #8
 8009a76:	9b04      	ldr	r3, [sp, #16]
 8009a78:	1e5d      	subs	r5, r3, #1
 8009a7a:	2d00      	cmp	r5, #0
 8009a7c:	f77f ae77 	ble.w	800976e <_svfprintf_r+0xb4e>
 8009a80:	4e5b      	ldr	r6, [pc, #364]	; (8009bf0 <_svfprintf_r+0xfd0>)
 8009a82:	2710      	movs	r7, #16
 8009a84:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8009a88:	2d10      	cmp	r5, #16
 8009a8a:	f103 0301 	add.w	r3, r3, #1
 8009a8e:	f104 0108 	add.w	r1, r4, #8
 8009a92:	6026      	str	r6, [r4, #0]
 8009a94:	dc24      	bgt.n	8009ae0 <_svfprintf_r+0xec0>
 8009a96:	6065      	str	r5, [r4, #4]
 8009a98:	2b07      	cmp	r3, #7
 8009a9a:	4415      	add	r5, r2
 8009a9c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8009aa0:	f340 8289 	ble.w	8009fb6 <_svfprintf_r+0x1396>
 8009aa4:	aa26      	add	r2, sp, #152	; 0x98
 8009aa6:	4641      	mov	r1, r8
 8009aa8:	9803      	ldr	r0, [sp, #12]
 8009aaa:	f002 f9de 	bl	800be6a <__ssprint_r>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	f040 82a2 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009ab4:	ac29      	add	r4, sp, #164	; 0xa4
 8009ab6:	e65a      	b.n	800976e <_svfprintf_r+0xb4e>
 8009ab8:	aa26      	add	r2, sp, #152	; 0x98
 8009aba:	4641      	mov	r1, r8
 8009abc:	9803      	ldr	r0, [sp, #12]
 8009abe:	f002 f9d4 	bl	800be6a <__ssprint_r>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	f040 8298 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009ac8:	ac29      	add	r4, sp, #164	; 0xa4
 8009aca:	e7be      	b.n	8009a4a <_svfprintf_r+0xe2a>
 8009acc:	aa26      	add	r2, sp, #152	; 0x98
 8009ace:	4641      	mov	r1, r8
 8009ad0:	9803      	ldr	r0, [sp, #12]
 8009ad2:	f002 f9ca 	bl	800be6a <__ssprint_r>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	f040 828e 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009adc:	ac29      	add	r4, sp, #164	; 0xa4
 8009ade:	e7ca      	b.n	8009a76 <_svfprintf_r+0xe56>
 8009ae0:	3210      	adds	r2, #16
 8009ae2:	2b07      	cmp	r3, #7
 8009ae4:	6067      	str	r7, [r4, #4]
 8009ae6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8009aea:	dd08      	ble.n	8009afe <_svfprintf_r+0xede>
 8009aec:	aa26      	add	r2, sp, #152	; 0x98
 8009aee:	4641      	mov	r1, r8
 8009af0:	9803      	ldr	r0, [sp, #12]
 8009af2:	f002 f9ba 	bl	800be6a <__ssprint_r>
 8009af6:	2800      	cmp	r0, #0
 8009af8:	f040 827e 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009afc:	a929      	add	r1, sp, #164	; 0xa4
 8009afe:	3d10      	subs	r5, #16
 8009b00:	460c      	mov	r4, r1
 8009b02:	e7bf      	b.n	8009a84 <_svfprintf_r+0xe64>
 8009b04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	dc74      	bgt.n	8009bf4 <_svfprintf_r+0xfd4>
 8009b0a:	4b38      	ldr	r3, [pc, #224]	; (8009bec <_svfprintf_r+0xfcc>)
 8009b0c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009b0e:	6023      	str	r3, [r4, #0]
 8009b10:	2301      	movs	r3, #1
 8009b12:	441d      	add	r5, r3
 8009b14:	6063      	str	r3, [r4, #4]
 8009b16:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009b18:	9528      	str	r5, [sp, #160]	; 0xa0
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	2b07      	cmp	r3, #7
 8009b1e:	9327      	str	r3, [sp, #156]	; 0x9c
 8009b20:	dc3e      	bgt.n	8009ba0 <_svfprintf_r+0xf80>
 8009b22:	3408      	adds	r4, #8
 8009b24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009b26:	b92b      	cbnz	r3, 8009b34 <_svfprintf_r+0xf14>
 8009b28:	9b04      	ldr	r3, [sp, #16]
 8009b2a:	b91b      	cbnz	r3, 8009b34 <_svfprintf_r+0xf14>
 8009b2c:	f01a 0f01 	tst.w	sl, #1
 8009b30:	f43f ae1d 	beq.w	800976e <_svfprintf_r+0xb4e>
 8009b34:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009b36:	6023      	str	r3, [r4, #0]
 8009b38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b3a:	6063      	str	r3, [r4, #4]
 8009b3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009b40:	4413      	add	r3, r2
 8009b42:	9328      	str	r3, [sp, #160]	; 0xa0
 8009b44:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009b46:	3301      	adds	r3, #1
 8009b48:	2b07      	cmp	r3, #7
 8009b4a:	9327      	str	r3, [sp, #156]	; 0x9c
 8009b4c:	dc32      	bgt.n	8009bb4 <_svfprintf_r+0xf94>
 8009b4e:	3408      	adds	r4, #8
 8009b50:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8009b52:	2d00      	cmp	r5, #0
 8009b54:	da1b      	bge.n	8009b8e <_svfprintf_r+0xf6e>
 8009b56:	4e26      	ldr	r6, [pc, #152]	; (8009bf0 <_svfprintf_r+0xfd0>)
 8009b58:	426d      	negs	r5, r5
 8009b5a:	4623      	mov	r3, r4
 8009b5c:	2710      	movs	r7, #16
 8009b5e:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8009b62:	2d10      	cmp	r5, #16
 8009b64:	f102 0201 	add.w	r2, r2, #1
 8009b68:	f104 0408 	add.w	r4, r4, #8
 8009b6c:	601e      	str	r6, [r3, #0]
 8009b6e:	dc2b      	bgt.n	8009bc8 <_svfprintf_r+0xfa8>
 8009b70:	605d      	str	r5, [r3, #4]
 8009b72:	2a07      	cmp	r2, #7
 8009b74:	440d      	add	r5, r1
 8009b76:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8009b7a:	dd08      	ble.n	8009b8e <_svfprintf_r+0xf6e>
 8009b7c:	aa26      	add	r2, sp, #152	; 0x98
 8009b7e:	4641      	mov	r1, r8
 8009b80:	9803      	ldr	r0, [sp, #12]
 8009b82:	f002 f972 	bl	800be6a <__ssprint_r>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	f040 8236 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009b8c:	ac29      	add	r4, sp, #164	; 0xa4
 8009b8e:	9b04      	ldr	r3, [sp, #16]
 8009b90:	6063      	str	r3, [r4, #4]
 8009b92:	9a04      	ldr	r2, [sp, #16]
 8009b94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009b96:	f8c4 b000 	str.w	fp, [r4]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	9328      	str	r3, [sp, #160]	; 0xa0
 8009b9e:	e5df      	b.n	8009760 <_svfprintf_r+0xb40>
 8009ba0:	aa26      	add	r2, sp, #152	; 0x98
 8009ba2:	4641      	mov	r1, r8
 8009ba4:	9803      	ldr	r0, [sp, #12]
 8009ba6:	f002 f960 	bl	800be6a <__ssprint_r>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	f040 8224 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009bb0:	ac29      	add	r4, sp, #164	; 0xa4
 8009bb2:	e7b7      	b.n	8009b24 <_svfprintf_r+0xf04>
 8009bb4:	aa26      	add	r2, sp, #152	; 0x98
 8009bb6:	4641      	mov	r1, r8
 8009bb8:	9803      	ldr	r0, [sp, #12]
 8009bba:	f002 f956 	bl	800be6a <__ssprint_r>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	f040 821a 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009bc4:	ac29      	add	r4, sp, #164	; 0xa4
 8009bc6:	e7c3      	b.n	8009b50 <_svfprintf_r+0xf30>
 8009bc8:	3110      	adds	r1, #16
 8009bca:	2a07      	cmp	r2, #7
 8009bcc:	605f      	str	r7, [r3, #4]
 8009bce:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8009bd2:	dd08      	ble.n	8009be6 <_svfprintf_r+0xfc6>
 8009bd4:	aa26      	add	r2, sp, #152	; 0x98
 8009bd6:	4641      	mov	r1, r8
 8009bd8:	9803      	ldr	r0, [sp, #12]
 8009bda:	f002 f946 	bl	800be6a <__ssprint_r>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	f040 820a 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009be4:	ac29      	add	r4, sp, #164	; 0xa4
 8009be6:	3d10      	subs	r5, #16
 8009be8:	4623      	mov	r3, r4
 8009bea:	e7b8      	b.n	8009b5e <_svfprintf_r+0xf3e>
 8009bec:	0800ee1a 	.word	0x0800ee1a
 8009bf0:	0800ee2c 	.word	0x0800ee2c
 8009bf4:	9b04      	ldr	r3, [sp, #16]
 8009bf6:	42b3      	cmp	r3, r6
 8009bf8:	bfa8      	it	ge
 8009bfa:	4633      	movge	r3, r6
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	461d      	mov	r5, r3
 8009c00:	dd0b      	ble.n	8009c1a <_svfprintf_r+0xffa>
 8009c02:	e9c4 b300 	strd	fp, r3, [r4]
 8009c06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c08:	442b      	add	r3, r5
 8009c0a:	9328      	str	r3, [sp, #160]	; 0xa0
 8009c0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009c0e:	3301      	adds	r3, #1
 8009c10:	2b07      	cmp	r3, #7
 8009c12:	9327      	str	r3, [sp, #156]	; 0x9c
 8009c14:	f300 8086 	bgt.w	8009d24 <_svfprintf_r+0x1104>
 8009c18:	3408      	adds	r4, #8
 8009c1a:	2d00      	cmp	r5, #0
 8009c1c:	bfac      	ite	ge
 8009c1e:	1b75      	subge	r5, r6, r5
 8009c20:	4635      	movlt	r5, r6
 8009c22:	2d00      	cmp	r5, #0
 8009c24:	dd19      	ble.n	8009c5a <_svfprintf_r+0x103a>
 8009c26:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8009c2a:	4896      	ldr	r0, [pc, #600]	; (8009e84 <_svfprintf_r+0x1264>)
 8009c2c:	6020      	str	r0, [r4, #0]
 8009c2e:	2d10      	cmp	r5, #16
 8009c30:	f103 0301 	add.w	r3, r3, #1
 8009c34:	f104 0108 	add.w	r1, r4, #8
 8009c38:	dc7e      	bgt.n	8009d38 <_svfprintf_r+0x1118>
 8009c3a:	6065      	str	r5, [r4, #4]
 8009c3c:	2b07      	cmp	r3, #7
 8009c3e:	4415      	add	r5, r2
 8009c40:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8009c44:	f340 808b 	ble.w	8009d5e <_svfprintf_r+0x113e>
 8009c48:	aa26      	add	r2, sp, #152	; 0x98
 8009c4a:	4641      	mov	r1, r8
 8009c4c:	9803      	ldr	r0, [sp, #12]
 8009c4e:	f002 f90c 	bl	800be6a <__ssprint_r>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	f040 81d0 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009c58:	ac29      	add	r4, sp, #164	; 0xa4
 8009c5a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8009c5e:	445e      	add	r6, fp
 8009c60:	d009      	beq.n	8009c76 <_svfprintf_r+0x1056>
 8009c62:	9b07      	ldr	r3, [sp, #28]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d17c      	bne.n	8009d62 <_svfprintf_r+0x1142>
 8009c68:	2f00      	cmp	r7, #0
 8009c6a:	d17c      	bne.n	8009d66 <_svfprintf_r+0x1146>
 8009c6c:	9b04      	ldr	r3, [sp, #16]
 8009c6e:	445b      	add	r3, fp
 8009c70:	429e      	cmp	r6, r3
 8009c72:	bf28      	it	cs
 8009c74:	461e      	movcs	r6, r3
 8009c76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009c78:	9a04      	ldr	r2, [sp, #16]
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	db02      	blt.n	8009c84 <_svfprintf_r+0x1064>
 8009c7e:	f01a 0f01 	tst.w	sl, #1
 8009c82:	d00e      	beq.n	8009ca2 <_svfprintf_r+0x1082>
 8009c84:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009c86:	6023      	str	r3, [r4, #0]
 8009c88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c8a:	6063      	str	r3, [r4, #4]
 8009c8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009c90:	4413      	add	r3, r2
 8009c92:	9328      	str	r3, [sp, #160]	; 0xa0
 8009c94:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009c96:	3301      	adds	r3, #1
 8009c98:	2b07      	cmp	r3, #7
 8009c9a:	9327      	str	r3, [sp, #156]	; 0x9c
 8009c9c:	f300 80dd 	bgt.w	8009e5a <_svfprintf_r+0x123a>
 8009ca0:	3408      	adds	r4, #8
 8009ca2:	9b04      	ldr	r3, [sp, #16]
 8009ca4:	9a04      	ldr	r2, [sp, #16]
 8009ca6:	eb0b 0503 	add.w	r5, fp, r3
 8009caa:	1bab      	subs	r3, r5, r6
 8009cac:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8009cae:	1b55      	subs	r5, r2, r5
 8009cb0:	429d      	cmp	r5, r3
 8009cb2:	bfa8      	it	ge
 8009cb4:	461d      	movge	r5, r3
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	dd0b      	ble.n	8009cd2 <_svfprintf_r+0x10b2>
 8009cba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009cbc:	442b      	add	r3, r5
 8009cbe:	9328      	str	r3, [sp, #160]	; 0xa0
 8009cc0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	2b07      	cmp	r3, #7
 8009cc6:	e9c4 6500 	strd	r6, r5, [r4]
 8009cca:	9327      	str	r3, [sp, #156]	; 0x9c
 8009ccc:	f300 80cf 	bgt.w	8009e6e <_svfprintf_r+0x124e>
 8009cd0:	3408      	adds	r4, #8
 8009cd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009cd4:	9a04      	ldr	r2, [sp, #16]
 8009cd6:	2d00      	cmp	r5, #0
 8009cd8:	eba2 0303 	sub.w	r3, r2, r3
 8009cdc:	bfac      	ite	ge
 8009cde:	1b5d      	subge	r5, r3, r5
 8009ce0:	461d      	movlt	r5, r3
 8009ce2:	2d00      	cmp	r5, #0
 8009ce4:	f77f ad43 	ble.w	800976e <_svfprintf_r+0xb4e>
 8009ce8:	4e66      	ldr	r6, [pc, #408]	; (8009e84 <_svfprintf_r+0x1264>)
 8009cea:	2710      	movs	r7, #16
 8009cec:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8009cf0:	2d10      	cmp	r5, #16
 8009cf2:	f103 0301 	add.w	r3, r3, #1
 8009cf6:	f104 0108 	add.w	r1, r4, #8
 8009cfa:	6026      	str	r6, [r4, #0]
 8009cfc:	f77f aecb 	ble.w	8009a96 <_svfprintf_r+0xe76>
 8009d00:	3210      	adds	r2, #16
 8009d02:	2b07      	cmp	r3, #7
 8009d04:	6067      	str	r7, [r4, #4]
 8009d06:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8009d0a:	dd08      	ble.n	8009d1e <_svfprintf_r+0x10fe>
 8009d0c:	aa26      	add	r2, sp, #152	; 0x98
 8009d0e:	4641      	mov	r1, r8
 8009d10:	9803      	ldr	r0, [sp, #12]
 8009d12:	f002 f8aa 	bl	800be6a <__ssprint_r>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	f040 816e 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009d1c:	a929      	add	r1, sp, #164	; 0xa4
 8009d1e:	3d10      	subs	r5, #16
 8009d20:	460c      	mov	r4, r1
 8009d22:	e7e3      	b.n	8009cec <_svfprintf_r+0x10cc>
 8009d24:	aa26      	add	r2, sp, #152	; 0x98
 8009d26:	4641      	mov	r1, r8
 8009d28:	9803      	ldr	r0, [sp, #12]
 8009d2a:	f002 f89e 	bl	800be6a <__ssprint_r>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	f040 8162 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009d34:	ac29      	add	r4, sp, #164	; 0xa4
 8009d36:	e770      	b.n	8009c1a <_svfprintf_r+0xffa>
 8009d38:	2010      	movs	r0, #16
 8009d3a:	4402      	add	r2, r0
 8009d3c:	2b07      	cmp	r3, #7
 8009d3e:	6060      	str	r0, [r4, #4]
 8009d40:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8009d44:	dd08      	ble.n	8009d58 <_svfprintf_r+0x1138>
 8009d46:	aa26      	add	r2, sp, #152	; 0x98
 8009d48:	4641      	mov	r1, r8
 8009d4a:	9803      	ldr	r0, [sp, #12]
 8009d4c:	f002 f88d 	bl	800be6a <__ssprint_r>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	f040 8151 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009d56:	a929      	add	r1, sp, #164	; 0xa4
 8009d58:	3d10      	subs	r5, #16
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	e763      	b.n	8009c26 <_svfprintf_r+0x1006>
 8009d5e:	460c      	mov	r4, r1
 8009d60:	e77b      	b.n	8009c5a <_svfprintf_r+0x103a>
 8009d62:	2f00      	cmp	r7, #0
 8009d64:	d049      	beq.n	8009dfa <_svfprintf_r+0x11da>
 8009d66:	3f01      	subs	r7, #1
 8009d68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d6a:	6023      	str	r3, [r4, #0]
 8009d6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d6e:	6063      	str	r3, [r4, #4]
 8009d70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009d74:	4413      	add	r3, r2
 8009d76:	9328      	str	r3, [sp, #160]	; 0xa0
 8009d78:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	2b07      	cmp	r3, #7
 8009d7e:	9327      	str	r3, [sp, #156]	; 0x9c
 8009d80:	dc42      	bgt.n	8009e08 <_svfprintf_r+0x11e8>
 8009d82:	3408      	adds	r4, #8
 8009d84:	9b04      	ldr	r3, [sp, #16]
 8009d86:	445b      	add	r3, fp
 8009d88:	1b9a      	subs	r2, r3, r6
 8009d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	bfa8      	it	ge
 8009d92:	4613      	movge	r3, r2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	461d      	mov	r5, r3
 8009d98:	dd0a      	ble.n	8009db0 <_svfprintf_r+0x1190>
 8009d9a:	e9c4 6300 	strd	r6, r3, [r4]
 8009d9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009da0:	442b      	add	r3, r5
 8009da2:	9328      	str	r3, [sp, #160]	; 0xa0
 8009da4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009da6:	3301      	adds	r3, #1
 8009da8:	2b07      	cmp	r3, #7
 8009daa:	9327      	str	r3, [sp, #156]	; 0x9c
 8009dac:	dc36      	bgt.n	8009e1c <_svfprintf_r+0x11fc>
 8009dae:	3408      	adds	r4, #8
 8009db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	2d00      	cmp	r5, #0
 8009db6:	bfac      	ite	ge
 8009db8:	1b5d      	subge	r5, r3, r5
 8009dba:	461d      	movlt	r5, r3
 8009dbc:	2d00      	cmp	r5, #0
 8009dbe:	dd18      	ble.n	8009df2 <_svfprintf_r+0x11d2>
 8009dc0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8009dc4:	482f      	ldr	r0, [pc, #188]	; (8009e84 <_svfprintf_r+0x1264>)
 8009dc6:	6020      	str	r0, [r4, #0]
 8009dc8:	2d10      	cmp	r5, #16
 8009dca:	f102 0201 	add.w	r2, r2, #1
 8009dce:	f104 0108 	add.w	r1, r4, #8
 8009dd2:	dc2d      	bgt.n	8009e30 <_svfprintf_r+0x1210>
 8009dd4:	442b      	add	r3, r5
 8009dd6:	2a07      	cmp	r2, #7
 8009dd8:	6065      	str	r5, [r4, #4]
 8009dda:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8009dde:	dd3a      	ble.n	8009e56 <_svfprintf_r+0x1236>
 8009de0:	aa26      	add	r2, sp, #152	; 0x98
 8009de2:	4641      	mov	r1, r8
 8009de4:	9803      	ldr	r0, [sp, #12]
 8009de6:	f002 f840 	bl	800be6a <__ssprint_r>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	f040 8104 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009df0:	ac29      	add	r4, sp, #164	; 0xa4
 8009df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	441e      	add	r6, r3
 8009df8:	e733      	b.n	8009c62 <_svfprintf_r+0x1042>
 8009dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8009e00:	9b07      	ldr	r3, [sp, #28]
 8009e02:	3b01      	subs	r3, #1
 8009e04:	9307      	str	r3, [sp, #28]
 8009e06:	e7af      	b.n	8009d68 <_svfprintf_r+0x1148>
 8009e08:	aa26      	add	r2, sp, #152	; 0x98
 8009e0a:	4641      	mov	r1, r8
 8009e0c:	9803      	ldr	r0, [sp, #12]
 8009e0e:	f002 f82c 	bl	800be6a <__ssprint_r>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	f040 80f0 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009e18:	ac29      	add	r4, sp, #164	; 0xa4
 8009e1a:	e7b3      	b.n	8009d84 <_svfprintf_r+0x1164>
 8009e1c:	aa26      	add	r2, sp, #152	; 0x98
 8009e1e:	4641      	mov	r1, r8
 8009e20:	9803      	ldr	r0, [sp, #12]
 8009e22:	f002 f822 	bl	800be6a <__ssprint_r>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	f040 80e6 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009e2c:	ac29      	add	r4, sp, #164	; 0xa4
 8009e2e:	e7bf      	b.n	8009db0 <_svfprintf_r+0x1190>
 8009e30:	2010      	movs	r0, #16
 8009e32:	4403      	add	r3, r0
 8009e34:	2a07      	cmp	r2, #7
 8009e36:	6060      	str	r0, [r4, #4]
 8009e38:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8009e3c:	dd08      	ble.n	8009e50 <_svfprintf_r+0x1230>
 8009e3e:	aa26      	add	r2, sp, #152	; 0x98
 8009e40:	4641      	mov	r1, r8
 8009e42:	9803      	ldr	r0, [sp, #12]
 8009e44:	f002 f811 	bl	800be6a <__ssprint_r>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	f040 80d5 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009e4e:	a929      	add	r1, sp, #164	; 0xa4
 8009e50:	3d10      	subs	r5, #16
 8009e52:	460c      	mov	r4, r1
 8009e54:	e7b4      	b.n	8009dc0 <_svfprintf_r+0x11a0>
 8009e56:	460c      	mov	r4, r1
 8009e58:	e7cb      	b.n	8009df2 <_svfprintf_r+0x11d2>
 8009e5a:	aa26      	add	r2, sp, #152	; 0x98
 8009e5c:	4641      	mov	r1, r8
 8009e5e:	9803      	ldr	r0, [sp, #12]
 8009e60:	f002 f803 	bl	800be6a <__ssprint_r>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	f040 80c7 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009e6a:	ac29      	add	r4, sp, #164	; 0xa4
 8009e6c:	e719      	b.n	8009ca2 <_svfprintf_r+0x1082>
 8009e6e:	aa26      	add	r2, sp, #152	; 0x98
 8009e70:	4641      	mov	r1, r8
 8009e72:	9803      	ldr	r0, [sp, #12]
 8009e74:	f001 fff9 	bl	800be6a <__ssprint_r>
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	f040 80bd 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009e7e:	ac29      	add	r4, sp, #164	; 0xa4
 8009e80:	e727      	b.n	8009cd2 <_svfprintf_r+0x10b2>
 8009e82:	bf00      	nop
 8009e84:	0800ee2c 	.word	0x0800ee2c
 8009e88:	9a04      	ldr	r2, [sp, #16]
 8009e8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009e8c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009e8e:	2a01      	cmp	r2, #1
 8009e90:	f105 0501 	add.w	r5, r5, #1
 8009e94:	f103 0301 	add.w	r3, r3, #1
 8009e98:	f104 0608 	add.w	r6, r4, #8
 8009e9c:	dc02      	bgt.n	8009ea4 <_svfprintf_r+0x1284>
 8009e9e:	f01a 0f01 	tst.w	sl, #1
 8009ea2:	d07d      	beq.n	8009fa0 <_svfprintf_r+0x1380>
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	2b07      	cmp	r3, #7
 8009ea8:	f8c4 b000 	str.w	fp, [r4]
 8009eac:	6062      	str	r2, [r4, #4]
 8009eae:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8009eb2:	dd08      	ble.n	8009ec6 <_svfprintf_r+0x12a6>
 8009eb4:	aa26      	add	r2, sp, #152	; 0x98
 8009eb6:	4641      	mov	r1, r8
 8009eb8:	9803      	ldr	r0, [sp, #12]
 8009eba:	f001 ffd6 	bl	800be6a <__ssprint_r>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	f040 809a 	bne.w	8009ff8 <_svfprintf_r+0x13d8>
 8009ec4:	ae29      	add	r6, sp, #164	; 0xa4
 8009ec6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ec8:	6033      	str	r3, [r6, #0]
 8009eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ecc:	6073      	str	r3, [r6, #4]
 8009ece:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ed0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009ed2:	4413      	add	r3, r2
 8009ed4:	9328      	str	r3, [sp, #160]	; 0xa0
 8009ed6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009ed8:	3301      	adds	r3, #1
 8009eda:	2b07      	cmp	r3, #7
 8009edc:	9327      	str	r3, [sp, #156]	; 0x9c
 8009ede:	dc31      	bgt.n	8009f44 <_svfprintf_r+0x1324>
 8009ee0:	3608      	adds	r6, #8
 8009ee2:	9b04      	ldr	r3, [sp, #16]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	1e5c      	subs	r4, r3, #1
 8009ee8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009eec:	2300      	movs	r3, #0
 8009eee:	f7f6 fdeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d12f      	bne.n	8009f56 <_svfprintf_r+0x1336>
 8009ef6:	f10b 0301 	add.w	r3, fp, #1
 8009efa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8009efc:	9904      	ldr	r1, [sp, #16]
 8009efe:	e9c6 3400 	strd	r3, r4, [r6]
 8009f02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009f04:	3201      	adds	r2, #1
 8009f06:	3b01      	subs	r3, #1
 8009f08:	440b      	add	r3, r1
 8009f0a:	2a07      	cmp	r2, #7
 8009f0c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8009f10:	dd4f      	ble.n	8009fb2 <_svfprintf_r+0x1392>
 8009f12:	aa26      	add	r2, sp, #152	; 0x98
 8009f14:	4641      	mov	r1, r8
 8009f16:	9803      	ldr	r0, [sp, #12]
 8009f18:	f001 ffa7 	bl	800be6a <__ssprint_r>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d16b      	bne.n	8009ff8 <_svfprintf_r+0x13d8>
 8009f20:	ae29      	add	r6, sp, #164	; 0xa4
 8009f22:	ab22      	add	r3, sp, #136	; 0x88
 8009f24:	6033      	str	r3, [r6, #0]
 8009f26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f28:	6073      	str	r3, [r6, #4]
 8009f2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009f2e:	4413      	add	r3, r2
 8009f30:	9328      	str	r3, [sp, #160]	; 0xa0
 8009f32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009f34:	3301      	adds	r3, #1
 8009f36:	2b07      	cmp	r3, #7
 8009f38:	9327      	str	r3, [sp, #156]	; 0x9c
 8009f3a:	f73f adb3 	bgt.w	8009aa4 <_svfprintf_r+0xe84>
 8009f3e:	f106 0408 	add.w	r4, r6, #8
 8009f42:	e414      	b.n	800976e <_svfprintf_r+0xb4e>
 8009f44:	aa26      	add	r2, sp, #152	; 0x98
 8009f46:	4641      	mov	r1, r8
 8009f48:	9803      	ldr	r0, [sp, #12]
 8009f4a:	f001 ff8e 	bl	800be6a <__ssprint_r>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d152      	bne.n	8009ff8 <_svfprintf_r+0x13d8>
 8009f52:	ae29      	add	r6, sp, #164	; 0xa4
 8009f54:	e7c5      	b.n	8009ee2 <_svfprintf_r+0x12c2>
 8009f56:	2c00      	cmp	r4, #0
 8009f58:	dde3      	ble.n	8009f22 <_svfprintf_r+0x1302>
 8009f5a:	4d3e      	ldr	r5, [pc, #248]	; (800a054 <_svfprintf_r+0x1434>)
 8009f5c:	2710      	movs	r7, #16
 8009f5e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8009f62:	2c10      	cmp	r4, #16
 8009f64:	f103 0301 	add.w	r3, r3, #1
 8009f68:	f106 0108 	add.w	r1, r6, #8
 8009f6c:	6035      	str	r5, [r6, #0]
 8009f6e:	dc07      	bgt.n	8009f80 <_svfprintf_r+0x1360>
 8009f70:	6074      	str	r4, [r6, #4]
 8009f72:	2b07      	cmp	r3, #7
 8009f74:	4414      	add	r4, r2
 8009f76:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 8009f7a:	dcca      	bgt.n	8009f12 <_svfprintf_r+0x12f2>
 8009f7c:	460e      	mov	r6, r1
 8009f7e:	e7d0      	b.n	8009f22 <_svfprintf_r+0x1302>
 8009f80:	3210      	adds	r2, #16
 8009f82:	2b07      	cmp	r3, #7
 8009f84:	6077      	str	r7, [r6, #4]
 8009f86:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8009f8a:	dd06      	ble.n	8009f9a <_svfprintf_r+0x137a>
 8009f8c:	aa26      	add	r2, sp, #152	; 0x98
 8009f8e:	4641      	mov	r1, r8
 8009f90:	9803      	ldr	r0, [sp, #12]
 8009f92:	f001 ff6a 	bl	800be6a <__ssprint_r>
 8009f96:	bb78      	cbnz	r0, 8009ff8 <_svfprintf_r+0x13d8>
 8009f98:	a929      	add	r1, sp, #164	; 0xa4
 8009f9a:	3c10      	subs	r4, #16
 8009f9c:	460e      	mov	r6, r1
 8009f9e:	e7de      	b.n	8009f5e <_svfprintf_r+0x133e>
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	2b07      	cmp	r3, #7
 8009fa4:	f8c4 b000 	str.w	fp, [r4]
 8009fa8:	6062      	str	r2, [r4, #4]
 8009faa:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8009fae:	ddb8      	ble.n	8009f22 <_svfprintf_r+0x1302>
 8009fb0:	e7af      	b.n	8009f12 <_svfprintf_r+0x12f2>
 8009fb2:	3608      	adds	r6, #8
 8009fb4:	e7b5      	b.n	8009f22 <_svfprintf_r+0x1302>
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	f7ff bbd9 	b.w	800976e <_svfprintf_r+0xb4e>
 8009fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009fc0:	1a9d      	subs	r5, r3, r2
 8009fc2:	2d00      	cmp	r5, #0
 8009fc4:	f77f abd7 	ble.w	8009776 <_svfprintf_r+0xb56>
 8009fc8:	4e23      	ldr	r6, [pc, #140]	; (800a058 <_svfprintf_r+0x1438>)
 8009fca:	2710      	movs	r7, #16
 8009fcc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8009fd0:	2d10      	cmp	r5, #16
 8009fd2:	f103 0301 	add.w	r3, r3, #1
 8009fd6:	6026      	str	r6, [r4, #0]
 8009fd8:	dc18      	bgt.n	800a00c <_svfprintf_r+0x13ec>
 8009fda:	6065      	str	r5, [r4, #4]
 8009fdc:	2b07      	cmp	r3, #7
 8009fde:	4415      	add	r5, r2
 8009fe0:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8009fe4:	f77f abc7 	ble.w	8009776 <_svfprintf_r+0xb56>
 8009fe8:	aa26      	add	r2, sp, #152	; 0x98
 8009fea:	4641      	mov	r1, r8
 8009fec:	9803      	ldr	r0, [sp, #12]
 8009fee:	f001 ff3c 	bl	800be6a <__ssprint_r>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	f43f abbf 	beq.w	8009776 <_svfprintf_r+0xb56>
 8009ff8:	f1b9 0f00 	cmp.w	r9, #0
 8009ffc:	f43f a8a8 	beq.w	8009150 <_svfprintf_r+0x530>
 800a000:	4649      	mov	r1, r9
 800a002:	9803      	ldr	r0, [sp, #12]
 800a004:	f000 feea 	bl	800addc <_free_r>
 800a008:	f7ff b8a2 	b.w	8009150 <_svfprintf_r+0x530>
 800a00c:	3210      	adds	r2, #16
 800a00e:	2b07      	cmp	r3, #7
 800a010:	6067      	str	r7, [r4, #4]
 800a012:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800a016:	dc02      	bgt.n	800a01e <_svfprintf_r+0x13fe>
 800a018:	3408      	adds	r4, #8
 800a01a:	3d10      	subs	r5, #16
 800a01c:	e7d6      	b.n	8009fcc <_svfprintf_r+0x13ac>
 800a01e:	aa26      	add	r2, sp, #152	; 0x98
 800a020:	4641      	mov	r1, r8
 800a022:	9803      	ldr	r0, [sp, #12]
 800a024:	f001 ff21 	bl	800be6a <__ssprint_r>
 800a028:	2800      	cmp	r0, #0
 800a02a:	d1e5      	bne.n	8009ff8 <_svfprintf_r+0x13d8>
 800a02c:	ac29      	add	r4, sp, #164	; 0xa4
 800a02e:	e7f4      	b.n	800a01a <_svfprintf_r+0x13fa>
 800a030:	4649      	mov	r1, r9
 800a032:	9803      	ldr	r0, [sp, #12]
 800a034:	f000 fed2 	bl	800addc <_free_r>
 800a038:	f7ff bbb5 	b.w	80097a6 <_svfprintf_r+0xb86>
 800a03c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f43f a886 	beq.w	8009150 <_svfprintf_r+0x530>
 800a044:	aa26      	add	r2, sp, #152	; 0x98
 800a046:	4641      	mov	r1, r8
 800a048:	9803      	ldr	r0, [sp, #12]
 800a04a:	f001 ff0e 	bl	800be6a <__ssprint_r>
 800a04e:	f7ff b87f 	b.w	8009150 <_svfprintf_r+0x530>
 800a052:	bf00      	nop
 800a054:	0800ee2c 	.word	0x0800ee2c
 800a058:	0800ee1c 	.word	0x0800ee1c

0800a05c <sysconf>:
 800a05c:	2808      	cmp	r0, #8
 800a05e:	b508      	push	{r3, lr}
 800a060:	d006      	beq.n	800a070 <sysconf+0x14>
 800a062:	f000 fe4d 	bl	800ad00 <__errno>
 800a066:	2316      	movs	r3, #22
 800a068:	6003      	str	r3, [r0, #0]
 800a06a:	f04f 30ff 	mov.w	r0, #4294967295
 800a06e:	bd08      	pop	{r3, pc}
 800a070:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a074:	e7fb      	b.n	800a06e <sysconf+0x12>
	...

0800a078 <register_fini>:
 800a078:	4b02      	ldr	r3, [pc, #8]	; (800a084 <register_fini+0xc>)
 800a07a:	b113      	cbz	r3, 800a082 <register_fini+0xa>
 800a07c:	4802      	ldr	r0, [pc, #8]	; (800a088 <register_fini+0x10>)
 800a07e:	f000 b805 	b.w	800a08c <atexit>
 800a082:	4770      	bx	lr
 800a084:	00000000 	.word	0x00000000
 800a088:	0800ad0d 	.word	0x0800ad0d

0800a08c <atexit>:
 800a08c:	2300      	movs	r3, #0
 800a08e:	4601      	mov	r1, r0
 800a090:	461a      	mov	r2, r3
 800a092:	4618      	mov	r0, r3
 800a094:	f001 bf6e 	b.w	800bf74 <__register_exitproc>

0800a098 <quorem>:
 800a098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09c:	6903      	ldr	r3, [r0, #16]
 800a09e:	690c      	ldr	r4, [r1, #16]
 800a0a0:	42a3      	cmp	r3, r4
 800a0a2:	4680      	mov	r8, r0
 800a0a4:	f2c0 8082 	blt.w	800a1ac <quorem+0x114>
 800a0a8:	3c01      	subs	r4, #1
 800a0aa:	f101 0714 	add.w	r7, r1, #20
 800a0ae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a0b2:	f100 0614 	add.w	r6, r0, #20
 800a0b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a0ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a0be:	eb06 030c 	add.w	r3, r6, ip
 800a0c2:	3501      	adds	r5, #1
 800a0c4:	eb07 090c 	add.w	r9, r7, ip
 800a0c8:	9301      	str	r3, [sp, #4]
 800a0ca:	fbb0 f5f5 	udiv	r5, r0, r5
 800a0ce:	b395      	cbz	r5, 800a136 <quorem+0x9e>
 800a0d0:	f04f 0a00 	mov.w	sl, #0
 800a0d4:	4638      	mov	r0, r7
 800a0d6:	46b6      	mov	lr, r6
 800a0d8:	46d3      	mov	fp, sl
 800a0da:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0de:	b293      	uxth	r3, r2
 800a0e0:	fb05 a303 	mla	r3, r5, r3, sl
 800a0e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	ebab 0303 	sub.w	r3, fp, r3
 800a0ee:	0c12      	lsrs	r2, r2, #16
 800a0f0:	f8de b000 	ldr.w	fp, [lr]
 800a0f4:	fb05 a202 	mla	r2, r5, r2, sl
 800a0f8:	fa13 f38b 	uxtah	r3, r3, fp
 800a0fc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a100:	fa1f fb82 	uxth.w	fp, r2
 800a104:	f8de 2000 	ldr.w	r2, [lr]
 800a108:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a10c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a110:	b29b      	uxth	r3, r3
 800a112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a116:	4581      	cmp	r9, r0
 800a118:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a11c:	f84e 3b04 	str.w	r3, [lr], #4
 800a120:	d2db      	bcs.n	800a0da <quorem+0x42>
 800a122:	f856 300c 	ldr.w	r3, [r6, ip]
 800a126:	b933      	cbnz	r3, 800a136 <quorem+0x9e>
 800a128:	9b01      	ldr	r3, [sp, #4]
 800a12a:	3b04      	subs	r3, #4
 800a12c:	429e      	cmp	r6, r3
 800a12e:	461a      	mov	r2, r3
 800a130:	d330      	bcc.n	800a194 <quorem+0xfc>
 800a132:	f8c8 4010 	str.w	r4, [r8, #16]
 800a136:	4640      	mov	r0, r8
 800a138:	f001 fc8e 	bl	800ba58 <__mcmp>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	db25      	blt.n	800a18c <quorem+0xf4>
 800a140:	3501      	adds	r5, #1
 800a142:	4630      	mov	r0, r6
 800a144:	f04f 0c00 	mov.w	ip, #0
 800a148:	f857 2b04 	ldr.w	r2, [r7], #4
 800a14c:	f8d0 e000 	ldr.w	lr, [r0]
 800a150:	b293      	uxth	r3, r2
 800a152:	ebac 0303 	sub.w	r3, ip, r3
 800a156:	0c12      	lsrs	r2, r2, #16
 800a158:	fa13 f38e 	uxtah	r3, r3, lr
 800a15c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a160:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a164:	b29b      	uxth	r3, r3
 800a166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a16a:	45b9      	cmp	r9, r7
 800a16c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a170:	f840 3b04 	str.w	r3, [r0], #4
 800a174:	d2e8      	bcs.n	800a148 <quorem+0xb0>
 800a176:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a17a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a17e:	b92a      	cbnz	r2, 800a18c <quorem+0xf4>
 800a180:	3b04      	subs	r3, #4
 800a182:	429e      	cmp	r6, r3
 800a184:	461a      	mov	r2, r3
 800a186:	d30b      	bcc.n	800a1a0 <quorem+0x108>
 800a188:	f8c8 4010 	str.w	r4, [r8, #16]
 800a18c:	4628      	mov	r0, r5
 800a18e:	b003      	add	sp, #12
 800a190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a194:	6812      	ldr	r2, [r2, #0]
 800a196:	3b04      	subs	r3, #4
 800a198:	2a00      	cmp	r2, #0
 800a19a:	d1ca      	bne.n	800a132 <quorem+0x9a>
 800a19c:	3c01      	subs	r4, #1
 800a19e:	e7c5      	b.n	800a12c <quorem+0x94>
 800a1a0:	6812      	ldr	r2, [r2, #0]
 800a1a2:	3b04      	subs	r3, #4
 800a1a4:	2a00      	cmp	r2, #0
 800a1a6:	d1ef      	bne.n	800a188 <quorem+0xf0>
 800a1a8:	3c01      	subs	r4, #1
 800a1aa:	e7ea      	b.n	800a182 <quorem+0xea>
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	e7ee      	b.n	800a18e <quorem+0xf6>

0800a1b0 <_dtoa_r>:
 800a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b4:	b097      	sub	sp, #92	; 0x5c
 800a1b6:	ec57 6b10 	vmov	r6, r7, d0
 800a1ba:	9106      	str	r1, [sp, #24]
 800a1bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a1be:	920b      	str	r2, [sp, #44]	; 0x2c
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	9312      	str	r3, [sp, #72]	; 0x48
 800a1c4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800a1c6:	e9cd 6700 	strd	r6, r7, [sp]
 800a1ca:	b141      	cbz	r1, 800a1de <_dtoa_r+0x2e>
 800a1cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1ce:	604a      	str	r2, [r1, #4]
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	4093      	lsls	r3, r2
 800a1d4:	608b      	str	r3, [r1, #8]
 800a1d6:	f001 fa3b 	bl	800b650 <_Bfree>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	6423      	str	r3, [r4, #64]	; 0x40
 800a1de:	1e3b      	subs	r3, r7, #0
 800a1e0:	bfb9      	ittee	lt
 800a1e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a1e6:	9301      	strlt	r3, [sp, #4]
 800a1e8:	2300      	movge	r3, #0
 800a1ea:	602b      	strge	r3, [r5, #0]
 800a1ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a1f0:	4baf      	ldr	r3, [pc, #700]	; (800a4b0 <_dtoa_r+0x300>)
 800a1f2:	bfbc      	itt	lt
 800a1f4:	2201      	movlt	r2, #1
 800a1f6:	602a      	strlt	r2, [r5, #0]
 800a1f8:	ea33 0308 	bics.w	r3, r3, r8
 800a1fc:	d116      	bne.n	800a22c <_dtoa_r+0x7c>
 800a1fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a200:	f242 730f 	movw	r3, #9999	; 0x270f
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	9b00      	ldr	r3, [sp, #0]
 800a208:	b923      	cbnz	r3, 800a214 <_dtoa_r+0x64>
 800a20a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a20e:	2800      	cmp	r0, #0
 800a210:	f000 8543 	beq.w	800ac9a <_dtoa_r+0xaea>
 800a214:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a216:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a4c4 <_dtoa_r+0x314>
 800a21a:	b11b      	cbz	r3, 800a224 <_dtoa_r+0x74>
 800a21c:	f10b 0303 	add.w	r3, fp, #3
 800a220:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a222:	6013      	str	r3, [r2, #0]
 800a224:	4658      	mov	r0, fp
 800a226:	b017      	add	sp, #92	; 0x5c
 800a228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a22c:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a230:	2200      	movs	r2, #0
 800a232:	2300      	movs	r3, #0
 800a234:	4630      	mov	r0, r6
 800a236:	4639      	mov	r1, r7
 800a238:	f7f6 fc46 	bl	8000ac8 <__aeabi_dcmpeq>
 800a23c:	4681      	mov	r9, r0
 800a23e:	b160      	cbz	r0, 800a25a <_dtoa_r+0xaa>
 800a240:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a242:	2301      	movs	r3, #1
 800a244:	6013      	str	r3, [r2, #0]
 800a246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 8522 	beq.w	800ac92 <_dtoa_r+0xae2>
 800a24e:	4b99      	ldr	r3, [pc, #612]	; (800a4b4 <_dtoa_r+0x304>)
 800a250:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a252:	f103 3bff 	add.w	fp, r3, #4294967295
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	e7e4      	b.n	800a224 <_dtoa_r+0x74>
 800a25a:	aa14      	add	r2, sp, #80	; 0x50
 800a25c:	a915      	add	r1, sp, #84	; 0x54
 800a25e:	ec47 6b10 	vmov	d0, r6, r7
 800a262:	4620      	mov	r0, r4
 800a264:	f001 fce6 	bl	800bc34 <__d2b>
 800a268:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a26c:	9004      	str	r0, [sp, #16]
 800a26e:	2d00      	cmp	r5, #0
 800a270:	d07c      	beq.n	800a36c <_dtoa_r+0x1bc>
 800a272:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a276:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a27a:	46b2      	mov	sl, r6
 800a27c:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a280:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a284:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a288:	2200      	movs	r2, #0
 800a28a:	4b8b      	ldr	r3, [pc, #556]	; (800a4b8 <_dtoa_r+0x308>)
 800a28c:	4650      	mov	r0, sl
 800a28e:	4659      	mov	r1, fp
 800a290:	f7f5 fffa 	bl	8000288 <__aeabi_dsub>
 800a294:	a380      	add	r3, pc, #512	; (adr r3, 800a498 <_dtoa_r+0x2e8>)
 800a296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29a:	f7f6 f9ad 	bl	80005f8 <__aeabi_dmul>
 800a29e:	a380      	add	r3, pc, #512	; (adr r3, 800a4a0 <_dtoa_r+0x2f0>)
 800a2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a4:	f7f5 fff2 	bl	800028c <__adddf3>
 800a2a8:	4606      	mov	r6, r0
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	460f      	mov	r7, r1
 800a2ae:	f7f6 f939 	bl	8000524 <__aeabi_i2d>
 800a2b2:	a37d      	add	r3, pc, #500	; (adr r3, 800a4a8 <_dtoa_r+0x2f8>)
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	f7f6 f99e 	bl	80005f8 <__aeabi_dmul>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	4639      	mov	r1, r7
 800a2c4:	f7f5 ffe2 	bl	800028c <__adddf3>
 800a2c8:	4606      	mov	r6, r0
 800a2ca:	460f      	mov	r7, r1
 800a2cc:	f7f6 fc44 	bl	8000b58 <__aeabi_d2iz>
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	4682      	mov	sl, r0
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	4639      	mov	r1, r7
 800a2da:	f7f6 fbff 	bl	8000adc <__aeabi_dcmplt>
 800a2de:	b148      	cbz	r0, 800a2f4 <_dtoa_r+0x144>
 800a2e0:	4650      	mov	r0, sl
 800a2e2:	f7f6 f91f 	bl	8000524 <__aeabi_i2d>
 800a2e6:	4632      	mov	r2, r6
 800a2e8:	463b      	mov	r3, r7
 800a2ea:	f7f6 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2ee:	b908      	cbnz	r0, 800a2f4 <_dtoa_r+0x144>
 800a2f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2f4:	f1ba 0f16 	cmp.w	sl, #22
 800a2f8:	d859      	bhi.n	800a3ae <_dtoa_r+0x1fe>
 800a2fa:	4970      	ldr	r1, [pc, #448]	; (800a4bc <_dtoa_r+0x30c>)
 800a2fc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a300:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a304:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a308:	f7f6 fc06 	bl	8000b18 <__aeabi_dcmpgt>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d050      	beq.n	800a3b2 <_dtoa_r+0x202>
 800a310:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a314:	2300      	movs	r3, #0
 800a316:	930f      	str	r3, [sp, #60]	; 0x3c
 800a318:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a31a:	1b5d      	subs	r5, r3, r5
 800a31c:	f1b5 0801 	subs.w	r8, r5, #1
 800a320:	bf49      	itett	mi
 800a322:	f1c5 0301 	rsbmi	r3, r5, #1
 800a326:	2300      	movpl	r3, #0
 800a328:	9305      	strmi	r3, [sp, #20]
 800a32a:	f04f 0800 	movmi.w	r8, #0
 800a32e:	bf58      	it	pl
 800a330:	9305      	strpl	r3, [sp, #20]
 800a332:	f1ba 0f00 	cmp.w	sl, #0
 800a336:	db3e      	blt.n	800a3b6 <_dtoa_r+0x206>
 800a338:	2300      	movs	r3, #0
 800a33a:	44d0      	add	r8, sl
 800a33c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a340:	9307      	str	r3, [sp, #28]
 800a342:	9b06      	ldr	r3, [sp, #24]
 800a344:	2b09      	cmp	r3, #9
 800a346:	f200 808d 	bhi.w	800a464 <_dtoa_r+0x2b4>
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	bfc4      	itt	gt
 800a34e:	3b04      	subgt	r3, #4
 800a350:	9306      	strgt	r3, [sp, #24]
 800a352:	9b06      	ldr	r3, [sp, #24]
 800a354:	f1a3 0302 	sub.w	r3, r3, #2
 800a358:	bfcc      	ite	gt
 800a35a:	2500      	movgt	r5, #0
 800a35c:	2501      	movle	r5, #1
 800a35e:	2b03      	cmp	r3, #3
 800a360:	f200 808c 	bhi.w	800a47c <_dtoa_r+0x2cc>
 800a364:	e8df f003 	tbb	[pc, r3]
 800a368:	6e317c7a 	.word	0x6e317c7a
 800a36c:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a370:	441d      	add	r5, r3
 800a372:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a376:	2820      	cmp	r0, #32
 800a378:	dd13      	ble.n	800a3a2 <_dtoa_r+0x1f2>
 800a37a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a37e:	9b00      	ldr	r3, [sp, #0]
 800a380:	fa08 f800 	lsl.w	r8, r8, r0
 800a384:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a388:	fa23 f000 	lsr.w	r0, r3, r0
 800a38c:	ea48 0000 	orr.w	r0, r8, r0
 800a390:	f7f6 f8b8 	bl	8000504 <__aeabi_ui2d>
 800a394:	2301      	movs	r3, #1
 800a396:	4682      	mov	sl, r0
 800a398:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a39c:	3d01      	subs	r5, #1
 800a39e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3a0:	e772      	b.n	800a288 <_dtoa_r+0xd8>
 800a3a2:	9b00      	ldr	r3, [sp, #0]
 800a3a4:	f1c0 0020 	rsb	r0, r0, #32
 800a3a8:	fa03 f000 	lsl.w	r0, r3, r0
 800a3ac:	e7f0      	b.n	800a390 <_dtoa_r+0x1e0>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e7b1      	b.n	800a316 <_dtoa_r+0x166>
 800a3b2:	900f      	str	r0, [sp, #60]	; 0x3c
 800a3b4:	e7b0      	b.n	800a318 <_dtoa_r+0x168>
 800a3b6:	9b05      	ldr	r3, [sp, #20]
 800a3b8:	eba3 030a 	sub.w	r3, r3, sl
 800a3bc:	9305      	str	r3, [sp, #20]
 800a3be:	f1ca 0300 	rsb	r3, sl, #0
 800a3c2:	9307      	str	r3, [sp, #28]
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	930e      	str	r3, [sp, #56]	; 0x38
 800a3c8:	e7bb      	b.n	800a342 <_dtoa_r+0x192>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	930a      	str	r3, [sp, #40]	; 0x28
 800a3ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	dd56      	ble.n	800a482 <_dtoa_r+0x2d2>
 800a3d4:	9302      	str	r3, [sp, #8]
 800a3d6:	4699      	mov	r9, r3
 800a3d8:	2200      	movs	r2, #0
 800a3da:	6462      	str	r2, [r4, #68]	; 0x44
 800a3dc:	2204      	movs	r2, #4
 800a3de:	f102 0014 	add.w	r0, r2, #20
 800a3e2:	4298      	cmp	r0, r3
 800a3e4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a3e6:	d951      	bls.n	800a48c <_dtoa_r+0x2dc>
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f001 f90c 	bl	800b606 <_Balloc>
 800a3ee:	f1b9 0f0e 	cmp.w	r9, #14
 800a3f2:	4683      	mov	fp, r0
 800a3f4:	6420      	str	r0, [r4, #64]	; 0x40
 800a3f6:	f200 80e8 	bhi.w	800a5ca <_dtoa_r+0x41a>
 800a3fa:	2d00      	cmp	r5, #0
 800a3fc:	f000 80e5 	beq.w	800a5ca <_dtoa_r+0x41a>
 800a400:	ed9d 7b00 	vldr	d7, [sp]
 800a404:	f1ba 0f00 	cmp.w	sl, #0
 800a408:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a40c:	dd76      	ble.n	800a4fc <_dtoa_r+0x34c>
 800a40e:	4a2b      	ldr	r2, [pc, #172]	; (800a4bc <_dtoa_r+0x30c>)
 800a410:	f00a 030f 	and.w	r3, sl, #15
 800a414:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a418:	ed93 7b00 	vldr	d7, [r3]
 800a41c:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a420:	06f0      	lsls	r0, r6, #27
 800a422:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a426:	d567      	bpl.n	800a4f8 <_dtoa_r+0x348>
 800a428:	4b25      	ldr	r3, [pc, #148]	; (800a4c0 <_dtoa_r+0x310>)
 800a42a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a42e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a432:	f7f6 fa0b 	bl	800084c <__aeabi_ddiv>
 800a436:	e9cd 0100 	strd	r0, r1, [sp]
 800a43a:	f006 060f 	and.w	r6, r6, #15
 800a43e:	2503      	movs	r5, #3
 800a440:	4f1f      	ldr	r7, [pc, #124]	; (800a4c0 <_dtoa_r+0x310>)
 800a442:	e04e      	b.n	800a4e2 <_dtoa_r+0x332>
 800a444:	2301      	movs	r3, #1
 800a446:	930a      	str	r3, [sp, #40]	; 0x28
 800a448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a44a:	4453      	add	r3, sl
 800a44c:	f103 0901 	add.w	r9, r3, #1
 800a450:	9302      	str	r3, [sp, #8]
 800a452:	464b      	mov	r3, r9
 800a454:	2b01      	cmp	r3, #1
 800a456:	bfb8      	it	lt
 800a458:	2301      	movlt	r3, #1
 800a45a:	e7bd      	b.n	800a3d8 <_dtoa_r+0x228>
 800a45c:	2300      	movs	r3, #0
 800a45e:	e7b5      	b.n	800a3cc <_dtoa_r+0x21c>
 800a460:	2300      	movs	r3, #0
 800a462:	e7f0      	b.n	800a446 <_dtoa_r+0x296>
 800a464:	2501      	movs	r5, #1
 800a466:	2300      	movs	r3, #0
 800a468:	9306      	str	r3, [sp, #24]
 800a46a:	950a      	str	r5, [sp, #40]	; 0x28
 800a46c:	f04f 33ff 	mov.w	r3, #4294967295
 800a470:	9302      	str	r3, [sp, #8]
 800a472:	4699      	mov	r9, r3
 800a474:	2200      	movs	r2, #0
 800a476:	2312      	movs	r3, #18
 800a478:	920b      	str	r2, [sp, #44]	; 0x2c
 800a47a:	e7ad      	b.n	800a3d8 <_dtoa_r+0x228>
 800a47c:	2301      	movs	r3, #1
 800a47e:	930a      	str	r3, [sp, #40]	; 0x28
 800a480:	e7f4      	b.n	800a46c <_dtoa_r+0x2bc>
 800a482:	2301      	movs	r3, #1
 800a484:	9302      	str	r3, [sp, #8]
 800a486:	4699      	mov	r9, r3
 800a488:	461a      	mov	r2, r3
 800a48a:	e7f5      	b.n	800a478 <_dtoa_r+0x2c8>
 800a48c:	3101      	adds	r1, #1
 800a48e:	6461      	str	r1, [r4, #68]	; 0x44
 800a490:	0052      	lsls	r2, r2, #1
 800a492:	e7a4      	b.n	800a3de <_dtoa_r+0x22e>
 800a494:	f3af 8000 	nop.w
 800a498:	636f4361 	.word	0x636f4361
 800a49c:	3fd287a7 	.word	0x3fd287a7
 800a4a0:	8b60c8b3 	.word	0x8b60c8b3
 800a4a4:	3fc68a28 	.word	0x3fc68a28
 800a4a8:	509f79fb 	.word	0x509f79fb
 800a4ac:	3fd34413 	.word	0x3fd34413
 800a4b0:	7ff00000 	.word	0x7ff00000
 800a4b4:	0800ee1b 	.word	0x0800ee1b
 800a4b8:	3ff80000 	.word	0x3ff80000
 800a4bc:	0800ee80 	.word	0x0800ee80
 800a4c0:	0800ee58 	.word	0x0800ee58
 800a4c4:	0800ee45 	.word	0x0800ee45
 800a4c8:	07f1      	lsls	r1, r6, #31
 800a4ca:	d508      	bpl.n	800a4de <_dtoa_r+0x32e>
 800a4cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4d4:	f7f6 f890 	bl	80005f8 <__aeabi_dmul>
 800a4d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a4dc:	3501      	adds	r5, #1
 800a4de:	1076      	asrs	r6, r6, #1
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	2e00      	cmp	r6, #0
 800a4e4:	d1f0      	bne.n	800a4c8 <_dtoa_r+0x318>
 800a4e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a4ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4ee:	f7f6 f9ad 	bl	800084c <__aeabi_ddiv>
 800a4f2:	e9cd 0100 	strd	r0, r1, [sp]
 800a4f6:	e01a      	b.n	800a52e <_dtoa_r+0x37e>
 800a4f8:	2502      	movs	r5, #2
 800a4fa:	e7a1      	b.n	800a440 <_dtoa_r+0x290>
 800a4fc:	f000 80a0 	beq.w	800a640 <_dtoa_r+0x490>
 800a500:	f1ca 0600 	rsb	r6, sl, #0
 800a504:	4b9f      	ldr	r3, [pc, #636]	; (800a784 <_dtoa_r+0x5d4>)
 800a506:	4fa0      	ldr	r7, [pc, #640]	; (800a788 <_dtoa_r+0x5d8>)
 800a508:	f006 020f 	and.w	r2, r6, #15
 800a50c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a518:	f7f6 f86e 	bl	80005f8 <__aeabi_dmul>
 800a51c:	e9cd 0100 	strd	r0, r1, [sp]
 800a520:	1136      	asrs	r6, r6, #4
 800a522:	2300      	movs	r3, #0
 800a524:	2502      	movs	r5, #2
 800a526:	2e00      	cmp	r6, #0
 800a528:	d17f      	bne.n	800a62a <_dtoa_r+0x47a>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1e1      	bne.n	800a4f2 <_dtoa_r+0x342>
 800a52e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a530:	2b00      	cmp	r3, #0
 800a532:	f000 8087 	beq.w	800a644 <_dtoa_r+0x494>
 800a536:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a53a:	2200      	movs	r2, #0
 800a53c:	4b93      	ldr	r3, [pc, #588]	; (800a78c <_dtoa_r+0x5dc>)
 800a53e:	4630      	mov	r0, r6
 800a540:	4639      	mov	r1, r7
 800a542:	f7f6 facb 	bl	8000adc <__aeabi_dcmplt>
 800a546:	2800      	cmp	r0, #0
 800a548:	d07c      	beq.n	800a644 <_dtoa_r+0x494>
 800a54a:	f1b9 0f00 	cmp.w	r9, #0
 800a54e:	d079      	beq.n	800a644 <_dtoa_r+0x494>
 800a550:	9b02      	ldr	r3, [sp, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	dd35      	ble.n	800a5c2 <_dtoa_r+0x412>
 800a556:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a55a:	9308      	str	r3, [sp, #32]
 800a55c:	4639      	mov	r1, r7
 800a55e:	2200      	movs	r2, #0
 800a560:	4b8b      	ldr	r3, [pc, #556]	; (800a790 <_dtoa_r+0x5e0>)
 800a562:	4630      	mov	r0, r6
 800a564:	f7f6 f848 	bl	80005f8 <__aeabi_dmul>
 800a568:	e9cd 0100 	strd	r0, r1, [sp]
 800a56c:	9f02      	ldr	r7, [sp, #8]
 800a56e:	3501      	adds	r5, #1
 800a570:	4628      	mov	r0, r5
 800a572:	f7f5 ffd7 	bl	8000524 <__aeabi_i2d>
 800a576:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a57a:	f7f6 f83d 	bl	80005f8 <__aeabi_dmul>
 800a57e:	2200      	movs	r2, #0
 800a580:	4b84      	ldr	r3, [pc, #528]	; (800a794 <_dtoa_r+0x5e4>)
 800a582:	f7f5 fe83 	bl	800028c <__adddf3>
 800a586:	4605      	mov	r5, r0
 800a588:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a58c:	2f00      	cmp	r7, #0
 800a58e:	d15d      	bne.n	800a64c <_dtoa_r+0x49c>
 800a590:	2200      	movs	r2, #0
 800a592:	4b81      	ldr	r3, [pc, #516]	; (800a798 <_dtoa_r+0x5e8>)
 800a594:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a598:	f7f5 fe76 	bl	8000288 <__aeabi_dsub>
 800a59c:	462a      	mov	r2, r5
 800a59e:	4633      	mov	r3, r6
 800a5a0:	e9cd 0100 	strd	r0, r1, [sp]
 800a5a4:	f7f6 fab8 	bl	8000b18 <__aeabi_dcmpgt>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	f040 8288 	bne.w	800aabe <_dtoa_r+0x90e>
 800a5ae:	462a      	mov	r2, r5
 800a5b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a5b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5b8:	f7f6 fa90 	bl	8000adc <__aeabi_dcmplt>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	f040 827c 	bne.w	800aaba <_dtoa_r+0x90a>
 800a5c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5c6:	e9cd 2300 	strd	r2, r3, [sp]
 800a5ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f2c0 8150 	blt.w	800a872 <_dtoa_r+0x6c2>
 800a5d2:	f1ba 0f0e 	cmp.w	sl, #14
 800a5d6:	f300 814c 	bgt.w	800a872 <_dtoa_r+0x6c2>
 800a5da:	4b6a      	ldr	r3, [pc, #424]	; (800a784 <_dtoa_r+0x5d4>)
 800a5dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a5e0:	ed93 7b00 	vldr	d7, [r3]
 800a5e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5ec:	f280 80d8 	bge.w	800a7a0 <_dtoa_r+0x5f0>
 800a5f0:	f1b9 0f00 	cmp.w	r9, #0
 800a5f4:	f300 80d4 	bgt.w	800a7a0 <_dtoa_r+0x5f0>
 800a5f8:	f040 825e 	bne.w	800aab8 <_dtoa_r+0x908>
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	4b66      	ldr	r3, [pc, #408]	; (800a798 <_dtoa_r+0x5e8>)
 800a600:	ec51 0b17 	vmov	r0, r1, d7
 800a604:	f7f5 fff8 	bl	80005f8 <__aeabi_dmul>
 800a608:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a60c:	f7f6 fa7a 	bl	8000b04 <__aeabi_dcmpge>
 800a610:	464f      	mov	r7, r9
 800a612:	464e      	mov	r6, r9
 800a614:	2800      	cmp	r0, #0
 800a616:	f040 8234 	bne.w	800aa82 <_dtoa_r+0x8d2>
 800a61a:	2331      	movs	r3, #49	; 0x31
 800a61c:	f10b 0501 	add.w	r5, fp, #1
 800a620:	f88b 3000 	strb.w	r3, [fp]
 800a624:	f10a 0a01 	add.w	sl, sl, #1
 800a628:	e22f      	b.n	800aa8a <_dtoa_r+0x8da>
 800a62a:	07f2      	lsls	r2, r6, #31
 800a62c:	d505      	bpl.n	800a63a <_dtoa_r+0x48a>
 800a62e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a632:	f7f5 ffe1 	bl	80005f8 <__aeabi_dmul>
 800a636:	3501      	adds	r5, #1
 800a638:	2301      	movs	r3, #1
 800a63a:	1076      	asrs	r6, r6, #1
 800a63c:	3708      	adds	r7, #8
 800a63e:	e772      	b.n	800a526 <_dtoa_r+0x376>
 800a640:	2502      	movs	r5, #2
 800a642:	e774      	b.n	800a52e <_dtoa_r+0x37e>
 800a644:	f8cd a020 	str.w	sl, [sp, #32]
 800a648:	464f      	mov	r7, r9
 800a64a:	e791      	b.n	800a570 <_dtoa_r+0x3c0>
 800a64c:	4b4d      	ldr	r3, [pc, #308]	; (800a784 <_dtoa_r+0x5d4>)
 800a64e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a652:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d047      	beq.n	800a6ec <_dtoa_r+0x53c>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	2000      	movs	r0, #0
 800a662:	494e      	ldr	r1, [pc, #312]	; (800a79c <_dtoa_r+0x5ec>)
 800a664:	f7f6 f8f2 	bl	800084c <__aeabi_ddiv>
 800a668:	462a      	mov	r2, r5
 800a66a:	4633      	mov	r3, r6
 800a66c:	f7f5 fe0c 	bl	8000288 <__aeabi_dsub>
 800a670:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a674:	465d      	mov	r5, fp
 800a676:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a67a:	f7f6 fa6d 	bl	8000b58 <__aeabi_d2iz>
 800a67e:	4606      	mov	r6, r0
 800a680:	f7f5 ff50 	bl	8000524 <__aeabi_i2d>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a68c:	f7f5 fdfc 	bl	8000288 <__aeabi_dsub>
 800a690:	3630      	adds	r6, #48	; 0x30
 800a692:	f805 6b01 	strb.w	r6, [r5], #1
 800a696:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a69a:	e9cd 0100 	strd	r0, r1, [sp]
 800a69e:	f7f6 fa1d 	bl	8000adc <__aeabi_dcmplt>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d163      	bne.n	800a76e <_dtoa_r+0x5be>
 800a6a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	4937      	ldr	r1, [pc, #220]	; (800a78c <_dtoa_r+0x5dc>)
 800a6ae:	f7f5 fdeb 	bl	8000288 <__aeabi_dsub>
 800a6b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a6b6:	f7f6 fa11 	bl	8000adc <__aeabi_dcmplt>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	f040 80b7 	bne.w	800a82e <_dtoa_r+0x67e>
 800a6c0:	eba5 030b 	sub.w	r3, r5, fp
 800a6c4:	429f      	cmp	r7, r3
 800a6c6:	f77f af7c 	ble.w	800a5c2 <_dtoa_r+0x412>
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	4b30      	ldr	r3, [pc, #192]	; (800a790 <_dtoa_r+0x5e0>)
 800a6ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6d2:	f7f5 ff91 	bl	80005f8 <__aeabi_dmul>
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6dc:	4b2c      	ldr	r3, [pc, #176]	; (800a790 <_dtoa_r+0x5e0>)
 800a6de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6e2:	f7f5 ff89 	bl	80005f8 <__aeabi_dmul>
 800a6e6:	e9cd 0100 	strd	r0, r1, [sp]
 800a6ea:	e7c4      	b.n	800a676 <_dtoa_r+0x4c6>
 800a6ec:	462a      	mov	r2, r5
 800a6ee:	4633      	mov	r3, r6
 800a6f0:	f7f5 ff82 	bl	80005f8 <__aeabi_dmul>
 800a6f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6f8:	eb0b 0507 	add.w	r5, fp, r7
 800a6fc:	465e      	mov	r6, fp
 800a6fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a702:	f7f6 fa29 	bl	8000b58 <__aeabi_d2iz>
 800a706:	4607      	mov	r7, r0
 800a708:	f7f5 ff0c 	bl	8000524 <__aeabi_i2d>
 800a70c:	3730      	adds	r7, #48	; 0x30
 800a70e:	4602      	mov	r2, r0
 800a710:	460b      	mov	r3, r1
 800a712:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a716:	f7f5 fdb7 	bl	8000288 <__aeabi_dsub>
 800a71a:	f806 7b01 	strb.w	r7, [r6], #1
 800a71e:	42ae      	cmp	r6, r5
 800a720:	e9cd 0100 	strd	r0, r1, [sp]
 800a724:	f04f 0200 	mov.w	r2, #0
 800a728:	d126      	bne.n	800a778 <_dtoa_r+0x5c8>
 800a72a:	4b1c      	ldr	r3, [pc, #112]	; (800a79c <_dtoa_r+0x5ec>)
 800a72c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a730:	f7f5 fdac 	bl	800028c <__adddf3>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a73c:	f7f6 f9ec 	bl	8000b18 <__aeabi_dcmpgt>
 800a740:	2800      	cmp	r0, #0
 800a742:	d174      	bne.n	800a82e <_dtoa_r+0x67e>
 800a744:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a748:	2000      	movs	r0, #0
 800a74a:	4914      	ldr	r1, [pc, #80]	; (800a79c <_dtoa_r+0x5ec>)
 800a74c:	f7f5 fd9c 	bl	8000288 <__aeabi_dsub>
 800a750:	4602      	mov	r2, r0
 800a752:	460b      	mov	r3, r1
 800a754:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a758:	f7f6 f9c0 	bl	8000adc <__aeabi_dcmplt>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	f43f af30 	beq.w	800a5c2 <_dtoa_r+0x412>
 800a762:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a766:	2b30      	cmp	r3, #48	; 0x30
 800a768:	f105 32ff 	add.w	r2, r5, #4294967295
 800a76c:	d002      	beq.n	800a774 <_dtoa_r+0x5c4>
 800a76e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a772:	e04a      	b.n	800a80a <_dtoa_r+0x65a>
 800a774:	4615      	mov	r5, r2
 800a776:	e7f4      	b.n	800a762 <_dtoa_r+0x5b2>
 800a778:	4b05      	ldr	r3, [pc, #20]	; (800a790 <_dtoa_r+0x5e0>)
 800a77a:	f7f5 ff3d 	bl	80005f8 <__aeabi_dmul>
 800a77e:	e9cd 0100 	strd	r0, r1, [sp]
 800a782:	e7bc      	b.n	800a6fe <_dtoa_r+0x54e>
 800a784:	0800ee80 	.word	0x0800ee80
 800a788:	0800ee58 	.word	0x0800ee58
 800a78c:	3ff00000 	.word	0x3ff00000
 800a790:	40240000 	.word	0x40240000
 800a794:	401c0000 	.word	0x401c0000
 800a798:	40140000 	.word	0x40140000
 800a79c:	3fe00000 	.word	0x3fe00000
 800a7a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a7a4:	465d      	mov	r5, fp
 800a7a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	f7f6 f84d 	bl	800084c <__aeabi_ddiv>
 800a7b2:	f7f6 f9d1 	bl	8000b58 <__aeabi_d2iz>
 800a7b6:	4680      	mov	r8, r0
 800a7b8:	f7f5 feb4 	bl	8000524 <__aeabi_i2d>
 800a7bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7c0:	f7f5 ff1a 	bl	80005f8 <__aeabi_dmul>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	4639      	mov	r1, r7
 800a7cc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a7d0:	f7f5 fd5a 	bl	8000288 <__aeabi_dsub>
 800a7d4:	f805 6b01 	strb.w	r6, [r5], #1
 800a7d8:	eba5 060b 	sub.w	r6, r5, fp
 800a7dc:	45b1      	cmp	r9, r6
 800a7de:	4602      	mov	r2, r0
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	d139      	bne.n	800a858 <_dtoa_r+0x6a8>
 800a7e4:	f7f5 fd52 	bl	800028c <__adddf3>
 800a7e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7ec:	4606      	mov	r6, r0
 800a7ee:	460f      	mov	r7, r1
 800a7f0:	f7f6 f992 	bl	8000b18 <__aeabi_dcmpgt>
 800a7f4:	b9c8      	cbnz	r0, 800a82a <_dtoa_r+0x67a>
 800a7f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	f7f6 f963 	bl	8000ac8 <__aeabi_dcmpeq>
 800a802:	b110      	cbz	r0, 800a80a <_dtoa_r+0x65a>
 800a804:	f018 0f01 	tst.w	r8, #1
 800a808:	d10f      	bne.n	800a82a <_dtoa_r+0x67a>
 800a80a:	9904      	ldr	r1, [sp, #16]
 800a80c:	4620      	mov	r0, r4
 800a80e:	f000 ff1f 	bl	800b650 <_Bfree>
 800a812:	2300      	movs	r3, #0
 800a814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a816:	702b      	strb	r3, [r5, #0]
 800a818:	f10a 0301 	add.w	r3, sl, #1
 800a81c:	6013      	str	r3, [r2, #0]
 800a81e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a820:	2b00      	cmp	r3, #0
 800a822:	f43f acff 	beq.w	800a224 <_dtoa_r+0x74>
 800a826:	601d      	str	r5, [r3, #0]
 800a828:	e4fc      	b.n	800a224 <_dtoa_r+0x74>
 800a82a:	f8cd a020 	str.w	sl, [sp, #32]
 800a82e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a832:	2a39      	cmp	r2, #57	; 0x39
 800a834:	f105 33ff 	add.w	r3, r5, #4294967295
 800a838:	d108      	bne.n	800a84c <_dtoa_r+0x69c>
 800a83a:	459b      	cmp	fp, r3
 800a83c:	d10a      	bne.n	800a854 <_dtoa_r+0x6a4>
 800a83e:	9b08      	ldr	r3, [sp, #32]
 800a840:	3301      	adds	r3, #1
 800a842:	9308      	str	r3, [sp, #32]
 800a844:	2330      	movs	r3, #48	; 0x30
 800a846:	f88b 3000 	strb.w	r3, [fp]
 800a84a:	465b      	mov	r3, fp
 800a84c:	781a      	ldrb	r2, [r3, #0]
 800a84e:	3201      	adds	r2, #1
 800a850:	701a      	strb	r2, [r3, #0]
 800a852:	e78c      	b.n	800a76e <_dtoa_r+0x5be>
 800a854:	461d      	mov	r5, r3
 800a856:	e7ea      	b.n	800a82e <_dtoa_r+0x67e>
 800a858:	2200      	movs	r2, #0
 800a85a:	4b9b      	ldr	r3, [pc, #620]	; (800aac8 <_dtoa_r+0x918>)
 800a85c:	f7f5 fecc 	bl	80005f8 <__aeabi_dmul>
 800a860:	2200      	movs	r2, #0
 800a862:	2300      	movs	r3, #0
 800a864:	4606      	mov	r6, r0
 800a866:	460f      	mov	r7, r1
 800a868:	f7f6 f92e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	d09a      	beq.n	800a7a6 <_dtoa_r+0x5f6>
 800a870:	e7cb      	b.n	800a80a <_dtoa_r+0x65a>
 800a872:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a874:	2a00      	cmp	r2, #0
 800a876:	f000 808b 	beq.w	800a990 <_dtoa_r+0x7e0>
 800a87a:	9a06      	ldr	r2, [sp, #24]
 800a87c:	2a01      	cmp	r2, #1
 800a87e:	dc6e      	bgt.n	800a95e <_dtoa_r+0x7ae>
 800a880:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a882:	2a00      	cmp	r2, #0
 800a884:	d067      	beq.n	800a956 <_dtoa_r+0x7a6>
 800a886:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a88a:	9f07      	ldr	r7, [sp, #28]
 800a88c:	9d05      	ldr	r5, [sp, #20]
 800a88e:	9a05      	ldr	r2, [sp, #20]
 800a890:	2101      	movs	r1, #1
 800a892:	441a      	add	r2, r3
 800a894:	4620      	mov	r0, r4
 800a896:	9205      	str	r2, [sp, #20]
 800a898:	4498      	add	r8, r3
 800a89a:	f000 ffa9 	bl	800b7f0 <__i2b>
 800a89e:	4606      	mov	r6, r0
 800a8a0:	2d00      	cmp	r5, #0
 800a8a2:	dd0c      	ble.n	800a8be <_dtoa_r+0x70e>
 800a8a4:	f1b8 0f00 	cmp.w	r8, #0
 800a8a8:	dd09      	ble.n	800a8be <_dtoa_r+0x70e>
 800a8aa:	4545      	cmp	r5, r8
 800a8ac:	9a05      	ldr	r2, [sp, #20]
 800a8ae:	462b      	mov	r3, r5
 800a8b0:	bfa8      	it	ge
 800a8b2:	4643      	movge	r3, r8
 800a8b4:	1ad2      	subs	r2, r2, r3
 800a8b6:	9205      	str	r2, [sp, #20]
 800a8b8:	1aed      	subs	r5, r5, r3
 800a8ba:	eba8 0803 	sub.w	r8, r8, r3
 800a8be:	9b07      	ldr	r3, [sp, #28]
 800a8c0:	b1eb      	cbz	r3, 800a8fe <_dtoa_r+0x74e>
 800a8c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d067      	beq.n	800a998 <_dtoa_r+0x7e8>
 800a8c8:	b18f      	cbz	r7, 800a8ee <_dtoa_r+0x73e>
 800a8ca:	4631      	mov	r1, r6
 800a8cc:	463a      	mov	r2, r7
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f001 f82e 	bl	800b930 <__pow5mult>
 800a8d4:	9a04      	ldr	r2, [sp, #16]
 800a8d6:	4601      	mov	r1, r0
 800a8d8:	4606      	mov	r6, r0
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 ff91 	bl	800b802 <__multiply>
 800a8e0:	9904      	ldr	r1, [sp, #16]
 800a8e2:	9008      	str	r0, [sp, #32]
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 feb3 	bl	800b650 <_Bfree>
 800a8ea:	9b08      	ldr	r3, [sp, #32]
 800a8ec:	9304      	str	r3, [sp, #16]
 800a8ee:	9b07      	ldr	r3, [sp, #28]
 800a8f0:	1bda      	subs	r2, r3, r7
 800a8f2:	d004      	beq.n	800a8fe <_dtoa_r+0x74e>
 800a8f4:	9904      	ldr	r1, [sp, #16]
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f001 f81a 	bl	800b930 <__pow5mult>
 800a8fc:	9004      	str	r0, [sp, #16]
 800a8fe:	2101      	movs	r1, #1
 800a900:	4620      	mov	r0, r4
 800a902:	f000 ff75 	bl	800b7f0 <__i2b>
 800a906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a908:	4607      	mov	r7, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f000 81cf 	beq.w	800acae <_dtoa_r+0xafe>
 800a910:	461a      	mov	r2, r3
 800a912:	4601      	mov	r1, r0
 800a914:	4620      	mov	r0, r4
 800a916:	f001 f80b 	bl	800b930 <__pow5mult>
 800a91a:	9b06      	ldr	r3, [sp, #24]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	4607      	mov	r7, r0
 800a920:	dc40      	bgt.n	800a9a4 <_dtoa_r+0x7f4>
 800a922:	9b00      	ldr	r3, [sp, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d139      	bne.n	800a99c <_dtoa_r+0x7ec>
 800a928:	9b01      	ldr	r3, [sp, #4]
 800a92a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d136      	bne.n	800a9a0 <_dtoa_r+0x7f0>
 800a932:	9b01      	ldr	r3, [sp, #4]
 800a934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a938:	0d1b      	lsrs	r3, r3, #20
 800a93a:	051b      	lsls	r3, r3, #20
 800a93c:	b12b      	cbz	r3, 800a94a <_dtoa_r+0x79a>
 800a93e:	9b05      	ldr	r3, [sp, #20]
 800a940:	3301      	adds	r3, #1
 800a942:	9305      	str	r3, [sp, #20]
 800a944:	f108 0801 	add.w	r8, r8, #1
 800a948:	2301      	movs	r3, #1
 800a94a:	9307      	str	r3, [sp, #28]
 800a94c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d12a      	bne.n	800a9a8 <_dtoa_r+0x7f8>
 800a952:	2001      	movs	r0, #1
 800a954:	e030      	b.n	800a9b8 <_dtoa_r+0x808>
 800a956:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a958:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a95c:	e795      	b.n	800a88a <_dtoa_r+0x6da>
 800a95e:	9b07      	ldr	r3, [sp, #28]
 800a960:	f109 37ff 	add.w	r7, r9, #4294967295
 800a964:	42bb      	cmp	r3, r7
 800a966:	bfbf      	itttt	lt
 800a968:	9b07      	ldrlt	r3, [sp, #28]
 800a96a:	9707      	strlt	r7, [sp, #28]
 800a96c:	1afa      	sublt	r2, r7, r3
 800a96e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a970:	bfbb      	ittet	lt
 800a972:	189b      	addlt	r3, r3, r2
 800a974:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a976:	1bdf      	subge	r7, r3, r7
 800a978:	2700      	movlt	r7, #0
 800a97a:	f1b9 0f00 	cmp.w	r9, #0
 800a97e:	bfb5      	itete	lt
 800a980:	9b05      	ldrlt	r3, [sp, #20]
 800a982:	9d05      	ldrge	r5, [sp, #20]
 800a984:	eba3 0509 	sublt.w	r5, r3, r9
 800a988:	464b      	movge	r3, r9
 800a98a:	bfb8      	it	lt
 800a98c:	2300      	movlt	r3, #0
 800a98e:	e77e      	b.n	800a88e <_dtoa_r+0x6de>
 800a990:	9f07      	ldr	r7, [sp, #28]
 800a992:	9d05      	ldr	r5, [sp, #20]
 800a994:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a996:	e783      	b.n	800a8a0 <_dtoa_r+0x6f0>
 800a998:	9a07      	ldr	r2, [sp, #28]
 800a99a:	e7ab      	b.n	800a8f4 <_dtoa_r+0x744>
 800a99c:	2300      	movs	r3, #0
 800a99e:	e7d4      	b.n	800a94a <_dtoa_r+0x79a>
 800a9a0:	9b00      	ldr	r3, [sp, #0]
 800a9a2:	e7d2      	b.n	800a94a <_dtoa_r+0x79a>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	9307      	str	r3, [sp, #28]
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a9ae:	6918      	ldr	r0, [r3, #16]
 800a9b0:	f000 fed0 	bl	800b754 <__hi0bits>
 800a9b4:	f1c0 0020 	rsb	r0, r0, #32
 800a9b8:	4440      	add	r0, r8
 800a9ba:	f010 001f 	ands.w	r0, r0, #31
 800a9be:	d047      	beq.n	800aa50 <_dtoa_r+0x8a0>
 800a9c0:	f1c0 0320 	rsb	r3, r0, #32
 800a9c4:	2b04      	cmp	r3, #4
 800a9c6:	dd3b      	ble.n	800aa40 <_dtoa_r+0x890>
 800a9c8:	9b05      	ldr	r3, [sp, #20]
 800a9ca:	f1c0 001c 	rsb	r0, r0, #28
 800a9ce:	4403      	add	r3, r0
 800a9d0:	9305      	str	r3, [sp, #20]
 800a9d2:	4405      	add	r5, r0
 800a9d4:	4480      	add	r8, r0
 800a9d6:	9b05      	ldr	r3, [sp, #20]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	dd05      	ble.n	800a9e8 <_dtoa_r+0x838>
 800a9dc:	461a      	mov	r2, r3
 800a9de:	9904      	ldr	r1, [sp, #16]
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f000 ffe5 	bl	800b9b0 <__lshift>
 800a9e6:	9004      	str	r0, [sp, #16]
 800a9e8:	f1b8 0f00 	cmp.w	r8, #0
 800a9ec:	dd05      	ble.n	800a9fa <_dtoa_r+0x84a>
 800a9ee:	4639      	mov	r1, r7
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f000 ffdc 	bl	800b9b0 <__lshift>
 800a9f8:	4607      	mov	r7, r0
 800a9fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9fc:	b353      	cbz	r3, 800aa54 <_dtoa_r+0x8a4>
 800a9fe:	4639      	mov	r1, r7
 800aa00:	9804      	ldr	r0, [sp, #16]
 800aa02:	f001 f829 	bl	800ba58 <__mcmp>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	da24      	bge.n	800aa54 <_dtoa_r+0x8a4>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	220a      	movs	r2, #10
 800aa0e:	9904      	ldr	r1, [sp, #16]
 800aa10:	4620      	mov	r0, r4
 800aa12:	f000 fe26 	bl	800b662 <__multadd>
 800aa16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa18:	9004      	str	r0, [sp, #16]
 800aa1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 814c 	beq.w	800acbc <_dtoa_r+0xb0c>
 800aa24:	2300      	movs	r3, #0
 800aa26:	4631      	mov	r1, r6
 800aa28:	220a      	movs	r2, #10
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f000 fe19 	bl	800b662 <__multadd>
 800aa30:	9b02      	ldr	r3, [sp, #8]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	4606      	mov	r6, r0
 800aa36:	dc4f      	bgt.n	800aad8 <_dtoa_r+0x928>
 800aa38:	9b06      	ldr	r3, [sp, #24]
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	dd4c      	ble.n	800aad8 <_dtoa_r+0x928>
 800aa3e:	e011      	b.n	800aa64 <_dtoa_r+0x8b4>
 800aa40:	d0c9      	beq.n	800a9d6 <_dtoa_r+0x826>
 800aa42:	9a05      	ldr	r2, [sp, #20]
 800aa44:	331c      	adds	r3, #28
 800aa46:	441a      	add	r2, r3
 800aa48:	9205      	str	r2, [sp, #20]
 800aa4a:	441d      	add	r5, r3
 800aa4c:	4498      	add	r8, r3
 800aa4e:	e7c2      	b.n	800a9d6 <_dtoa_r+0x826>
 800aa50:	4603      	mov	r3, r0
 800aa52:	e7f6      	b.n	800aa42 <_dtoa_r+0x892>
 800aa54:	f1b9 0f00 	cmp.w	r9, #0
 800aa58:	dc38      	bgt.n	800aacc <_dtoa_r+0x91c>
 800aa5a:	9b06      	ldr	r3, [sp, #24]
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	dd35      	ble.n	800aacc <_dtoa_r+0x91c>
 800aa60:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa64:	9b02      	ldr	r3, [sp, #8]
 800aa66:	b963      	cbnz	r3, 800aa82 <_dtoa_r+0x8d2>
 800aa68:	4639      	mov	r1, r7
 800aa6a:	2205      	movs	r2, #5
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f000 fdf8 	bl	800b662 <__multadd>
 800aa72:	4601      	mov	r1, r0
 800aa74:	4607      	mov	r7, r0
 800aa76:	9804      	ldr	r0, [sp, #16]
 800aa78:	f000 ffee 	bl	800ba58 <__mcmp>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	f73f adcc 	bgt.w	800a61a <_dtoa_r+0x46a>
 800aa82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa84:	465d      	mov	r5, fp
 800aa86:	ea6f 0a03 	mvn.w	sl, r3
 800aa8a:	f04f 0900 	mov.w	r9, #0
 800aa8e:	4639      	mov	r1, r7
 800aa90:	4620      	mov	r0, r4
 800aa92:	f000 fddd 	bl	800b650 <_Bfree>
 800aa96:	2e00      	cmp	r6, #0
 800aa98:	f43f aeb7 	beq.w	800a80a <_dtoa_r+0x65a>
 800aa9c:	f1b9 0f00 	cmp.w	r9, #0
 800aaa0:	d005      	beq.n	800aaae <_dtoa_r+0x8fe>
 800aaa2:	45b1      	cmp	r9, r6
 800aaa4:	d003      	beq.n	800aaae <_dtoa_r+0x8fe>
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 fdd1 	bl	800b650 <_Bfree>
 800aaae:	4631      	mov	r1, r6
 800aab0:	4620      	mov	r0, r4
 800aab2:	f000 fdcd 	bl	800b650 <_Bfree>
 800aab6:	e6a8      	b.n	800a80a <_dtoa_r+0x65a>
 800aab8:	2700      	movs	r7, #0
 800aaba:	463e      	mov	r6, r7
 800aabc:	e7e1      	b.n	800aa82 <_dtoa_r+0x8d2>
 800aabe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aac2:	463e      	mov	r6, r7
 800aac4:	e5a9      	b.n	800a61a <_dtoa_r+0x46a>
 800aac6:	bf00      	nop
 800aac8:	40240000 	.word	0x40240000
 800aacc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aace:	f8cd 9008 	str.w	r9, [sp, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	f000 80f9 	beq.w	800acca <_dtoa_r+0xb1a>
 800aad8:	2d00      	cmp	r5, #0
 800aada:	dd05      	ble.n	800aae8 <_dtoa_r+0x938>
 800aadc:	4631      	mov	r1, r6
 800aade:	462a      	mov	r2, r5
 800aae0:	4620      	mov	r0, r4
 800aae2:	f000 ff65 	bl	800b9b0 <__lshift>
 800aae6:	4606      	mov	r6, r0
 800aae8:	9b07      	ldr	r3, [sp, #28]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d04c      	beq.n	800ab88 <_dtoa_r+0x9d8>
 800aaee:	6871      	ldr	r1, [r6, #4]
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f000 fd88 	bl	800b606 <_Balloc>
 800aaf6:	6932      	ldr	r2, [r6, #16]
 800aaf8:	3202      	adds	r2, #2
 800aafa:	4605      	mov	r5, r0
 800aafc:	0092      	lsls	r2, r2, #2
 800aafe:	f106 010c 	add.w	r1, r6, #12
 800ab02:	300c      	adds	r0, #12
 800ab04:	f000 fd74 	bl	800b5f0 <memcpy>
 800ab08:	2201      	movs	r2, #1
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f000 ff4f 	bl	800b9b0 <__lshift>
 800ab12:	9b00      	ldr	r3, [sp, #0]
 800ab14:	f8cd b014 	str.w	fp, [sp, #20]
 800ab18:	f003 0301 	and.w	r3, r3, #1
 800ab1c:	46b1      	mov	r9, r6
 800ab1e:	9307      	str	r3, [sp, #28]
 800ab20:	4606      	mov	r6, r0
 800ab22:	4639      	mov	r1, r7
 800ab24:	9804      	ldr	r0, [sp, #16]
 800ab26:	f7ff fab7 	bl	800a098 <quorem>
 800ab2a:	4649      	mov	r1, r9
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ab32:	9804      	ldr	r0, [sp, #16]
 800ab34:	f000 ff90 	bl	800ba58 <__mcmp>
 800ab38:	4632      	mov	r2, r6
 800ab3a:	9000      	str	r0, [sp, #0]
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f000 ffa4 	bl	800ba8c <__mdiff>
 800ab44:	68c3      	ldr	r3, [r0, #12]
 800ab46:	4602      	mov	r2, r0
 800ab48:	bb03      	cbnz	r3, 800ab8c <_dtoa_r+0x9dc>
 800ab4a:	4601      	mov	r1, r0
 800ab4c:	9008      	str	r0, [sp, #32]
 800ab4e:	9804      	ldr	r0, [sp, #16]
 800ab50:	f000 ff82 	bl	800ba58 <__mcmp>
 800ab54:	9a08      	ldr	r2, [sp, #32]
 800ab56:	4603      	mov	r3, r0
 800ab58:	4611      	mov	r1, r2
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	9308      	str	r3, [sp, #32]
 800ab5e:	f000 fd77 	bl	800b650 <_Bfree>
 800ab62:	9b08      	ldr	r3, [sp, #32]
 800ab64:	b9a3      	cbnz	r3, 800ab90 <_dtoa_r+0x9e0>
 800ab66:	9a06      	ldr	r2, [sp, #24]
 800ab68:	b992      	cbnz	r2, 800ab90 <_dtoa_r+0x9e0>
 800ab6a:	9a07      	ldr	r2, [sp, #28]
 800ab6c:	b982      	cbnz	r2, 800ab90 <_dtoa_r+0x9e0>
 800ab6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ab72:	d029      	beq.n	800abc8 <_dtoa_r+0xa18>
 800ab74:	9b00      	ldr	r3, [sp, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	dd01      	ble.n	800ab7e <_dtoa_r+0x9ce>
 800ab7a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ab7e:	9b05      	ldr	r3, [sp, #20]
 800ab80:	1c5d      	adds	r5, r3, #1
 800ab82:	f883 8000 	strb.w	r8, [r3]
 800ab86:	e782      	b.n	800aa8e <_dtoa_r+0x8de>
 800ab88:	4630      	mov	r0, r6
 800ab8a:	e7c2      	b.n	800ab12 <_dtoa_r+0x962>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e7e3      	b.n	800ab58 <_dtoa_r+0x9a8>
 800ab90:	9a00      	ldr	r2, [sp, #0]
 800ab92:	2a00      	cmp	r2, #0
 800ab94:	db04      	blt.n	800aba0 <_dtoa_r+0x9f0>
 800ab96:	d125      	bne.n	800abe4 <_dtoa_r+0xa34>
 800ab98:	9a06      	ldr	r2, [sp, #24]
 800ab9a:	bb1a      	cbnz	r2, 800abe4 <_dtoa_r+0xa34>
 800ab9c:	9a07      	ldr	r2, [sp, #28]
 800ab9e:	bb0a      	cbnz	r2, 800abe4 <_dtoa_r+0xa34>
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	ddec      	ble.n	800ab7e <_dtoa_r+0x9ce>
 800aba4:	2201      	movs	r2, #1
 800aba6:	9904      	ldr	r1, [sp, #16]
 800aba8:	4620      	mov	r0, r4
 800abaa:	f000 ff01 	bl	800b9b0 <__lshift>
 800abae:	4639      	mov	r1, r7
 800abb0:	9004      	str	r0, [sp, #16]
 800abb2:	f000 ff51 	bl	800ba58 <__mcmp>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	dc03      	bgt.n	800abc2 <_dtoa_r+0xa12>
 800abba:	d1e0      	bne.n	800ab7e <_dtoa_r+0x9ce>
 800abbc:	f018 0f01 	tst.w	r8, #1
 800abc0:	d0dd      	beq.n	800ab7e <_dtoa_r+0x9ce>
 800abc2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800abc6:	d1d8      	bne.n	800ab7a <_dtoa_r+0x9ca>
 800abc8:	9b05      	ldr	r3, [sp, #20]
 800abca:	9a05      	ldr	r2, [sp, #20]
 800abcc:	1c5d      	adds	r5, r3, #1
 800abce:	2339      	movs	r3, #57	; 0x39
 800abd0:	7013      	strb	r3, [r2, #0]
 800abd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abd6:	2b39      	cmp	r3, #57	; 0x39
 800abd8:	f105 32ff 	add.w	r2, r5, #4294967295
 800abdc:	d04f      	beq.n	800ac7e <_dtoa_r+0xace>
 800abde:	3301      	adds	r3, #1
 800abe0:	7013      	strb	r3, [r2, #0]
 800abe2:	e754      	b.n	800aa8e <_dtoa_r+0x8de>
 800abe4:	9a05      	ldr	r2, [sp, #20]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f102 0501 	add.w	r5, r2, #1
 800abec:	dd06      	ble.n	800abfc <_dtoa_r+0xa4c>
 800abee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800abf2:	d0e9      	beq.n	800abc8 <_dtoa_r+0xa18>
 800abf4:	f108 0801 	add.w	r8, r8, #1
 800abf8:	9b05      	ldr	r3, [sp, #20]
 800abfa:	e7c2      	b.n	800ab82 <_dtoa_r+0x9d2>
 800abfc:	9a02      	ldr	r2, [sp, #8]
 800abfe:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ac02:	eba5 030b 	sub.w	r3, r5, fp
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d021      	beq.n	800ac4e <_dtoa_r+0xa9e>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	220a      	movs	r2, #10
 800ac0e:	9904      	ldr	r1, [sp, #16]
 800ac10:	4620      	mov	r0, r4
 800ac12:	f000 fd26 	bl	800b662 <__multadd>
 800ac16:	45b1      	cmp	r9, r6
 800ac18:	9004      	str	r0, [sp, #16]
 800ac1a:	f04f 0300 	mov.w	r3, #0
 800ac1e:	f04f 020a 	mov.w	r2, #10
 800ac22:	4649      	mov	r1, r9
 800ac24:	4620      	mov	r0, r4
 800ac26:	d105      	bne.n	800ac34 <_dtoa_r+0xa84>
 800ac28:	f000 fd1b 	bl	800b662 <__multadd>
 800ac2c:	4681      	mov	r9, r0
 800ac2e:	4606      	mov	r6, r0
 800ac30:	9505      	str	r5, [sp, #20]
 800ac32:	e776      	b.n	800ab22 <_dtoa_r+0x972>
 800ac34:	f000 fd15 	bl	800b662 <__multadd>
 800ac38:	4631      	mov	r1, r6
 800ac3a:	4681      	mov	r9, r0
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	220a      	movs	r2, #10
 800ac40:	4620      	mov	r0, r4
 800ac42:	f000 fd0e 	bl	800b662 <__multadd>
 800ac46:	4606      	mov	r6, r0
 800ac48:	e7f2      	b.n	800ac30 <_dtoa_r+0xa80>
 800ac4a:	f04f 0900 	mov.w	r9, #0
 800ac4e:	2201      	movs	r2, #1
 800ac50:	9904      	ldr	r1, [sp, #16]
 800ac52:	4620      	mov	r0, r4
 800ac54:	f000 feac 	bl	800b9b0 <__lshift>
 800ac58:	4639      	mov	r1, r7
 800ac5a:	9004      	str	r0, [sp, #16]
 800ac5c:	f000 fefc 	bl	800ba58 <__mcmp>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	dcb6      	bgt.n	800abd2 <_dtoa_r+0xa22>
 800ac64:	d102      	bne.n	800ac6c <_dtoa_r+0xabc>
 800ac66:	f018 0f01 	tst.w	r8, #1
 800ac6a:	d1b2      	bne.n	800abd2 <_dtoa_r+0xa22>
 800ac6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac70:	2b30      	cmp	r3, #48	; 0x30
 800ac72:	f105 32ff 	add.w	r2, r5, #4294967295
 800ac76:	f47f af0a 	bne.w	800aa8e <_dtoa_r+0x8de>
 800ac7a:	4615      	mov	r5, r2
 800ac7c:	e7f6      	b.n	800ac6c <_dtoa_r+0xabc>
 800ac7e:	4593      	cmp	fp, r2
 800ac80:	d105      	bne.n	800ac8e <_dtoa_r+0xade>
 800ac82:	2331      	movs	r3, #49	; 0x31
 800ac84:	f10a 0a01 	add.w	sl, sl, #1
 800ac88:	f88b 3000 	strb.w	r3, [fp]
 800ac8c:	e6ff      	b.n	800aa8e <_dtoa_r+0x8de>
 800ac8e:	4615      	mov	r5, r2
 800ac90:	e79f      	b.n	800abd2 <_dtoa_r+0xa22>
 800ac92:	f8df b064 	ldr.w	fp, [pc, #100]	; 800acf8 <_dtoa_r+0xb48>
 800ac96:	f7ff bac5 	b.w	800a224 <_dtoa_r+0x74>
 800ac9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac9c:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800acfc <_dtoa_r+0xb4c>
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f43f aabf 	beq.w	800a224 <_dtoa_r+0x74>
 800aca6:	f10b 0308 	add.w	r3, fp, #8
 800acaa:	f7ff bab9 	b.w	800a220 <_dtoa_r+0x70>
 800acae:	9b06      	ldr	r3, [sp, #24]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	f77f ae36 	ble.w	800a922 <_dtoa_r+0x772>
 800acb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acb8:	9307      	str	r3, [sp, #28]
 800acba:	e64a      	b.n	800a952 <_dtoa_r+0x7a2>
 800acbc:	9b02      	ldr	r3, [sp, #8]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	dc03      	bgt.n	800acca <_dtoa_r+0xb1a>
 800acc2:	9b06      	ldr	r3, [sp, #24]
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	f73f aecd 	bgt.w	800aa64 <_dtoa_r+0x8b4>
 800acca:	465d      	mov	r5, fp
 800accc:	4639      	mov	r1, r7
 800acce:	9804      	ldr	r0, [sp, #16]
 800acd0:	f7ff f9e2 	bl	800a098 <quorem>
 800acd4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800acd8:	f805 8b01 	strb.w	r8, [r5], #1
 800acdc:	9a02      	ldr	r2, [sp, #8]
 800acde:	eba5 030b 	sub.w	r3, r5, fp
 800ace2:	429a      	cmp	r2, r3
 800ace4:	ddb1      	ble.n	800ac4a <_dtoa_r+0xa9a>
 800ace6:	2300      	movs	r3, #0
 800ace8:	220a      	movs	r2, #10
 800acea:	9904      	ldr	r1, [sp, #16]
 800acec:	4620      	mov	r0, r4
 800acee:	f000 fcb8 	bl	800b662 <__multadd>
 800acf2:	9004      	str	r0, [sp, #16]
 800acf4:	e7ea      	b.n	800accc <_dtoa_r+0xb1c>
 800acf6:	bf00      	nop
 800acf8:	0800ee1a 	.word	0x0800ee1a
 800acfc:	0800ee3c 	.word	0x0800ee3c

0800ad00 <__errno>:
 800ad00:	4b01      	ldr	r3, [pc, #4]	; (800ad08 <__errno+0x8>)
 800ad02:	6818      	ldr	r0, [r3, #0]
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop
 800ad08:	20000010 	.word	0x20000010

0800ad0c <__libc_fini_array>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4d07      	ldr	r5, [pc, #28]	; (800ad2c <__libc_fini_array+0x20>)
 800ad10:	4c07      	ldr	r4, [pc, #28]	; (800ad30 <__libc_fini_array+0x24>)
 800ad12:	1b64      	subs	r4, r4, r5
 800ad14:	10a4      	asrs	r4, r4, #2
 800ad16:	b91c      	cbnz	r4, 800ad20 <__libc_fini_array+0x14>
 800ad18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad1c:	f003 bff6 	b.w	800ed0c <_fini>
 800ad20:	3c01      	subs	r4, #1
 800ad22:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800ad26:	4798      	blx	r3
 800ad28:	e7f5      	b.n	800ad16 <__libc_fini_array+0xa>
 800ad2a:	bf00      	nop
 800ad2c:	0800f2e0 	.word	0x0800f2e0
 800ad30:	0800f2e4 	.word	0x0800f2e4

0800ad34 <_malloc_trim_r>:
 800ad34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad38:	4605      	mov	r5, r0
 800ad3a:	2008      	movs	r0, #8
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	f7ff f98d 	bl	800a05c <sysconf>
 800ad42:	4f23      	ldr	r7, [pc, #140]	; (800add0 <_malloc_trim_r+0x9c>)
 800ad44:	4680      	mov	r8, r0
 800ad46:	4628      	mov	r0, r5
 800ad48:	f7fd f874 	bl	8007e34 <__malloc_lock>
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	685e      	ldr	r6, [r3, #4]
 800ad50:	f026 0603 	bic.w	r6, r6, #3
 800ad54:	1b34      	subs	r4, r6, r4
 800ad56:	3c11      	subs	r4, #17
 800ad58:	4444      	add	r4, r8
 800ad5a:	fbb4 f4f8 	udiv	r4, r4, r8
 800ad5e:	3c01      	subs	r4, #1
 800ad60:	fb08 f404 	mul.w	r4, r8, r4
 800ad64:	45a0      	cmp	r8, r4
 800ad66:	dd05      	ble.n	800ad74 <_malloc_trim_r+0x40>
 800ad68:	4628      	mov	r0, r5
 800ad6a:	f7fd f869 	bl	8007e40 <__malloc_unlock>
 800ad6e:	2000      	movs	r0, #0
 800ad70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad74:	2100      	movs	r1, #0
 800ad76:	4628      	mov	r0, r5
 800ad78:	f7fd f868 	bl	8007e4c <_sbrk_r>
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	4433      	add	r3, r6
 800ad80:	4298      	cmp	r0, r3
 800ad82:	d1f1      	bne.n	800ad68 <_malloc_trim_r+0x34>
 800ad84:	4261      	negs	r1, r4
 800ad86:	4628      	mov	r0, r5
 800ad88:	f7fd f860 	bl	8007e4c <_sbrk_r>
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	d110      	bne.n	800adb2 <_malloc_trim_r+0x7e>
 800ad90:	2100      	movs	r1, #0
 800ad92:	4628      	mov	r0, r5
 800ad94:	f7fd f85a 	bl	8007e4c <_sbrk_r>
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	1a83      	subs	r3, r0, r2
 800ad9c:	2b0f      	cmp	r3, #15
 800ad9e:	dde3      	ble.n	800ad68 <_malloc_trim_r+0x34>
 800ada0:	490c      	ldr	r1, [pc, #48]	; (800add4 <_malloc_trim_r+0xa0>)
 800ada2:	6809      	ldr	r1, [r1, #0]
 800ada4:	1a40      	subs	r0, r0, r1
 800ada6:	490c      	ldr	r1, [pc, #48]	; (800add8 <_malloc_trim_r+0xa4>)
 800ada8:	f043 0301 	orr.w	r3, r3, #1
 800adac:	6008      	str	r0, [r1, #0]
 800adae:	6053      	str	r3, [r2, #4]
 800adb0:	e7da      	b.n	800ad68 <_malloc_trim_r+0x34>
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	4a08      	ldr	r2, [pc, #32]	; (800add8 <_malloc_trim_r+0xa4>)
 800adb6:	1b36      	subs	r6, r6, r4
 800adb8:	f046 0601 	orr.w	r6, r6, #1
 800adbc:	605e      	str	r6, [r3, #4]
 800adbe:	6813      	ldr	r3, [r2, #0]
 800adc0:	4628      	mov	r0, r5
 800adc2:	1b1c      	subs	r4, r3, r4
 800adc4:	6014      	str	r4, [r2, #0]
 800adc6:	f7fd f83b 	bl	8007e40 <__malloc_unlock>
 800adca:	2001      	movs	r0, #1
 800adcc:	e7d0      	b.n	800ad70 <_malloc_trim_r+0x3c>
 800adce:	bf00      	nop
 800add0:	20000440 	.word	0x20000440
 800add4:	20000848 	.word	0x20000848
 800add8:	200009e4 	.word	0x200009e4

0800addc <_free_r>:
 800addc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade0:	4604      	mov	r4, r0
 800ade2:	4688      	mov	r8, r1
 800ade4:	2900      	cmp	r1, #0
 800ade6:	f000 80ab 	beq.w	800af40 <_free_r+0x164>
 800adea:	f7fd f823 	bl	8007e34 <__malloc_lock>
 800adee:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800adf2:	4d54      	ldr	r5, [pc, #336]	; (800af44 <_free_r+0x168>)
 800adf4:	f022 0001 	bic.w	r0, r2, #1
 800adf8:	f1a8 0308 	sub.w	r3, r8, #8
 800adfc:	181f      	adds	r7, r3, r0
 800adfe:	68a9      	ldr	r1, [r5, #8]
 800ae00:	687e      	ldr	r6, [r7, #4]
 800ae02:	42b9      	cmp	r1, r7
 800ae04:	f026 0603 	bic.w	r6, r6, #3
 800ae08:	f002 0201 	and.w	r2, r2, #1
 800ae0c:	d11b      	bne.n	800ae46 <_free_r+0x6a>
 800ae0e:	4430      	add	r0, r6
 800ae10:	b93a      	cbnz	r2, 800ae22 <_free_r+0x46>
 800ae12:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800ae16:	1a9b      	subs	r3, r3, r2
 800ae18:	4410      	add	r0, r2
 800ae1a:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800ae1e:	60ca      	str	r2, [r1, #12]
 800ae20:	6091      	str	r1, [r2, #8]
 800ae22:	f040 0201 	orr.w	r2, r0, #1
 800ae26:	605a      	str	r2, [r3, #4]
 800ae28:	60ab      	str	r3, [r5, #8]
 800ae2a:	4b47      	ldr	r3, [pc, #284]	; (800af48 <_free_r+0x16c>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4283      	cmp	r3, r0
 800ae30:	d804      	bhi.n	800ae3c <_free_r+0x60>
 800ae32:	4b46      	ldr	r3, [pc, #280]	; (800af4c <_free_r+0x170>)
 800ae34:	4620      	mov	r0, r4
 800ae36:	6819      	ldr	r1, [r3, #0]
 800ae38:	f7ff ff7c 	bl	800ad34 <_malloc_trim_r>
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae42:	f7fc bffd 	b.w	8007e40 <__malloc_unlock>
 800ae46:	607e      	str	r6, [r7, #4]
 800ae48:	2a00      	cmp	r2, #0
 800ae4a:	d139      	bne.n	800aec0 <_free_r+0xe4>
 800ae4c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800ae50:	1a5b      	subs	r3, r3, r1
 800ae52:	4408      	add	r0, r1
 800ae54:	6899      	ldr	r1, [r3, #8]
 800ae56:	f105 0c08 	add.w	ip, r5, #8
 800ae5a:	4561      	cmp	r1, ip
 800ae5c:	d032      	beq.n	800aec4 <_free_r+0xe8>
 800ae5e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800ae62:	f8c1 c00c 	str.w	ip, [r1, #12]
 800ae66:	f8cc 1008 	str.w	r1, [ip, #8]
 800ae6a:	19b9      	adds	r1, r7, r6
 800ae6c:	6849      	ldr	r1, [r1, #4]
 800ae6e:	07c9      	lsls	r1, r1, #31
 800ae70:	d40a      	bmi.n	800ae88 <_free_r+0xac>
 800ae72:	4430      	add	r0, r6
 800ae74:	68b9      	ldr	r1, [r7, #8]
 800ae76:	bb3a      	cbnz	r2, 800aec8 <_free_r+0xec>
 800ae78:	4e35      	ldr	r6, [pc, #212]	; (800af50 <_free_r+0x174>)
 800ae7a:	42b1      	cmp	r1, r6
 800ae7c:	d124      	bne.n	800aec8 <_free_r+0xec>
 800ae7e:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800ae82:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f040 0101 	orr.w	r1, r0, #1
 800ae8c:	6059      	str	r1, [r3, #4]
 800ae8e:	5018      	str	r0, [r3, r0]
 800ae90:	2a00      	cmp	r2, #0
 800ae92:	d1d3      	bne.n	800ae3c <_free_r+0x60>
 800ae94:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800ae98:	d21a      	bcs.n	800aed0 <_free_r+0xf4>
 800ae9a:	08c0      	lsrs	r0, r0, #3
 800ae9c:	1081      	asrs	r1, r0, #2
 800ae9e:	2201      	movs	r2, #1
 800aea0:	408a      	lsls	r2, r1
 800aea2:	6869      	ldr	r1, [r5, #4]
 800aea4:	3001      	adds	r0, #1
 800aea6:	430a      	orrs	r2, r1
 800aea8:	606a      	str	r2, [r5, #4]
 800aeaa:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800aeae:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800aeb2:	3a08      	subs	r2, #8
 800aeb4:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800aeb8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800aebc:	60cb      	str	r3, [r1, #12]
 800aebe:	e7bd      	b.n	800ae3c <_free_r+0x60>
 800aec0:	2200      	movs	r2, #0
 800aec2:	e7d2      	b.n	800ae6a <_free_r+0x8e>
 800aec4:	2201      	movs	r2, #1
 800aec6:	e7d0      	b.n	800ae6a <_free_r+0x8e>
 800aec8:	68fe      	ldr	r6, [r7, #12]
 800aeca:	60ce      	str	r6, [r1, #12]
 800aecc:	60b1      	str	r1, [r6, #8]
 800aece:	e7db      	b.n	800ae88 <_free_r+0xac>
 800aed0:	0a42      	lsrs	r2, r0, #9
 800aed2:	2a04      	cmp	r2, #4
 800aed4:	d813      	bhi.n	800aefe <_free_r+0x122>
 800aed6:	0982      	lsrs	r2, r0, #6
 800aed8:	3238      	adds	r2, #56	; 0x38
 800aeda:	1c51      	adds	r1, r2, #1
 800aedc:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800aee0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800aee4:	428e      	cmp	r6, r1
 800aee6:	d124      	bne.n	800af32 <_free_r+0x156>
 800aee8:	2001      	movs	r0, #1
 800aeea:	1092      	asrs	r2, r2, #2
 800aeec:	fa00 f202 	lsl.w	r2, r0, r2
 800aef0:	6868      	ldr	r0, [r5, #4]
 800aef2:	4302      	orrs	r2, r0
 800aef4:	606a      	str	r2, [r5, #4]
 800aef6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800aefa:	60b3      	str	r3, [r6, #8]
 800aefc:	e7de      	b.n	800aebc <_free_r+0xe0>
 800aefe:	2a14      	cmp	r2, #20
 800af00:	d801      	bhi.n	800af06 <_free_r+0x12a>
 800af02:	325b      	adds	r2, #91	; 0x5b
 800af04:	e7e9      	b.n	800aeda <_free_r+0xfe>
 800af06:	2a54      	cmp	r2, #84	; 0x54
 800af08:	d802      	bhi.n	800af10 <_free_r+0x134>
 800af0a:	0b02      	lsrs	r2, r0, #12
 800af0c:	326e      	adds	r2, #110	; 0x6e
 800af0e:	e7e4      	b.n	800aeda <_free_r+0xfe>
 800af10:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800af14:	d802      	bhi.n	800af1c <_free_r+0x140>
 800af16:	0bc2      	lsrs	r2, r0, #15
 800af18:	3277      	adds	r2, #119	; 0x77
 800af1a:	e7de      	b.n	800aeda <_free_r+0xfe>
 800af1c:	f240 5154 	movw	r1, #1364	; 0x554
 800af20:	428a      	cmp	r2, r1
 800af22:	bf9a      	itte	ls
 800af24:	0c82      	lsrls	r2, r0, #18
 800af26:	327c      	addls	r2, #124	; 0x7c
 800af28:	227e      	movhi	r2, #126	; 0x7e
 800af2a:	e7d6      	b.n	800aeda <_free_r+0xfe>
 800af2c:	6889      	ldr	r1, [r1, #8]
 800af2e:	428e      	cmp	r6, r1
 800af30:	d004      	beq.n	800af3c <_free_r+0x160>
 800af32:	684a      	ldr	r2, [r1, #4]
 800af34:	f022 0203 	bic.w	r2, r2, #3
 800af38:	4282      	cmp	r2, r0
 800af3a:	d8f7      	bhi.n	800af2c <_free_r+0x150>
 800af3c:	68ce      	ldr	r6, [r1, #12]
 800af3e:	e7da      	b.n	800aef6 <_free_r+0x11a>
 800af40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af44:	20000440 	.word	0x20000440
 800af48:	2000084c 	.word	0x2000084c
 800af4c:	20000a14 	.word	0x20000a14
 800af50:	20000448 	.word	0x20000448

0800af54 <rshift>:
 800af54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af56:	6906      	ldr	r6, [r0, #16]
 800af58:	114b      	asrs	r3, r1, #5
 800af5a:	429e      	cmp	r6, r3
 800af5c:	f100 0414 	add.w	r4, r0, #20
 800af60:	dd30      	ble.n	800afc4 <rshift+0x70>
 800af62:	f011 011f 	ands.w	r1, r1, #31
 800af66:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800af6a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800af6e:	d108      	bne.n	800af82 <rshift+0x2e>
 800af70:	4621      	mov	r1, r4
 800af72:	42b2      	cmp	r2, r6
 800af74:	460b      	mov	r3, r1
 800af76:	d211      	bcs.n	800af9c <rshift+0x48>
 800af78:	f852 3b04 	ldr.w	r3, [r2], #4
 800af7c:	f841 3b04 	str.w	r3, [r1], #4
 800af80:	e7f7      	b.n	800af72 <rshift+0x1e>
 800af82:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800af86:	f1c1 0c20 	rsb	ip, r1, #32
 800af8a:	40cd      	lsrs	r5, r1
 800af8c:	3204      	adds	r2, #4
 800af8e:	4623      	mov	r3, r4
 800af90:	42b2      	cmp	r2, r6
 800af92:	4617      	mov	r7, r2
 800af94:	d30c      	bcc.n	800afb0 <rshift+0x5c>
 800af96:	601d      	str	r5, [r3, #0]
 800af98:	b105      	cbz	r5, 800af9c <rshift+0x48>
 800af9a:	3304      	adds	r3, #4
 800af9c:	1b1a      	subs	r2, r3, r4
 800af9e:	42a3      	cmp	r3, r4
 800afa0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800afa4:	bf08      	it	eq
 800afa6:	2300      	moveq	r3, #0
 800afa8:	6102      	str	r2, [r0, #16]
 800afaa:	bf08      	it	eq
 800afac:	6143      	streq	r3, [r0, #20]
 800afae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afb0:	683f      	ldr	r7, [r7, #0]
 800afb2:	fa07 f70c 	lsl.w	r7, r7, ip
 800afb6:	433d      	orrs	r5, r7
 800afb8:	f843 5b04 	str.w	r5, [r3], #4
 800afbc:	f852 5b04 	ldr.w	r5, [r2], #4
 800afc0:	40cd      	lsrs	r5, r1
 800afc2:	e7e5      	b.n	800af90 <rshift+0x3c>
 800afc4:	4623      	mov	r3, r4
 800afc6:	e7e9      	b.n	800af9c <rshift+0x48>

0800afc8 <__hexdig_fun>:
 800afc8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800afcc:	2b09      	cmp	r3, #9
 800afce:	d802      	bhi.n	800afd6 <__hexdig_fun+0xe>
 800afd0:	3820      	subs	r0, #32
 800afd2:	b2c0      	uxtb	r0, r0
 800afd4:	4770      	bx	lr
 800afd6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800afda:	2b05      	cmp	r3, #5
 800afdc:	d801      	bhi.n	800afe2 <__hexdig_fun+0x1a>
 800afde:	3847      	subs	r0, #71	; 0x47
 800afe0:	e7f7      	b.n	800afd2 <__hexdig_fun+0xa>
 800afe2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800afe6:	2b05      	cmp	r3, #5
 800afe8:	d801      	bhi.n	800afee <__hexdig_fun+0x26>
 800afea:	3827      	subs	r0, #39	; 0x27
 800afec:	e7f1      	b.n	800afd2 <__hexdig_fun+0xa>
 800afee:	2000      	movs	r0, #0
 800aff0:	4770      	bx	lr

0800aff2 <__gethex>:
 800aff2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff6:	b08b      	sub	sp, #44	; 0x2c
 800aff8:	468a      	mov	sl, r1
 800affa:	9002      	str	r0, [sp, #8]
 800affc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800affe:	9306      	str	r3, [sp, #24]
 800b000:	4690      	mov	r8, r2
 800b002:	f000 fad0 	bl	800b5a6 <__localeconv_l>
 800b006:	6803      	ldr	r3, [r0, #0]
 800b008:	9303      	str	r3, [sp, #12]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7f5 f8e0 	bl	80001d0 <strlen>
 800b010:	9b03      	ldr	r3, [sp, #12]
 800b012:	9001      	str	r0, [sp, #4]
 800b014:	4403      	add	r3, r0
 800b016:	f04f 0b00 	mov.w	fp, #0
 800b01a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b01e:	9307      	str	r3, [sp, #28]
 800b020:	f8da 3000 	ldr.w	r3, [sl]
 800b024:	3302      	adds	r3, #2
 800b026:	461f      	mov	r7, r3
 800b028:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b02c:	2830      	cmp	r0, #48	; 0x30
 800b02e:	d06c      	beq.n	800b10a <__gethex+0x118>
 800b030:	f7ff ffca 	bl	800afc8 <__hexdig_fun>
 800b034:	4604      	mov	r4, r0
 800b036:	2800      	cmp	r0, #0
 800b038:	d16a      	bne.n	800b110 <__gethex+0x11e>
 800b03a:	9a01      	ldr	r2, [sp, #4]
 800b03c:	9903      	ldr	r1, [sp, #12]
 800b03e:	4638      	mov	r0, r7
 800b040:	f000 feec 	bl	800be1c <strncmp>
 800b044:	2800      	cmp	r0, #0
 800b046:	d166      	bne.n	800b116 <__gethex+0x124>
 800b048:	9b01      	ldr	r3, [sp, #4]
 800b04a:	5cf8      	ldrb	r0, [r7, r3]
 800b04c:	18fe      	adds	r6, r7, r3
 800b04e:	f7ff ffbb 	bl	800afc8 <__hexdig_fun>
 800b052:	2800      	cmp	r0, #0
 800b054:	d062      	beq.n	800b11c <__gethex+0x12a>
 800b056:	4633      	mov	r3, r6
 800b058:	7818      	ldrb	r0, [r3, #0]
 800b05a:	2830      	cmp	r0, #48	; 0x30
 800b05c:	461f      	mov	r7, r3
 800b05e:	f103 0301 	add.w	r3, r3, #1
 800b062:	d0f9      	beq.n	800b058 <__gethex+0x66>
 800b064:	f7ff ffb0 	bl	800afc8 <__hexdig_fun>
 800b068:	fab0 f580 	clz	r5, r0
 800b06c:	096d      	lsrs	r5, r5, #5
 800b06e:	4634      	mov	r4, r6
 800b070:	f04f 0b01 	mov.w	fp, #1
 800b074:	463a      	mov	r2, r7
 800b076:	4616      	mov	r6, r2
 800b078:	3201      	adds	r2, #1
 800b07a:	7830      	ldrb	r0, [r6, #0]
 800b07c:	f7ff ffa4 	bl	800afc8 <__hexdig_fun>
 800b080:	2800      	cmp	r0, #0
 800b082:	d1f8      	bne.n	800b076 <__gethex+0x84>
 800b084:	9a01      	ldr	r2, [sp, #4]
 800b086:	9903      	ldr	r1, [sp, #12]
 800b088:	4630      	mov	r0, r6
 800b08a:	f000 fec7 	bl	800be1c <strncmp>
 800b08e:	b950      	cbnz	r0, 800b0a6 <__gethex+0xb4>
 800b090:	b954      	cbnz	r4, 800b0a8 <__gethex+0xb6>
 800b092:	9b01      	ldr	r3, [sp, #4]
 800b094:	18f4      	adds	r4, r6, r3
 800b096:	4622      	mov	r2, r4
 800b098:	4616      	mov	r6, r2
 800b09a:	3201      	adds	r2, #1
 800b09c:	7830      	ldrb	r0, [r6, #0]
 800b09e:	f7ff ff93 	bl	800afc8 <__hexdig_fun>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d1f8      	bne.n	800b098 <__gethex+0xa6>
 800b0a6:	b10c      	cbz	r4, 800b0ac <__gethex+0xba>
 800b0a8:	1ba4      	subs	r4, r4, r6
 800b0aa:	00a4      	lsls	r4, r4, #2
 800b0ac:	7833      	ldrb	r3, [r6, #0]
 800b0ae:	2b50      	cmp	r3, #80	; 0x50
 800b0b0:	d001      	beq.n	800b0b6 <__gethex+0xc4>
 800b0b2:	2b70      	cmp	r3, #112	; 0x70
 800b0b4:	d140      	bne.n	800b138 <__gethex+0x146>
 800b0b6:	7873      	ldrb	r3, [r6, #1]
 800b0b8:	2b2b      	cmp	r3, #43	; 0x2b
 800b0ba:	d031      	beq.n	800b120 <__gethex+0x12e>
 800b0bc:	2b2d      	cmp	r3, #45	; 0x2d
 800b0be:	d033      	beq.n	800b128 <__gethex+0x136>
 800b0c0:	1c71      	adds	r1, r6, #1
 800b0c2:	f04f 0900 	mov.w	r9, #0
 800b0c6:	7808      	ldrb	r0, [r1, #0]
 800b0c8:	f7ff ff7e 	bl	800afc8 <__hexdig_fun>
 800b0cc:	1e43      	subs	r3, r0, #1
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b18      	cmp	r3, #24
 800b0d2:	d831      	bhi.n	800b138 <__gethex+0x146>
 800b0d4:	f1a0 0210 	sub.w	r2, r0, #16
 800b0d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b0dc:	f7ff ff74 	bl	800afc8 <__hexdig_fun>
 800b0e0:	1e43      	subs	r3, r0, #1
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	2b18      	cmp	r3, #24
 800b0e6:	d922      	bls.n	800b12e <__gethex+0x13c>
 800b0e8:	f1b9 0f00 	cmp.w	r9, #0
 800b0ec:	d000      	beq.n	800b0f0 <__gethex+0xfe>
 800b0ee:	4252      	negs	r2, r2
 800b0f0:	4414      	add	r4, r2
 800b0f2:	f8ca 1000 	str.w	r1, [sl]
 800b0f6:	b30d      	cbz	r5, 800b13c <__gethex+0x14a>
 800b0f8:	f1bb 0f00 	cmp.w	fp, #0
 800b0fc:	bf0c      	ite	eq
 800b0fe:	2706      	moveq	r7, #6
 800b100:	2700      	movne	r7, #0
 800b102:	4638      	mov	r0, r7
 800b104:	b00b      	add	sp, #44	; 0x2c
 800b106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10a:	f10b 0b01 	add.w	fp, fp, #1
 800b10e:	e78a      	b.n	800b026 <__gethex+0x34>
 800b110:	2500      	movs	r5, #0
 800b112:	462c      	mov	r4, r5
 800b114:	e7ae      	b.n	800b074 <__gethex+0x82>
 800b116:	463e      	mov	r6, r7
 800b118:	2501      	movs	r5, #1
 800b11a:	e7c7      	b.n	800b0ac <__gethex+0xba>
 800b11c:	4604      	mov	r4, r0
 800b11e:	e7fb      	b.n	800b118 <__gethex+0x126>
 800b120:	f04f 0900 	mov.w	r9, #0
 800b124:	1cb1      	adds	r1, r6, #2
 800b126:	e7ce      	b.n	800b0c6 <__gethex+0xd4>
 800b128:	f04f 0901 	mov.w	r9, #1
 800b12c:	e7fa      	b.n	800b124 <__gethex+0x132>
 800b12e:	230a      	movs	r3, #10
 800b130:	fb03 0202 	mla	r2, r3, r2, r0
 800b134:	3a10      	subs	r2, #16
 800b136:	e7cf      	b.n	800b0d8 <__gethex+0xe6>
 800b138:	4631      	mov	r1, r6
 800b13a:	e7da      	b.n	800b0f2 <__gethex+0x100>
 800b13c:	1bf3      	subs	r3, r6, r7
 800b13e:	3b01      	subs	r3, #1
 800b140:	4629      	mov	r1, r5
 800b142:	2b07      	cmp	r3, #7
 800b144:	dc49      	bgt.n	800b1da <__gethex+0x1e8>
 800b146:	9802      	ldr	r0, [sp, #8]
 800b148:	f000 fa5d 	bl	800b606 <_Balloc>
 800b14c:	9b01      	ldr	r3, [sp, #4]
 800b14e:	f100 0914 	add.w	r9, r0, #20
 800b152:	f04f 0b00 	mov.w	fp, #0
 800b156:	f1c3 0301 	rsb	r3, r3, #1
 800b15a:	4605      	mov	r5, r0
 800b15c:	f8cd 9010 	str.w	r9, [sp, #16]
 800b160:	46da      	mov	sl, fp
 800b162:	9308      	str	r3, [sp, #32]
 800b164:	42b7      	cmp	r7, r6
 800b166:	d33b      	bcc.n	800b1e0 <__gethex+0x1ee>
 800b168:	9804      	ldr	r0, [sp, #16]
 800b16a:	f840 ab04 	str.w	sl, [r0], #4
 800b16e:	eba0 0009 	sub.w	r0, r0, r9
 800b172:	1080      	asrs	r0, r0, #2
 800b174:	6128      	str	r0, [r5, #16]
 800b176:	0147      	lsls	r7, r0, #5
 800b178:	4650      	mov	r0, sl
 800b17a:	f000 faeb 	bl	800b754 <__hi0bits>
 800b17e:	f8d8 6000 	ldr.w	r6, [r8]
 800b182:	1a3f      	subs	r7, r7, r0
 800b184:	42b7      	cmp	r7, r6
 800b186:	dd64      	ble.n	800b252 <__gethex+0x260>
 800b188:	1bbf      	subs	r7, r7, r6
 800b18a:	4639      	mov	r1, r7
 800b18c:	4628      	mov	r0, r5
 800b18e:	f000 fded 	bl	800bd6c <__any_on>
 800b192:	4682      	mov	sl, r0
 800b194:	b178      	cbz	r0, 800b1b6 <__gethex+0x1c4>
 800b196:	1e7b      	subs	r3, r7, #1
 800b198:	1159      	asrs	r1, r3, #5
 800b19a:	f003 021f 	and.w	r2, r3, #31
 800b19e:	f04f 0a01 	mov.w	sl, #1
 800b1a2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b1a6:	fa0a f202 	lsl.w	r2, sl, r2
 800b1aa:	420a      	tst	r2, r1
 800b1ac:	d003      	beq.n	800b1b6 <__gethex+0x1c4>
 800b1ae:	4553      	cmp	r3, sl
 800b1b0:	dc46      	bgt.n	800b240 <__gethex+0x24e>
 800b1b2:	f04f 0a02 	mov.w	sl, #2
 800b1b6:	4639      	mov	r1, r7
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	f7ff fecb 	bl	800af54 <rshift>
 800b1be:	443c      	add	r4, r7
 800b1c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1c4:	42a3      	cmp	r3, r4
 800b1c6:	da52      	bge.n	800b26e <__gethex+0x27c>
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	9802      	ldr	r0, [sp, #8]
 800b1cc:	f000 fa40 	bl	800b650 <_Bfree>
 800b1d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	6013      	str	r3, [r2, #0]
 800b1d6:	27a3      	movs	r7, #163	; 0xa3
 800b1d8:	e793      	b.n	800b102 <__gethex+0x110>
 800b1da:	3101      	adds	r1, #1
 800b1dc:	105b      	asrs	r3, r3, #1
 800b1de:	e7b0      	b.n	800b142 <__gethex+0x150>
 800b1e0:	1e73      	subs	r3, r6, #1
 800b1e2:	9305      	str	r3, [sp, #20]
 800b1e4:	9a07      	ldr	r2, [sp, #28]
 800b1e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d018      	beq.n	800b220 <__gethex+0x22e>
 800b1ee:	f1bb 0f20 	cmp.w	fp, #32
 800b1f2:	d107      	bne.n	800b204 <__gethex+0x212>
 800b1f4:	9b04      	ldr	r3, [sp, #16]
 800b1f6:	f8c3 a000 	str.w	sl, [r3]
 800b1fa:	3304      	adds	r3, #4
 800b1fc:	f04f 0a00 	mov.w	sl, #0
 800b200:	9304      	str	r3, [sp, #16]
 800b202:	46d3      	mov	fp, sl
 800b204:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b208:	f7ff fede 	bl	800afc8 <__hexdig_fun>
 800b20c:	f000 000f 	and.w	r0, r0, #15
 800b210:	fa00 f00b 	lsl.w	r0, r0, fp
 800b214:	ea4a 0a00 	orr.w	sl, sl, r0
 800b218:	f10b 0b04 	add.w	fp, fp, #4
 800b21c:	9b05      	ldr	r3, [sp, #20]
 800b21e:	e00d      	b.n	800b23c <__gethex+0x24a>
 800b220:	9b05      	ldr	r3, [sp, #20]
 800b222:	9a08      	ldr	r2, [sp, #32]
 800b224:	4413      	add	r3, r2
 800b226:	42bb      	cmp	r3, r7
 800b228:	d3e1      	bcc.n	800b1ee <__gethex+0x1fc>
 800b22a:	4618      	mov	r0, r3
 800b22c:	9a01      	ldr	r2, [sp, #4]
 800b22e:	9903      	ldr	r1, [sp, #12]
 800b230:	9309      	str	r3, [sp, #36]	; 0x24
 800b232:	f000 fdf3 	bl	800be1c <strncmp>
 800b236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b238:	2800      	cmp	r0, #0
 800b23a:	d1d8      	bne.n	800b1ee <__gethex+0x1fc>
 800b23c:	461e      	mov	r6, r3
 800b23e:	e791      	b.n	800b164 <__gethex+0x172>
 800b240:	1eb9      	subs	r1, r7, #2
 800b242:	4628      	mov	r0, r5
 800b244:	f000 fd92 	bl	800bd6c <__any_on>
 800b248:	2800      	cmp	r0, #0
 800b24a:	d0b2      	beq.n	800b1b2 <__gethex+0x1c0>
 800b24c:	f04f 0a03 	mov.w	sl, #3
 800b250:	e7b1      	b.n	800b1b6 <__gethex+0x1c4>
 800b252:	da09      	bge.n	800b268 <__gethex+0x276>
 800b254:	1bf7      	subs	r7, r6, r7
 800b256:	4629      	mov	r1, r5
 800b258:	463a      	mov	r2, r7
 800b25a:	9802      	ldr	r0, [sp, #8]
 800b25c:	f000 fba8 	bl	800b9b0 <__lshift>
 800b260:	1be4      	subs	r4, r4, r7
 800b262:	4605      	mov	r5, r0
 800b264:	f100 0914 	add.w	r9, r0, #20
 800b268:	f04f 0a00 	mov.w	sl, #0
 800b26c:	e7a8      	b.n	800b1c0 <__gethex+0x1ce>
 800b26e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b272:	42a0      	cmp	r0, r4
 800b274:	dd6a      	ble.n	800b34c <__gethex+0x35a>
 800b276:	1b04      	subs	r4, r0, r4
 800b278:	42a6      	cmp	r6, r4
 800b27a:	dc2e      	bgt.n	800b2da <__gethex+0x2e8>
 800b27c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b280:	2b02      	cmp	r3, #2
 800b282:	d022      	beq.n	800b2ca <__gethex+0x2d8>
 800b284:	2b03      	cmp	r3, #3
 800b286:	d024      	beq.n	800b2d2 <__gethex+0x2e0>
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d115      	bne.n	800b2b8 <__gethex+0x2c6>
 800b28c:	42a6      	cmp	r6, r4
 800b28e:	d113      	bne.n	800b2b8 <__gethex+0x2c6>
 800b290:	2e01      	cmp	r6, #1
 800b292:	dc0b      	bgt.n	800b2ac <__gethex+0x2ba>
 800b294:	9a06      	ldr	r2, [sp, #24]
 800b296:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b29a:	6013      	str	r3, [r2, #0]
 800b29c:	2301      	movs	r3, #1
 800b29e:	612b      	str	r3, [r5, #16]
 800b2a0:	f8c9 3000 	str.w	r3, [r9]
 800b2a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2a6:	2762      	movs	r7, #98	; 0x62
 800b2a8:	601d      	str	r5, [r3, #0]
 800b2aa:	e72a      	b.n	800b102 <__gethex+0x110>
 800b2ac:	1e71      	subs	r1, r6, #1
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	f000 fd5c 	bl	800bd6c <__any_on>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d1ed      	bne.n	800b294 <__gethex+0x2a2>
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	9802      	ldr	r0, [sp, #8]
 800b2bc:	f000 f9c8 	bl	800b650 <_Bfree>
 800b2c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	6013      	str	r3, [r2, #0]
 800b2c6:	2750      	movs	r7, #80	; 0x50
 800b2c8:	e71b      	b.n	800b102 <__gethex+0x110>
 800b2ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d0e1      	beq.n	800b294 <__gethex+0x2a2>
 800b2d0:	e7f2      	b.n	800b2b8 <__gethex+0x2c6>
 800b2d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1dd      	bne.n	800b294 <__gethex+0x2a2>
 800b2d8:	e7ee      	b.n	800b2b8 <__gethex+0x2c6>
 800b2da:	1e67      	subs	r7, r4, #1
 800b2dc:	f1ba 0f00 	cmp.w	sl, #0
 800b2e0:	d131      	bne.n	800b346 <__gethex+0x354>
 800b2e2:	b127      	cbz	r7, 800b2ee <__gethex+0x2fc>
 800b2e4:	4639      	mov	r1, r7
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	f000 fd40 	bl	800bd6c <__any_on>
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	117a      	asrs	r2, r7, #5
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	f007 071f 	and.w	r7, r7, #31
 800b2f6:	fa03 f707 	lsl.w	r7, r3, r7
 800b2fa:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b2fe:	4621      	mov	r1, r4
 800b300:	421f      	tst	r7, r3
 800b302:	4628      	mov	r0, r5
 800b304:	bf18      	it	ne
 800b306:	f04a 0a02 	orrne.w	sl, sl, #2
 800b30a:	1b36      	subs	r6, r6, r4
 800b30c:	f7ff fe22 	bl	800af54 <rshift>
 800b310:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b314:	2702      	movs	r7, #2
 800b316:	f1ba 0f00 	cmp.w	sl, #0
 800b31a:	d048      	beq.n	800b3ae <__gethex+0x3bc>
 800b31c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b320:	2b02      	cmp	r3, #2
 800b322:	d015      	beq.n	800b350 <__gethex+0x35e>
 800b324:	2b03      	cmp	r3, #3
 800b326:	d017      	beq.n	800b358 <__gethex+0x366>
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d109      	bne.n	800b340 <__gethex+0x34e>
 800b32c:	f01a 0f02 	tst.w	sl, #2
 800b330:	d006      	beq.n	800b340 <__gethex+0x34e>
 800b332:	f8d9 3000 	ldr.w	r3, [r9]
 800b336:	ea4a 0a03 	orr.w	sl, sl, r3
 800b33a:	f01a 0f01 	tst.w	sl, #1
 800b33e:	d10e      	bne.n	800b35e <__gethex+0x36c>
 800b340:	f047 0710 	orr.w	r7, r7, #16
 800b344:	e033      	b.n	800b3ae <__gethex+0x3bc>
 800b346:	f04f 0a01 	mov.w	sl, #1
 800b34a:	e7d0      	b.n	800b2ee <__gethex+0x2fc>
 800b34c:	2701      	movs	r7, #1
 800b34e:	e7e2      	b.n	800b316 <__gethex+0x324>
 800b350:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b352:	f1c3 0301 	rsb	r3, r3, #1
 800b356:	9315      	str	r3, [sp, #84]	; 0x54
 800b358:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d0f0      	beq.n	800b340 <__gethex+0x34e>
 800b35e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b362:	f105 0314 	add.w	r3, r5, #20
 800b366:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b36a:	eb03 010a 	add.w	r1, r3, sl
 800b36e:	f04f 0c00 	mov.w	ip, #0
 800b372:	4618      	mov	r0, r3
 800b374:	f853 2b04 	ldr.w	r2, [r3], #4
 800b378:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b37c:	d01c      	beq.n	800b3b8 <__gethex+0x3c6>
 800b37e:	3201      	adds	r2, #1
 800b380:	6002      	str	r2, [r0, #0]
 800b382:	2f02      	cmp	r7, #2
 800b384:	f105 0314 	add.w	r3, r5, #20
 800b388:	d138      	bne.n	800b3fc <__gethex+0x40a>
 800b38a:	f8d8 2000 	ldr.w	r2, [r8]
 800b38e:	3a01      	subs	r2, #1
 800b390:	42b2      	cmp	r2, r6
 800b392:	d10a      	bne.n	800b3aa <__gethex+0x3b8>
 800b394:	1171      	asrs	r1, r6, #5
 800b396:	2201      	movs	r2, #1
 800b398:	f006 061f 	and.w	r6, r6, #31
 800b39c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b3a0:	fa02 f606 	lsl.w	r6, r2, r6
 800b3a4:	421e      	tst	r6, r3
 800b3a6:	bf18      	it	ne
 800b3a8:	4617      	movne	r7, r2
 800b3aa:	f047 0720 	orr.w	r7, r7, #32
 800b3ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3b0:	601d      	str	r5, [r3, #0]
 800b3b2:	9b06      	ldr	r3, [sp, #24]
 800b3b4:	601c      	str	r4, [r3, #0]
 800b3b6:	e6a4      	b.n	800b102 <__gethex+0x110>
 800b3b8:	4299      	cmp	r1, r3
 800b3ba:	f843 cc04 	str.w	ip, [r3, #-4]
 800b3be:	d8d8      	bhi.n	800b372 <__gethex+0x380>
 800b3c0:	68ab      	ldr	r3, [r5, #8]
 800b3c2:	4599      	cmp	r9, r3
 800b3c4:	db12      	blt.n	800b3ec <__gethex+0x3fa>
 800b3c6:	6869      	ldr	r1, [r5, #4]
 800b3c8:	9802      	ldr	r0, [sp, #8]
 800b3ca:	3101      	adds	r1, #1
 800b3cc:	f000 f91b 	bl	800b606 <_Balloc>
 800b3d0:	692a      	ldr	r2, [r5, #16]
 800b3d2:	3202      	adds	r2, #2
 800b3d4:	f105 010c 	add.w	r1, r5, #12
 800b3d8:	4683      	mov	fp, r0
 800b3da:	0092      	lsls	r2, r2, #2
 800b3dc:	300c      	adds	r0, #12
 800b3de:	f000 f907 	bl	800b5f0 <memcpy>
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	9802      	ldr	r0, [sp, #8]
 800b3e6:	f000 f933 	bl	800b650 <_Bfree>
 800b3ea:	465d      	mov	r5, fp
 800b3ec:	692b      	ldr	r3, [r5, #16]
 800b3ee:	1c5a      	adds	r2, r3, #1
 800b3f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b3f4:	612a      	str	r2, [r5, #16]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	615a      	str	r2, [r3, #20]
 800b3fa:	e7c2      	b.n	800b382 <__gethex+0x390>
 800b3fc:	692a      	ldr	r2, [r5, #16]
 800b3fe:	454a      	cmp	r2, r9
 800b400:	dd0b      	ble.n	800b41a <__gethex+0x428>
 800b402:	2101      	movs	r1, #1
 800b404:	4628      	mov	r0, r5
 800b406:	f7ff fda5 	bl	800af54 <rshift>
 800b40a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b40e:	3401      	adds	r4, #1
 800b410:	42a3      	cmp	r3, r4
 800b412:	f6ff aed9 	blt.w	800b1c8 <__gethex+0x1d6>
 800b416:	2701      	movs	r7, #1
 800b418:	e7c7      	b.n	800b3aa <__gethex+0x3b8>
 800b41a:	f016 061f 	ands.w	r6, r6, #31
 800b41e:	d0fa      	beq.n	800b416 <__gethex+0x424>
 800b420:	449a      	add	sl, r3
 800b422:	f1c6 0620 	rsb	r6, r6, #32
 800b426:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b42a:	f000 f993 	bl	800b754 <__hi0bits>
 800b42e:	42b0      	cmp	r0, r6
 800b430:	dbe7      	blt.n	800b402 <__gethex+0x410>
 800b432:	e7f0      	b.n	800b416 <__gethex+0x424>

0800b434 <L_shift>:
 800b434:	f1c2 0208 	rsb	r2, r2, #8
 800b438:	0092      	lsls	r2, r2, #2
 800b43a:	b570      	push	{r4, r5, r6, lr}
 800b43c:	f1c2 0620 	rsb	r6, r2, #32
 800b440:	6843      	ldr	r3, [r0, #4]
 800b442:	6804      	ldr	r4, [r0, #0]
 800b444:	fa03 f506 	lsl.w	r5, r3, r6
 800b448:	432c      	orrs	r4, r5
 800b44a:	40d3      	lsrs	r3, r2
 800b44c:	6004      	str	r4, [r0, #0]
 800b44e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b452:	4288      	cmp	r0, r1
 800b454:	d3f4      	bcc.n	800b440 <L_shift+0xc>
 800b456:	bd70      	pop	{r4, r5, r6, pc}

0800b458 <__match>:
 800b458:	b530      	push	{r4, r5, lr}
 800b45a:	6803      	ldr	r3, [r0, #0]
 800b45c:	3301      	adds	r3, #1
 800b45e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b462:	b914      	cbnz	r4, 800b46a <__match+0x12>
 800b464:	6003      	str	r3, [r0, #0]
 800b466:	2001      	movs	r0, #1
 800b468:	bd30      	pop	{r4, r5, pc}
 800b46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b46e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b472:	2d19      	cmp	r5, #25
 800b474:	bf98      	it	ls
 800b476:	3220      	addls	r2, #32
 800b478:	42a2      	cmp	r2, r4
 800b47a:	d0f0      	beq.n	800b45e <__match+0x6>
 800b47c:	2000      	movs	r0, #0
 800b47e:	e7f3      	b.n	800b468 <__match+0x10>

0800b480 <__hexnan>:
 800b480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b484:	680b      	ldr	r3, [r1, #0]
 800b486:	6801      	ldr	r1, [r0, #0]
 800b488:	115f      	asrs	r7, r3, #5
 800b48a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b48e:	f013 031f 	ands.w	r3, r3, #31
 800b492:	b087      	sub	sp, #28
 800b494:	bf18      	it	ne
 800b496:	3704      	addne	r7, #4
 800b498:	2500      	movs	r5, #0
 800b49a:	1f3e      	subs	r6, r7, #4
 800b49c:	4682      	mov	sl, r0
 800b49e:	4690      	mov	r8, r2
 800b4a0:	9301      	str	r3, [sp, #4]
 800b4a2:	f847 5c04 	str.w	r5, [r7, #-4]
 800b4a6:	46b1      	mov	r9, r6
 800b4a8:	4634      	mov	r4, r6
 800b4aa:	9502      	str	r5, [sp, #8]
 800b4ac:	46ab      	mov	fp, r5
 800b4ae:	784a      	ldrb	r2, [r1, #1]
 800b4b0:	1c4b      	adds	r3, r1, #1
 800b4b2:	9303      	str	r3, [sp, #12]
 800b4b4:	b342      	cbz	r2, 800b508 <__hexnan+0x88>
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	9105      	str	r1, [sp, #20]
 800b4ba:	9204      	str	r2, [sp, #16]
 800b4bc:	f7ff fd84 	bl	800afc8 <__hexdig_fun>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d143      	bne.n	800b54c <__hexnan+0xcc>
 800b4c4:	9a04      	ldr	r2, [sp, #16]
 800b4c6:	9905      	ldr	r1, [sp, #20]
 800b4c8:	2a20      	cmp	r2, #32
 800b4ca:	d818      	bhi.n	800b4fe <__hexnan+0x7e>
 800b4cc:	9b02      	ldr	r3, [sp, #8]
 800b4ce:	459b      	cmp	fp, r3
 800b4d0:	dd13      	ble.n	800b4fa <__hexnan+0x7a>
 800b4d2:	454c      	cmp	r4, r9
 800b4d4:	d206      	bcs.n	800b4e4 <__hexnan+0x64>
 800b4d6:	2d07      	cmp	r5, #7
 800b4d8:	dc04      	bgt.n	800b4e4 <__hexnan+0x64>
 800b4da:	462a      	mov	r2, r5
 800b4dc:	4649      	mov	r1, r9
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f7ff ffa8 	bl	800b434 <L_shift>
 800b4e4:	4544      	cmp	r4, r8
 800b4e6:	d944      	bls.n	800b572 <__hexnan+0xf2>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	f1a4 0904 	sub.w	r9, r4, #4
 800b4ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4f2:	f8cd b008 	str.w	fp, [sp, #8]
 800b4f6:	464c      	mov	r4, r9
 800b4f8:	461d      	mov	r5, r3
 800b4fa:	9903      	ldr	r1, [sp, #12]
 800b4fc:	e7d7      	b.n	800b4ae <__hexnan+0x2e>
 800b4fe:	2a29      	cmp	r2, #41	; 0x29
 800b500:	d14a      	bne.n	800b598 <__hexnan+0x118>
 800b502:	3102      	adds	r1, #2
 800b504:	f8ca 1000 	str.w	r1, [sl]
 800b508:	f1bb 0f00 	cmp.w	fp, #0
 800b50c:	d044      	beq.n	800b598 <__hexnan+0x118>
 800b50e:	454c      	cmp	r4, r9
 800b510:	d206      	bcs.n	800b520 <__hexnan+0xa0>
 800b512:	2d07      	cmp	r5, #7
 800b514:	dc04      	bgt.n	800b520 <__hexnan+0xa0>
 800b516:	462a      	mov	r2, r5
 800b518:	4649      	mov	r1, r9
 800b51a:	4620      	mov	r0, r4
 800b51c:	f7ff ff8a 	bl	800b434 <L_shift>
 800b520:	4544      	cmp	r4, r8
 800b522:	d928      	bls.n	800b576 <__hexnan+0xf6>
 800b524:	4643      	mov	r3, r8
 800b526:	f854 2b04 	ldr.w	r2, [r4], #4
 800b52a:	f843 2b04 	str.w	r2, [r3], #4
 800b52e:	42a6      	cmp	r6, r4
 800b530:	d2f9      	bcs.n	800b526 <__hexnan+0xa6>
 800b532:	2200      	movs	r2, #0
 800b534:	f843 2b04 	str.w	r2, [r3], #4
 800b538:	429e      	cmp	r6, r3
 800b53a:	d2fb      	bcs.n	800b534 <__hexnan+0xb4>
 800b53c:	6833      	ldr	r3, [r6, #0]
 800b53e:	b91b      	cbnz	r3, 800b548 <__hexnan+0xc8>
 800b540:	4546      	cmp	r6, r8
 800b542:	d127      	bne.n	800b594 <__hexnan+0x114>
 800b544:	2301      	movs	r3, #1
 800b546:	6033      	str	r3, [r6, #0]
 800b548:	2005      	movs	r0, #5
 800b54a:	e026      	b.n	800b59a <__hexnan+0x11a>
 800b54c:	3501      	adds	r5, #1
 800b54e:	2d08      	cmp	r5, #8
 800b550:	f10b 0b01 	add.w	fp, fp, #1
 800b554:	dd06      	ble.n	800b564 <__hexnan+0xe4>
 800b556:	4544      	cmp	r4, r8
 800b558:	d9cf      	bls.n	800b4fa <__hexnan+0x7a>
 800b55a:	2300      	movs	r3, #0
 800b55c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b560:	2501      	movs	r5, #1
 800b562:	3c04      	subs	r4, #4
 800b564:	6822      	ldr	r2, [r4, #0]
 800b566:	f000 000f 	and.w	r0, r0, #15
 800b56a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b56e:	6020      	str	r0, [r4, #0]
 800b570:	e7c3      	b.n	800b4fa <__hexnan+0x7a>
 800b572:	2508      	movs	r5, #8
 800b574:	e7c1      	b.n	800b4fa <__hexnan+0x7a>
 800b576:	9b01      	ldr	r3, [sp, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d0df      	beq.n	800b53c <__hexnan+0xbc>
 800b57c:	f04f 32ff 	mov.w	r2, #4294967295
 800b580:	f1c3 0320 	rsb	r3, r3, #32
 800b584:	fa22 f303 	lsr.w	r3, r2, r3
 800b588:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b58c:	401a      	ands	r2, r3
 800b58e:	f847 2c04 	str.w	r2, [r7, #-4]
 800b592:	e7d3      	b.n	800b53c <__hexnan+0xbc>
 800b594:	3e04      	subs	r6, #4
 800b596:	e7d1      	b.n	800b53c <__hexnan+0xbc>
 800b598:	2004      	movs	r0, #4
 800b59a:	b007      	add	sp, #28
 800b59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b5a0 <__locale_ctype_ptr_l>:
 800b5a0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b5a4:	4770      	bx	lr

0800b5a6 <__localeconv_l>:
 800b5a6:	30f0      	adds	r0, #240	; 0xf0
 800b5a8:	4770      	bx	lr
	...

0800b5ac <_localeconv_r>:
 800b5ac:	4b04      	ldr	r3, [pc, #16]	; (800b5c0 <_localeconv_r+0x14>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b5b2:	4b04      	ldr	r3, [pc, #16]	; (800b5c4 <_localeconv_r+0x18>)
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	bf08      	it	eq
 800b5b8:	4618      	moveq	r0, r3
 800b5ba:	30f0      	adds	r0, #240	; 0xf0
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	20000010 	.word	0x20000010
 800b5c4:	20000854 	.word	0x20000854

0800b5c8 <__retarget_lock_acquire_recursive>:
 800b5c8:	4770      	bx	lr

0800b5ca <__retarget_lock_release_recursive>:
 800b5ca:	4770      	bx	lr

0800b5cc <__ascii_mbtowc>:
 800b5cc:	b082      	sub	sp, #8
 800b5ce:	b901      	cbnz	r1, 800b5d2 <__ascii_mbtowc+0x6>
 800b5d0:	a901      	add	r1, sp, #4
 800b5d2:	b142      	cbz	r2, 800b5e6 <__ascii_mbtowc+0x1a>
 800b5d4:	b14b      	cbz	r3, 800b5ea <__ascii_mbtowc+0x1e>
 800b5d6:	7813      	ldrb	r3, [r2, #0]
 800b5d8:	600b      	str	r3, [r1, #0]
 800b5da:	7812      	ldrb	r2, [r2, #0]
 800b5dc:	1c10      	adds	r0, r2, #0
 800b5de:	bf18      	it	ne
 800b5e0:	2001      	movne	r0, #1
 800b5e2:	b002      	add	sp, #8
 800b5e4:	4770      	bx	lr
 800b5e6:	4610      	mov	r0, r2
 800b5e8:	e7fb      	b.n	800b5e2 <__ascii_mbtowc+0x16>
 800b5ea:	f06f 0001 	mvn.w	r0, #1
 800b5ee:	e7f8      	b.n	800b5e2 <__ascii_mbtowc+0x16>

0800b5f0 <memcpy>:
 800b5f0:	b510      	push	{r4, lr}
 800b5f2:	1e43      	subs	r3, r0, #1
 800b5f4:	440a      	add	r2, r1
 800b5f6:	4291      	cmp	r1, r2
 800b5f8:	d100      	bne.n	800b5fc <memcpy+0xc>
 800b5fa:	bd10      	pop	{r4, pc}
 800b5fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b600:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b604:	e7f7      	b.n	800b5f6 <memcpy+0x6>

0800b606 <_Balloc>:
 800b606:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b608:	b570      	push	{r4, r5, r6, lr}
 800b60a:	4605      	mov	r5, r0
 800b60c:	460c      	mov	r4, r1
 800b60e:	b17b      	cbz	r3, 800b630 <_Balloc+0x2a>
 800b610:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b612:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b616:	b9a0      	cbnz	r0, 800b642 <_Balloc+0x3c>
 800b618:	2101      	movs	r1, #1
 800b61a:	fa01 f604 	lsl.w	r6, r1, r4
 800b61e:	1d72      	adds	r2, r6, #5
 800b620:	0092      	lsls	r2, r2, #2
 800b622:	4628      	mov	r0, r5
 800b624:	f000 fcfc 	bl	800c020 <_calloc_r>
 800b628:	b148      	cbz	r0, 800b63e <_Balloc+0x38>
 800b62a:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800b62e:	e00b      	b.n	800b648 <_Balloc+0x42>
 800b630:	2221      	movs	r2, #33	; 0x21
 800b632:	2104      	movs	r1, #4
 800b634:	f000 fcf4 	bl	800c020 <_calloc_r>
 800b638:	64e8      	str	r0, [r5, #76]	; 0x4c
 800b63a:	2800      	cmp	r0, #0
 800b63c:	d1e8      	bne.n	800b610 <_Balloc+0xa>
 800b63e:	2000      	movs	r0, #0
 800b640:	bd70      	pop	{r4, r5, r6, pc}
 800b642:	6802      	ldr	r2, [r0, #0]
 800b644:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800b648:	2300      	movs	r3, #0
 800b64a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b64e:	e7f7      	b.n	800b640 <_Balloc+0x3a>

0800b650 <_Bfree>:
 800b650:	b131      	cbz	r1, 800b660 <_Bfree+0x10>
 800b652:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b654:	684a      	ldr	r2, [r1, #4]
 800b656:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b65a:	6008      	str	r0, [r1, #0]
 800b65c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b660:	4770      	bx	lr

0800b662 <__multadd>:
 800b662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b666:	690d      	ldr	r5, [r1, #16]
 800b668:	461f      	mov	r7, r3
 800b66a:	4606      	mov	r6, r0
 800b66c:	460c      	mov	r4, r1
 800b66e:	f101 0c14 	add.w	ip, r1, #20
 800b672:	2300      	movs	r3, #0
 800b674:	f8dc 0000 	ldr.w	r0, [ip]
 800b678:	b281      	uxth	r1, r0
 800b67a:	fb02 7101 	mla	r1, r2, r1, r7
 800b67e:	0c0f      	lsrs	r7, r1, #16
 800b680:	0c00      	lsrs	r0, r0, #16
 800b682:	fb02 7000 	mla	r0, r2, r0, r7
 800b686:	b289      	uxth	r1, r1
 800b688:	3301      	adds	r3, #1
 800b68a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b68e:	429d      	cmp	r5, r3
 800b690:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b694:	f84c 1b04 	str.w	r1, [ip], #4
 800b698:	dcec      	bgt.n	800b674 <__multadd+0x12>
 800b69a:	b1d7      	cbz	r7, 800b6d2 <__multadd+0x70>
 800b69c:	68a3      	ldr	r3, [r4, #8]
 800b69e:	42ab      	cmp	r3, r5
 800b6a0:	dc12      	bgt.n	800b6c8 <__multadd+0x66>
 800b6a2:	6861      	ldr	r1, [r4, #4]
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	3101      	adds	r1, #1
 800b6a8:	f7ff ffad 	bl	800b606 <_Balloc>
 800b6ac:	6922      	ldr	r2, [r4, #16]
 800b6ae:	3202      	adds	r2, #2
 800b6b0:	f104 010c 	add.w	r1, r4, #12
 800b6b4:	4680      	mov	r8, r0
 800b6b6:	0092      	lsls	r2, r2, #2
 800b6b8:	300c      	adds	r0, #12
 800b6ba:	f7ff ff99 	bl	800b5f0 <memcpy>
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f7ff ffc5 	bl	800b650 <_Bfree>
 800b6c6:	4644      	mov	r4, r8
 800b6c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6cc:	3501      	adds	r5, #1
 800b6ce:	615f      	str	r7, [r3, #20]
 800b6d0:	6125      	str	r5, [r4, #16]
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b6d8 <__s2b>:
 800b6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6dc:	460c      	mov	r4, r1
 800b6de:	4615      	mov	r5, r2
 800b6e0:	461f      	mov	r7, r3
 800b6e2:	2209      	movs	r2, #9
 800b6e4:	3308      	adds	r3, #8
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	db20      	blt.n	800b736 <__s2b+0x5e>
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	f7ff ff86 	bl	800b606 <_Balloc>
 800b6fa:	9b08      	ldr	r3, [sp, #32]
 800b6fc:	6143      	str	r3, [r0, #20]
 800b6fe:	2d09      	cmp	r5, #9
 800b700:	f04f 0301 	mov.w	r3, #1
 800b704:	6103      	str	r3, [r0, #16]
 800b706:	dd19      	ble.n	800b73c <__s2b+0x64>
 800b708:	f104 0809 	add.w	r8, r4, #9
 800b70c:	46c1      	mov	r9, r8
 800b70e:	442c      	add	r4, r5
 800b710:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b714:	4601      	mov	r1, r0
 800b716:	3b30      	subs	r3, #48	; 0x30
 800b718:	220a      	movs	r2, #10
 800b71a:	4630      	mov	r0, r6
 800b71c:	f7ff ffa1 	bl	800b662 <__multadd>
 800b720:	45a1      	cmp	r9, r4
 800b722:	d1f5      	bne.n	800b710 <__s2b+0x38>
 800b724:	eb08 0405 	add.w	r4, r8, r5
 800b728:	3c08      	subs	r4, #8
 800b72a:	1b2d      	subs	r5, r5, r4
 800b72c:	1963      	adds	r3, r4, r5
 800b72e:	42bb      	cmp	r3, r7
 800b730:	db07      	blt.n	800b742 <__s2b+0x6a>
 800b732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b736:	0052      	lsls	r2, r2, #1
 800b738:	3101      	adds	r1, #1
 800b73a:	e7d9      	b.n	800b6f0 <__s2b+0x18>
 800b73c:	340a      	adds	r4, #10
 800b73e:	2509      	movs	r5, #9
 800b740:	e7f3      	b.n	800b72a <__s2b+0x52>
 800b742:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b746:	4601      	mov	r1, r0
 800b748:	3b30      	subs	r3, #48	; 0x30
 800b74a:	220a      	movs	r2, #10
 800b74c:	4630      	mov	r0, r6
 800b74e:	f7ff ff88 	bl	800b662 <__multadd>
 800b752:	e7eb      	b.n	800b72c <__s2b+0x54>

0800b754 <__hi0bits>:
 800b754:	0c02      	lsrs	r2, r0, #16
 800b756:	0412      	lsls	r2, r2, #16
 800b758:	4603      	mov	r3, r0
 800b75a:	b9b2      	cbnz	r2, 800b78a <__hi0bits+0x36>
 800b75c:	0403      	lsls	r3, r0, #16
 800b75e:	2010      	movs	r0, #16
 800b760:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b764:	bf04      	itt	eq
 800b766:	021b      	lsleq	r3, r3, #8
 800b768:	3008      	addeq	r0, #8
 800b76a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b76e:	bf04      	itt	eq
 800b770:	011b      	lsleq	r3, r3, #4
 800b772:	3004      	addeq	r0, #4
 800b774:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b778:	bf04      	itt	eq
 800b77a:	009b      	lsleq	r3, r3, #2
 800b77c:	3002      	addeq	r0, #2
 800b77e:	2b00      	cmp	r3, #0
 800b780:	db06      	blt.n	800b790 <__hi0bits+0x3c>
 800b782:	005b      	lsls	r3, r3, #1
 800b784:	d503      	bpl.n	800b78e <__hi0bits+0x3a>
 800b786:	3001      	adds	r0, #1
 800b788:	4770      	bx	lr
 800b78a:	2000      	movs	r0, #0
 800b78c:	e7e8      	b.n	800b760 <__hi0bits+0xc>
 800b78e:	2020      	movs	r0, #32
 800b790:	4770      	bx	lr

0800b792 <__lo0bits>:
 800b792:	6803      	ldr	r3, [r0, #0]
 800b794:	f013 0207 	ands.w	r2, r3, #7
 800b798:	4601      	mov	r1, r0
 800b79a:	d00b      	beq.n	800b7b4 <__lo0bits+0x22>
 800b79c:	07da      	lsls	r2, r3, #31
 800b79e:	d423      	bmi.n	800b7e8 <__lo0bits+0x56>
 800b7a0:	0798      	lsls	r0, r3, #30
 800b7a2:	bf49      	itett	mi
 800b7a4:	085b      	lsrmi	r3, r3, #1
 800b7a6:	089b      	lsrpl	r3, r3, #2
 800b7a8:	2001      	movmi	r0, #1
 800b7aa:	600b      	strmi	r3, [r1, #0]
 800b7ac:	bf5c      	itt	pl
 800b7ae:	600b      	strpl	r3, [r1, #0]
 800b7b0:	2002      	movpl	r0, #2
 800b7b2:	4770      	bx	lr
 800b7b4:	b298      	uxth	r0, r3
 800b7b6:	b9a8      	cbnz	r0, 800b7e4 <__lo0bits+0x52>
 800b7b8:	0c1b      	lsrs	r3, r3, #16
 800b7ba:	2010      	movs	r0, #16
 800b7bc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b7c0:	bf04      	itt	eq
 800b7c2:	0a1b      	lsreq	r3, r3, #8
 800b7c4:	3008      	addeq	r0, #8
 800b7c6:	071a      	lsls	r2, r3, #28
 800b7c8:	bf04      	itt	eq
 800b7ca:	091b      	lsreq	r3, r3, #4
 800b7cc:	3004      	addeq	r0, #4
 800b7ce:	079a      	lsls	r2, r3, #30
 800b7d0:	bf04      	itt	eq
 800b7d2:	089b      	lsreq	r3, r3, #2
 800b7d4:	3002      	addeq	r0, #2
 800b7d6:	07da      	lsls	r2, r3, #31
 800b7d8:	d402      	bmi.n	800b7e0 <__lo0bits+0x4e>
 800b7da:	085b      	lsrs	r3, r3, #1
 800b7dc:	d006      	beq.n	800b7ec <__lo0bits+0x5a>
 800b7de:	3001      	adds	r0, #1
 800b7e0:	600b      	str	r3, [r1, #0]
 800b7e2:	4770      	bx	lr
 800b7e4:	4610      	mov	r0, r2
 800b7e6:	e7e9      	b.n	800b7bc <__lo0bits+0x2a>
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	4770      	bx	lr
 800b7ec:	2020      	movs	r0, #32
 800b7ee:	4770      	bx	lr

0800b7f0 <__i2b>:
 800b7f0:	b510      	push	{r4, lr}
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	f7ff ff06 	bl	800b606 <_Balloc>
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	6144      	str	r4, [r0, #20]
 800b7fe:	6102      	str	r2, [r0, #16]
 800b800:	bd10      	pop	{r4, pc}

0800b802 <__multiply>:
 800b802:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b806:	4614      	mov	r4, r2
 800b808:	690a      	ldr	r2, [r1, #16]
 800b80a:	6923      	ldr	r3, [r4, #16]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	bfb8      	it	lt
 800b810:	460b      	movlt	r3, r1
 800b812:	4688      	mov	r8, r1
 800b814:	bfbc      	itt	lt
 800b816:	46a0      	movlt	r8, r4
 800b818:	461c      	movlt	r4, r3
 800b81a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b81e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b822:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b826:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b82a:	eb07 0609 	add.w	r6, r7, r9
 800b82e:	42b3      	cmp	r3, r6
 800b830:	bfb8      	it	lt
 800b832:	3101      	addlt	r1, #1
 800b834:	f7ff fee7 	bl	800b606 <_Balloc>
 800b838:	f100 0514 	add.w	r5, r0, #20
 800b83c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b840:	462b      	mov	r3, r5
 800b842:	2200      	movs	r2, #0
 800b844:	4573      	cmp	r3, lr
 800b846:	d316      	bcc.n	800b876 <__multiply+0x74>
 800b848:	f104 0214 	add.w	r2, r4, #20
 800b84c:	f108 0114 	add.w	r1, r8, #20
 800b850:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b854:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b858:	9300      	str	r3, [sp, #0]
 800b85a:	9b00      	ldr	r3, [sp, #0]
 800b85c:	9201      	str	r2, [sp, #4]
 800b85e:	4293      	cmp	r3, r2
 800b860:	d80c      	bhi.n	800b87c <__multiply+0x7a>
 800b862:	2e00      	cmp	r6, #0
 800b864:	dd03      	ble.n	800b86e <__multiply+0x6c>
 800b866:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d05d      	beq.n	800b92a <__multiply+0x128>
 800b86e:	6106      	str	r6, [r0, #16]
 800b870:	b003      	add	sp, #12
 800b872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b876:	f843 2b04 	str.w	r2, [r3], #4
 800b87a:	e7e3      	b.n	800b844 <__multiply+0x42>
 800b87c:	f8b2 b000 	ldrh.w	fp, [r2]
 800b880:	f1bb 0f00 	cmp.w	fp, #0
 800b884:	d023      	beq.n	800b8ce <__multiply+0xcc>
 800b886:	4689      	mov	r9, r1
 800b888:	46ac      	mov	ip, r5
 800b88a:	f04f 0800 	mov.w	r8, #0
 800b88e:	f859 4b04 	ldr.w	r4, [r9], #4
 800b892:	f8dc a000 	ldr.w	sl, [ip]
 800b896:	b2a3      	uxth	r3, r4
 800b898:	fa1f fa8a 	uxth.w	sl, sl
 800b89c:	fb0b a303 	mla	r3, fp, r3, sl
 800b8a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b8a4:	f8dc 4000 	ldr.w	r4, [ip]
 800b8a8:	4443      	add	r3, r8
 800b8aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b8ae:	fb0b 840a 	mla	r4, fp, sl, r8
 800b8b2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b8b6:	46e2      	mov	sl, ip
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b8be:	454f      	cmp	r7, r9
 800b8c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b8c4:	f84a 3b04 	str.w	r3, [sl], #4
 800b8c8:	d82b      	bhi.n	800b922 <__multiply+0x120>
 800b8ca:	f8cc 8004 	str.w	r8, [ip, #4]
 800b8ce:	9b01      	ldr	r3, [sp, #4]
 800b8d0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b8d4:	3204      	adds	r2, #4
 800b8d6:	f1ba 0f00 	cmp.w	sl, #0
 800b8da:	d020      	beq.n	800b91e <__multiply+0x11c>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	4689      	mov	r9, r1
 800b8e0:	46a8      	mov	r8, r5
 800b8e2:	f04f 0b00 	mov.w	fp, #0
 800b8e6:	f8b9 c000 	ldrh.w	ip, [r9]
 800b8ea:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b8ee:	fb0a 440c 	mla	r4, sl, ip, r4
 800b8f2:	445c      	add	r4, fp
 800b8f4:	46c4      	mov	ip, r8
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b8fc:	f84c 3b04 	str.w	r3, [ip], #4
 800b900:	f859 3b04 	ldr.w	r3, [r9], #4
 800b904:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b908:	0c1b      	lsrs	r3, r3, #16
 800b90a:	fb0a b303 	mla	r3, sl, r3, fp
 800b90e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b912:	454f      	cmp	r7, r9
 800b914:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b918:	d805      	bhi.n	800b926 <__multiply+0x124>
 800b91a:	f8c8 3004 	str.w	r3, [r8, #4]
 800b91e:	3504      	adds	r5, #4
 800b920:	e79b      	b.n	800b85a <__multiply+0x58>
 800b922:	46d4      	mov	ip, sl
 800b924:	e7b3      	b.n	800b88e <__multiply+0x8c>
 800b926:	46e0      	mov	r8, ip
 800b928:	e7dd      	b.n	800b8e6 <__multiply+0xe4>
 800b92a:	3e01      	subs	r6, #1
 800b92c:	e799      	b.n	800b862 <__multiply+0x60>
	...

0800b930 <__pow5mult>:
 800b930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b934:	4615      	mov	r5, r2
 800b936:	f012 0203 	ands.w	r2, r2, #3
 800b93a:	4606      	mov	r6, r0
 800b93c:	460f      	mov	r7, r1
 800b93e:	d007      	beq.n	800b950 <__pow5mult+0x20>
 800b940:	3a01      	subs	r2, #1
 800b942:	4c1a      	ldr	r4, [pc, #104]	; (800b9ac <__pow5mult+0x7c>)
 800b944:	2300      	movs	r3, #0
 800b946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b94a:	f7ff fe8a 	bl	800b662 <__multadd>
 800b94e:	4607      	mov	r7, r0
 800b950:	10ad      	asrs	r5, r5, #2
 800b952:	d027      	beq.n	800b9a4 <__pow5mult+0x74>
 800b954:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800b956:	b944      	cbnz	r4, 800b96a <__pow5mult+0x3a>
 800b958:	f240 2171 	movw	r1, #625	; 0x271
 800b95c:	4630      	mov	r0, r6
 800b95e:	f7ff ff47 	bl	800b7f0 <__i2b>
 800b962:	2300      	movs	r3, #0
 800b964:	64b0      	str	r0, [r6, #72]	; 0x48
 800b966:	4604      	mov	r4, r0
 800b968:	6003      	str	r3, [r0, #0]
 800b96a:	f04f 0800 	mov.w	r8, #0
 800b96e:	07eb      	lsls	r3, r5, #31
 800b970:	d50a      	bpl.n	800b988 <__pow5mult+0x58>
 800b972:	4639      	mov	r1, r7
 800b974:	4622      	mov	r2, r4
 800b976:	4630      	mov	r0, r6
 800b978:	f7ff ff43 	bl	800b802 <__multiply>
 800b97c:	4639      	mov	r1, r7
 800b97e:	4681      	mov	r9, r0
 800b980:	4630      	mov	r0, r6
 800b982:	f7ff fe65 	bl	800b650 <_Bfree>
 800b986:	464f      	mov	r7, r9
 800b988:	106d      	asrs	r5, r5, #1
 800b98a:	d00b      	beq.n	800b9a4 <__pow5mult+0x74>
 800b98c:	6820      	ldr	r0, [r4, #0]
 800b98e:	b938      	cbnz	r0, 800b9a0 <__pow5mult+0x70>
 800b990:	4622      	mov	r2, r4
 800b992:	4621      	mov	r1, r4
 800b994:	4630      	mov	r0, r6
 800b996:	f7ff ff34 	bl	800b802 <__multiply>
 800b99a:	6020      	str	r0, [r4, #0]
 800b99c:	f8c0 8000 	str.w	r8, [r0]
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	e7e4      	b.n	800b96e <__pow5mult+0x3e>
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9aa:	bf00      	nop
 800b9ac:	0800ef48 	.word	0x0800ef48

0800b9b0 <__lshift>:
 800b9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9b4:	460c      	mov	r4, r1
 800b9b6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9ba:	6923      	ldr	r3, [r4, #16]
 800b9bc:	6849      	ldr	r1, [r1, #4]
 800b9be:	eb0a 0903 	add.w	r9, sl, r3
 800b9c2:	68a3      	ldr	r3, [r4, #8]
 800b9c4:	4607      	mov	r7, r0
 800b9c6:	4616      	mov	r6, r2
 800b9c8:	f109 0501 	add.w	r5, r9, #1
 800b9cc:	42ab      	cmp	r3, r5
 800b9ce:	db32      	blt.n	800ba36 <__lshift+0x86>
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	f7ff fe18 	bl	800b606 <_Balloc>
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	4680      	mov	r8, r0
 800b9da:	f100 0114 	add.w	r1, r0, #20
 800b9de:	461a      	mov	r2, r3
 800b9e0:	4553      	cmp	r3, sl
 800b9e2:	db2b      	blt.n	800ba3c <__lshift+0x8c>
 800b9e4:	6920      	ldr	r0, [r4, #16]
 800b9e6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9ea:	f104 0314 	add.w	r3, r4, #20
 800b9ee:	f016 021f 	ands.w	r2, r6, #31
 800b9f2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9f6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b9fa:	d025      	beq.n	800ba48 <__lshift+0x98>
 800b9fc:	f1c2 0e20 	rsb	lr, r2, #32
 800ba00:	2000      	movs	r0, #0
 800ba02:	681e      	ldr	r6, [r3, #0]
 800ba04:	468a      	mov	sl, r1
 800ba06:	4096      	lsls	r6, r2
 800ba08:	4330      	orrs	r0, r6
 800ba0a:	f84a 0b04 	str.w	r0, [sl], #4
 800ba0e:	f853 0b04 	ldr.w	r0, [r3], #4
 800ba12:	459c      	cmp	ip, r3
 800ba14:	fa20 f00e 	lsr.w	r0, r0, lr
 800ba18:	d814      	bhi.n	800ba44 <__lshift+0x94>
 800ba1a:	6048      	str	r0, [r1, #4]
 800ba1c:	b108      	cbz	r0, 800ba22 <__lshift+0x72>
 800ba1e:	f109 0502 	add.w	r5, r9, #2
 800ba22:	3d01      	subs	r5, #1
 800ba24:	4638      	mov	r0, r7
 800ba26:	f8c8 5010 	str.w	r5, [r8, #16]
 800ba2a:	4621      	mov	r1, r4
 800ba2c:	f7ff fe10 	bl	800b650 <_Bfree>
 800ba30:	4640      	mov	r0, r8
 800ba32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba36:	3101      	adds	r1, #1
 800ba38:	005b      	lsls	r3, r3, #1
 800ba3a:	e7c7      	b.n	800b9cc <__lshift+0x1c>
 800ba3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ba40:	3301      	adds	r3, #1
 800ba42:	e7cd      	b.n	800b9e0 <__lshift+0x30>
 800ba44:	4651      	mov	r1, sl
 800ba46:	e7dc      	b.n	800ba02 <__lshift+0x52>
 800ba48:	3904      	subs	r1, #4
 800ba4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba4e:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba52:	459c      	cmp	ip, r3
 800ba54:	d8f9      	bhi.n	800ba4a <__lshift+0x9a>
 800ba56:	e7e4      	b.n	800ba22 <__lshift+0x72>

0800ba58 <__mcmp>:
 800ba58:	6903      	ldr	r3, [r0, #16]
 800ba5a:	690a      	ldr	r2, [r1, #16]
 800ba5c:	1a9b      	subs	r3, r3, r2
 800ba5e:	b530      	push	{r4, r5, lr}
 800ba60:	d10c      	bne.n	800ba7c <__mcmp+0x24>
 800ba62:	0092      	lsls	r2, r2, #2
 800ba64:	3014      	adds	r0, #20
 800ba66:	3114      	adds	r1, #20
 800ba68:	1884      	adds	r4, r0, r2
 800ba6a:	4411      	add	r1, r2
 800ba6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba74:	4295      	cmp	r5, r2
 800ba76:	d003      	beq.n	800ba80 <__mcmp+0x28>
 800ba78:	d305      	bcc.n	800ba86 <__mcmp+0x2e>
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	bd30      	pop	{r4, r5, pc}
 800ba80:	42a0      	cmp	r0, r4
 800ba82:	d3f3      	bcc.n	800ba6c <__mcmp+0x14>
 800ba84:	e7fa      	b.n	800ba7c <__mcmp+0x24>
 800ba86:	f04f 33ff 	mov.w	r3, #4294967295
 800ba8a:	e7f7      	b.n	800ba7c <__mcmp+0x24>

0800ba8c <__mdiff>:
 800ba8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba90:	460d      	mov	r5, r1
 800ba92:	4607      	mov	r7, r0
 800ba94:	4611      	mov	r1, r2
 800ba96:	4628      	mov	r0, r5
 800ba98:	4614      	mov	r4, r2
 800ba9a:	f7ff ffdd 	bl	800ba58 <__mcmp>
 800ba9e:	1e06      	subs	r6, r0, #0
 800baa0:	d108      	bne.n	800bab4 <__mdiff+0x28>
 800baa2:	4631      	mov	r1, r6
 800baa4:	4638      	mov	r0, r7
 800baa6:	f7ff fdae 	bl	800b606 <_Balloc>
 800baaa:	2301      	movs	r3, #1
 800baac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bab4:	bfa4      	itt	ge
 800bab6:	4623      	movge	r3, r4
 800bab8:	462c      	movge	r4, r5
 800baba:	4638      	mov	r0, r7
 800babc:	6861      	ldr	r1, [r4, #4]
 800babe:	bfa6      	itte	ge
 800bac0:	461d      	movge	r5, r3
 800bac2:	2600      	movge	r6, #0
 800bac4:	2601      	movlt	r6, #1
 800bac6:	f7ff fd9e 	bl	800b606 <_Balloc>
 800baca:	692b      	ldr	r3, [r5, #16]
 800bacc:	60c6      	str	r6, [r0, #12]
 800bace:	6926      	ldr	r6, [r4, #16]
 800bad0:	f105 0914 	add.w	r9, r5, #20
 800bad4:	f104 0214 	add.w	r2, r4, #20
 800bad8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800badc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800bae0:	f100 0514 	add.w	r5, r0, #20
 800bae4:	f04f 0e00 	mov.w	lr, #0
 800bae8:	f852 ab04 	ldr.w	sl, [r2], #4
 800baec:	f859 4b04 	ldr.w	r4, [r9], #4
 800baf0:	fa1e f18a 	uxtah	r1, lr, sl
 800baf4:	b2a3      	uxth	r3, r4
 800baf6:	1ac9      	subs	r1, r1, r3
 800baf8:	0c23      	lsrs	r3, r4, #16
 800bafa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800bafe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bb02:	b289      	uxth	r1, r1
 800bb04:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800bb08:	45c8      	cmp	r8, r9
 800bb0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bb0e:	4694      	mov	ip, r2
 800bb10:	f845 3b04 	str.w	r3, [r5], #4
 800bb14:	d8e8      	bhi.n	800bae8 <__mdiff+0x5c>
 800bb16:	45bc      	cmp	ip, r7
 800bb18:	d304      	bcc.n	800bb24 <__mdiff+0x98>
 800bb1a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800bb1e:	b183      	cbz	r3, 800bb42 <__mdiff+0xb6>
 800bb20:	6106      	str	r6, [r0, #16]
 800bb22:	e7c5      	b.n	800bab0 <__mdiff+0x24>
 800bb24:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bb28:	fa1e f381 	uxtah	r3, lr, r1
 800bb2c:	141a      	asrs	r2, r3, #16
 800bb2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb38:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800bb3c:	f845 3b04 	str.w	r3, [r5], #4
 800bb40:	e7e9      	b.n	800bb16 <__mdiff+0x8a>
 800bb42:	3e01      	subs	r6, #1
 800bb44:	e7e9      	b.n	800bb1a <__mdiff+0x8e>
	...

0800bb48 <__ulp>:
 800bb48:	4b12      	ldr	r3, [pc, #72]	; (800bb94 <__ulp+0x4c>)
 800bb4a:	ee10 2a90 	vmov	r2, s1
 800bb4e:	401a      	ands	r2, r3
 800bb50:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	dd04      	ble.n	800bb62 <__ulp+0x1a>
 800bb58:	2000      	movs	r0, #0
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	ec41 0b10 	vmov	d0, r0, r1
 800bb60:	4770      	bx	lr
 800bb62:	425b      	negs	r3, r3
 800bb64:	151b      	asrs	r3, r3, #20
 800bb66:	2b13      	cmp	r3, #19
 800bb68:	f04f 0000 	mov.w	r0, #0
 800bb6c:	f04f 0100 	mov.w	r1, #0
 800bb70:	dc04      	bgt.n	800bb7c <__ulp+0x34>
 800bb72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bb76:	fa42 f103 	asr.w	r1, r2, r3
 800bb7a:	e7ef      	b.n	800bb5c <__ulp+0x14>
 800bb7c:	3b14      	subs	r3, #20
 800bb7e:	2b1e      	cmp	r3, #30
 800bb80:	f04f 0201 	mov.w	r2, #1
 800bb84:	bfda      	itte	le
 800bb86:	f1c3 031f 	rsble	r3, r3, #31
 800bb8a:	fa02 f303 	lslle.w	r3, r2, r3
 800bb8e:	4613      	movgt	r3, r2
 800bb90:	4618      	mov	r0, r3
 800bb92:	e7e3      	b.n	800bb5c <__ulp+0x14>
 800bb94:	7ff00000 	.word	0x7ff00000

0800bb98 <__b2d>:
 800bb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9a:	6905      	ldr	r5, [r0, #16]
 800bb9c:	f100 0714 	add.w	r7, r0, #20
 800bba0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bba4:	1f2e      	subs	r6, r5, #4
 800bba6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f7ff fdd2 	bl	800b754 <__hi0bits>
 800bbb0:	f1c0 0320 	rsb	r3, r0, #32
 800bbb4:	280a      	cmp	r0, #10
 800bbb6:	600b      	str	r3, [r1, #0]
 800bbb8:	f8df c074 	ldr.w	ip, [pc, #116]	; 800bc30 <__b2d+0x98>
 800bbbc:	dc14      	bgt.n	800bbe8 <__b2d+0x50>
 800bbbe:	f1c0 0e0b 	rsb	lr, r0, #11
 800bbc2:	fa24 f10e 	lsr.w	r1, r4, lr
 800bbc6:	42b7      	cmp	r7, r6
 800bbc8:	ea41 030c 	orr.w	r3, r1, ip
 800bbcc:	bf34      	ite	cc
 800bbce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bbd2:	2100      	movcs	r1, #0
 800bbd4:	3015      	adds	r0, #21
 800bbd6:	fa04 f000 	lsl.w	r0, r4, r0
 800bbda:	fa21 f10e 	lsr.w	r1, r1, lr
 800bbde:	ea40 0201 	orr.w	r2, r0, r1
 800bbe2:	ec43 2b10 	vmov	d0, r2, r3
 800bbe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbe8:	42b7      	cmp	r7, r6
 800bbea:	bf3a      	itte	cc
 800bbec:	f1a5 0608 	subcc.w	r6, r5, #8
 800bbf0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bbf4:	2100      	movcs	r1, #0
 800bbf6:	380b      	subs	r0, #11
 800bbf8:	d015      	beq.n	800bc26 <__b2d+0x8e>
 800bbfa:	4084      	lsls	r4, r0
 800bbfc:	f1c0 0520 	rsb	r5, r0, #32
 800bc00:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800bc04:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800bc08:	42be      	cmp	r6, r7
 800bc0a:	fa21 fc05 	lsr.w	ip, r1, r5
 800bc0e:	ea44 030c 	orr.w	r3, r4, ip
 800bc12:	bf8c      	ite	hi
 800bc14:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bc18:	2400      	movls	r4, #0
 800bc1a:	fa01 f000 	lsl.w	r0, r1, r0
 800bc1e:	40ec      	lsrs	r4, r5
 800bc20:	ea40 0204 	orr.w	r2, r0, r4
 800bc24:	e7dd      	b.n	800bbe2 <__b2d+0x4a>
 800bc26:	ea44 030c 	orr.w	r3, r4, ip
 800bc2a:	460a      	mov	r2, r1
 800bc2c:	e7d9      	b.n	800bbe2 <__b2d+0x4a>
 800bc2e:	bf00      	nop
 800bc30:	3ff00000 	.word	0x3ff00000

0800bc34 <__d2b>:
 800bc34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc38:	460e      	mov	r6, r1
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	ec59 8b10 	vmov	r8, r9, d0
 800bc40:	4615      	mov	r5, r2
 800bc42:	f7ff fce0 	bl	800b606 <_Balloc>
 800bc46:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bc4a:	4607      	mov	r7, r0
 800bc4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc50:	bb34      	cbnz	r4, 800bca0 <__d2b+0x6c>
 800bc52:	9301      	str	r3, [sp, #4]
 800bc54:	f1b8 0300 	subs.w	r3, r8, #0
 800bc58:	d027      	beq.n	800bcaa <__d2b+0x76>
 800bc5a:	a802      	add	r0, sp, #8
 800bc5c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800bc60:	f7ff fd97 	bl	800b792 <__lo0bits>
 800bc64:	9900      	ldr	r1, [sp, #0]
 800bc66:	b1f0      	cbz	r0, 800bca6 <__d2b+0x72>
 800bc68:	9a01      	ldr	r2, [sp, #4]
 800bc6a:	f1c0 0320 	rsb	r3, r0, #32
 800bc6e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc72:	430b      	orrs	r3, r1
 800bc74:	40c2      	lsrs	r2, r0
 800bc76:	617b      	str	r3, [r7, #20]
 800bc78:	9201      	str	r2, [sp, #4]
 800bc7a:	9b01      	ldr	r3, [sp, #4]
 800bc7c:	61bb      	str	r3, [r7, #24]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	bf14      	ite	ne
 800bc82:	2102      	movne	r1, #2
 800bc84:	2101      	moveq	r1, #1
 800bc86:	6139      	str	r1, [r7, #16]
 800bc88:	b1c4      	cbz	r4, 800bcbc <__d2b+0x88>
 800bc8a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bc8e:	4404      	add	r4, r0
 800bc90:	6034      	str	r4, [r6, #0]
 800bc92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc96:	6028      	str	r0, [r5, #0]
 800bc98:	4638      	mov	r0, r7
 800bc9a:	b003      	add	sp, #12
 800bc9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bca4:	e7d5      	b.n	800bc52 <__d2b+0x1e>
 800bca6:	6179      	str	r1, [r7, #20]
 800bca8:	e7e7      	b.n	800bc7a <__d2b+0x46>
 800bcaa:	a801      	add	r0, sp, #4
 800bcac:	f7ff fd71 	bl	800b792 <__lo0bits>
 800bcb0:	9b01      	ldr	r3, [sp, #4]
 800bcb2:	617b      	str	r3, [r7, #20]
 800bcb4:	2101      	movs	r1, #1
 800bcb6:	6139      	str	r1, [r7, #16]
 800bcb8:	3020      	adds	r0, #32
 800bcba:	e7e5      	b.n	800bc88 <__d2b+0x54>
 800bcbc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bcc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bcc4:	6030      	str	r0, [r6, #0]
 800bcc6:	6918      	ldr	r0, [r3, #16]
 800bcc8:	f7ff fd44 	bl	800b754 <__hi0bits>
 800bccc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bcd0:	e7e1      	b.n	800bc96 <__d2b+0x62>

0800bcd2 <__ratio>:
 800bcd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd6:	4688      	mov	r8, r1
 800bcd8:	4669      	mov	r1, sp
 800bcda:	4681      	mov	r9, r0
 800bcdc:	f7ff ff5c 	bl	800bb98 <__b2d>
 800bce0:	a901      	add	r1, sp, #4
 800bce2:	4640      	mov	r0, r8
 800bce4:	ec57 6b10 	vmov	r6, r7, d0
 800bce8:	f7ff ff56 	bl	800bb98 <__b2d>
 800bcec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcf0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bcf4:	eba3 0c02 	sub.w	ip, r3, r2
 800bcf8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bcfc:	1a9b      	subs	r3, r3, r2
 800bcfe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bd02:	ec5b ab10 	vmov	sl, fp, d0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	bfce      	itee	gt
 800bd0a:	463a      	movgt	r2, r7
 800bd0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bd10:	465a      	movle	r2, fp
 800bd12:	4659      	mov	r1, fp
 800bd14:	463d      	mov	r5, r7
 800bd16:	bfd4      	ite	le
 800bd18:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800bd1c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800bd20:	4630      	mov	r0, r6
 800bd22:	ee10 2a10 	vmov	r2, s0
 800bd26:	460b      	mov	r3, r1
 800bd28:	4629      	mov	r1, r5
 800bd2a:	f7f4 fd8f 	bl	800084c <__aeabi_ddiv>
 800bd2e:	ec41 0b10 	vmov	d0, r0, r1
 800bd32:	b003      	add	sp, #12
 800bd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd38 <__copybits>:
 800bd38:	3901      	subs	r1, #1
 800bd3a:	b510      	push	{r4, lr}
 800bd3c:	1149      	asrs	r1, r1, #5
 800bd3e:	6914      	ldr	r4, [r2, #16]
 800bd40:	3101      	adds	r1, #1
 800bd42:	f102 0314 	add.w	r3, r2, #20
 800bd46:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bd4a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd4e:	42a3      	cmp	r3, r4
 800bd50:	4602      	mov	r2, r0
 800bd52:	d303      	bcc.n	800bd5c <__copybits+0x24>
 800bd54:	2300      	movs	r3, #0
 800bd56:	428a      	cmp	r2, r1
 800bd58:	d305      	bcc.n	800bd66 <__copybits+0x2e>
 800bd5a:	bd10      	pop	{r4, pc}
 800bd5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd60:	f840 2b04 	str.w	r2, [r0], #4
 800bd64:	e7f3      	b.n	800bd4e <__copybits+0x16>
 800bd66:	f842 3b04 	str.w	r3, [r2], #4
 800bd6a:	e7f4      	b.n	800bd56 <__copybits+0x1e>

0800bd6c <__any_on>:
 800bd6c:	f100 0214 	add.w	r2, r0, #20
 800bd70:	6900      	ldr	r0, [r0, #16]
 800bd72:	114b      	asrs	r3, r1, #5
 800bd74:	4298      	cmp	r0, r3
 800bd76:	b510      	push	{r4, lr}
 800bd78:	db11      	blt.n	800bd9e <__any_on+0x32>
 800bd7a:	dd0a      	ble.n	800bd92 <__any_on+0x26>
 800bd7c:	f011 011f 	ands.w	r1, r1, #31
 800bd80:	d007      	beq.n	800bd92 <__any_on+0x26>
 800bd82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bd86:	fa24 f001 	lsr.w	r0, r4, r1
 800bd8a:	fa00 f101 	lsl.w	r1, r0, r1
 800bd8e:	428c      	cmp	r4, r1
 800bd90:	d10b      	bne.n	800bdaa <__any_on+0x3e>
 800bd92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d803      	bhi.n	800bda2 <__any_on+0x36>
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	bd10      	pop	{r4, pc}
 800bd9e:	4603      	mov	r3, r0
 800bda0:	e7f7      	b.n	800bd92 <__any_on+0x26>
 800bda2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bda6:	2900      	cmp	r1, #0
 800bda8:	d0f5      	beq.n	800bd96 <__any_on+0x2a>
 800bdaa:	2001      	movs	r0, #1
 800bdac:	e7f6      	b.n	800bd9c <__any_on+0x30>
	...

0800bdb0 <frexp>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	ec55 4b10 	vmov	r4, r5, d0
 800bdb8:	6001      	str	r1, [r0, #0]
 800bdba:	4916      	ldr	r1, [pc, #88]	; (800be14 <frexp+0x64>)
 800bdbc:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bdc0:	428b      	cmp	r3, r1
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	462a      	mov	r2, r5
 800bdc6:	dc22      	bgt.n	800be0e <frexp+0x5e>
 800bdc8:	ee10 1a10 	vmov	r1, s0
 800bdcc:	4319      	orrs	r1, r3
 800bdce:	d01e      	beq.n	800be0e <frexp+0x5e>
 800bdd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdd4:	da0d      	bge.n	800bdf2 <frexp+0x42>
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	4b0f      	ldr	r3, [pc, #60]	; (800be18 <frexp+0x68>)
 800bdda:	ee10 0a10 	vmov	r0, s0
 800bdde:	4629      	mov	r1, r5
 800bde0:	f7f4 fc0a 	bl	80005f8 <__aeabi_dmul>
 800bde4:	460a      	mov	r2, r1
 800bde6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bdea:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800bdee:	4604      	mov	r4, r0
 800bdf0:	6031      	str	r1, [r6, #0]
 800bdf2:	6831      	ldr	r1, [r6, #0]
 800bdf4:	151b      	asrs	r3, r3, #20
 800bdf6:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800bdfa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bdfe:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800be02:	440b      	add	r3, r1
 800be04:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800be08:	6033      	str	r3, [r6, #0]
 800be0a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800be0e:	ec45 4b10 	vmov	d0, r4, r5
 800be12:	bd70      	pop	{r4, r5, r6, pc}
 800be14:	7fefffff 	.word	0x7fefffff
 800be18:	43500000 	.word	0x43500000

0800be1c <strncmp>:
 800be1c:	b510      	push	{r4, lr}
 800be1e:	b16a      	cbz	r2, 800be3c <strncmp+0x20>
 800be20:	3901      	subs	r1, #1
 800be22:	1884      	adds	r4, r0, r2
 800be24:	f810 3b01 	ldrb.w	r3, [r0], #1
 800be28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d103      	bne.n	800be38 <strncmp+0x1c>
 800be30:	42a0      	cmp	r0, r4
 800be32:	d001      	beq.n	800be38 <strncmp+0x1c>
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1f5      	bne.n	800be24 <strncmp+0x8>
 800be38:	1a98      	subs	r0, r3, r2
 800be3a:	bd10      	pop	{r4, pc}
 800be3c:	4610      	mov	r0, r2
 800be3e:	e7fc      	b.n	800be3a <strncmp+0x1e>

0800be40 <strncpy>:
 800be40:	b570      	push	{r4, r5, r6, lr}
 800be42:	3901      	subs	r1, #1
 800be44:	4604      	mov	r4, r0
 800be46:	b902      	cbnz	r2, 800be4a <strncpy+0xa>
 800be48:	bd70      	pop	{r4, r5, r6, pc}
 800be4a:	4623      	mov	r3, r4
 800be4c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800be50:	f803 5b01 	strb.w	r5, [r3], #1
 800be54:	1e56      	subs	r6, r2, #1
 800be56:	b92d      	cbnz	r5, 800be64 <strncpy+0x24>
 800be58:	4414      	add	r4, r2
 800be5a:	42a3      	cmp	r3, r4
 800be5c:	d0f4      	beq.n	800be48 <strncpy+0x8>
 800be5e:	f803 5b01 	strb.w	r5, [r3], #1
 800be62:	e7fa      	b.n	800be5a <strncpy+0x1a>
 800be64:	461c      	mov	r4, r3
 800be66:	4632      	mov	r2, r6
 800be68:	e7ed      	b.n	800be46 <strncpy+0x6>

0800be6a <__ssprint_r>:
 800be6a:	6893      	ldr	r3, [r2, #8]
 800be6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be70:	4681      	mov	r9, r0
 800be72:	460c      	mov	r4, r1
 800be74:	4616      	mov	r6, r2
 800be76:	2b00      	cmp	r3, #0
 800be78:	d05e      	beq.n	800bf38 <__ssprint_r+0xce>
 800be7a:	f04f 0b00 	mov.w	fp, #0
 800be7e:	f8d2 a000 	ldr.w	sl, [r2]
 800be82:	465f      	mov	r7, fp
 800be84:	b357      	cbz	r7, 800bedc <__ssprint_r+0x72>
 800be86:	68a3      	ldr	r3, [r4, #8]
 800be88:	429f      	cmp	r7, r3
 800be8a:	d340      	bcc.n	800bf0e <__ssprint_r+0xa4>
 800be8c:	89a2      	ldrh	r2, [r4, #12]
 800be8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be92:	d03c      	beq.n	800bf0e <__ssprint_r+0xa4>
 800be94:	6825      	ldr	r5, [r4, #0]
 800be96:	6921      	ldr	r1, [r4, #16]
 800be98:	eba5 0801 	sub.w	r8, r5, r1
 800be9c:	6965      	ldr	r5, [r4, #20]
 800be9e:	2302      	movs	r3, #2
 800bea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bea4:	fb95 f5f3 	sdiv	r5, r5, r3
 800bea8:	f108 0301 	add.w	r3, r8, #1
 800beac:	443b      	add	r3, r7
 800beae:	429d      	cmp	r5, r3
 800beb0:	bf38      	it	cc
 800beb2:	461d      	movcc	r5, r3
 800beb4:	0553      	lsls	r3, r2, #21
 800beb6:	d544      	bpl.n	800bf42 <__ssprint_r+0xd8>
 800beb8:	4629      	mov	r1, r5
 800beba:	4648      	mov	r0, r9
 800bebc:	f7fb fd7c 	bl	80079b8 <_malloc_r>
 800bec0:	b988      	cbnz	r0, 800bee6 <__ssprint_r+0x7c>
 800bec2:	230c      	movs	r3, #12
 800bec4:	f8c9 3000 	str.w	r3, [r9]
 800bec8:	89a3      	ldrh	r3, [r4, #12]
 800beca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bece:	81a3      	strh	r3, [r4, #12]
 800bed0:	2300      	movs	r3, #0
 800bed2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800bed6:	f04f 30ff 	mov.w	r0, #4294967295
 800beda:	e02f      	b.n	800bf3c <__ssprint_r+0xd2>
 800bedc:	e9da b700 	ldrd	fp, r7, [sl]
 800bee0:	f10a 0a08 	add.w	sl, sl, #8
 800bee4:	e7ce      	b.n	800be84 <__ssprint_r+0x1a>
 800bee6:	4642      	mov	r2, r8
 800bee8:	6921      	ldr	r1, [r4, #16]
 800beea:	9001      	str	r0, [sp, #4]
 800beec:	f7ff fb80 	bl	800b5f0 <memcpy>
 800bef0:	89a2      	ldrh	r2, [r4, #12]
 800bef2:	9b01      	ldr	r3, [sp, #4]
 800bef4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800bef8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800befc:	81a2      	strh	r2, [r4, #12]
 800befe:	6123      	str	r3, [r4, #16]
 800bf00:	6165      	str	r5, [r4, #20]
 800bf02:	4443      	add	r3, r8
 800bf04:	eba5 0508 	sub.w	r5, r5, r8
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	60a5      	str	r5, [r4, #8]
 800bf0c:	463b      	mov	r3, r7
 800bf0e:	42bb      	cmp	r3, r7
 800bf10:	bf28      	it	cs
 800bf12:	463b      	movcs	r3, r7
 800bf14:	461a      	mov	r2, r3
 800bf16:	4659      	mov	r1, fp
 800bf18:	6820      	ldr	r0, [r4, #0]
 800bf1a:	9301      	str	r3, [sp, #4]
 800bf1c:	f000 f8ad 	bl	800c07a <memmove>
 800bf20:	68a2      	ldr	r2, [r4, #8]
 800bf22:	9b01      	ldr	r3, [sp, #4]
 800bf24:	1ad2      	subs	r2, r2, r3
 800bf26:	60a2      	str	r2, [r4, #8]
 800bf28:	6822      	ldr	r2, [r4, #0]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	6023      	str	r3, [r4, #0]
 800bf2e:	68b3      	ldr	r3, [r6, #8]
 800bf30:	1bdf      	subs	r7, r3, r7
 800bf32:	60b7      	str	r7, [r6, #8]
 800bf34:	2f00      	cmp	r7, #0
 800bf36:	d1d1      	bne.n	800bedc <__ssprint_r+0x72>
 800bf38:	2000      	movs	r0, #0
 800bf3a:	6070      	str	r0, [r6, #4]
 800bf3c:	b003      	add	sp, #12
 800bf3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf42:	462a      	mov	r2, r5
 800bf44:	4648      	mov	r0, r9
 800bf46:	f000 f8b1 	bl	800c0ac <_realloc_r>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d1d6      	bne.n	800befe <__ssprint_r+0x94>
 800bf50:	6921      	ldr	r1, [r4, #16]
 800bf52:	4648      	mov	r0, r9
 800bf54:	f7fe ff42 	bl	800addc <_free_r>
 800bf58:	e7b3      	b.n	800bec2 <__ssprint_r+0x58>

0800bf5a <__ascii_wctomb>:
 800bf5a:	b149      	cbz	r1, 800bf70 <__ascii_wctomb+0x16>
 800bf5c:	2aff      	cmp	r2, #255	; 0xff
 800bf5e:	bf85      	ittet	hi
 800bf60:	238a      	movhi	r3, #138	; 0x8a
 800bf62:	6003      	strhi	r3, [r0, #0]
 800bf64:	700a      	strbls	r2, [r1, #0]
 800bf66:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf6a:	bf98      	it	ls
 800bf6c:	2001      	movls	r0, #1
 800bf6e:	4770      	bx	lr
 800bf70:	4608      	mov	r0, r1
 800bf72:	4770      	bx	lr

0800bf74 <__register_exitproc>:
 800bf74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf78:	4c26      	ldr	r4, [pc, #152]	; (800c014 <__register_exitproc+0xa0>)
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	6820      	ldr	r0, [r4, #0]
 800bf7e:	4698      	mov	r8, r3
 800bf80:	460f      	mov	r7, r1
 800bf82:	4691      	mov	r9, r2
 800bf84:	f7ff fb20 	bl	800b5c8 <__retarget_lock_acquire_recursive>
 800bf88:	4b23      	ldr	r3, [pc, #140]	; (800c018 <__register_exitproc+0xa4>)
 800bf8a:	681d      	ldr	r5, [r3, #0]
 800bf8c:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800bf90:	b918      	cbnz	r0, 800bf9a <__register_exitproc+0x26>
 800bf92:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800bf96:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800bf9a:	6843      	ldr	r3, [r0, #4]
 800bf9c:	2b1f      	cmp	r3, #31
 800bf9e:	dd19      	ble.n	800bfd4 <__register_exitproc+0x60>
 800bfa0:	4b1e      	ldr	r3, [pc, #120]	; (800c01c <__register_exitproc+0xa8>)
 800bfa2:	b933      	cbnz	r3, 800bfb2 <__register_exitproc+0x3e>
 800bfa4:	6820      	ldr	r0, [r4, #0]
 800bfa6:	f7ff fb10 	bl	800b5ca <__retarget_lock_release_recursive>
 800bfaa:	f04f 30ff 	mov.w	r0, #4294967295
 800bfae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfb2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800bfb6:	f7fb fcf7 	bl	80079a8 <malloc>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d0f2      	beq.n	800bfa4 <__register_exitproc+0x30>
 800bfbe:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800bfc2:	6003      	str	r3, [r0, #0]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	6042      	str	r2, [r0, #4]
 800bfc8:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800bfcc:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800bfd0:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800bfd4:	6843      	ldr	r3, [r0, #4]
 800bfd6:	b19e      	cbz	r6, 800c000 <__register_exitproc+0x8c>
 800bfd8:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800bfdc:	2201      	movs	r2, #1
 800bfde:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800bfe2:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800bfe6:	409a      	lsls	r2, r3
 800bfe8:	4311      	orrs	r1, r2
 800bfea:	2e02      	cmp	r6, #2
 800bfec:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800bff0:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800bff4:	bf02      	ittt	eq
 800bff6:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800bffa:	430a      	orreq	r2, r1
 800bffc:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800c000:	1c5a      	adds	r2, r3, #1
 800c002:	3302      	adds	r3, #2
 800c004:	6042      	str	r2, [r0, #4]
 800c006:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800c00a:	6820      	ldr	r0, [r4, #0]
 800c00c:	f7ff fadd 	bl	800b5ca <__retarget_lock_release_recursive>
 800c010:	2000      	movs	r0, #0
 800c012:	e7cc      	b.n	800bfae <__register_exitproc+0x3a>
 800c014:	20000850 	.word	0x20000850
 800c018:	0800ed90 	.word	0x0800ed90
 800c01c:	080079a9 	.word	0x080079a9

0800c020 <_calloc_r>:
 800c020:	b510      	push	{r4, lr}
 800c022:	4351      	muls	r1, r2
 800c024:	f7fb fcc8 	bl	80079b8 <_malloc_r>
 800c028:	4604      	mov	r4, r0
 800c02a:	b198      	cbz	r0, 800c054 <_calloc_r+0x34>
 800c02c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c030:	f022 0203 	bic.w	r2, r2, #3
 800c034:	3a04      	subs	r2, #4
 800c036:	2a24      	cmp	r2, #36	; 0x24
 800c038:	d81b      	bhi.n	800c072 <_calloc_r+0x52>
 800c03a:	2a13      	cmp	r2, #19
 800c03c:	d917      	bls.n	800c06e <_calloc_r+0x4e>
 800c03e:	2100      	movs	r1, #0
 800c040:	2a1b      	cmp	r2, #27
 800c042:	e9c0 1100 	strd	r1, r1, [r0]
 800c046:	d807      	bhi.n	800c058 <_calloc_r+0x38>
 800c048:	f100 0308 	add.w	r3, r0, #8
 800c04c:	2200      	movs	r2, #0
 800c04e:	e9c3 2200 	strd	r2, r2, [r3]
 800c052:	609a      	str	r2, [r3, #8]
 800c054:	4620      	mov	r0, r4
 800c056:	bd10      	pop	{r4, pc}
 800c058:	2a24      	cmp	r2, #36	; 0x24
 800c05a:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800c05e:	bf11      	iteee	ne
 800c060:	f100 0310 	addne.w	r3, r0, #16
 800c064:	6101      	streq	r1, [r0, #16]
 800c066:	f100 0318 	addeq.w	r3, r0, #24
 800c06a:	6141      	streq	r1, [r0, #20]
 800c06c:	e7ee      	b.n	800c04c <_calloc_r+0x2c>
 800c06e:	4603      	mov	r3, r0
 800c070:	e7ec      	b.n	800c04c <_calloc_r+0x2c>
 800c072:	2100      	movs	r1, #0
 800c074:	f7fb fed6 	bl	8007e24 <memset>
 800c078:	e7ec      	b.n	800c054 <_calloc_r+0x34>

0800c07a <memmove>:
 800c07a:	4288      	cmp	r0, r1
 800c07c:	b510      	push	{r4, lr}
 800c07e:	eb01 0302 	add.w	r3, r1, r2
 800c082:	d807      	bhi.n	800c094 <memmove+0x1a>
 800c084:	1e42      	subs	r2, r0, #1
 800c086:	4299      	cmp	r1, r3
 800c088:	d00a      	beq.n	800c0a0 <memmove+0x26>
 800c08a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c08e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c092:	e7f8      	b.n	800c086 <memmove+0xc>
 800c094:	4283      	cmp	r3, r0
 800c096:	d9f5      	bls.n	800c084 <memmove+0xa>
 800c098:	1881      	adds	r1, r0, r2
 800c09a:	1ad2      	subs	r2, r2, r3
 800c09c:	42d3      	cmn	r3, r2
 800c09e:	d100      	bne.n	800c0a2 <memmove+0x28>
 800c0a0:	bd10      	pop	{r4, pc}
 800c0a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0a6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c0aa:	e7f7      	b.n	800c09c <memmove+0x22>

0800c0ac <_realloc_r>:
 800c0ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b0:	4682      	mov	sl, r0
 800c0b2:	460c      	mov	r4, r1
 800c0b4:	b929      	cbnz	r1, 800c0c2 <_realloc_r+0x16>
 800c0b6:	4611      	mov	r1, r2
 800c0b8:	b003      	add	sp, #12
 800c0ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0be:	f7fb bc7b 	b.w	80079b8 <_malloc_r>
 800c0c2:	9201      	str	r2, [sp, #4]
 800c0c4:	f7fb feb6 	bl	8007e34 <__malloc_lock>
 800c0c8:	9a01      	ldr	r2, [sp, #4]
 800c0ca:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800c0ce:	f102 080b 	add.w	r8, r2, #11
 800c0d2:	f1b8 0f16 	cmp.w	r8, #22
 800c0d6:	f1a4 0908 	sub.w	r9, r4, #8
 800c0da:	f025 0603 	bic.w	r6, r5, #3
 800c0de:	d90b      	bls.n	800c0f8 <_realloc_r+0x4c>
 800c0e0:	f038 0807 	bics.w	r8, r8, #7
 800c0e4:	d50a      	bpl.n	800c0fc <_realloc_r+0x50>
 800c0e6:	230c      	movs	r3, #12
 800c0e8:	f8ca 3000 	str.w	r3, [sl]
 800c0ec:	f04f 0b00 	mov.w	fp, #0
 800c0f0:	4658      	mov	r0, fp
 800c0f2:	b003      	add	sp, #12
 800c0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f8:	f04f 0810 	mov.w	r8, #16
 800c0fc:	4590      	cmp	r8, r2
 800c0fe:	d3f2      	bcc.n	800c0e6 <_realloc_r+0x3a>
 800c100:	45b0      	cmp	r8, r6
 800c102:	f340 8170 	ble.w	800c3e6 <_realloc_r+0x33a>
 800c106:	49a9      	ldr	r1, [pc, #676]	; (800c3ac <_realloc_r+0x300>)
 800c108:	9101      	str	r1, [sp, #4]
 800c10a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800c10e:	eb09 0306 	add.w	r3, r9, r6
 800c112:	459c      	cmp	ip, r3
 800c114:	6858      	ldr	r0, [r3, #4]
 800c116:	d005      	beq.n	800c124 <_realloc_r+0x78>
 800c118:	f020 0101 	bic.w	r1, r0, #1
 800c11c:	4419      	add	r1, r3
 800c11e:	6849      	ldr	r1, [r1, #4]
 800c120:	07cf      	lsls	r7, r1, #31
 800c122:	d447      	bmi.n	800c1b4 <_realloc_r+0x108>
 800c124:	f020 0003 	bic.w	r0, r0, #3
 800c128:	459c      	cmp	ip, r3
 800c12a:	eb06 0700 	add.w	r7, r6, r0
 800c12e:	d119      	bne.n	800c164 <_realloc_r+0xb8>
 800c130:	f108 0110 	add.w	r1, r8, #16
 800c134:	42b9      	cmp	r1, r7
 800c136:	dc3f      	bgt.n	800c1b8 <_realloc_r+0x10c>
 800c138:	eb09 0308 	add.w	r3, r9, r8
 800c13c:	9a01      	ldr	r2, [sp, #4]
 800c13e:	eba7 0708 	sub.w	r7, r7, r8
 800c142:	f047 0701 	orr.w	r7, r7, #1
 800c146:	6093      	str	r3, [r2, #8]
 800c148:	605f      	str	r7, [r3, #4]
 800c14a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c14e:	f003 0301 	and.w	r3, r3, #1
 800c152:	ea43 0308 	orr.w	r3, r3, r8
 800c156:	f844 3c04 	str.w	r3, [r4, #-4]
 800c15a:	4650      	mov	r0, sl
 800c15c:	f7fb fe70 	bl	8007e40 <__malloc_unlock>
 800c160:	46a3      	mov	fp, r4
 800c162:	e7c5      	b.n	800c0f0 <_realloc_r+0x44>
 800c164:	45b8      	cmp	r8, r7
 800c166:	dc27      	bgt.n	800c1b8 <_realloc_r+0x10c>
 800c168:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800c16c:	60da      	str	r2, [r3, #12]
 800c16e:	6093      	str	r3, [r2, #8]
 800c170:	eba7 0008 	sub.w	r0, r7, r8
 800c174:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c178:	280f      	cmp	r0, #15
 800c17a:	f002 0201 	and.w	r2, r2, #1
 800c17e:	eb09 0307 	add.w	r3, r9, r7
 800c182:	f240 8132 	bls.w	800c3ea <_realloc_r+0x33e>
 800c186:	eb09 0108 	add.w	r1, r9, r8
 800c18a:	ea48 0202 	orr.w	r2, r8, r2
 800c18e:	f040 0001 	orr.w	r0, r0, #1
 800c192:	f8c9 2004 	str.w	r2, [r9, #4]
 800c196:	6048      	str	r0, [r1, #4]
 800c198:	685a      	ldr	r2, [r3, #4]
 800c19a:	f042 0201 	orr.w	r2, r2, #1
 800c19e:	605a      	str	r2, [r3, #4]
 800c1a0:	3108      	adds	r1, #8
 800c1a2:	4650      	mov	r0, sl
 800c1a4:	f7fe fe1a 	bl	800addc <_free_r>
 800c1a8:	4650      	mov	r0, sl
 800c1aa:	f7fb fe49 	bl	8007e40 <__malloc_unlock>
 800c1ae:	f109 0b08 	add.w	fp, r9, #8
 800c1b2:	e79d      	b.n	800c0f0 <_realloc_r+0x44>
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	07e9      	lsls	r1, r5, #31
 800c1ba:	f100 80c6 	bmi.w	800c34a <_realloc_r+0x29e>
 800c1be:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800c1c2:	eba9 0505 	sub.w	r5, r9, r5
 800c1c6:	6869      	ldr	r1, [r5, #4]
 800c1c8:	f021 0103 	bic.w	r1, r1, #3
 800c1cc:	eb01 0b06 	add.w	fp, r1, r6
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f000 8086 	beq.w	800c2e2 <_realloc_r+0x236>
 800c1d6:	459c      	cmp	ip, r3
 800c1d8:	eb00 070b 	add.w	r7, r0, fp
 800c1dc:	d149      	bne.n	800c272 <_realloc_r+0x1c6>
 800c1de:	f108 0310 	add.w	r3, r8, #16
 800c1e2:	42bb      	cmp	r3, r7
 800c1e4:	dc7d      	bgt.n	800c2e2 <_realloc_r+0x236>
 800c1e6:	46ab      	mov	fp, r5
 800c1e8:	68eb      	ldr	r3, [r5, #12]
 800c1ea:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800c1ee:	60d3      	str	r3, [r2, #12]
 800c1f0:	609a      	str	r2, [r3, #8]
 800c1f2:	1f32      	subs	r2, r6, #4
 800c1f4:	2a24      	cmp	r2, #36	; 0x24
 800c1f6:	d837      	bhi.n	800c268 <_realloc_r+0x1bc>
 800c1f8:	2a13      	cmp	r2, #19
 800c1fa:	d933      	bls.n	800c264 <_realloc_r+0x1b8>
 800c1fc:	6823      	ldr	r3, [r4, #0]
 800c1fe:	60ab      	str	r3, [r5, #8]
 800c200:	6863      	ldr	r3, [r4, #4]
 800c202:	60eb      	str	r3, [r5, #12]
 800c204:	2a1b      	cmp	r2, #27
 800c206:	d81b      	bhi.n	800c240 <_realloc_r+0x194>
 800c208:	3408      	adds	r4, #8
 800c20a:	f105 0310 	add.w	r3, r5, #16
 800c20e:	6822      	ldr	r2, [r4, #0]
 800c210:	601a      	str	r2, [r3, #0]
 800c212:	6862      	ldr	r2, [r4, #4]
 800c214:	605a      	str	r2, [r3, #4]
 800c216:	68a2      	ldr	r2, [r4, #8]
 800c218:	609a      	str	r2, [r3, #8]
 800c21a:	eb05 0308 	add.w	r3, r5, r8
 800c21e:	9a01      	ldr	r2, [sp, #4]
 800c220:	eba7 0708 	sub.w	r7, r7, r8
 800c224:	f047 0701 	orr.w	r7, r7, #1
 800c228:	6093      	str	r3, [r2, #8]
 800c22a:	605f      	str	r7, [r3, #4]
 800c22c:	686b      	ldr	r3, [r5, #4]
 800c22e:	f003 0301 	and.w	r3, r3, #1
 800c232:	ea43 0308 	orr.w	r3, r3, r8
 800c236:	606b      	str	r3, [r5, #4]
 800c238:	4650      	mov	r0, sl
 800c23a:	f7fb fe01 	bl	8007e40 <__malloc_unlock>
 800c23e:	e757      	b.n	800c0f0 <_realloc_r+0x44>
 800c240:	68a3      	ldr	r3, [r4, #8]
 800c242:	612b      	str	r3, [r5, #16]
 800c244:	68e3      	ldr	r3, [r4, #12]
 800c246:	616b      	str	r3, [r5, #20]
 800c248:	2a24      	cmp	r2, #36	; 0x24
 800c24a:	bf01      	itttt	eq
 800c24c:	6923      	ldreq	r3, [r4, #16]
 800c24e:	61ab      	streq	r3, [r5, #24]
 800c250:	6962      	ldreq	r2, [r4, #20]
 800c252:	61ea      	streq	r2, [r5, #28]
 800c254:	bf19      	ittee	ne
 800c256:	3410      	addne	r4, #16
 800c258:	f105 0318 	addne.w	r3, r5, #24
 800c25c:	f105 0320 	addeq.w	r3, r5, #32
 800c260:	3418      	addeq	r4, #24
 800c262:	e7d4      	b.n	800c20e <_realloc_r+0x162>
 800c264:	465b      	mov	r3, fp
 800c266:	e7d2      	b.n	800c20e <_realloc_r+0x162>
 800c268:	4621      	mov	r1, r4
 800c26a:	4658      	mov	r0, fp
 800c26c:	f7ff ff05 	bl	800c07a <memmove>
 800c270:	e7d3      	b.n	800c21a <_realloc_r+0x16e>
 800c272:	45b8      	cmp	r8, r7
 800c274:	dc35      	bgt.n	800c2e2 <_realloc_r+0x236>
 800c276:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800c27a:	4628      	mov	r0, r5
 800c27c:	60da      	str	r2, [r3, #12]
 800c27e:	6093      	str	r3, [r2, #8]
 800c280:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c284:	68eb      	ldr	r3, [r5, #12]
 800c286:	60d3      	str	r3, [r2, #12]
 800c288:	609a      	str	r2, [r3, #8]
 800c28a:	1f32      	subs	r2, r6, #4
 800c28c:	2a24      	cmp	r2, #36	; 0x24
 800c28e:	d824      	bhi.n	800c2da <_realloc_r+0x22e>
 800c290:	2a13      	cmp	r2, #19
 800c292:	d908      	bls.n	800c2a6 <_realloc_r+0x1fa>
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	60ab      	str	r3, [r5, #8]
 800c298:	6863      	ldr	r3, [r4, #4]
 800c29a:	60eb      	str	r3, [r5, #12]
 800c29c:	2a1b      	cmp	r2, #27
 800c29e:	d80a      	bhi.n	800c2b6 <_realloc_r+0x20a>
 800c2a0:	3408      	adds	r4, #8
 800c2a2:	f105 0010 	add.w	r0, r5, #16
 800c2a6:	6823      	ldr	r3, [r4, #0]
 800c2a8:	6003      	str	r3, [r0, #0]
 800c2aa:	6863      	ldr	r3, [r4, #4]
 800c2ac:	6043      	str	r3, [r0, #4]
 800c2ae:	68a3      	ldr	r3, [r4, #8]
 800c2b0:	6083      	str	r3, [r0, #8]
 800c2b2:	46a9      	mov	r9, r5
 800c2b4:	e75c      	b.n	800c170 <_realloc_r+0xc4>
 800c2b6:	68a3      	ldr	r3, [r4, #8]
 800c2b8:	612b      	str	r3, [r5, #16]
 800c2ba:	68e3      	ldr	r3, [r4, #12]
 800c2bc:	616b      	str	r3, [r5, #20]
 800c2be:	2a24      	cmp	r2, #36	; 0x24
 800c2c0:	bf01      	itttt	eq
 800c2c2:	6923      	ldreq	r3, [r4, #16]
 800c2c4:	61ab      	streq	r3, [r5, #24]
 800c2c6:	6963      	ldreq	r3, [r4, #20]
 800c2c8:	61eb      	streq	r3, [r5, #28]
 800c2ca:	bf19      	ittee	ne
 800c2cc:	3410      	addne	r4, #16
 800c2ce:	f105 0018 	addne.w	r0, r5, #24
 800c2d2:	f105 0020 	addeq.w	r0, r5, #32
 800c2d6:	3418      	addeq	r4, #24
 800c2d8:	e7e5      	b.n	800c2a6 <_realloc_r+0x1fa>
 800c2da:	4621      	mov	r1, r4
 800c2dc:	f7ff fecd 	bl	800c07a <memmove>
 800c2e0:	e7e7      	b.n	800c2b2 <_realloc_r+0x206>
 800c2e2:	45d8      	cmp	r8, fp
 800c2e4:	dc31      	bgt.n	800c34a <_realloc_r+0x29e>
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	68eb      	ldr	r3, [r5, #12]
 800c2ea:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c2ee:	60d3      	str	r3, [r2, #12]
 800c2f0:	609a      	str	r2, [r3, #8]
 800c2f2:	1f32      	subs	r2, r6, #4
 800c2f4:	2a24      	cmp	r2, #36	; 0x24
 800c2f6:	d824      	bhi.n	800c342 <_realloc_r+0x296>
 800c2f8:	2a13      	cmp	r2, #19
 800c2fa:	d908      	bls.n	800c30e <_realloc_r+0x262>
 800c2fc:	6823      	ldr	r3, [r4, #0]
 800c2fe:	60ab      	str	r3, [r5, #8]
 800c300:	6863      	ldr	r3, [r4, #4]
 800c302:	60eb      	str	r3, [r5, #12]
 800c304:	2a1b      	cmp	r2, #27
 800c306:	d80a      	bhi.n	800c31e <_realloc_r+0x272>
 800c308:	3408      	adds	r4, #8
 800c30a:	f105 0010 	add.w	r0, r5, #16
 800c30e:	6823      	ldr	r3, [r4, #0]
 800c310:	6003      	str	r3, [r0, #0]
 800c312:	6863      	ldr	r3, [r4, #4]
 800c314:	6043      	str	r3, [r0, #4]
 800c316:	68a3      	ldr	r3, [r4, #8]
 800c318:	6083      	str	r3, [r0, #8]
 800c31a:	465f      	mov	r7, fp
 800c31c:	e7c9      	b.n	800c2b2 <_realloc_r+0x206>
 800c31e:	68a3      	ldr	r3, [r4, #8]
 800c320:	612b      	str	r3, [r5, #16]
 800c322:	68e3      	ldr	r3, [r4, #12]
 800c324:	616b      	str	r3, [r5, #20]
 800c326:	2a24      	cmp	r2, #36	; 0x24
 800c328:	bf01      	itttt	eq
 800c32a:	6923      	ldreq	r3, [r4, #16]
 800c32c:	61ab      	streq	r3, [r5, #24]
 800c32e:	6963      	ldreq	r3, [r4, #20]
 800c330:	61eb      	streq	r3, [r5, #28]
 800c332:	bf19      	ittee	ne
 800c334:	3410      	addne	r4, #16
 800c336:	f105 0018 	addne.w	r0, r5, #24
 800c33a:	f105 0020 	addeq.w	r0, r5, #32
 800c33e:	3418      	addeq	r4, #24
 800c340:	e7e5      	b.n	800c30e <_realloc_r+0x262>
 800c342:	4621      	mov	r1, r4
 800c344:	f7ff fe99 	bl	800c07a <memmove>
 800c348:	e7e7      	b.n	800c31a <_realloc_r+0x26e>
 800c34a:	4611      	mov	r1, r2
 800c34c:	4650      	mov	r0, sl
 800c34e:	f7fb fb33 	bl	80079b8 <_malloc_r>
 800c352:	4683      	mov	fp, r0
 800c354:	2800      	cmp	r0, #0
 800c356:	f43f af6f 	beq.w	800c238 <_realloc_r+0x18c>
 800c35a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c35e:	f023 0301 	bic.w	r3, r3, #1
 800c362:	444b      	add	r3, r9
 800c364:	f1a0 0208 	sub.w	r2, r0, #8
 800c368:	4293      	cmp	r3, r2
 800c36a:	d105      	bne.n	800c378 <_realloc_r+0x2cc>
 800c36c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800c370:	f027 0703 	bic.w	r7, r7, #3
 800c374:	4437      	add	r7, r6
 800c376:	e6fb      	b.n	800c170 <_realloc_r+0xc4>
 800c378:	1f32      	subs	r2, r6, #4
 800c37a:	2a24      	cmp	r2, #36	; 0x24
 800c37c:	d82f      	bhi.n	800c3de <_realloc_r+0x332>
 800c37e:	2a13      	cmp	r2, #19
 800c380:	d92a      	bls.n	800c3d8 <_realloc_r+0x32c>
 800c382:	6823      	ldr	r3, [r4, #0]
 800c384:	6003      	str	r3, [r0, #0]
 800c386:	6863      	ldr	r3, [r4, #4]
 800c388:	6043      	str	r3, [r0, #4]
 800c38a:	2a1b      	cmp	r2, #27
 800c38c:	d810      	bhi.n	800c3b0 <_realloc_r+0x304>
 800c38e:	f104 0208 	add.w	r2, r4, #8
 800c392:	f100 0308 	add.w	r3, r0, #8
 800c396:	6811      	ldr	r1, [r2, #0]
 800c398:	6019      	str	r1, [r3, #0]
 800c39a:	6851      	ldr	r1, [r2, #4]
 800c39c:	6059      	str	r1, [r3, #4]
 800c39e:	6892      	ldr	r2, [r2, #8]
 800c3a0:	609a      	str	r2, [r3, #8]
 800c3a2:	4621      	mov	r1, r4
 800c3a4:	4650      	mov	r0, sl
 800c3a6:	f7fe fd19 	bl	800addc <_free_r>
 800c3aa:	e745      	b.n	800c238 <_realloc_r+0x18c>
 800c3ac:	20000440 	.word	0x20000440
 800c3b0:	68a3      	ldr	r3, [r4, #8]
 800c3b2:	6083      	str	r3, [r0, #8]
 800c3b4:	68e3      	ldr	r3, [r4, #12]
 800c3b6:	60c3      	str	r3, [r0, #12]
 800c3b8:	2a24      	cmp	r2, #36	; 0x24
 800c3ba:	bf01      	itttt	eq
 800c3bc:	6923      	ldreq	r3, [r4, #16]
 800c3be:	6103      	streq	r3, [r0, #16]
 800c3c0:	6961      	ldreq	r1, [r4, #20]
 800c3c2:	6141      	streq	r1, [r0, #20]
 800c3c4:	bf19      	ittee	ne
 800c3c6:	f104 0210 	addne.w	r2, r4, #16
 800c3ca:	f100 0310 	addne.w	r3, r0, #16
 800c3ce:	f104 0218 	addeq.w	r2, r4, #24
 800c3d2:	f100 0318 	addeq.w	r3, r0, #24
 800c3d6:	e7de      	b.n	800c396 <_realloc_r+0x2ea>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	4622      	mov	r2, r4
 800c3dc:	e7db      	b.n	800c396 <_realloc_r+0x2ea>
 800c3de:	4621      	mov	r1, r4
 800c3e0:	f7ff fe4b 	bl	800c07a <memmove>
 800c3e4:	e7dd      	b.n	800c3a2 <_realloc_r+0x2f6>
 800c3e6:	4637      	mov	r7, r6
 800c3e8:	e6c2      	b.n	800c170 <_realloc_r+0xc4>
 800c3ea:	4317      	orrs	r7, r2
 800c3ec:	f8c9 7004 	str.w	r7, [r9, #4]
 800c3f0:	685a      	ldr	r2, [r3, #4]
 800c3f2:	f042 0201 	orr.w	r2, r2, #1
 800c3f6:	605a      	str	r2, [r3, #4]
 800c3f8:	e6d6      	b.n	800c1a8 <_realloc_r+0xfc>
 800c3fa:	bf00      	nop
 800c3fc:	0000      	movs	r0, r0
	...

0800c400 <cos>:
 800c400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c402:	ec51 0b10 	vmov	r0, r1, d0
 800c406:	4a1e      	ldr	r2, [pc, #120]	; (800c480 <cos+0x80>)
 800c408:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c40c:	4293      	cmp	r3, r2
 800c40e:	dc06      	bgt.n	800c41e <cos+0x1e>
 800c410:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800c478 <cos+0x78>
 800c414:	f001 fc54 	bl	800dcc0 <__kernel_cos>
 800c418:	ec51 0b10 	vmov	r0, r1, d0
 800c41c:	e007      	b.n	800c42e <cos+0x2e>
 800c41e:	4a19      	ldr	r2, [pc, #100]	; (800c484 <cos+0x84>)
 800c420:	4293      	cmp	r3, r2
 800c422:	dd09      	ble.n	800c438 <cos+0x38>
 800c424:	ee10 2a10 	vmov	r2, s0
 800c428:	460b      	mov	r3, r1
 800c42a:	f7f3 ff2d 	bl	8000288 <__aeabi_dsub>
 800c42e:	ec41 0b10 	vmov	d0, r0, r1
 800c432:	b005      	add	sp, #20
 800c434:	f85d fb04 	ldr.w	pc, [sp], #4
 800c438:	4668      	mov	r0, sp
 800c43a:	f001 f99d 	bl	800d778 <__ieee754_rem_pio2>
 800c43e:	f000 0003 	and.w	r0, r0, #3
 800c442:	2801      	cmp	r0, #1
 800c444:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c448:	ed9d 0b00 	vldr	d0, [sp]
 800c44c:	d007      	beq.n	800c45e <cos+0x5e>
 800c44e:	2802      	cmp	r0, #2
 800c450:	d00e      	beq.n	800c470 <cos+0x70>
 800c452:	2800      	cmp	r0, #0
 800c454:	d0de      	beq.n	800c414 <cos+0x14>
 800c456:	2001      	movs	r0, #1
 800c458:	f002 f83a 	bl	800e4d0 <__kernel_sin>
 800c45c:	e7dc      	b.n	800c418 <cos+0x18>
 800c45e:	f002 f837 	bl	800e4d0 <__kernel_sin>
 800c462:	ec53 2b10 	vmov	r2, r3, d0
 800c466:	ee10 0a10 	vmov	r0, s0
 800c46a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c46e:	e7de      	b.n	800c42e <cos+0x2e>
 800c470:	f001 fc26 	bl	800dcc0 <__kernel_cos>
 800c474:	e7f5      	b.n	800c462 <cos+0x62>
 800c476:	bf00      	nop
	...
 800c480:	3fe921fb 	.word	0x3fe921fb
 800c484:	7fefffff 	.word	0x7fefffff

0800c488 <sin>:
 800c488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c48a:	ec51 0b10 	vmov	r0, r1, d0
 800c48e:	4a20      	ldr	r2, [pc, #128]	; (800c510 <sin+0x88>)
 800c490:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c494:	4293      	cmp	r3, r2
 800c496:	dc07      	bgt.n	800c4a8 <sin+0x20>
 800c498:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800c508 <sin+0x80>
 800c49c:	2000      	movs	r0, #0
 800c49e:	f002 f817 	bl	800e4d0 <__kernel_sin>
 800c4a2:	ec51 0b10 	vmov	r0, r1, d0
 800c4a6:	e007      	b.n	800c4b8 <sin+0x30>
 800c4a8:	4a1a      	ldr	r2, [pc, #104]	; (800c514 <sin+0x8c>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	dd09      	ble.n	800c4c2 <sin+0x3a>
 800c4ae:	ee10 2a10 	vmov	r2, s0
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	f7f3 fee8 	bl	8000288 <__aeabi_dsub>
 800c4b8:	ec41 0b10 	vmov	d0, r0, r1
 800c4bc:	b005      	add	sp, #20
 800c4be:	f85d fb04 	ldr.w	pc, [sp], #4
 800c4c2:	4668      	mov	r0, sp
 800c4c4:	f001 f958 	bl	800d778 <__ieee754_rem_pio2>
 800c4c8:	f000 0003 	and.w	r0, r0, #3
 800c4cc:	2801      	cmp	r0, #1
 800c4ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4d2:	ed9d 0b00 	vldr	d0, [sp]
 800c4d6:	d004      	beq.n	800c4e2 <sin+0x5a>
 800c4d8:	2802      	cmp	r0, #2
 800c4da:	d005      	beq.n	800c4e8 <sin+0x60>
 800c4dc:	b970      	cbnz	r0, 800c4fc <sin+0x74>
 800c4de:	2001      	movs	r0, #1
 800c4e0:	e7dd      	b.n	800c49e <sin+0x16>
 800c4e2:	f001 fbed 	bl	800dcc0 <__kernel_cos>
 800c4e6:	e7dc      	b.n	800c4a2 <sin+0x1a>
 800c4e8:	2001      	movs	r0, #1
 800c4ea:	f001 fff1 	bl	800e4d0 <__kernel_sin>
 800c4ee:	ec53 2b10 	vmov	r2, r3, d0
 800c4f2:	ee10 0a10 	vmov	r0, s0
 800c4f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c4fa:	e7dd      	b.n	800c4b8 <sin+0x30>
 800c4fc:	f001 fbe0 	bl	800dcc0 <__kernel_cos>
 800c500:	e7f5      	b.n	800c4ee <sin+0x66>
 800c502:	bf00      	nop
 800c504:	f3af 8000 	nop.w
	...
 800c510:	3fe921fb 	.word	0x3fe921fb
 800c514:	7fefffff 	.word	0x7fefffff

0800c518 <atan2>:
 800c518:	f000 ba2e 	b.w	800c978 <__ieee754_atan2>

0800c51c <fmod>:
 800c51c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c520:	ed2d 8b02 	vpush	{d8}
 800c524:	b08b      	sub	sp, #44	; 0x2c
 800c526:	ec55 4b10 	vmov	r4, r5, d0
 800c52a:	ec57 6b11 	vmov	r6, r7, d1
 800c52e:	f000 fb01 	bl	800cb34 <__ieee754_fmod>
 800c532:	4b2a      	ldr	r3, [pc, #168]	; (800c5dc <fmod+0xc0>)
 800c534:	eeb0 8a40 	vmov.f32	s16, s0
 800c538:	eef0 8a60 	vmov.f32	s17, s1
 800c53c:	f993 8000 	ldrsb.w	r8, [r3]
 800c540:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c544:	d030      	beq.n	800c5a8 <fmod+0x8c>
 800c546:	4632      	mov	r2, r6
 800c548:	463b      	mov	r3, r7
 800c54a:	4630      	mov	r0, r6
 800c54c:	4639      	mov	r1, r7
 800c54e:	f7f4 faed 	bl	8000b2c <__aeabi_dcmpun>
 800c552:	bb48      	cbnz	r0, 800c5a8 <fmod+0x8c>
 800c554:	4622      	mov	r2, r4
 800c556:	462b      	mov	r3, r5
 800c558:	4620      	mov	r0, r4
 800c55a:	4629      	mov	r1, r5
 800c55c:	f7f4 fae6 	bl	8000b2c <__aeabi_dcmpun>
 800c560:	4681      	mov	r9, r0
 800c562:	bb08      	cbnz	r0, 800c5a8 <fmod+0x8c>
 800c564:	2200      	movs	r2, #0
 800c566:	2300      	movs	r3, #0
 800c568:	4630      	mov	r0, r6
 800c56a:	4639      	mov	r1, r7
 800c56c:	f7f4 faac 	bl	8000ac8 <__aeabi_dcmpeq>
 800c570:	b1d0      	cbz	r0, 800c5a8 <fmod+0x8c>
 800c572:	2301      	movs	r3, #1
 800c574:	9300      	str	r3, [sp, #0]
 800c576:	4b1a      	ldr	r3, [pc, #104]	; (800c5e0 <fmod+0xc4>)
 800c578:	9301      	str	r3, [sp, #4]
 800c57a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c57e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c582:	f8cd 9020 	str.w	r9, [sp, #32]
 800c586:	f1b8 0f00 	cmp.w	r8, #0
 800c58a:	d116      	bne.n	800c5ba <fmod+0x9e>
 800c58c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c590:	4668      	mov	r0, sp
 800c592:	f002 fa91 	bl	800eab8 <matherr>
 800c596:	b1d8      	cbz	r0, 800c5d0 <fmod+0xb4>
 800c598:	9b08      	ldr	r3, [sp, #32]
 800c59a:	b11b      	cbz	r3, 800c5a4 <fmod+0x88>
 800c59c:	f7fe fbb0 	bl	800ad00 <__errno>
 800c5a0:	9b08      	ldr	r3, [sp, #32]
 800c5a2:	6003      	str	r3, [r0, #0]
 800c5a4:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c5a8:	eeb0 0a48 	vmov.f32	s0, s16
 800c5ac:	eef0 0a68 	vmov.f32	s1, s17
 800c5b0:	b00b      	add	sp, #44	; 0x2c
 800c5b2:	ecbd 8b02 	vpop	{d8}
 800c5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	2300      	movs	r3, #0
 800c5be:	4610      	mov	r0, r2
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	f7f4 f943 	bl	800084c <__aeabi_ddiv>
 800c5c6:	f1b8 0f02 	cmp.w	r8, #2
 800c5ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c5ce:	d1df      	bne.n	800c590 <fmod+0x74>
 800c5d0:	f7fe fb96 	bl	800ad00 <__errno>
 800c5d4:	2321      	movs	r3, #33	; 0x21
 800c5d6:	6003      	str	r3, [r0, #0]
 800c5d8:	e7de      	b.n	800c598 <fmod+0x7c>
 800c5da:	bf00      	nop
 800c5dc:	200009c0 	.word	0x200009c0
 800c5e0:	0800f055 	.word	0x0800f055

0800c5e4 <pow>:
 800c5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e8:	ed2d 8b04 	vpush	{d8-d9}
 800c5ec:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800c8c0 <pow+0x2dc>
 800c5f0:	b08d      	sub	sp, #52	; 0x34
 800c5f2:	ec57 6b10 	vmov	r6, r7, d0
 800c5f6:	ec55 4b11 	vmov	r4, r5, d1
 800c5fa:	f000 fbad 	bl	800cd58 <__ieee754_pow>
 800c5fe:	f999 3000 	ldrsb.w	r3, [r9]
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	3301      	adds	r3, #1
 800c606:	eeb0 8a40 	vmov.f32	s16, s0
 800c60a:	eef0 8a60 	vmov.f32	s17, s1
 800c60e:	46c8      	mov	r8, r9
 800c610:	d05f      	beq.n	800c6d2 <pow+0xee>
 800c612:	4622      	mov	r2, r4
 800c614:	462b      	mov	r3, r5
 800c616:	4620      	mov	r0, r4
 800c618:	4629      	mov	r1, r5
 800c61a:	f7f4 fa87 	bl	8000b2c <__aeabi_dcmpun>
 800c61e:	4683      	mov	fp, r0
 800c620:	2800      	cmp	r0, #0
 800c622:	d156      	bne.n	800c6d2 <pow+0xee>
 800c624:	4632      	mov	r2, r6
 800c626:	463b      	mov	r3, r7
 800c628:	4630      	mov	r0, r6
 800c62a:	4639      	mov	r1, r7
 800c62c:	f7f4 fa7e 	bl	8000b2c <__aeabi_dcmpun>
 800c630:	9001      	str	r0, [sp, #4]
 800c632:	b1e8      	cbz	r0, 800c670 <pow+0x8c>
 800c634:	2200      	movs	r2, #0
 800c636:	2300      	movs	r3, #0
 800c638:	4620      	mov	r0, r4
 800c63a:	4629      	mov	r1, r5
 800c63c:	f7f4 fa44 	bl	8000ac8 <__aeabi_dcmpeq>
 800c640:	2800      	cmp	r0, #0
 800c642:	d046      	beq.n	800c6d2 <pow+0xee>
 800c644:	2301      	movs	r3, #1
 800c646:	9302      	str	r3, [sp, #8]
 800c648:	4b96      	ldr	r3, [pc, #600]	; (800c8a4 <pow+0x2c0>)
 800c64a:	9303      	str	r3, [sp, #12]
 800c64c:	4b96      	ldr	r3, [pc, #600]	; (800c8a8 <pow+0x2c4>)
 800c64e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800c652:	2200      	movs	r2, #0
 800c654:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c658:	9b00      	ldr	r3, [sp, #0]
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c660:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c664:	d033      	beq.n	800c6ce <pow+0xea>
 800c666:	a802      	add	r0, sp, #8
 800c668:	f002 fa26 	bl	800eab8 <matherr>
 800c66c:	bb48      	cbnz	r0, 800c6c2 <pow+0xde>
 800c66e:	e05d      	b.n	800c72c <pow+0x148>
 800c670:	f04f 0a00 	mov.w	sl, #0
 800c674:	f04f 0b00 	mov.w	fp, #0
 800c678:	4652      	mov	r2, sl
 800c67a:	465b      	mov	r3, fp
 800c67c:	4630      	mov	r0, r6
 800c67e:	4639      	mov	r1, r7
 800c680:	f7f4 fa22 	bl	8000ac8 <__aeabi_dcmpeq>
 800c684:	ec4b ab19 	vmov	d9, sl, fp
 800c688:	2800      	cmp	r0, #0
 800c68a:	d054      	beq.n	800c736 <pow+0x152>
 800c68c:	4652      	mov	r2, sl
 800c68e:	465b      	mov	r3, fp
 800c690:	4620      	mov	r0, r4
 800c692:	4629      	mov	r1, r5
 800c694:	f7f4 fa18 	bl	8000ac8 <__aeabi_dcmpeq>
 800c698:	4680      	mov	r8, r0
 800c69a:	b318      	cbz	r0, 800c6e4 <pow+0x100>
 800c69c:	2301      	movs	r3, #1
 800c69e:	9302      	str	r3, [sp, #8]
 800c6a0:	4b80      	ldr	r3, [pc, #512]	; (800c8a4 <pow+0x2c0>)
 800c6a2:	9303      	str	r3, [sp, #12]
 800c6a4:	9b01      	ldr	r3, [sp, #4]
 800c6a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c6a8:	9b00      	ldr	r3, [sp, #0]
 800c6aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c6ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c6b2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d0d5      	beq.n	800c666 <pow+0x82>
 800c6ba:	4b7b      	ldr	r3, [pc, #492]	; (800c8a8 <pow+0x2c4>)
 800c6bc:	2200      	movs	r2, #0
 800c6be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6c4:	b11b      	cbz	r3, 800c6ce <pow+0xea>
 800c6c6:	f7fe fb1b 	bl	800ad00 <__errno>
 800c6ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6cc:	6003      	str	r3, [r0, #0]
 800c6ce:	ed9d 8b08 	vldr	d8, [sp, #32]
 800c6d2:	eeb0 0a48 	vmov.f32	s0, s16
 800c6d6:	eef0 0a68 	vmov.f32	s1, s17
 800c6da:	b00d      	add	sp, #52	; 0x34
 800c6dc:	ecbd 8b04 	vpop	{d8-d9}
 800c6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e4:	ec45 4b10 	vmov	d0, r4, r5
 800c6e8:	f002 f957 	bl	800e99a <finite>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	d0f0      	beq.n	800c6d2 <pow+0xee>
 800c6f0:	4652      	mov	r2, sl
 800c6f2:	465b      	mov	r3, fp
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	4629      	mov	r1, r5
 800c6f8:	f7f4 f9f0 	bl	8000adc <__aeabi_dcmplt>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d0e8      	beq.n	800c6d2 <pow+0xee>
 800c700:	2301      	movs	r3, #1
 800c702:	9302      	str	r3, [sp, #8]
 800c704:	4b67      	ldr	r3, [pc, #412]	; (800c8a4 <pow+0x2c0>)
 800c706:	9303      	str	r3, [sp, #12]
 800c708:	f999 3000 	ldrsb.w	r3, [r9]
 800c70c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800c710:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c714:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c718:	b913      	cbnz	r3, 800c720 <pow+0x13c>
 800c71a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c71e:	e7a2      	b.n	800c666 <pow+0x82>
 800c720:	4962      	ldr	r1, [pc, #392]	; (800c8ac <pow+0x2c8>)
 800c722:	2000      	movs	r0, #0
 800c724:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d19c      	bne.n	800c666 <pow+0x82>
 800c72c:	f7fe fae8 	bl	800ad00 <__errno>
 800c730:	2321      	movs	r3, #33	; 0x21
 800c732:	6003      	str	r3, [r0, #0]
 800c734:	e7c5      	b.n	800c6c2 <pow+0xde>
 800c736:	eeb0 0a48 	vmov.f32	s0, s16
 800c73a:	eef0 0a68 	vmov.f32	s1, s17
 800c73e:	f002 f92c 	bl	800e99a <finite>
 800c742:	9000      	str	r0, [sp, #0]
 800c744:	2800      	cmp	r0, #0
 800c746:	f040 8081 	bne.w	800c84c <pow+0x268>
 800c74a:	ec47 6b10 	vmov	d0, r6, r7
 800c74e:	f002 f924 	bl	800e99a <finite>
 800c752:	2800      	cmp	r0, #0
 800c754:	d07a      	beq.n	800c84c <pow+0x268>
 800c756:	ec45 4b10 	vmov	d0, r4, r5
 800c75a:	f002 f91e 	bl	800e99a <finite>
 800c75e:	2800      	cmp	r0, #0
 800c760:	d074      	beq.n	800c84c <pow+0x268>
 800c762:	ec53 2b18 	vmov	r2, r3, d8
 800c766:	ee18 0a10 	vmov	r0, s16
 800c76a:	4619      	mov	r1, r3
 800c76c:	f7f4 f9de 	bl	8000b2c <__aeabi_dcmpun>
 800c770:	f999 9000 	ldrsb.w	r9, [r9]
 800c774:	4b4b      	ldr	r3, [pc, #300]	; (800c8a4 <pow+0x2c0>)
 800c776:	b1b0      	cbz	r0, 800c7a6 <pow+0x1c2>
 800c778:	2201      	movs	r2, #1
 800c77a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c77e:	9b00      	ldr	r3, [sp, #0]
 800c780:	930a      	str	r3, [sp, #40]	; 0x28
 800c782:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c786:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c78a:	f1b9 0f00 	cmp.w	r9, #0
 800c78e:	d0c4      	beq.n	800c71a <pow+0x136>
 800c790:	4652      	mov	r2, sl
 800c792:	465b      	mov	r3, fp
 800c794:	4650      	mov	r0, sl
 800c796:	4659      	mov	r1, fp
 800c798:	f7f4 f858 	bl	800084c <__aeabi_ddiv>
 800c79c:	f1b9 0f02 	cmp.w	r9, #2
 800c7a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c7a4:	e7c1      	b.n	800c72a <pow+0x146>
 800c7a6:	2203      	movs	r2, #3
 800c7a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c7ac:	900a      	str	r0, [sp, #40]	; 0x28
 800c7ae:	4629      	mov	r1, r5
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	4b3e      	ldr	r3, [pc, #248]	; (800c8b0 <pow+0x2cc>)
 800c7b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c7ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c7be:	f7f3 ff1b 	bl	80005f8 <__aeabi_dmul>
 800c7c2:	4604      	mov	r4, r0
 800c7c4:	460d      	mov	r5, r1
 800c7c6:	f1b9 0f00 	cmp.w	r9, #0
 800c7ca:	d124      	bne.n	800c816 <pow+0x232>
 800c7cc:	4b39      	ldr	r3, [pc, #228]	; (800c8b4 <pow+0x2d0>)
 800c7ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c7d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	4652      	mov	r2, sl
 800c7da:	465b      	mov	r3, fp
 800c7dc:	4639      	mov	r1, r7
 800c7de:	f7f4 f97d 	bl	8000adc <__aeabi_dcmplt>
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	d056      	beq.n	800c894 <pow+0x2b0>
 800c7e6:	ec45 4b10 	vmov	d0, r4, r5
 800c7ea:	f002 f971 	bl	800ead0 <rint>
 800c7ee:	4622      	mov	r2, r4
 800c7f0:	462b      	mov	r3, r5
 800c7f2:	ec51 0b10 	vmov	r0, r1, d0
 800c7f6:	f7f4 f967 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7fa:	b920      	cbnz	r0, 800c806 <pow+0x222>
 800c7fc:	4b2e      	ldr	r3, [pc, #184]	; (800c8b8 <pow+0x2d4>)
 800c7fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c802:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c806:	f998 3000 	ldrsb.w	r3, [r8]
 800c80a:	2b02      	cmp	r3, #2
 800c80c:	d142      	bne.n	800c894 <pow+0x2b0>
 800c80e:	f7fe fa77 	bl	800ad00 <__errno>
 800c812:	2322      	movs	r3, #34	; 0x22
 800c814:	e78d      	b.n	800c732 <pow+0x14e>
 800c816:	4b29      	ldr	r3, [pc, #164]	; (800c8bc <pow+0x2d8>)
 800c818:	2200      	movs	r2, #0
 800c81a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c81e:	4630      	mov	r0, r6
 800c820:	4652      	mov	r2, sl
 800c822:	465b      	mov	r3, fp
 800c824:	4639      	mov	r1, r7
 800c826:	f7f4 f959 	bl	8000adc <__aeabi_dcmplt>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d0eb      	beq.n	800c806 <pow+0x222>
 800c82e:	ec45 4b10 	vmov	d0, r4, r5
 800c832:	f002 f94d 	bl	800ead0 <rint>
 800c836:	4622      	mov	r2, r4
 800c838:	462b      	mov	r3, r5
 800c83a:	ec51 0b10 	vmov	r0, r1, d0
 800c83e:	f7f4 f943 	bl	8000ac8 <__aeabi_dcmpeq>
 800c842:	2800      	cmp	r0, #0
 800c844:	d1df      	bne.n	800c806 <pow+0x222>
 800c846:	2200      	movs	r2, #0
 800c848:	4b18      	ldr	r3, [pc, #96]	; (800c8ac <pow+0x2c8>)
 800c84a:	e7da      	b.n	800c802 <pow+0x21e>
 800c84c:	2200      	movs	r2, #0
 800c84e:	2300      	movs	r3, #0
 800c850:	ec51 0b18 	vmov	r0, r1, d8
 800c854:	f7f4 f938 	bl	8000ac8 <__aeabi_dcmpeq>
 800c858:	2800      	cmp	r0, #0
 800c85a:	f43f af3a 	beq.w	800c6d2 <pow+0xee>
 800c85e:	ec47 6b10 	vmov	d0, r6, r7
 800c862:	f002 f89a 	bl	800e99a <finite>
 800c866:	2800      	cmp	r0, #0
 800c868:	f43f af33 	beq.w	800c6d2 <pow+0xee>
 800c86c:	ec45 4b10 	vmov	d0, r4, r5
 800c870:	f002 f893 	bl	800e99a <finite>
 800c874:	2800      	cmp	r0, #0
 800c876:	f43f af2c 	beq.w	800c6d2 <pow+0xee>
 800c87a:	2304      	movs	r3, #4
 800c87c:	9302      	str	r3, [sp, #8]
 800c87e:	4b09      	ldr	r3, [pc, #36]	; (800c8a4 <pow+0x2c0>)
 800c880:	9303      	str	r3, [sp, #12]
 800c882:	2300      	movs	r3, #0
 800c884:	930a      	str	r3, [sp, #40]	; 0x28
 800c886:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c88a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c88e:	ed8d 9b08 	vstr	d9, [sp, #32]
 800c892:	e7b8      	b.n	800c806 <pow+0x222>
 800c894:	a802      	add	r0, sp, #8
 800c896:	f002 f90f 	bl	800eab8 <matherr>
 800c89a:	2800      	cmp	r0, #0
 800c89c:	f47f af11 	bne.w	800c6c2 <pow+0xde>
 800c8a0:	e7b5      	b.n	800c80e <pow+0x22a>
 800c8a2:	bf00      	nop
 800c8a4:	0800f05a 	.word	0x0800f05a
 800c8a8:	3ff00000 	.word	0x3ff00000
 800c8ac:	fff00000 	.word	0xfff00000
 800c8b0:	3fe00000 	.word	0x3fe00000
 800c8b4:	47efffff 	.word	0x47efffff
 800c8b8:	c7efffff 	.word	0xc7efffff
 800c8bc:	7ff00000 	.word	0x7ff00000
 800c8c0:	200009c0 	.word	0x200009c0

0800c8c4 <sqrt>:
 800c8c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8c8:	ed2d 8b02 	vpush	{d8}
 800c8cc:	b08b      	sub	sp, #44	; 0x2c
 800c8ce:	ec55 4b10 	vmov	r4, r5, d0
 800c8d2:	f001 f943 	bl	800db5c <__ieee754_sqrt>
 800c8d6:	4b26      	ldr	r3, [pc, #152]	; (800c970 <sqrt+0xac>)
 800c8d8:	eeb0 8a40 	vmov.f32	s16, s0
 800c8dc:	eef0 8a60 	vmov.f32	s17, s1
 800c8e0:	f993 6000 	ldrsb.w	r6, [r3]
 800c8e4:	1c73      	adds	r3, r6, #1
 800c8e6:	d02a      	beq.n	800c93e <sqrt+0x7a>
 800c8e8:	4622      	mov	r2, r4
 800c8ea:	462b      	mov	r3, r5
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	4629      	mov	r1, r5
 800c8f0:	f7f4 f91c 	bl	8000b2c <__aeabi_dcmpun>
 800c8f4:	4607      	mov	r7, r0
 800c8f6:	bb10      	cbnz	r0, 800c93e <sqrt+0x7a>
 800c8f8:	f04f 0800 	mov.w	r8, #0
 800c8fc:	f04f 0900 	mov.w	r9, #0
 800c900:	4642      	mov	r2, r8
 800c902:	464b      	mov	r3, r9
 800c904:	4620      	mov	r0, r4
 800c906:	4629      	mov	r1, r5
 800c908:	f7f4 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800c90c:	b1b8      	cbz	r0, 800c93e <sqrt+0x7a>
 800c90e:	2301      	movs	r3, #1
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	4b18      	ldr	r3, [pc, #96]	; (800c974 <sqrt+0xb0>)
 800c914:	9301      	str	r3, [sp, #4]
 800c916:	9708      	str	r7, [sp, #32]
 800c918:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c91c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c920:	b9b6      	cbnz	r6, 800c950 <sqrt+0x8c>
 800c922:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c926:	4668      	mov	r0, sp
 800c928:	f002 f8c6 	bl	800eab8 <matherr>
 800c92c:	b1d0      	cbz	r0, 800c964 <sqrt+0xa0>
 800c92e:	9b08      	ldr	r3, [sp, #32]
 800c930:	b11b      	cbz	r3, 800c93a <sqrt+0x76>
 800c932:	f7fe f9e5 	bl	800ad00 <__errno>
 800c936:	9b08      	ldr	r3, [sp, #32]
 800c938:	6003      	str	r3, [r0, #0]
 800c93a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c93e:	eeb0 0a48 	vmov.f32	s0, s16
 800c942:	eef0 0a68 	vmov.f32	s1, s17
 800c946:	b00b      	add	sp, #44	; 0x2c
 800c948:	ecbd 8b02 	vpop	{d8}
 800c94c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c950:	4642      	mov	r2, r8
 800c952:	464b      	mov	r3, r9
 800c954:	4640      	mov	r0, r8
 800c956:	4649      	mov	r1, r9
 800c958:	f7f3 ff78 	bl	800084c <__aeabi_ddiv>
 800c95c:	2e02      	cmp	r6, #2
 800c95e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c962:	d1e0      	bne.n	800c926 <sqrt+0x62>
 800c964:	f7fe f9cc 	bl	800ad00 <__errno>
 800c968:	2321      	movs	r3, #33	; 0x21
 800c96a:	6003      	str	r3, [r0, #0]
 800c96c:	e7df      	b.n	800c92e <sqrt+0x6a>
 800c96e:	bf00      	nop
 800c970:	200009c0 	.word	0x200009c0
 800c974:	0800f05e 	.word	0x0800f05e

0800c978 <__ieee754_atan2>:
 800c978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c97c:	ec57 6b11 	vmov	r6, r7, d1
 800c980:	4273      	negs	r3, r6
 800c982:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c986:	4333      	orrs	r3, r6
 800c988:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800cb30 <__ieee754_atan2+0x1b8>
 800c98c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c990:	4573      	cmp	r3, lr
 800c992:	ec51 0b10 	vmov	r0, r1, d0
 800c996:	ee11 8a10 	vmov	r8, s2
 800c99a:	d80a      	bhi.n	800c9b2 <__ieee754_atan2+0x3a>
 800c99c:	4244      	negs	r4, r0
 800c99e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c9a2:	4304      	orrs	r4, r0
 800c9a4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c9a8:	4574      	cmp	r4, lr
 800c9aa:	468c      	mov	ip, r1
 800c9ac:	ee10 9a10 	vmov	r9, s0
 800c9b0:	d907      	bls.n	800c9c2 <__ieee754_atan2+0x4a>
 800c9b2:	4632      	mov	r2, r6
 800c9b4:	463b      	mov	r3, r7
 800c9b6:	f7f3 fc69 	bl	800028c <__adddf3>
 800c9ba:	ec41 0b10 	vmov	d0, r0, r1
 800c9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9c2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c9c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c9ca:	4334      	orrs	r4, r6
 800c9cc:	d103      	bne.n	800c9d6 <__ieee754_atan2+0x5e>
 800c9ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9d2:	f001 be39 	b.w	800e648 <atan>
 800c9d6:	17bc      	asrs	r4, r7, #30
 800c9d8:	f004 0402 	and.w	r4, r4, #2
 800c9dc:	ea53 0909 	orrs.w	r9, r3, r9
 800c9e0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c9e4:	d107      	bne.n	800c9f6 <__ieee754_atan2+0x7e>
 800c9e6:	2c02      	cmp	r4, #2
 800c9e8:	d073      	beq.n	800cad2 <__ieee754_atan2+0x15a>
 800c9ea:	2c03      	cmp	r4, #3
 800c9ec:	d1e5      	bne.n	800c9ba <__ieee754_atan2+0x42>
 800c9ee:	a13e      	add	r1, pc, #248	; (adr r1, 800cae8 <__ieee754_atan2+0x170>)
 800c9f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9f4:	e7e1      	b.n	800c9ba <__ieee754_atan2+0x42>
 800c9f6:	ea52 0808 	orrs.w	r8, r2, r8
 800c9fa:	d106      	bne.n	800ca0a <__ieee754_atan2+0x92>
 800c9fc:	f1bc 0f00 	cmp.w	ip, #0
 800ca00:	da6b      	bge.n	800cada <__ieee754_atan2+0x162>
 800ca02:	a13b      	add	r1, pc, #236	; (adr r1, 800caf0 <__ieee754_atan2+0x178>)
 800ca04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca08:	e7d7      	b.n	800c9ba <__ieee754_atan2+0x42>
 800ca0a:	4572      	cmp	r2, lr
 800ca0c:	d120      	bne.n	800ca50 <__ieee754_atan2+0xd8>
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d111      	bne.n	800ca36 <__ieee754_atan2+0xbe>
 800ca12:	2c02      	cmp	r4, #2
 800ca14:	d007      	beq.n	800ca26 <__ieee754_atan2+0xae>
 800ca16:	2c03      	cmp	r4, #3
 800ca18:	d009      	beq.n	800ca2e <__ieee754_atan2+0xb6>
 800ca1a:	2c01      	cmp	r4, #1
 800ca1c:	d155      	bne.n	800caca <__ieee754_atan2+0x152>
 800ca1e:	a136      	add	r1, pc, #216	; (adr r1, 800caf8 <__ieee754_atan2+0x180>)
 800ca20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca24:	e7c9      	b.n	800c9ba <__ieee754_atan2+0x42>
 800ca26:	a136      	add	r1, pc, #216	; (adr r1, 800cb00 <__ieee754_atan2+0x188>)
 800ca28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca2c:	e7c5      	b.n	800c9ba <__ieee754_atan2+0x42>
 800ca2e:	a136      	add	r1, pc, #216	; (adr r1, 800cb08 <__ieee754_atan2+0x190>)
 800ca30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca34:	e7c1      	b.n	800c9ba <__ieee754_atan2+0x42>
 800ca36:	2c02      	cmp	r4, #2
 800ca38:	d04b      	beq.n	800cad2 <__ieee754_atan2+0x15a>
 800ca3a:	2c03      	cmp	r4, #3
 800ca3c:	d0d7      	beq.n	800c9ee <__ieee754_atan2+0x76>
 800ca3e:	2c01      	cmp	r4, #1
 800ca40:	f04f 0000 	mov.w	r0, #0
 800ca44:	d102      	bne.n	800ca4c <__ieee754_atan2+0xd4>
 800ca46:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ca4a:	e7b6      	b.n	800c9ba <__ieee754_atan2+0x42>
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	e7b4      	b.n	800c9ba <__ieee754_atan2+0x42>
 800ca50:	4573      	cmp	r3, lr
 800ca52:	d0d3      	beq.n	800c9fc <__ieee754_atan2+0x84>
 800ca54:	1a9b      	subs	r3, r3, r2
 800ca56:	151b      	asrs	r3, r3, #20
 800ca58:	2b3c      	cmp	r3, #60	; 0x3c
 800ca5a:	dc1e      	bgt.n	800ca9a <__ieee754_atan2+0x122>
 800ca5c:	2f00      	cmp	r7, #0
 800ca5e:	da01      	bge.n	800ca64 <__ieee754_atan2+0xec>
 800ca60:	333c      	adds	r3, #60	; 0x3c
 800ca62:	db1e      	blt.n	800caa2 <__ieee754_atan2+0x12a>
 800ca64:	4632      	mov	r2, r6
 800ca66:	463b      	mov	r3, r7
 800ca68:	f7f3 fef0 	bl	800084c <__aeabi_ddiv>
 800ca6c:	ec41 0b10 	vmov	d0, r0, r1
 800ca70:	f001 ff8a 	bl	800e988 <fabs>
 800ca74:	f001 fde8 	bl	800e648 <atan>
 800ca78:	ec51 0b10 	vmov	r0, r1, d0
 800ca7c:	2c01      	cmp	r4, #1
 800ca7e:	d013      	beq.n	800caa8 <__ieee754_atan2+0x130>
 800ca80:	2c02      	cmp	r4, #2
 800ca82:	d015      	beq.n	800cab0 <__ieee754_atan2+0x138>
 800ca84:	2c00      	cmp	r4, #0
 800ca86:	d098      	beq.n	800c9ba <__ieee754_atan2+0x42>
 800ca88:	a321      	add	r3, pc, #132	; (adr r3, 800cb10 <__ieee754_atan2+0x198>)
 800ca8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8e:	f7f3 fbfb 	bl	8000288 <__aeabi_dsub>
 800ca92:	a321      	add	r3, pc, #132	; (adr r3, 800cb18 <__ieee754_atan2+0x1a0>)
 800ca94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca98:	e014      	b.n	800cac4 <__ieee754_atan2+0x14c>
 800ca9a:	a121      	add	r1, pc, #132	; (adr r1, 800cb20 <__ieee754_atan2+0x1a8>)
 800ca9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800caa0:	e7ec      	b.n	800ca7c <__ieee754_atan2+0x104>
 800caa2:	2000      	movs	r0, #0
 800caa4:	2100      	movs	r1, #0
 800caa6:	e7e9      	b.n	800ca7c <__ieee754_atan2+0x104>
 800caa8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800caac:	4619      	mov	r1, r3
 800caae:	e784      	b.n	800c9ba <__ieee754_atan2+0x42>
 800cab0:	a317      	add	r3, pc, #92	; (adr r3, 800cb10 <__ieee754_atan2+0x198>)
 800cab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab6:	f7f3 fbe7 	bl	8000288 <__aeabi_dsub>
 800caba:	4602      	mov	r2, r0
 800cabc:	460b      	mov	r3, r1
 800cabe:	a116      	add	r1, pc, #88	; (adr r1, 800cb18 <__ieee754_atan2+0x1a0>)
 800cac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cac4:	f7f3 fbe0 	bl	8000288 <__aeabi_dsub>
 800cac8:	e777      	b.n	800c9ba <__ieee754_atan2+0x42>
 800caca:	a117      	add	r1, pc, #92	; (adr r1, 800cb28 <__ieee754_atan2+0x1b0>)
 800cacc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cad0:	e773      	b.n	800c9ba <__ieee754_atan2+0x42>
 800cad2:	a111      	add	r1, pc, #68	; (adr r1, 800cb18 <__ieee754_atan2+0x1a0>)
 800cad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cad8:	e76f      	b.n	800c9ba <__ieee754_atan2+0x42>
 800cada:	a111      	add	r1, pc, #68	; (adr r1, 800cb20 <__ieee754_atan2+0x1a8>)
 800cadc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cae0:	e76b      	b.n	800c9ba <__ieee754_atan2+0x42>
 800cae2:	bf00      	nop
 800cae4:	f3af 8000 	nop.w
 800cae8:	54442d18 	.word	0x54442d18
 800caec:	c00921fb 	.word	0xc00921fb
 800caf0:	54442d18 	.word	0x54442d18
 800caf4:	bff921fb 	.word	0xbff921fb
 800caf8:	54442d18 	.word	0x54442d18
 800cafc:	bfe921fb 	.word	0xbfe921fb
 800cb00:	7f3321d2 	.word	0x7f3321d2
 800cb04:	4002d97c 	.word	0x4002d97c
 800cb08:	7f3321d2 	.word	0x7f3321d2
 800cb0c:	c002d97c 	.word	0xc002d97c
 800cb10:	33145c07 	.word	0x33145c07
 800cb14:	3ca1a626 	.word	0x3ca1a626
 800cb18:	54442d18 	.word	0x54442d18
 800cb1c:	400921fb 	.word	0x400921fb
 800cb20:	54442d18 	.word	0x54442d18
 800cb24:	3ff921fb 	.word	0x3ff921fb
 800cb28:	54442d18 	.word	0x54442d18
 800cb2c:	3fe921fb 	.word	0x3fe921fb
 800cb30:	7ff00000 	.word	0x7ff00000

0800cb34 <__ieee754_fmod>:
 800cb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb38:	ec53 2b11 	vmov	r2, r3, d1
 800cb3c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800cb40:	ea5e 0402 	orrs.w	r4, lr, r2
 800cb44:	ec51 0b10 	vmov	r0, r1, d0
 800cb48:	461e      	mov	r6, r3
 800cb4a:	ee11 5a10 	vmov	r5, s2
 800cb4e:	4694      	mov	ip, r2
 800cb50:	d00c      	beq.n	800cb6c <__ieee754_fmod+0x38>
 800cb52:	4c7a      	ldr	r4, [pc, #488]	; (800cd3c <__ieee754_fmod+0x208>)
 800cb54:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800cb58:	45a0      	cmp	r8, r4
 800cb5a:	4689      	mov	r9, r1
 800cb5c:	dc06      	bgt.n	800cb6c <__ieee754_fmod+0x38>
 800cb5e:	4254      	negs	r4, r2
 800cb60:	4314      	orrs	r4, r2
 800cb62:	4f77      	ldr	r7, [pc, #476]	; (800cd40 <__ieee754_fmod+0x20c>)
 800cb64:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800cb68:	42bc      	cmp	r4, r7
 800cb6a:	d909      	bls.n	800cb80 <__ieee754_fmod+0x4c>
 800cb6c:	f7f3 fd44 	bl	80005f8 <__aeabi_dmul>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	f7f3 fe6a 	bl	800084c <__aeabi_ddiv>
 800cb78:	ec41 0b10 	vmov	d0, r0, r1
 800cb7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb80:	45f0      	cmp	r8, lr
 800cb82:	ee10 2a10 	vmov	r2, s0
 800cb86:	4607      	mov	r7, r0
 800cb88:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800cb8c:	dc0a      	bgt.n	800cba4 <__ieee754_fmod+0x70>
 800cb8e:	dbf3      	blt.n	800cb78 <__ieee754_fmod+0x44>
 800cb90:	42a8      	cmp	r0, r5
 800cb92:	d3f1      	bcc.n	800cb78 <__ieee754_fmod+0x44>
 800cb94:	d106      	bne.n	800cba4 <__ieee754_fmod+0x70>
 800cb96:	496b      	ldr	r1, [pc, #428]	; (800cd44 <__ieee754_fmod+0x210>)
 800cb98:	0fe4      	lsrs	r4, r4, #31
 800cb9a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800cb9e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800cba2:	e7e9      	b.n	800cb78 <__ieee754_fmod+0x44>
 800cba4:	4b68      	ldr	r3, [pc, #416]	; (800cd48 <__ieee754_fmod+0x214>)
 800cba6:	4598      	cmp	r8, r3
 800cba8:	dc49      	bgt.n	800cc3e <__ieee754_fmod+0x10a>
 800cbaa:	f1b8 0f00 	cmp.w	r8, #0
 800cbae:	d13d      	bne.n	800cc2c <__ieee754_fmod+0xf8>
 800cbb0:	4866      	ldr	r0, [pc, #408]	; (800cd4c <__ieee754_fmod+0x218>)
 800cbb2:	4611      	mov	r1, r2
 800cbb4:	2900      	cmp	r1, #0
 800cbb6:	dc36      	bgt.n	800cc26 <__ieee754_fmod+0xf2>
 800cbb8:	459e      	cmp	lr, r3
 800cbba:	dc51      	bgt.n	800cc60 <__ieee754_fmod+0x12c>
 800cbbc:	f1be 0f00 	cmp.w	lr, #0
 800cbc0:	d145      	bne.n	800cc4e <__ieee754_fmod+0x11a>
 800cbc2:	4b62      	ldr	r3, [pc, #392]	; (800cd4c <__ieee754_fmod+0x218>)
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	2900      	cmp	r1, #0
 800cbc8:	dc3e      	bgt.n	800cc48 <__ieee754_fmod+0x114>
 800cbca:	4961      	ldr	r1, [pc, #388]	; (800cd50 <__ieee754_fmod+0x21c>)
 800cbcc:	4288      	cmp	r0, r1
 800cbce:	db4c      	blt.n	800cc6a <__ieee754_fmod+0x136>
 800cbd0:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800cbd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cbd8:	4a5d      	ldr	r2, [pc, #372]	; (800cd50 <__ieee754_fmod+0x21c>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	db59      	blt.n	800cc92 <__ieee754_fmod+0x15e>
 800cbde:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800cbe2:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800cbe6:	1ac0      	subs	r0, r0, r3
 800cbe8:	1b8a      	subs	r2, r1, r6
 800cbea:	eba7 050c 	sub.w	r5, r7, ip
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	d166      	bne.n	800ccc0 <__ieee754_fmod+0x18c>
 800cbf2:	4567      	cmp	r7, ip
 800cbf4:	bf38      	it	cc
 800cbf6:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800cbfa:	2a00      	cmp	r2, #0
 800cbfc:	bfbc      	itt	lt
 800cbfe:	463d      	movlt	r5, r7
 800cc00:	460a      	movlt	r2, r1
 800cc02:	ea52 0105 	orrs.w	r1, r2, r5
 800cc06:	d0c6      	beq.n	800cb96 <__ieee754_fmod+0x62>
 800cc08:	494f      	ldr	r1, [pc, #316]	; (800cd48 <__ieee754_fmod+0x214>)
 800cc0a:	428a      	cmp	r2, r1
 800cc0c:	dd6d      	ble.n	800ccea <__ieee754_fmod+0x1b6>
 800cc0e:	4950      	ldr	r1, [pc, #320]	; (800cd50 <__ieee754_fmod+0x21c>)
 800cc10:	428b      	cmp	r3, r1
 800cc12:	db70      	blt.n	800ccf6 <__ieee754_fmod+0x1c2>
 800cc14:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800cc18:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800cc1c:	4314      	orrs	r4, r2
 800cc1e:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 800cc22:	4628      	mov	r0, r5
 800cc24:	e7a8      	b.n	800cb78 <__ieee754_fmod+0x44>
 800cc26:	3801      	subs	r0, #1
 800cc28:	0049      	lsls	r1, r1, #1
 800cc2a:	e7c3      	b.n	800cbb4 <__ieee754_fmod+0x80>
 800cc2c:	4848      	ldr	r0, [pc, #288]	; (800cd50 <__ieee754_fmod+0x21c>)
 800cc2e:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800cc32:	0049      	lsls	r1, r1, #1
 800cc34:	2900      	cmp	r1, #0
 800cc36:	f100 30ff 	add.w	r0, r0, #4294967295
 800cc3a:	dcfa      	bgt.n	800cc32 <__ieee754_fmod+0xfe>
 800cc3c:	e7bc      	b.n	800cbb8 <__ieee754_fmod+0x84>
 800cc3e:	ea4f 5028 	mov.w	r0, r8, asr #20
 800cc42:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800cc46:	e7b7      	b.n	800cbb8 <__ieee754_fmod+0x84>
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	0049      	lsls	r1, r1, #1
 800cc4c:	e7bb      	b.n	800cbc6 <__ieee754_fmod+0x92>
 800cc4e:	4b40      	ldr	r3, [pc, #256]	; (800cd50 <__ieee754_fmod+0x21c>)
 800cc50:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 800cc54:	0049      	lsls	r1, r1, #1
 800cc56:	2900      	cmp	r1, #0
 800cc58:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc5c:	dcfa      	bgt.n	800cc54 <__ieee754_fmod+0x120>
 800cc5e:	e7b4      	b.n	800cbca <__ieee754_fmod+0x96>
 800cc60:	ea4f 532e 	mov.w	r3, lr, asr #20
 800cc64:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cc68:	e7af      	b.n	800cbca <__ieee754_fmod+0x96>
 800cc6a:	1a0f      	subs	r7, r1, r0
 800cc6c:	2f1f      	cmp	r7, #31
 800cc6e:	dc0a      	bgt.n	800cc86 <__ieee754_fmod+0x152>
 800cc70:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800cc74:	fa08 f807 	lsl.w	r8, r8, r7
 800cc78:	fa22 f101 	lsr.w	r1, r2, r1
 800cc7c:	ea41 0108 	orr.w	r1, r1, r8
 800cc80:	fa02 f707 	lsl.w	r7, r2, r7
 800cc84:	e7a8      	b.n	800cbd8 <__ieee754_fmod+0xa4>
 800cc86:	4933      	ldr	r1, [pc, #204]	; (800cd54 <__ieee754_fmod+0x220>)
 800cc88:	1a09      	subs	r1, r1, r0
 800cc8a:	fa02 f101 	lsl.w	r1, r2, r1
 800cc8e:	2700      	movs	r7, #0
 800cc90:	e7a2      	b.n	800cbd8 <__ieee754_fmod+0xa4>
 800cc92:	eba2 0c03 	sub.w	ip, r2, r3
 800cc96:	f1bc 0f1f 	cmp.w	ip, #31
 800cc9a:	dc0a      	bgt.n	800ccb2 <__ieee754_fmod+0x17e>
 800cc9c:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800cca0:	fa0e fe0c 	lsl.w	lr, lr, ip
 800cca4:	fa25 f606 	lsr.w	r6, r5, r6
 800cca8:	ea46 060e 	orr.w	r6, r6, lr
 800ccac:	fa05 fc0c 	lsl.w	ip, r5, ip
 800ccb0:	e799      	b.n	800cbe6 <__ieee754_fmod+0xb2>
 800ccb2:	4e28      	ldr	r6, [pc, #160]	; (800cd54 <__ieee754_fmod+0x220>)
 800ccb4:	1af6      	subs	r6, r6, r3
 800ccb6:	fa05 f606 	lsl.w	r6, r5, r6
 800ccba:	f04f 0c00 	mov.w	ip, #0
 800ccbe:	e792      	b.n	800cbe6 <__ieee754_fmod+0xb2>
 800ccc0:	4567      	cmp	r7, ip
 800ccc2:	bf38      	it	cc
 800ccc4:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800ccc8:	2a00      	cmp	r2, #0
 800ccca:	da05      	bge.n	800ccd8 <__ieee754_fmod+0x1a4>
 800cccc:	0ffa      	lsrs	r2, r7, #31
 800ccce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ccd2:	007f      	lsls	r7, r7, #1
 800ccd4:	3801      	subs	r0, #1
 800ccd6:	e787      	b.n	800cbe8 <__ieee754_fmod+0xb4>
 800ccd8:	ea52 0105 	orrs.w	r1, r2, r5
 800ccdc:	f43f af5b 	beq.w	800cb96 <__ieee754_fmod+0x62>
 800cce0:	0fe9      	lsrs	r1, r5, #31
 800cce2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800cce6:	006f      	lsls	r7, r5, #1
 800cce8:	e7f4      	b.n	800ccd4 <__ieee754_fmod+0x1a0>
 800ccea:	0fe8      	lsrs	r0, r5, #31
 800ccec:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800ccf0:	006d      	lsls	r5, r5, #1
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	e789      	b.n	800cc0a <__ieee754_fmod+0xd6>
 800ccf6:	1ac9      	subs	r1, r1, r3
 800ccf8:	2914      	cmp	r1, #20
 800ccfa:	dc0a      	bgt.n	800cd12 <__ieee754_fmod+0x1de>
 800ccfc:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800cd00:	fa02 f303 	lsl.w	r3, r2, r3
 800cd04:	40cd      	lsrs	r5, r1
 800cd06:	432b      	orrs	r3, r5
 800cd08:	410a      	asrs	r2, r1
 800cd0a:	ea42 0104 	orr.w	r1, r2, r4
 800cd0e:	4618      	mov	r0, r3
 800cd10:	e732      	b.n	800cb78 <__ieee754_fmod+0x44>
 800cd12:	291f      	cmp	r1, #31
 800cd14:	dc07      	bgt.n	800cd26 <__ieee754_fmod+0x1f2>
 800cd16:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800cd1a:	40cd      	lsrs	r5, r1
 800cd1c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd20:	432b      	orrs	r3, r5
 800cd22:	4622      	mov	r2, r4
 800cd24:	e7f1      	b.n	800cd0a <__ieee754_fmod+0x1d6>
 800cd26:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800cd2a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800cd2e:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800cd32:	33e2      	adds	r3, #226	; 0xe2
 800cd34:	fa42 f303 	asr.w	r3, r2, r3
 800cd38:	e7f3      	b.n	800cd22 <__ieee754_fmod+0x1ee>
 800cd3a:	bf00      	nop
 800cd3c:	7fefffff 	.word	0x7fefffff
 800cd40:	7ff00000 	.word	0x7ff00000
 800cd44:	0800f068 	.word	0x0800f068
 800cd48:	000fffff 	.word	0x000fffff
 800cd4c:	fffffbed 	.word	0xfffffbed
 800cd50:	fffffc02 	.word	0xfffffc02
 800cd54:	fffffbe2 	.word	0xfffffbe2

0800cd58 <__ieee754_pow>:
 800cd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5c:	b091      	sub	sp, #68	; 0x44
 800cd5e:	ed8d 1b00 	vstr	d1, [sp]
 800cd62:	e9dd 2900 	ldrd	r2, r9, [sp]
 800cd66:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800cd6a:	ea58 0302 	orrs.w	r3, r8, r2
 800cd6e:	ec57 6b10 	vmov	r6, r7, d0
 800cd72:	f000 84be 	beq.w	800d6f2 <__ieee754_pow+0x99a>
 800cd76:	4b7a      	ldr	r3, [pc, #488]	; (800cf60 <__ieee754_pow+0x208>)
 800cd78:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800cd7c:	429c      	cmp	r4, r3
 800cd7e:	463d      	mov	r5, r7
 800cd80:	ee10 aa10 	vmov	sl, s0
 800cd84:	dc09      	bgt.n	800cd9a <__ieee754_pow+0x42>
 800cd86:	d103      	bne.n	800cd90 <__ieee754_pow+0x38>
 800cd88:	b93e      	cbnz	r6, 800cd9a <__ieee754_pow+0x42>
 800cd8a:	45a0      	cmp	r8, r4
 800cd8c:	dc0d      	bgt.n	800cdaa <__ieee754_pow+0x52>
 800cd8e:	e001      	b.n	800cd94 <__ieee754_pow+0x3c>
 800cd90:	4598      	cmp	r8, r3
 800cd92:	dc02      	bgt.n	800cd9a <__ieee754_pow+0x42>
 800cd94:	4598      	cmp	r8, r3
 800cd96:	d10e      	bne.n	800cdb6 <__ieee754_pow+0x5e>
 800cd98:	b16a      	cbz	r2, 800cdb6 <__ieee754_pow+0x5e>
 800cd9a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cd9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cda2:	ea54 030a 	orrs.w	r3, r4, sl
 800cda6:	f000 84a4 	beq.w	800d6f2 <__ieee754_pow+0x99a>
 800cdaa:	486e      	ldr	r0, [pc, #440]	; (800cf64 <__ieee754_pow+0x20c>)
 800cdac:	b011      	add	sp, #68	; 0x44
 800cdae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb2:	f001 be85 	b.w	800eac0 <nan>
 800cdb6:	2d00      	cmp	r5, #0
 800cdb8:	da53      	bge.n	800ce62 <__ieee754_pow+0x10a>
 800cdba:	4b6b      	ldr	r3, [pc, #428]	; (800cf68 <__ieee754_pow+0x210>)
 800cdbc:	4598      	cmp	r8, r3
 800cdbe:	dc4d      	bgt.n	800ce5c <__ieee754_pow+0x104>
 800cdc0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cdc4:	4598      	cmp	r8, r3
 800cdc6:	dd4c      	ble.n	800ce62 <__ieee754_pow+0x10a>
 800cdc8:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cdcc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cdd0:	2b14      	cmp	r3, #20
 800cdd2:	dd26      	ble.n	800ce22 <__ieee754_pow+0xca>
 800cdd4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cdd8:	fa22 f103 	lsr.w	r1, r2, r3
 800cddc:	fa01 f303 	lsl.w	r3, r1, r3
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d13e      	bne.n	800ce62 <__ieee754_pow+0x10a>
 800cde4:	f001 0101 	and.w	r1, r1, #1
 800cde8:	f1c1 0b02 	rsb	fp, r1, #2
 800cdec:	2a00      	cmp	r2, #0
 800cdee:	d15b      	bne.n	800cea8 <__ieee754_pow+0x150>
 800cdf0:	4b5b      	ldr	r3, [pc, #364]	; (800cf60 <__ieee754_pow+0x208>)
 800cdf2:	4598      	cmp	r8, r3
 800cdf4:	d124      	bne.n	800ce40 <__ieee754_pow+0xe8>
 800cdf6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cdfa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cdfe:	ea53 030a 	orrs.w	r3, r3, sl
 800ce02:	f000 8476 	beq.w	800d6f2 <__ieee754_pow+0x99a>
 800ce06:	4b59      	ldr	r3, [pc, #356]	; (800cf6c <__ieee754_pow+0x214>)
 800ce08:	429c      	cmp	r4, r3
 800ce0a:	dd2d      	ble.n	800ce68 <__ieee754_pow+0x110>
 800ce0c:	f1b9 0f00 	cmp.w	r9, #0
 800ce10:	f280 8473 	bge.w	800d6fa <__ieee754_pow+0x9a2>
 800ce14:	2000      	movs	r0, #0
 800ce16:	2100      	movs	r1, #0
 800ce18:	ec41 0b10 	vmov	d0, r0, r1
 800ce1c:	b011      	add	sp, #68	; 0x44
 800ce1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce22:	2a00      	cmp	r2, #0
 800ce24:	d13e      	bne.n	800cea4 <__ieee754_pow+0x14c>
 800ce26:	f1c3 0314 	rsb	r3, r3, #20
 800ce2a:	fa48 f103 	asr.w	r1, r8, r3
 800ce2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce32:	4543      	cmp	r3, r8
 800ce34:	f040 8469 	bne.w	800d70a <__ieee754_pow+0x9b2>
 800ce38:	f001 0101 	and.w	r1, r1, #1
 800ce3c:	f1c1 0b02 	rsb	fp, r1, #2
 800ce40:	4b4b      	ldr	r3, [pc, #300]	; (800cf70 <__ieee754_pow+0x218>)
 800ce42:	4598      	cmp	r8, r3
 800ce44:	d118      	bne.n	800ce78 <__ieee754_pow+0x120>
 800ce46:	f1b9 0f00 	cmp.w	r9, #0
 800ce4a:	f280 845a 	bge.w	800d702 <__ieee754_pow+0x9aa>
 800ce4e:	4948      	ldr	r1, [pc, #288]	; (800cf70 <__ieee754_pow+0x218>)
 800ce50:	4632      	mov	r2, r6
 800ce52:	463b      	mov	r3, r7
 800ce54:	2000      	movs	r0, #0
 800ce56:	f7f3 fcf9 	bl	800084c <__aeabi_ddiv>
 800ce5a:	e7dd      	b.n	800ce18 <__ieee754_pow+0xc0>
 800ce5c:	f04f 0b02 	mov.w	fp, #2
 800ce60:	e7c4      	b.n	800cdec <__ieee754_pow+0x94>
 800ce62:	f04f 0b00 	mov.w	fp, #0
 800ce66:	e7c1      	b.n	800cdec <__ieee754_pow+0x94>
 800ce68:	f1b9 0f00 	cmp.w	r9, #0
 800ce6c:	dad2      	bge.n	800ce14 <__ieee754_pow+0xbc>
 800ce6e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ce72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ce76:	e7cf      	b.n	800ce18 <__ieee754_pow+0xc0>
 800ce78:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ce7c:	d106      	bne.n	800ce8c <__ieee754_pow+0x134>
 800ce7e:	4632      	mov	r2, r6
 800ce80:	463b      	mov	r3, r7
 800ce82:	4610      	mov	r0, r2
 800ce84:	4619      	mov	r1, r3
 800ce86:	f7f3 fbb7 	bl	80005f8 <__aeabi_dmul>
 800ce8a:	e7c5      	b.n	800ce18 <__ieee754_pow+0xc0>
 800ce8c:	4b39      	ldr	r3, [pc, #228]	; (800cf74 <__ieee754_pow+0x21c>)
 800ce8e:	4599      	cmp	r9, r3
 800ce90:	d10a      	bne.n	800cea8 <__ieee754_pow+0x150>
 800ce92:	2d00      	cmp	r5, #0
 800ce94:	db08      	blt.n	800cea8 <__ieee754_pow+0x150>
 800ce96:	ec47 6b10 	vmov	d0, r6, r7
 800ce9a:	b011      	add	sp, #68	; 0x44
 800ce9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea0:	f000 be5c 	b.w	800db5c <__ieee754_sqrt>
 800cea4:	f04f 0b00 	mov.w	fp, #0
 800cea8:	ec47 6b10 	vmov	d0, r6, r7
 800ceac:	f001 fd6c 	bl	800e988 <fabs>
 800ceb0:	ec51 0b10 	vmov	r0, r1, d0
 800ceb4:	f1ba 0f00 	cmp.w	sl, #0
 800ceb8:	d127      	bne.n	800cf0a <__ieee754_pow+0x1b2>
 800ceba:	b124      	cbz	r4, 800cec6 <__ieee754_pow+0x16e>
 800cebc:	4b2c      	ldr	r3, [pc, #176]	; (800cf70 <__ieee754_pow+0x218>)
 800cebe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d121      	bne.n	800cf0a <__ieee754_pow+0x1b2>
 800cec6:	f1b9 0f00 	cmp.w	r9, #0
 800ceca:	da05      	bge.n	800ced8 <__ieee754_pow+0x180>
 800cecc:	4602      	mov	r2, r0
 800cece:	460b      	mov	r3, r1
 800ced0:	2000      	movs	r0, #0
 800ced2:	4927      	ldr	r1, [pc, #156]	; (800cf70 <__ieee754_pow+0x218>)
 800ced4:	f7f3 fcba 	bl	800084c <__aeabi_ddiv>
 800ced8:	2d00      	cmp	r5, #0
 800ceda:	da9d      	bge.n	800ce18 <__ieee754_pow+0xc0>
 800cedc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cee0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cee4:	ea54 030b 	orrs.w	r3, r4, fp
 800cee8:	d108      	bne.n	800cefc <__ieee754_pow+0x1a4>
 800ceea:	4602      	mov	r2, r0
 800ceec:	460b      	mov	r3, r1
 800ceee:	4610      	mov	r0, r2
 800cef0:	4619      	mov	r1, r3
 800cef2:	f7f3 f9c9 	bl	8000288 <__aeabi_dsub>
 800cef6:	4602      	mov	r2, r0
 800cef8:	460b      	mov	r3, r1
 800cefa:	e7ac      	b.n	800ce56 <__ieee754_pow+0xfe>
 800cefc:	f1bb 0f01 	cmp.w	fp, #1
 800cf00:	d18a      	bne.n	800ce18 <__ieee754_pow+0xc0>
 800cf02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf06:	4619      	mov	r1, r3
 800cf08:	e786      	b.n	800ce18 <__ieee754_pow+0xc0>
 800cf0a:	0fed      	lsrs	r5, r5, #31
 800cf0c:	1e6b      	subs	r3, r5, #1
 800cf0e:	930d      	str	r3, [sp, #52]	; 0x34
 800cf10:	ea5b 0303 	orrs.w	r3, fp, r3
 800cf14:	d102      	bne.n	800cf1c <__ieee754_pow+0x1c4>
 800cf16:	4632      	mov	r2, r6
 800cf18:	463b      	mov	r3, r7
 800cf1a:	e7e8      	b.n	800ceee <__ieee754_pow+0x196>
 800cf1c:	4b16      	ldr	r3, [pc, #88]	; (800cf78 <__ieee754_pow+0x220>)
 800cf1e:	4598      	cmp	r8, r3
 800cf20:	f340 80fe 	ble.w	800d120 <__ieee754_pow+0x3c8>
 800cf24:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cf28:	4598      	cmp	r8, r3
 800cf2a:	dd0a      	ble.n	800cf42 <__ieee754_pow+0x1ea>
 800cf2c:	4b0f      	ldr	r3, [pc, #60]	; (800cf6c <__ieee754_pow+0x214>)
 800cf2e:	429c      	cmp	r4, r3
 800cf30:	dc0d      	bgt.n	800cf4e <__ieee754_pow+0x1f6>
 800cf32:	f1b9 0f00 	cmp.w	r9, #0
 800cf36:	f6bf af6d 	bge.w	800ce14 <__ieee754_pow+0xbc>
 800cf3a:	a307      	add	r3, pc, #28	; (adr r3, 800cf58 <__ieee754_pow+0x200>)
 800cf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf40:	e79f      	b.n	800ce82 <__ieee754_pow+0x12a>
 800cf42:	4b0e      	ldr	r3, [pc, #56]	; (800cf7c <__ieee754_pow+0x224>)
 800cf44:	429c      	cmp	r4, r3
 800cf46:	ddf4      	ble.n	800cf32 <__ieee754_pow+0x1da>
 800cf48:	4b09      	ldr	r3, [pc, #36]	; (800cf70 <__ieee754_pow+0x218>)
 800cf4a:	429c      	cmp	r4, r3
 800cf4c:	dd18      	ble.n	800cf80 <__ieee754_pow+0x228>
 800cf4e:	f1b9 0f00 	cmp.w	r9, #0
 800cf52:	dcf2      	bgt.n	800cf3a <__ieee754_pow+0x1e2>
 800cf54:	e75e      	b.n	800ce14 <__ieee754_pow+0xbc>
 800cf56:	bf00      	nop
 800cf58:	8800759c 	.word	0x8800759c
 800cf5c:	7e37e43c 	.word	0x7e37e43c
 800cf60:	7ff00000 	.word	0x7ff00000
 800cf64:	0800ee52 	.word	0x0800ee52
 800cf68:	433fffff 	.word	0x433fffff
 800cf6c:	3fefffff 	.word	0x3fefffff
 800cf70:	3ff00000 	.word	0x3ff00000
 800cf74:	3fe00000 	.word	0x3fe00000
 800cf78:	41e00000 	.word	0x41e00000
 800cf7c:	3feffffe 	.word	0x3feffffe
 800cf80:	2200      	movs	r2, #0
 800cf82:	4b63      	ldr	r3, [pc, #396]	; (800d110 <__ieee754_pow+0x3b8>)
 800cf84:	f7f3 f980 	bl	8000288 <__aeabi_dsub>
 800cf88:	a355      	add	r3, pc, #340	; (adr r3, 800d0e0 <__ieee754_pow+0x388>)
 800cf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8e:	4604      	mov	r4, r0
 800cf90:	460d      	mov	r5, r1
 800cf92:	f7f3 fb31 	bl	80005f8 <__aeabi_dmul>
 800cf96:	a354      	add	r3, pc, #336	; (adr r3, 800d0e8 <__ieee754_pow+0x390>)
 800cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9c:	4606      	mov	r6, r0
 800cf9e:	460f      	mov	r7, r1
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	4629      	mov	r1, r5
 800cfa4:	f7f3 fb28 	bl	80005f8 <__aeabi_dmul>
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfae:	4b59      	ldr	r3, [pc, #356]	; (800d114 <__ieee754_pow+0x3bc>)
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	4629      	mov	r1, r5
 800cfb4:	f7f3 fb20 	bl	80005f8 <__aeabi_dmul>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	460b      	mov	r3, r1
 800cfbc:	a14c      	add	r1, pc, #304	; (adr r1, 800d0f0 <__ieee754_pow+0x398>)
 800cfbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfc2:	f7f3 f961 	bl	8000288 <__aeabi_dsub>
 800cfc6:	4622      	mov	r2, r4
 800cfc8:	462b      	mov	r3, r5
 800cfca:	f7f3 fb15 	bl	80005f8 <__aeabi_dmul>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	4950      	ldr	r1, [pc, #320]	; (800d118 <__ieee754_pow+0x3c0>)
 800cfd6:	f7f3 f957 	bl	8000288 <__aeabi_dsub>
 800cfda:	4622      	mov	r2, r4
 800cfdc:	462b      	mov	r3, r5
 800cfde:	4680      	mov	r8, r0
 800cfe0:	4689      	mov	r9, r1
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	4629      	mov	r1, r5
 800cfe6:	f7f3 fb07 	bl	80005f8 <__aeabi_dmul>
 800cfea:	4602      	mov	r2, r0
 800cfec:	460b      	mov	r3, r1
 800cfee:	4640      	mov	r0, r8
 800cff0:	4649      	mov	r1, r9
 800cff2:	f7f3 fb01 	bl	80005f8 <__aeabi_dmul>
 800cff6:	a340      	add	r3, pc, #256	; (adr r3, 800d0f8 <__ieee754_pow+0x3a0>)
 800cff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffc:	f7f3 fafc 	bl	80005f8 <__aeabi_dmul>
 800d000:	4602      	mov	r2, r0
 800d002:	460b      	mov	r3, r1
 800d004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d008:	f7f3 f93e 	bl	8000288 <__aeabi_dsub>
 800d00c:	4602      	mov	r2, r0
 800d00e:	460b      	mov	r3, r1
 800d010:	4604      	mov	r4, r0
 800d012:	460d      	mov	r5, r1
 800d014:	4630      	mov	r0, r6
 800d016:	4639      	mov	r1, r7
 800d018:	f7f3 f938 	bl	800028c <__adddf3>
 800d01c:	2000      	movs	r0, #0
 800d01e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d022:	4632      	mov	r2, r6
 800d024:	463b      	mov	r3, r7
 800d026:	f7f3 f92f 	bl	8000288 <__aeabi_dsub>
 800d02a:	4602      	mov	r2, r0
 800d02c:	460b      	mov	r3, r1
 800d02e:	4620      	mov	r0, r4
 800d030:	4629      	mov	r1, r5
 800d032:	f7f3 f929 	bl	8000288 <__aeabi_dsub>
 800d036:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d038:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d03c:	4313      	orrs	r3, r2
 800d03e:	4606      	mov	r6, r0
 800d040:	460f      	mov	r7, r1
 800d042:	f040 81eb 	bne.w	800d41c <__ieee754_pow+0x6c4>
 800d046:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800d100 <__ieee754_pow+0x3a8>
 800d04a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800d04e:	2400      	movs	r4, #0
 800d050:	4622      	mov	r2, r4
 800d052:	462b      	mov	r3, r5
 800d054:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d058:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d05c:	f7f3 f914 	bl	8000288 <__aeabi_dsub>
 800d060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d064:	f7f3 fac8 	bl	80005f8 <__aeabi_dmul>
 800d068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d06c:	4680      	mov	r8, r0
 800d06e:	4689      	mov	r9, r1
 800d070:	4630      	mov	r0, r6
 800d072:	4639      	mov	r1, r7
 800d074:	f7f3 fac0 	bl	80005f8 <__aeabi_dmul>
 800d078:	4602      	mov	r2, r0
 800d07a:	460b      	mov	r3, r1
 800d07c:	4640      	mov	r0, r8
 800d07e:	4649      	mov	r1, r9
 800d080:	f7f3 f904 	bl	800028c <__adddf3>
 800d084:	4622      	mov	r2, r4
 800d086:	462b      	mov	r3, r5
 800d088:	4680      	mov	r8, r0
 800d08a:	4689      	mov	r9, r1
 800d08c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d090:	f7f3 fab2 	bl	80005f8 <__aeabi_dmul>
 800d094:	460b      	mov	r3, r1
 800d096:	4604      	mov	r4, r0
 800d098:	460d      	mov	r5, r1
 800d09a:	4602      	mov	r2, r0
 800d09c:	4649      	mov	r1, r9
 800d09e:	4640      	mov	r0, r8
 800d0a0:	e9cd 4500 	strd	r4, r5, [sp]
 800d0a4:	f7f3 f8f2 	bl	800028c <__adddf3>
 800d0a8:	4b1c      	ldr	r3, [pc, #112]	; (800d11c <__ieee754_pow+0x3c4>)
 800d0aa:	4299      	cmp	r1, r3
 800d0ac:	4606      	mov	r6, r0
 800d0ae:	460f      	mov	r7, r1
 800d0b0:	468b      	mov	fp, r1
 800d0b2:	f340 82f7 	ble.w	800d6a4 <__ieee754_pow+0x94c>
 800d0b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d0ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d0be:	4303      	orrs	r3, r0
 800d0c0:	f000 81ea 	beq.w	800d498 <__ieee754_pow+0x740>
 800d0c4:	a310      	add	r3, pc, #64	; (adr r3, 800d108 <__ieee754_pow+0x3b0>)
 800d0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0ce:	f7f3 fa93 	bl	80005f8 <__aeabi_dmul>
 800d0d2:	a30d      	add	r3, pc, #52	; (adr r3, 800d108 <__ieee754_pow+0x3b0>)
 800d0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d8:	e6d5      	b.n	800ce86 <__ieee754_pow+0x12e>
 800d0da:	bf00      	nop
 800d0dc:	f3af 8000 	nop.w
 800d0e0:	60000000 	.word	0x60000000
 800d0e4:	3ff71547 	.word	0x3ff71547
 800d0e8:	f85ddf44 	.word	0xf85ddf44
 800d0ec:	3e54ae0b 	.word	0x3e54ae0b
 800d0f0:	55555555 	.word	0x55555555
 800d0f4:	3fd55555 	.word	0x3fd55555
 800d0f8:	652b82fe 	.word	0x652b82fe
 800d0fc:	3ff71547 	.word	0x3ff71547
 800d100:	00000000 	.word	0x00000000
 800d104:	bff00000 	.word	0xbff00000
 800d108:	8800759c 	.word	0x8800759c
 800d10c:	7e37e43c 	.word	0x7e37e43c
 800d110:	3ff00000 	.word	0x3ff00000
 800d114:	3fd00000 	.word	0x3fd00000
 800d118:	3fe00000 	.word	0x3fe00000
 800d11c:	408fffff 	.word	0x408fffff
 800d120:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d124:	f04f 0200 	mov.w	r2, #0
 800d128:	da05      	bge.n	800d136 <__ieee754_pow+0x3de>
 800d12a:	4bd3      	ldr	r3, [pc, #844]	; (800d478 <__ieee754_pow+0x720>)
 800d12c:	f7f3 fa64 	bl	80005f8 <__aeabi_dmul>
 800d130:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d134:	460c      	mov	r4, r1
 800d136:	1523      	asrs	r3, r4, #20
 800d138:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d13c:	4413      	add	r3, r2
 800d13e:	9309      	str	r3, [sp, #36]	; 0x24
 800d140:	4bce      	ldr	r3, [pc, #824]	; (800d47c <__ieee754_pow+0x724>)
 800d142:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d146:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d14a:	429c      	cmp	r4, r3
 800d14c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d150:	dd08      	ble.n	800d164 <__ieee754_pow+0x40c>
 800d152:	4bcb      	ldr	r3, [pc, #812]	; (800d480 <__ieee754_pow+0x728>)
 800d154:	429c      	cmp	r4, r3
 800d156:	f340 815e 	ble.w	800d416 <__ieee754_pow+0x6be>
 800d15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d15c:	3301      	adds	r3, #1
 800d15e:	9309      	str	r3, [sp, #36]	; 0x24
 800d160:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d164:	f04f 0a00 	mov.w	sl, #0
 800d168:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d16c:	930c      	str	r3, [sp, #48]	; 0x30
 800d16e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d170:	4bc4      	ldr	r3, [pc, #784]	; (800d484 <__ieee754_pow+0x72c>)
 800d172:	4413      	add	r3, r2
 800d174:	ed93 7b00 	vldr	d7, [r3]
 800d178:	4629      	mov	r1, r5
 800d17a:	ec53 2b17 	vmov	r2, r3, d7
 800d17e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d182:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d186:	f7f3 f87f 	bl	8000288 <__aeabi_dsub>
 800d18a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d18e:	4606      	mov	r6, r0
 800d190:	460f      	mov	r7, r1
 800d192:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d196:	f7f3 f879 	bl	800028c <__adddf3>
 800d19a:	4602      	mov	r2, r0
 800d19c:	460b      	mov	r3, r1
 800d19e:	2000      	movs	r0, #0
 800d1a0:	49b9      	ldr	r1, [pc, #740]	; (800d488 <__ieee754_pow+0x730>)
 800d1a2:	f7f3 fb53 	bl	800084c <__aeabi_ddiv>
 800d1a6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	4639      	mov	r1, r7
 800d1b2:	f7f3 fa21 	bl	80005f8 <__aeabi_dmul>
 800d1b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1ba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d1be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	9302      	str	r3, [sp, #8]
 800d1c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d1ca:	106d      	asrs	r5, r5, #1
 800d1cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d1d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800d1da:	4640      	mov	r0, r8
 800d1dc:	4649      	mov	r1, r9
 800d1de:	4614      	mov	r4, r2
 800d1e0:	461d      	mov	r5, r3
 800d1e2:	f7f3 fa09 	bl	80005f8 <__aeabi_dmul>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	4639      	mov	r1, r7
 800d1ee:	f7f3 f84b 	bl	8000288 <__aeabi_dsub>
 800d1f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1f6:	4606      	mov	r6, r0
 800d1f8:	460f      	mov	r7, r1
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	4629      	mov	r1, r5
 800d1fe:	f7f3 f843 	bl	8000288 <__aeabi_dsub>
 800d202:	4602      	mov	r2, r0
 800d204:	460b      	mov	r3, r1
 800d206:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d20a:	f7f3 f83d 	bl	8000288 <__aeabi_dsub>
 800d20e:	4642      	mov	r2, r8
 800d210:	464b      	mov	r3, r9
 800d212:	f7f3 f9f1 	bl	80005f8 <__aeabi_dmul>
 800d216:	4602      	mov	r2, r0
 800d218:	460b      	mov	r3, r1
 800d21a:	4630      	mov	r0, r6
 800d21c:	4639      	mov	r1, r7
 800d21e:	f7f3 f833 	bl	8000288 <__aeabi_dsub>
 800d222:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d226:	f7f3 f9e7 	bl	80005f8 <__aeabi_dmul>
 800d22a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d22e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d232:	4610      	mov	r0, r2
 800d234:	4619      	mov	r1, r3
 800d236:	f7f3 f9df 	bl	80005f8 <__aeabi_dmul>
 800d23a:	a37b      	add	r3, pc, #492	; (adr r3, 800d428 <__ieee754_pow+0x6d0>)
 800d23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d240:	4604      	mov	r4, r0
 800d242:	460d      	mov	r5, r1
 800d244:	f7f3 f9d8 	bl	80005f8 <__aeabi_dmul>
 800d248:	a379      	add	r3, pc, #484	; (adr r3, 800d430 <__ieee754_pow+0x6d8>)
 800d24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24e:	f7f3 f81d 	bl	800028c <__adddf3>
 800d252:	4622      	mov	r2, r4
 800d254:	462b      	mov	r3, r5
 800d256:	f7f3 f9cf 	bl	80005f8 <__aeabi_dmul>
 800d25a:	a377      	add	r3, pc, #476	; (adr r3, 800d438 <__ieee754_pow+0x6e0>)
 800d25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d260:	f7f3 f814 	bl	800028c <__adddf3>
 800d264:	4622      	mov	r2, r4
 800d266:	462b      	mov	r3, r5
 800d268:	f7f3 f9c6 	bl	80005f8 <__aeabi_dmul>
 800d26c:	a374      	add	r3, pc, #464	; (adr r3, 800d440 <__ieee754_pow+0x6e8>)
 800d26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d272:	f7f3 f80b 	bl	800028c <__adddf3>
 800d276:	4622      	mov	r2, r4
 800d278:	462b      	mov	r3, r5
 800d27a:	f7f3 f9bd 	bl	80005f8 <__aeabi_dmul>
 800d27e:	a372      	add	r3, pc, #456	; (adr r3, 800d448 <__ieee754_pow+0x6f0>)
 800d280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d284:	f7f3 f802 	bl	800028c <__adddf3>
 800d288:	4622      	mov	r2, r4
 800d28a:	462b      	mov	r3, r5
 800d28c:	f7f3 f9b4 	bl	80005f8 <__aeabi_dmul>
 800d290:	a36f      	add	r3, pc, #444	; (adr r3, 800d450 <__ieee754_pow+0x6f8>)
 800d292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d296:	f7f2 fff9 	bl	800028c <__adddf3>
 800d29a:	4622      	mov	r2, r4
 800d29c:	4606      	mov	r6, r0
 800d29e:	460f      	mov	r7, r1
 800d2a0:	462b      	mov	r3, r5
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	f7f3 f9a7 	bl	80005f8 <__aeabi_dmul>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	4639      	mov	r1, r7
 800d2b2:	f7f3 f9a1 	bl	80005f8 <__aeabi_dmul>
 800d2b6:	4642      	mov	r2, r8
 800d2b8:	4604      	mov	r4, r0
 800d2ba:	460d      	mov	r5, r1
 800d2bc:	464b      	mov	r3, r9
 800d2be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2c2:	f7f2 ffe3 	bl	800028c <__adddf3>
 800d2c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2ca:	f7f3 f995 	bl	80005f8 <__aeabi_dmul>
 800d2ce:	4622      	mov	r2, r4
 800d2d0:	462b      	mov	r3, r5
 800d2d2:	f7f2 ffdb 	bl	800028c <__adddf3>
 800d2d6:	4642      	mov	r2, r8
 800d2d8:	4606      	mov	r6, r0
 800d2da:	460f      	mov	r7, r1
 800d2dc:	464b      	mov	r3, r9
 800d2de:	4640      	mov	r0, r8
 800d2e0:	4649      	mov	r1, r9
 800d2e2:	f7f3 f989 	bl	80005f8 <__aeabi_dmul>
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	4b68      	ldr	r3, [pc, #416]	; (800d48c <__ieee754_pow+0x734>)
 800d2ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d2ee:	f7f2 ffcd 	bl	800028c <__adddf3>
 800d2f2:	4632      	mov	r2, r6
 800d2f4:	463b      	mov	r3, r7
 800d2f6:	f7f2 ffc9 	bl	800028c <__adddf3>
 800d2fa:	9802      	ldr	r0, [sp, #8]
 800d2fc:	460d      	mov	r5, r1
 800d2fe:	4604      	mov	r4, r0
 800d300:	4602      	mov	r2, r0
 800d302:	460b      	mov	r3, r1
 800d304:	4640      	mov	r0, r8
 800d306:	4649      	mov	r1, r9
 800d308:	f7f3 f976 	bl	80005f8 <__aeabi_dmul>
 800d30c:	2200      	movs	r2, #0
 800d30e:	4680      	mov	r8, r0
 800d310:	4689      	mov	r9, r1
 800d312:	4b5e      	ldr	r3, [pc, #376]	; (800d48c <__ieee754_pow+0x734>)
 800d314:	4620      	mov	r0, r4
 800d316:	4629      	mov	r1, r5
 800d318:	f7f2 ffb6 	bl	8000288 <__aeabi_dsub>
 800d31c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d320:	f7f2 ffb2 	bl	8000288 <__aeabi_dsub>
 800d324:	4602      	mov	r2, r0
 800d326:	460b      	mov	r3, r1
 800d328:	4630      	mov	r0, r6
 800d32a:	4639      	mov	r1, r7
 800d32c:	f7f2 ffac 	bl	8000288 <__aeabi_dsub>
 800d330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d334:	f7f3 f960 	bl	80005f8 <__aeabi_dmul>
 800d338:	4622      	mov	r2, r4
 800d33a:	4606      	mov	r6, r0
 800d33c:	460f      	mov	r7, r1
 800d33e:	462b      	mov	r3, r5
 800d340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d344:	f7f3 f958 	bl	80005f8 <__aeabi_dmul>
 800d348:	4602      	mov	r2, r0
 800d34a:	460b      	mov	r3, r1
 800d34c:	4630      	mov	r0, r6
 800d34e:	4639      	mov	r1, r7
 800d350:	f7f2 ff9c 	bl	800028c <__adddf3>
 800d354:	4606      	mov	r6, r0
 800d356:	460f      	mov	r7, r1
 800d358:	4602      	mov	r2, r0
 800d35a:	460b      	mov	r3, r1
 800d35c:	4640      	mov	r0, r8
 800d35e:	4649      	mov	r1, r9
 800d360:	f7f2 ff94 	bl	800028c <__adddf3>
 800d364:	9802      	ldr	r0, [sp, #8]
 800d366:	a33c      	add	r3, pc, #240	; (adr r3, 800d458 <__ieee754_pow+0x700>)
 800d368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36c:	4604      	mov	r4, r0
 800d36e:	460d      	mov	r5, r1
 800d370:	f7f3 f942 	bl	80005f8 <__aeabi_dmul>
 800d374:	4642      	mov	r2, r8
 800d376:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d37a:	464b      	mov	r3, r9
 800d37c:	4620      	mov	r0, r4
 800d37e:	4629      	mov	r1, r5
 800d380:	f7f2 ff82 	bl	8000288 <__aeabi_dsub>
 800d384:	4602      	mov	r2, r0
 800d386:	460b      	mov	r3, r1
 800d388:	4630      	mov	r0, r6
 800d38a:	4639      	mov	r1, r7
 800d38c:	f7f2 ff7c 	bl	8000288 <__aeabi_dsub>
 800d390:	a333      	add	r3, pc, #204	; (adr r3, 800d460 <__ieee754_pow+0x708>)
 800d392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d396:	f7f3 f92f 	bl	80005f8 <__aeabi_dmul>
 800d39a:	a333      	add	r3, pc, #204	; (adr r3, 800d468 <__ieee754_pow+0x710>)
 800d39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a0:	4606      	mov	r6, r0
 800d3a2:	460f      	mov	r7, r1
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	4629      	mov	r1, r5
 800d3a8:	f7f3 f926 	bl	80005f8 <__aeabi_dmul>
 800d3ac:	4602      	mov	r2, r0
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	4639      	mov	r1, r7
 800d3b4:	f7f2 ff6a 	bl	800028c <__adddf3>
 800d3b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3ba:	4b35      	ldr	r3, [pc, #212]	; (800d490 <__ieee754_pow+0x738>)
 800d3bc:	4413      	add	r3, r2
 800d3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c2:	f7f2 ff63 	bl	800028c <__adddf3>
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3ca:	460d      	mov	r5, r1
 800d3cc:	f7f3 f8aa 	bl	8000524 <__aeabi_i2d>
 800d3d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3d2:	4b30      	ldr	r3, [pc, #192]	; (800d494 <__ieee754_pow+0x73c>)
 800d3d4:	4413      	add	r3, r2
 800d3d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d3da:	4606      	mov	r6, r0
 800d3dc:	460f      	mov	r7, r1
 800d3de:	4622      	mov	r2, r4
 800d3e0:	462b      	mov	r3, r5
 800d3e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d3e6:	f7f2 ff51 	bl	800028c <__adddf3>
 800d3ea:	4642      	mov	r2, r8
 800d3ec:	464b      	mov	r3, r9
 800d3ee:	f7f2 ff4d 	bl	800028c <__adddf3>
 800d3f2:	4632      	mov	r2, r6
 800d3f4:	463b      	mov	r3, r7
 800d3f6:	f7f2 ff49 	bl	800028c <__adddf3>
 800d3fa:	9802      	ldr	r0, [sp, #8]
 800d3fc:	4632      	mov	r2, r6
 800d3fe:	463b      	mov	r3, r7
 800d400:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d404:	f7f2 ff40 	bl	8000288 <__aeabi_dsub>
 800d408:	4642      	mov	r2, r8
 800d40a:	464b      	mov	r3, r9
 800d40c:	f7f2 ff3c 	bl	8000288 <__aeabi_dsub>
 800d410:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d414:	e607      	b.n	800d026 <__ieee754_pow+0x2ce>
 800d416:	f04f 0a01 	mov.w	sl, #1
 800d41a:	e6a5      	b.n	800d168 <__ieee754_pow+0x410>
 800d41c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800d470 <__ieee754_pow+0x718>
 800d420:	e613      	b.n	800d04a <__ieee754_pow+0x2f2>
 800d422:	bf00      	nop
 800d424:	f3af 8000 	nop.w
 800d428:	4a454eef 	.word	0x4a454eef
 800d42c:	3fca7e28 	.word	0x3fca7e28
 800d430:	93c9db65 	.word	0x93c9db65
 800d434:	3fcd864a 	.word	0x3fcd864a
 800d438:	a91d4101 	.word	0xa91d4101
 800d43c:	3fd17460 	.word	0x3fd17460
 800d440:	518f264d 	.word	0x518f264d
 800d444:	3fd55555 	.word	0x3fd55555
 800d448:	db6fabff 	.word	0xdb6fabff
 800d44c:	3fdb6db6 	.word	0x3fdb6db6
 800d450:	33333303 	.word	0x33333303
 800d454:	3fe33333 	.word	0x3fe33333
 800d458:	e0000000 	.word	0xe0000000
 800d45c:	3feec709 	.word	0x3feec709
 800d460:	dc3a03fd 	.word	0xdc3a03fd
 800d464:	3feec709 	.word	0x3feec709
 800d468:	145b01f5 	.word	0x145b01f5
 800d46c:	be3e2fe0 	.word	0xbe3e2fe0
 800d470:	00000000 	.word	0x00000000
 800d474:	3ff00000 	.word	0x3ff00000
 800d478:	43400000 	.word	0x43400000
 800d47c:	0003988e 	.word	0x0003988e
 800d480:	000bb679 	.word	0x000bb679
 800d484:	0800f078 	.word	0x0800f078
 800d488:	3ff00000 	.word	0x3ff00000
 800d48c:	40080000 	.word	0x40080000
 800d490:	0800f098 	.word	0x0800f098
 800d494:	0800f088 	.word	0x0800f088
 800d498:	a3b4      	add	r3, pc, #720	; (adr r3, 800d76c <__ieee754_pow+0xa14>)
 800d49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49e:	4640      	mov	r0, r8
 800d4a0:	4649      	mov	r1, r9
 800d4a2:	f7f2 fef3 	bl	800028c <__adddf3>
 800d4a6:	4622      	mov	r2, r4
 800d4a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4ac:	462b      	mov	r3, r5
 800d4ae:	4630      	mov	r0, r6
 800d4b0:	4639      	mov	r1, r7
 800d4b2:	f7f2 fee9 	bl	8000288 <__aeabi_dsub>
 800d4b6:	4602      	mov	r2, r0
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4be:	f7f3 fb2b 	bl	8000b18 <__aeabi_dcmpgt>
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	f47f adfe 	bne.w	800d0c4 <__ieee754_pow+0x36c>
 800d4c8:	4aa3      	ldr	r2, [pc, #652]	; (800d758 <__ieee754_pow+0xa00>)
 800d4ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	f340 810a 	ble.w	800d6e8 <__ieee754_pow+0x990>
 800d4d4:	151b      	asrs	r3, r3, #20
 800d4d6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d4da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d4de:	fa4a f303 	asr.w	r3, sl, r3
 800d4e2:	445b      	add	r3, fp
 800d4e4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d4e8:	4e9c      	ldr	r6, [pc, #624]	; (800d75c <__ieee754_pow+0xa04>)
 800d4ea:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d4ee:	4116      	asrs	r6, r2
 800d4f0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d4f4:	2000      	movs	r0, #0
 800d4f6:	ea23 0106 	bic.w	r1, r3, r6
 800d4fa:	f1c2 0214 	rsb	r2, r2, #20
 800d4fe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d502:	fa4a fa02 	asr.w	sl, sl, r2
 800d506:	f1bb 0f00 	cmp.w	fp, #0
 800d50a:	4602      	mov	r2, r0
 800d50c:	460b      	mov	r3, r1
 800d50e:	4620      	mov	r0, r4
 800d510:	4629      	mov	r1, r5
 800d512:	bfb8      	it	lt
 800d514:	f1ca 0a00 	rsblt	sl, sl, #0
 800d518:	f7f2 feb6 	bl	8000288 <__aeabi_dsub>
 800d51c:	e9cd 0100 	strd	r0, r1, [sp]
 800d520:	4642      	mov	r2, r8
 800d522:	464b      	mov	r3, r9
 800d524:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d528:	f7f2 feb0 	bl	800028c <__adddf3>
 800d52c:	2000      	movs	r0, #0
 800d52e:	a378      	add	r3, pc, #480	; (adr r3, 800d710 <__ieee754_pow+0x9b8>)
 800d530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d534:	4604      	mov	r4, r0
 800d536:	460d      	mov	r5, r1
 800d538:	f7f3 f85e 	bl	80005f8 <__aeabi_dmul>
 800d53c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d540:	4606      	mov	r6, r0
 800d542:	460f      	mov	r7, r1
 800d544:	4620      	mov	r0, r4
 800d546:	4629      	mov	r1, r5
 800d548:	f7f2 fe9e 	bl	8000288 <__aeabi_dsub>
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	4640      	mov	r0, r8
 800d552:	4649      	mov	r1, r9
 800d554:	f7f2 fe98 	bl	8000288 <__aeabi_dsub>
 800d558:	a36f      	add	r3, pc, #444	; (adr r3, 800d718 <__ieee754_pow+0x9c0>)
 800d55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55e:	f7f3 f84b 	bl	80005f8 <__aeabi_dmul>
 800d562:	a36f      	add	r3, pc, #444	; (adr r3, 800d720 <__ieee754_pow+0x9c8>)
 800d564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d568:	4680      	mov	r8, r0
 800d56a:	4689      	mov	r9, r1
 800d56c:	4620      	mov	r0, r4
 800d56e:	4629      	mov	r1, r5
 800d570:	f7f3 f842 	bl	80005f8 <__aeabi_dmul>
 800d574:	4602      	mov	r2, r0
 800d576:	460b      	mov	r3, r1
 800d578:	4640      	mov	r0, r8
 800d57a:	4649      	mov	r1, r9
 800d57c:	f7f2 fe86 	bl	800028c <__adddf3>
 800d580:	4604      	mov	r4, r0
 800d582:	460d      	mov	r5, r1
 800d584:	4602      	mov	r2, r0
 800d586:	460b      	mov	r3, r1
 800d588:	4630      	mov	r0, r6
 800d58a:	4639      	mov	r1, r7
 800d58c:	f7f2 fe7e 	bl	800028c <__adddf3>
 800d590:	4632      	mov	r2, r6
 800d592:	463b      	mov	r3, r7
 800d594:	4680      	mov	r8, r0
 800d596:	4689      	mov	r9, r1
 800d598:	f7f2 fe76 	bl	8000288 <__aeabi_dsub>
 800d59c:	4602      	mov	r2, r0
 800d59e:	460b      	mov	r3, r1
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	4629      	mov	r1, r5
 800d5a4:	f7f2 fe70 	bl	8000288 <__aeabi_dsub>
 800d5a8:	4642      	mov	r2, r8
 800d5aa:	4606      	mov	r6, r0
 800d5ac:	460f      	mov	r7, r1
 800d5ae:	464b      	mov	r3, r9
 800d5b0:	4640      	mov	r0, r8
 800d5b2:	4649      	mov	r1, r9
 800d5b4:	f7f3 f820 	bl	80005f8 <__aeabi_dmul>
 800d5b8:	a35b      	add	r3, pc, #364	; (adr r3, 800d728 <__ieee754_pow+0x9d0>)
 800d5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5be:	4604      	mov	r4, r0
 800d5c0:	460d      	mov	r5, r1
 800d5c2:	f7f3 f819 	bl	80005f8 <__aeabi_dmul>
 800d5c6:	a35a      	add	r3, pc, #360	; (adr r3, 800d730 <__ieee754_pow+0x9d8>)
 800d5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5cc:	f7f2 fe5c 	bl	8000288 <__aeabi_dsub>
 800d5d0:	4622      	mov	r2, r4
 800d5d2:	462b      	mov	r3, r5
 800d5d4:	f7f3 f810 	bl	80005f8 <__aeabi_dmul>
 800d5d8:	a357      	add	r3, pc, #348	; (adr r3, 800d738 <__ieee754_pow+0x9e0>)
 800d5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5de:	f7f2 fe55 	bl	800028c <__adddf3>
 800d5e2:	4622      	mov	r2, r4
 800d5e4:	462b      	mov	r3, r5
 800d5e6:	f7f3 f807 	bl	80005f8 <__aeabi_dmul>
 800d5ea:	a355      	add	r3, pc, #340	; (adr r3, 800d740 <__ieee754_pow+0x9e8>)
 800d5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f0:	f7f2 fe4a 	bl	8000288 <__aeabi_dsub>
 800d5f4:	4622      	mov	r2, r4
 800d5f6:	462b      	mov	r3, r5
 800d5f8:	f7f2 fffe 	bl	80005f8 <__aeabi_dmul>
 800d5fc:	a352      	add	r3, pc, #328	; (adr r3, 800d748 <__ieee754_pow+0x9f0>)
 800d5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d602:	f7f2 fe43 	bl	800028c <__adddf3>
 800d606:	4622      	mov	r2, r4
 800d608:	462b      	mov	r3, r5
 800d60a:	f7f2 fff5 	bl	80005f8 <__aeabi_dmul>
 800d60e:	4602      	mov	r2, r0
 800d610:	460b      	mov	r3, r1
 800d612:	4640      	mov	r0, r8
 800d614:	4649      	mov	r1, r9
 800d616:	f7f2 fe37 	bl	8000288 <__aeabi_dsub>
 800d61a:	4604      	mov	r4, r0
 800d61c:	460d      	mov	r5, r1
 800d61e:	4602      	mov	r2, r0
 800d620:	460b      	mov	r3, r1
 800d622:	4640      	mov	r0, r8
 800d624:	4649      	mov	r1, r9
 800d626:	f7f2 ffe7 	bl	80005f8 <__aeabi_dmul>
 800d62a:	2200      	movs	r2, #0
 800d62c:	e9cd 0100 	strd	r0, r1, [sp]
 800d630:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d634:	4620      	mov	r0, r4
 800d636:	4629      	mov	r1, r5
 800d638:	f7f2 fe26 	bl	8000288 <__aeabi_dsub>
 800d63c:	4602      	mov	r2, r0
 800d63e:	460b      	mov	r3, r1
 800d640:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d644:	f7f3 f902 	bl	800084c <__aeabi_ddiv>
 800d648:	4632      	mov	r2, r6
 800d64a:	4604      	mov	r4, r0
 800d64c:	460d      	mov	r5, r1
 800d64e:	463b      	mov	r3, r7
 800d650:	4640      	mov	r0, r8
 800d652:	4649      	mov	r1, r9
 800d654:	f7f2 ffd0 	bl	80005f8 <__aeabi_dmul>
 800d658:	4632      	mov	r2, r6
 800d65a:	463b      	mov	r3, r7
 800d65c:	f7f2 fe16 	bl	800028c <__adddf3>
 800d660:	4602      	mov	r2, r0
 800d662:	460b      	mov	r3, r1
 800d664:	4620      	mov	r0, r4
 800d666:	4629      	mov	r1, r5
 800d668:	f7f2 fe0e 	bl	8000288 <__aeabi_dsub>
 800d66c:	4642      	mov	r2, r8
 800d66e:	464b      	mov	r3, r9
 800d670:	f7f2 fe0a 	bl	8000288 <__aeabi_dsub>
 800d674:	4602      	mov	r2, r0
 800d676:	460b      	mov	r3, r1
 800d678:	2000      	movs	r0, #0
 800d67a:	4939      	ldr	r1, [pc, #228]	; (800d760 <__ieee754_pow+0xa08>)
 800d67c:	f7f2 fe04 	bl	8000288 <__aeabi_dsub>
 800d680:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d684:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d688:	4602      	mov	r2, r0
 800d68a:	460b      	mov	r3, r1
 800d68c:	da2f      	bge.n	800d6ee <__ieee754_pow+0x996>
 800d68e:	4650      	mov	r0, sl
 800d690:	ec43 2b10 	vmov	d0, r2, r3
 800d694:	f001 faa0 	bl	800ebd8 <scalbn>
 800d698:	ec51 0b10 	vmov	r0, r1, d0
 800d69c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6a0:	f7ff bbf1 	b.w	800ce86 <__ieee754_pow+0x12e>
 800d6a4:	4b2f      	ldr	r3, [pc, #188]	; (800d764 <__ieee754_pow+0xa0c>)
 800d6a6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d6aa:	429e      	cmp	r6, r3
 800d6ac:	f77f af0c 	ble.w	800d4c8 <__ieee754_pow+0x770>
 800d6b0:	4b2d      	ldr	r3, [pc, #180]	; (800d768 <__ieee754_pow+0xa10>)
 800d6b2:	440b      	add	r3, r1
 800d6b4:	4303      	orrs	r3, r0
 800d6b6:	d00b      	beq.n	800d6d0 <__ieee754_pow+0x978>
 800d6b8:	a325      	add	r3, pc, #148	; (adr r3, 800d750 <__ieee754_pow+0x9f8>)
 800d6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6c2:	f7f2 ff99 	bl	80005f8 <__aeabi_dmul>
 800d6c6:	a322      	add	r3, pc, #136	; (adr r3, 800d750 <__ieee754_pow+0x9f8>)
 800d6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6cc:	f7ff bbdb 	b.w	800ce86 <__ieee754_pow+0x12e>
 800d6d0:	4622      	mov	r2, r4
 800d6d2:	462b      	mov	r3, r5
 800d6d4:	f7f2 fdd8 	bl	8000288 <__aeabi_dsub>
 800d6d8:	4642      	mov	r2, r8
 800d6da:	464b      	mov	r3, r9
 800d6dc:	f7f3 fa12 	bl	8000b04 <__aeabi_dcmpge>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	f43f aef1 	beq.w	800d4c8 <__ieee754_pow+0x770>
 800d6e6:	e7e7      	b.n	800d6b8 <__ieee754_pow+0x960>
 800d6e8:	f04f 0a00 	mov.w	sl, #0
 800d6ec:	e718      	b.n	800d520 <__ieee754_pow+0x7c8>
 800d6ee:	4621      	mov	r1, r4
 800d6f0:	e7d4      	b.n	800d69c <__ieee754_pow+0x944>
 800d6f2:	2000      	movs	r0, #0
 800d6f4:	491a      	ldr	r1, [pc, #104]	; (800d760 <__ieee754_pow+0xa08>)
 800d6f6:	f7ff bb8f 	b.w	800ce18 <__ieee754_pow+0xc0>
 800d6fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6fe:	f7ff bb8b 	b.w	800ce18 <__ieee754_pow+0xc0>
 800d702:	4630      	mov	r0, r6
 800d704:	4639      	mov	r1, r7
 800d706:	f7ff bb87 	b.w	800ce18 <__ieee754_pow+0xc0>
 800d70a:	4693      	mov	fp, r2
 800d70c:	f7ff bb98 	b.w	800ce40 <__ieee754_pow+0xe8>
 800d710:	00000000 	.word	0x00000000
 800d714:	3fe62e43 	.word	0x3fe62e43
 800d718:	fefa39ef 	.word	0xfefa39ef
 800d71c:	3fe62e42 	.word	0x3fe62e42
 800d720:	0ca86c39 	.word	0x0ca86c39
 800d724:	be205c61 	.word	0xbe205c61
 800d728:	72bea4d0 	.word	0x72bea4d0
 800d72c:	3e663769 	.word	0x3e663769
 800d730:	c5d26bf1 	.word	0xc5d26bf1
 800d734:	3ebbbd41 	.word	0x3ebbbd41
 800d738:	af25de2c 	.word	0xaf25de2c
 800d73c:	3f11566a 	.word	0x3f11566a
 800d740:	16bebd93 	.word	0x16bebd93
 800d744:	3f66c16c 	.word	0x3f66c16c
 800d748:	5555553e 	.word	0x5555553e
 800d74c:	3fc55555 	.word	0x3fc55555
 800d750:	c2f8f359 	.word	0xc2f8f359
 800d754:	01a56e1f 	.word	0x01a56e1f
 800d758:	3fe00000 	.word	0x3fe00000
 800d75c:	000fffff 	.word	0x000fffff
 800d760:	3ff00000 	.word	0x3ff00000
 800d764:	4090cbff 	.word	0x4090cbff
 800d768:	3f6f3400 	.word	0x3f6f3400
 800d76c:	652b82fe 	.word	0x652b82fe
 800d770:	3c971547 	.word	0x3c971547
 800d774:	00000000 	.word	0x00000000

0800d778 <__ieee754_rem_pio2>:
 800d778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d77c:	ec57 6b10 	vmov	r6, r7, d0
 800d780:	4bc3      	ldr	r3, [pc, #780]	; (800da90 <__ieee754_rem_pio2+0x318>)
 800d782:	b08d      	sub	sp, #52	; 0x34
 800d784:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d788:	4598      	cmp	r8, r3
 800d78a:	4604      	mov	r4, r0
 800d78c:	9704      	str	r7, [sp, #16]
 800d78e:	dc07      	bgt.n	800d7a0 <__ieee754_rem_pio2+0x28>
 800d790:	2200      	movs	r2, #0
 800d792:	2300      	movs	r3, #0
 800d794:	ed84 0b00 	vstr	d0, [r4]
 800d798:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d79c:	2500      	movs	r5, #0
 800d79e:	e027      	b.n	800d7f0 <__ieee754_rem_pio2+0x78>
 800d7a0:	4bbc      	ldr	r3, [pc, #752]	; (800da94 <__ieee754_rem_pio2+0x31c>)
 800d7a2:	4598      	cmp	r8, r3
 800d7a4:	dc75      	bgt.n	800d892 <__ieee754_rem_pio2+0x11a>
 800d7a6:	9b04      	ldr	r3, [sp, #16]
 800d7a8:	4dbb      	ldr	r5, [pc, #748]	; (800da98 <__ieee754_rem_pio2+0x320>)
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	ee10 0a10 	vmov	r0, s0
 800d7b0:	a3a9      	add	r3, pc, #676	; (adr r3, 800da58 <__ieee754_rem_pio2+0x2e0>)
 800d7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b6:	4639      	mov	r1, r7
 800d7b8:	dd36      	ble.n	800d828 <__ieee754_rem_pio2+0xb0>
 800d7ba:	f7f2 fd65 	bl	8000288 <__aeabi_dsub>
 800d7be:	45a8      	cmp	r8, r5
 800d7c0:	4606      	mov	r6, r0
 800d7c2:	460f      	mov	r7, r1
 800d7c4:	d018      	beq.n	800d7f8 <__ieee754_rem_pio2+0x80>
 800d7c6:	a3a6      	add	r3, pc, #664	; (adr r3, 800da60 <__ieee754_rem_pio2+0x2e8>)
 800d7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7cc:	f7f2 fd5c 	bl	8000288 <__aeabi_dsub>
 800d7d0:	4602      	mov	r2, r0
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	e9c4 2300 	strd	r2, r3, [r4]
 800d7d8:	4630      	mov	r0, r6
 800d7da:	4639      	mov	r1, r7
 800d7dc:	f7f2 fd54 	bl	8000288 <__aeabi_dsub>
 800d7e0:	a39f      	add	r3, pc, #636	; (adr r3, 800da60 <__ieee754_rem_pio2+0x2e8>)
 800d7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e6:	f7f2 fd4f 	bl	8000288 <__aeabi_dsub>
 800d7ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d7ee:	2501      	movs	r5, #1
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	b00d      	add	sp, #52	; 0x34
 800d7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f8:	a39b      	add	r3, pc, #620	; (adr r3, 800da68 <__ieee754_rem_pio2+0x2f0>)
 800d7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fe:	f7f2 fd43 	bl	8000288 <__aeabi_dsub>
 800d802:	a39b      	add	r3, pc, #620	; (adr r3, 800da70 <__ieee754_rem_pio2+0x2f8>)
 800d804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d808:	4606      	mov	r6, r0
 800d80a:	460f      	mov	r7, r1
 800d80c:	f7f2 fd3c 	bl	8000288 <__aeabi_dsub>
 800d810:	4602      	mov	r2, r0
 800d812:	460b      	mov	r3, r1
 800d814:	e9c4 2300 	strd	r2, r3, [r4]
 800d818:	4630      	mov	r0, r6
 800d81a:	4639      	mov	r1, r7
 800d81c:	f7f2 fd34 	bl	8000288 <__aeabi_dsub>
 800d820:	a393      	add	r3, pc, #588	; (adr r3, 800da70 <__ieee754_rem_pio2+0x2f8>)
 800d822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d826:	e7de      	b.n	800d7e6 <__ieee754_rem_pio2+0x6e>
 800d828:	f7f2 fd30 	bl	800028c <__adddf3>
 800d82c:	45a8      	cmp	r8, r5
 800d82e:	4606      	mov	r6, r0
 800d830:	460f      	mov	r7, r1
 800d832:	d016      	beq.n	800d862 <__ieee754_rem_pio2+0xea>
 800d834:	a38a      	add	r3, pc, #552	; (adr r3, 800da60 <__ieee754_rem_pio2+0x2e8>)
 800d836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83a:	f7f2 fd27 	bl	800028c <__adddf3>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	e9c4 2300 	strd	r2, r3, [r4]
 800d846:	4630      	mov	r0, r6
 800d848:	4639      	mov	r1, r7
 800d84a:	f7f2 fd1d 	bl	8000288 <__aeabi_dsub>
 800d84e:	a384      	add	r3, pc, #528	; (adr r3, 800da60 <__ieee754_rem_pio2+0x2e8>)
 800d850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d854:	f7f2 fd1a 	bl	800028c <__adddf3>
 800d858:	f04f 35ff 	mov.w	r5, #4294967295
 800d85c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d860:	e7c6      	b.n	800d7f0 <__ieee754_rem_pio2+0x78>
 800d862:	a381      	add	r3, pc, #516	; (adr r3, 800da68 <__ieee754_rem_pio2+0x2f0>)
 800d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d868:	f7f2 fd10 	bl	800028c <__adddf3>
 800d86c:	a380      	add	r3, pc, #512	; (adr r3, 800da70 <__ieee754_rem_pio2+0x2f8>)
 800d86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d872:	4606      	mov	r6, r0
 800d874:	460f      	mov	r7, r1
 800d876:	f7f2 fd09 	bl	800028c <__adddf3>
 800d87a:	4602      	mov	r2, r0
 800d87c:	460b      	mov	r3, r1
 800d87e:	e9c4 2300 	strd	r2, r3, [r4]
 800d882:	4630      	mov	r0, r6
 800d884:	4639      	mov	r1, r7
 800d886:	f7f2 fcff 	bl	8000288 <__aeabi_dsub>
 800d88a:	a379      	add	r3, pc, #484	; (adr r3, 800da70 <__ieee754_rem_pio2+0x2f8>)
 800d88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d890:	e7e0      	b.n	800d854 <__ieee754_rem_pio2+0xdc>
 800d892:	4b82      	ldr	r3, [pc, #520]	; (800da9c <__ieee754_rem_pio2+0x324>)
 800d894:	4598      	cmp	r8, r3
 800d896:	f300 80d0 	bgt.w	800da3a <__ieee754_rem_pio2+0x2c2>
 800d89a:	f001 f875 	bl	800e988 <fabs>
 800d89e:	ec57 6b10 	vmov	r6, r7, d0
 800d8a2:	ee10 0a10 	vmov	r0, s0
 800d8a6:	a374      	add	r3, pc, #464	; (adr r3, 800da78 <__ieee754_rem_pio2+0x300>)
 800d8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ac:	4639      	mov	r1, r7
 800d8ae:	f7f2 fea3 	bl	80005f8 <__aeabi_dmul>
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	4b7a      	ldr	r3, [pc, #488]	; (800daa0 <__ieee754_rem_pio2+0x328>)
 800d8b6:	f7f2 fce9 	bl	800028c <__adddf3>
 800d8ba:	f7f3 f94d 	bl	8000b58 <__aeabi_d2iz>
 800d8be:	4605      	mov	r5, r0
 800d8c0:	f7f2 fe30 	bl	8000524 <__aeabi_i2d>
 800d8c4:	a364      	add	r3, pc, #400	; (adr r3, 800da58 <__ieee754_rem_pio2+0x2e0>)
 800d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8ce:	f7f2 fe93 	bl	80005f8 <__aeabi_dmul>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	4639      	mov	r1, r7
 800d8da:	f7f2 fcd5 	bl	8000288 <__aeabi_dsub>
 800d8de:	a360      	add	r3, pc, #384	; (adr r3, 800da60 <__ieee754_rem_pio2+0x2e8>)
 800d8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e4:	4682      	mov	sl, r0
 800d8e6:	468b      	mov	fp, r1
 800d8e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8ec:	f7f2 fe84 	bl	80005f8 <__aeabi_dmul>
 800d8f0:	2d1f      	cmp	r5, #31
 800d8f2:	4606      	mov	r6, r0
 800d8f4:	460f      	mov	r7, r1
 800d8f6:	dc0c      	bgt.n	800d912 <__ieee754_rem_pio2+0x19a>
 800d8f8:	1e6a      	subs	r2, r5, #1
 800d8fa:	4b6a      	ldr	r3, [pc, #424]	; (800daa4 <__ieee754_rem_pio2+0x32c>)
 800d8fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d900:	4543      	cmp	r3, r8
 800d902:	d006      	beq.n	800d912 <__ieee754_rem_pio2+0x19a>
 800d904:	4632      	mov	r2, r6
 800d906:	463b      	mov	r3, r7
 800d908:	4650      	mov	r0, sl
 800d90a:	4659      	mov	r1, fp
 800d90c:	f7f2 fcbc 	bl	8000288 <__aeabi_dsub>
 800d910:	e00e      	b.n	800d930 <__ieee754_rem_pio2+0x1b8>
 800d912:	4632      	mov	r2, r6
 800d914:	463b      	mov	r3, r7
 800d916:	4650      	mov	r0, sl
 800d918:	4659      	mov	r1, fp
 800d91a:	f7f2 fcb5 	bl	8000288 <__aeabi_dsub>
 800d91e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d922:	9305      	str	r3, [sp, #20]
 800d924:	9a05      	ldr	r2, [sp, #20]
 800d926:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d92a:	1ad3      	subs	r3, r2, r3
 800d92c:	2b10      	cmp	r3, #16
 800d92e:	dc02      	bgt.n	800d936 <__ieee754_rem_pio2+0x1be>
 800d930:	e9c4 0100 	strd	r0, r1, [r4]
 800d934:	e039      	b.n	800d9aa <__ieee754_rem_pio2+0x232>
 800d936:	a34c      	add	r3, pc, #304	; (adr r3, 800da68 <__ieee754_rem_pio2+0x2f0>)
 800d938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d940:	f7f2 fe5a 	bl	80005f8 <__aeabi_dmul>
 800d944:	4606      	mov	r6, r0
 800d946:	460f      	mov	r7, r1
 800d948:	4602      	mov	r2, r0
 800d94a:	460b      	mov	r3, r1
 800d94c:	4650      	mov	r0, sl
 800d94e:	4659      	mov	r1, fp
 800d950:	f7f2 fc9a 	bl	8000288 <__aeabi_dsub>
 800d954:	4602      	mov	r2, r0
 800d956:	460b      	mov	r3, r1
 800d958:	4680      	mov	r8, r0
 800d95a:	4689      	mov	r9, r1
 800d95c:	4650      	mov	r0, sl
 800d95e:	4659      	mov	r1, fp
 800d960:	f7f2 fc92 	bl	8000288 <__aeabi_dsub>
 800d964:	4632      	mov	r2, r6
 800d966:	463b      	mov	r3, r7
 800d968:	f7f2 fc8e 	bl	8000288 <__aeabi_dsub>
 800d96c:	a340      	add	r3, pc, #256	; (adr r3, 800da70 <__ieee754_rem_pio2+0x2f8>)
 800d96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d972:	4606      	mov	r6, r0
 800d974:	460f      	mov	r7, r1
 800d976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d97a:	f7f2 fe3d 	bl	80005f8 <__aeabi_dmul>
 800d97e:	4632      	mov	r2, r6
 800d980:	463b      	mov	r3, r7
 800d982:	f7f2 fc81 	bl	8000288 <__aeabi_dsub>
 800d986:	4602      	mov	r2, r0
 800d988:	460b      	mov	r3, r1
 800d98a:	4606      	mov	r6, r0
 800d98c:	460f      	mov	r7, r1
 800d98e:	4640      	mov	r0, r8
 800d990:	4649      	mov	r1, r9
 800d992:	f7f2 fc79 	bl	8000288 <__aeabi_dsub>
 800d996:	9a05      	ldr	r2, [sp, #20]
 800d998:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d99c:	1ad3      	subs	r3, r2, r3
 800d99e:	2b31      	cmp	r3, #49	; 0x31
 800d9a0:	dc20      	bgt.n	800d9e4 <__ieee754_rem_pio2+0x26c>
 800d9a2:	e9c4 0100 	strd	r0, r1, [r4]
 800d9a6:	46c2      	mov	sl, r8
 800d9a8:	46cb      	mov	fp, r9
 800d9aa:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d9ae:	4650      	mov	r0, sl
 800d9b0:	4642      	mov	r2, r8
 800d9b2:	464b      	mov	r3, r9
 800d9b4:	4659      	mov	r1, fp
 800d9b6:	f7f2 fc67 	bl	8000288 <__aeabi_dsub>
 800d9ba:	463b      	mov	r3, r7
 800d9bc:	4632      	mov	r2, r6
 800d9be:	f7f2 fc63 	bl	8000288 <__aeabi_dsub>
 800d9c2:	9b04      	ldr	r3, [sp, #16]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d9ca:	f6bf af11 	bge.w	800d7f0 <__ieee754_rem_pio2+0x78>
 800d9ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d9d2:	6063      	str	r3, [r4, #4]
 800d9d4:	f8c4 8000 	str.w	r8, [r4]
 800d9d8:	60a0      	str	r0, [r4, #8]
 800d9da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9de:	60e3      	str	r3, [r4, #12]
 800d9e0:	426d      	negs	r5, r5
 800d9e2:	e705      	b.n	800d7f0 <__ieee754_rem_pio2+0x78>
 800d9e4:	a326      	add	r3, pc, #152	; (adr r3, 800da80 <__ieee754_rem_pio2+0x308>)
 800d9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9ee:	f7f2 fe03 	bl	80005f8 <__aeabi_dmul>
 800d9f2:	4606      	mov	r6, r0
 800d9f4:	460f      	mov	r7, r1
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	4640      	mov	r0, r8
 800d9fc:	4649      	mov	r1, r9
 800d9fe:	f7f2 fc43 	bl	8000288 <__aeabi_dsub>
 800da02:	4602      	mov	r2, r0
 800da04:	460b      	mov	r3, r1
 800da06:	4682      	mov	sl, r0
 800da08:	468b      	mov	fp, r1
 800da0a:	4640      	mov	r0, r8
 800da0c:	4649      	mov	r1, r9
 800da0e:	f7f2 fc3b 	bl	8000288 <__aeabi_dsub>
 800da12:	4632      	mov	r2, r6
 800da14:	463b      	mov	r3, r7
 800da16:	f7f2 fc37 	bl	8000288 <__aeabi_dsub>
 800da1a:	a31b      	add	r3, pc, #108	; (adr r3, 800da88 <__ieee754_rem_pio2+0x310>)
 800da1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da20:	4606      	mov	r6, r0
 800da22:	460f      	mov	r7, r1
 800da24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da28:	f7f2 fde6 	bl	80005f8 <__aeabi_dmul>
 800da2c:	4632      	mov	r2, r6
 800da2e:	463b      	mov	r3, r7
 800da30:	f7f2 fc2a 	bl	8000288 <__aeabi_dsub>
 800da34:	4606      	mov	r6, r0
 800da36:	460f      	mov	r7, r1
 800da38:	e764      	b.n	800d904 <__ieee754_rem_pio2+0x18c>
 800da3a:	4b1b      	ldr	r3, [pc, #108]	; (800daa8 <__ieee754_rem_pio2+0x330>)
 800da3c:	4598      	cmp	r8, r3
 800da3e:	dd35      	ble.n	800daac <__ieee754_rem_pio2+0x334>
 800da40:	ee10 2a10 	vmov	r2, s0
 800da44:	463b      	mov	r3, r7
 800da46:	4630      	mov	r0, r6
 800da48:	4639      	mov	r1, r7
 800da4a:	f7f2 fc1d 	bl	8000288 <__aeabi_dsub>
 800da4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800da52:	e9c4 0100 	strd	r0, r1, [r4]
 800da56:	e6a1      	b.n	800d79c <__ieee754_rem_pio2+0x24>
 800da58:	54400000 	.word	0x54400000
 800da5c:	3ff921fb 	.word	0x3ff921fb
 800da60:	1a626331 	.word	0x1a626331
 800da64:	3dd0b461 	.word	0x3dd0b461
 800da68:	1a600000 	.word	0x1a600000
 800da6c:	3dd0b461 	.word	0x3dd0b461
 800da70:	2e037073 	.word	0x2e037073
 800da74:	3ba3198a 	.word	0x3ba3198a
 800da78:	6dc9c883 	.word	0x6dc9c883
 800da7c:	3fe45f30 	.word	0x3fe45f30
 800da80:	2e000000 	.word	0x2e000000
 800da84:	3ba3198a 	.word	0x3ba3198a
 800da88:	252049c1 	.word	0x252049c1
 800da8c:	397b839a 	.word	0x397b839a
 800da90:	3fe921fb 	.word	0x3fe921fb
 800da94:	4002d97b 	.word	0x4002d97b
 800da98:	3ff921fb 	.word	0x3ff921fb
 800da9c:	413921fb 	.word	0x413921fb
 800daa0:	3fe00000 	.word	0x3fe00000
 800daa4:	0800f0a8 	.word	0x0800f0a8
 800daa8:	7fefffff 	.word	0x7fefffff
 800daac:	ea4f 5528 	mov.w	r5, r8, asr #20
 800dab0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800dab4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800dab8:	4630      	mov	r0, r6
 800daba:	460f      	mov	r7, r1
 800dabc:	f7f3 f84c 	bl	8000b58 <__aeabi_d2iz>
 800dac0:	f7f2 fd30 	bl	8000524 <__aeabi_i2d>
 800dac4:	4602      	mov	r2, r0
 800dac6:	460b      	mov	r3, r1
 800dac8:	4630      	mov	r0, r6
 800daca:	4639      	mov	r1, r7
 800dacc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dad0:	f7f2 fbda 	bl	8000288 <__aeabi_dsub>
 800dad4:	2200      	movs	r2, #0
 800dad6:	4b1f      	ldr	r3, [pc, #124]	; (800db54 <__ieee754_rem_pio2+0x3dc>)
 800dad8:	f7f2 fd8e 	bl	80005f8 <__aeabi_dmul>
 800dadc:	460f      	mov	r7, r1
 800dade:	4606      	mov	r6, r0
 800dae0:	f7f3 f83a 	bl	8000b58 <__aeabi_d2iz>
 800dae4:	f7f2 fd1e 	bl	8000524 <__aeabi_i2d>
 800dae8:	4602      	mov	r2, r0
 800daea:	460b      	mov	r3, r1
 800daec:	4630      	mov	r0, r6
 800daee:	4639      	mov	r1, r7
 800daf0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800daf4:	f7f2 fbc8 	bl	8000288 <__aeabi_dsub>
 800daf8:	2200      	movs	r2, #0
 800dafa:	4b16      	ldr	r3, [pc, #88]	; (800db54 <__ieee754_rem_pio2+0x3dc>)
 800dafc:	f7f2 fd7c 	bl	80005f8 <__aeabi_dmul>
 800db00:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800db04:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800db08:	f04f 0803 	mov.w	r8, #3
 800db0c:	2600      	movs	r6, #0
 800db0e:	2700      	movs	r7, #0
 800db10:	4632      	mov	r2, r6
 800db12:	463b      	mov	r3, r7
 800db14:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800db18:	f108 3aff 	add.w	sl, r8, #4294967295
 800db1c:	f7f2 ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800db20:	b9b0      	cbnz	r0, 800db50 <__ieee754_rem_pio2+0x3d8>
 800db22:	4b0d      	ldr	r3, [pc, #52]	; (800db58 <__ieee754_rem_pio2+0x3e0>)
 800db24:	9301      	str	r3, [sp, #4]
 800db26:	2302      	movs	r3, #2
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	462a      	mov	r2, r5
 800db2c:	4643      	mov	r3, r8
 800db2e:	4621      	mov	r1, r4
 800db30:	a806      	add	r0, sp, #24
 800db32:	f000 f98d 	bl	800de50 <__kernel_rem_pio2>
 800db36:	9b04      	ldr	r3, [sp, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	4605      	mov	r5, r0
 800db3c:	f6bf ae58 	bge.w	800d7f0 <__ieee754_rem_pio2+0x78>
 800db40:	6863      	ldr	r3, [r4, #4]
 800db42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db46:	6063      	str	r3, [r4, #4]
 800db48:	68e3      	ldr	r3, [r4, #12]
 800db4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db4e:	e746      	b.n	800d9de <__ieee754_rem_pio2+0x266>
 800db50:	46d0      	mov	r8, sl
 800db52:	e7dd      	b.n	800db10 <__ieee754_rem_pio2+0x398>
 800db54:	41700000 	.word	0x41700000
 800db58:	0800f128 	.word	0x0800f128

0800db5c <__ieee754_sqrt>:
 800db5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db60:	4955      	ldr	r1, [pc, #340]	; (800dcb8 <__ieee754_sqrt+0x15c>)
 800db62:	ec55 4b10 	vmov	r4, r5, d0
 800db66:	43a9      	bics	r1, r5
 800db68:	462b      	mov	r3, r5
 800db6a:	462a      	mov	r2, r5
 800db6c:	d112      	bne.n	800db94 <__ieee754_sqrt+0x38>
 800db6e:	ee10 2a10 	vmov	r2, s0
 800db72:	ee10 0a10 	vmov	r0, s0
 800db76:	4629      	mov	r1, r5
 800db78:	f7f2 fd3e 	bl	80005f8 <__aeabi_dmul>
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4620      	mov	r0, r4
 800db82:	4629      	mov	r1, r5
 800db84:	f7f2 fb82 	bl	800028c <__adddf3>
 800db88:	4604      	mov	r4, r0
 800db8a:	460d      	mov	r5, r1
 800db8c:	ec45 4b10 	vmov	d0, r4, r5
 800db90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db94:	2d00      	cmp	r5, #0
 800db96:	ee10 0a10 	vmov	r0, s0
 800db9a:	4621      	mov	r1, r4
 800db9c:	dc0f      	bgt.n	800dbbe <__ieee754_sqrt+0x62>
 800db9e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dba2:	4330      	orrs	r0, r6
 800dba4:	d0f2      	beq.n	800db8c <__ieee754_sqrt+0x30>
 800dba6:	b155      	cbz	r5, 800dbbe <__ieee754_sqrt+0x62>
 800dba8:	ee10 2a10 	vmov	r2, s0
 800dbac:	4620      	mov	r0, r4
 800dbae:	4629      	mov	r1, r5
 800dbb0:	f7f2 fb6a 	bl	8000288 <__aeabi_dsub>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	f7f2 fe48 	bl	800084c <__aeabi_ddiv>
 800dbbc:	e7e4      	b.n	800db88 <__ieee754_sqrt+0x2c>
 800dbbe:	151b      	asrs	r3, r3, #20
 800dbc0:	d073      	beq.n	800dcaa <__ieee754_sqrt+0x14e>
 800dbc2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dbc6:	07dd      	lsls	r5, r3, #31
 800dbc8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800dbcc:	bf48      	it	mi
 800dbce:	0fc8      	lsrmi	r0, r1, #31
 800dbd0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800dbd4:	bf44      	itt	mi
 800dbd6:	0049      	lslmi	r1, r1, #1
 800dbd8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800dbdc:	2500      	movs	r5, #0
 800dbde:	1058      	asrs	r0, r3, #1
 800dbe0:	0fcb      	lsrs	r3, r1, #31
 800dbe2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800dbe6:	0049      	lsls	r1, r1, #1
 800dbe8:	2316      	movs	r3, #22
 800dbea:	462c      	mov	r4, r5
 800dbec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800dbf0:	19a7      	adds	r7, r4, r6
 800dbf2:	4297      	cmp	r7, r2
 800dbf4:	bfde      	ittt	le
 800dbf6:	19bc      	addle	r4, r7, r6
 800dbf8:	1bd2      	suble	r2, r2, r7
 800dbfa:	19ad      	addle	r5, r5, r6
 800dbfc:	0fcf      	lsrs	r7, r1, #31
 800dbfe:	3b01      	subs	r3, #1
 800dc00:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800dc04:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dc08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dc0c:	d1f0      	bne.n	800dbf0 <__ieee754_sqrt+0x94>
 800dc0e:	f04f 0c20 	mov.w	ip, #32
 800dc12:	469e      	mov	lr, r3
 800dc14:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dc18:	42a2      	cmp	r2, r4
 800dc1a:	eb06 070e 	add.w	r7, r6, lr
 800dc1e:	dc02      	bgt.n	800dc26 <__ieee754_sqrt+0xca>
 800dc20:	d112      	bne.n	800dc48 <__ieee754_sqrt+0xec>
 800dc22:	428f      	cmp	r7, r1
 800dc24:	d810      	bhi.n	800dc48 <__ieee754_sqrt+0xec>
 800dc26:	2f00      	cmp	r7, #0
 800dc28:	eb07 0e06 	add.w	lr, r7, r6
 800dc2c:	da42      	bge.n	800dcb4 <__ieee754_sqrt+0x158>
 800dc2e:	f1be 0f00 	cmp.w	lr, #0
 800dc32:	db3f      	blt.n	800dcb4 <__ieee754_sqrt+0x158>
 800dc34:	f104 0801 	add.w	r8, r4, #1
 800dc38:	1b12      	subs	r2, r2, r4
 800dc3a:	428f      	cmp	r7, r1
 800dc3c:	bf88      	it	hi
 800dc3e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800dc42:	1bc9      	subs	r1, r1, r7
 800dc44:	4433      	add	r3, r6
 800dc46:	4644      	mov	r4, r8
 800dc48:	0052      	lsls	r2, r2, #1
 800dc4a:	f1bc 0c01 	subs.w	ip, ip, #1
 800dc4e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800dc52:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dc56:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dc5a:	d1dd      	bne.n	800dc18 <__ieee754_sqrt+0xbc>
 800dc5c:	430a      	orrs	r2, r1
 800dc5e:	d006      	beq.n	800dc6e <__ieee754_sqrt+0x112>
 800dc60:	1c5c      	adds	r4, r3, #1
 800dc62:	bf13      	iteet	ne
 800dc64:	3301      	addne	r3, #1
 800dc66:	3501      	addeq	r5, #1
 800dc68:	4663      	moveq	r3, ip
 800dc6a:	f023 0301 	bicne.w	r3, r3, #1
 800dc6e:	106a      	asrs	r2, r5, #1
 800dc70:	085b      	lsrs	r3, r3, #1
 800dc72:	07e9      	lsls	r1, r5, #31
 800dc74:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800dc78:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800dc7c:	bf48      	it	mi
 800dc7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dc82:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800dc86:	461c      	mov	r4, r3
 800dc88:	e780      	b.n	800db8c <__ieee754_sqrt+0x30>
 800dc8a:	0aca      	lsrs	r2, r1, #11
 800dc8c:	3815      	subs	r0, #21
 800dc8e:	0549      	lsls	r1, r1, #21
 800dc90:	2a00      	cmp	r2, #0
 800dc92:	d0fa      	beq.n	800dc8a <__ieee754_sqrt+0x12e>
 800dc94:	02d6      	lsls	r6, r2, #11
 800dc96:	d50a      	bpl.n	800dcae <__ieee754_sqrt+0x152>
 800dc98:	f1c3 0420 	rsb	r4, r3, #32
 800dc9c:	fa21 f404 	lsr.w	r4, r1, r4
 800dca0:	1e5d      	subs	r5, r3, #1
 800dca2:	4099      	lsls	r1, r3
 800dca4:	4322      	orrs	r2, r4
 800dca6:	1b43      	subs	r3, r0, r5
 800dca8:	e78b      	b.n	800dbc2 <__ieee754_sqrt+0x66>
 800dcaa:	4618      	mov	r0, r3
 800dcac:	e7f0      	b.n	800dc90 <__ieee754_sqrt+0x134>
 800dcae:	0052      	lsls	r2, r2, #1
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	e7ef      	b.n	800dc94 <__ieee754_sqrt+0x138>
 800dcb4:	46a0      	mov	r8, r4
 800dcb6:	e7bf      	b.n	800dc38 <__ieee754_sqrt+0xdc>
 800dcb8:	7ff00000 	.word	0x7ff00000
 800dcbc:	00000000 	.word	0x00000000

0800dcc0 <__kernel_cos>:
 800dcc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc4:	ec59 8b10 	vmov	r8, r9, d0
 800dcc8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800dccc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800dcd0:	ed2d 8b02 	vpush	{d8}
 800dcd4:	eeb0 8a41 	vmov.f32	s16, s2
 800dcd8:	eef0 8a61 	vmov.f32	s17, s3
 800dcdc:	da07      	bge.n	800dcee <__kernel_cos+0x2e>
 800dcde:	ee10 0a10 	vmov	r0, s0
 800dce2:	4649      	mov	r1, r9
 800dce4:	f7f2 ff38 	bl	8000b58 <__aeabi_d2iz>
 800dce8:	2800      	cmp	r0, #0
 800dcea:	f000 8089 	beq.w	800de00 <__kernel_cos+0x140>
 800dcee:	4642      	mov	r2, r8
 800dcf0:	464b      	mov	r3, r9
 800dcf2:	4640      	mov	r0, r8
 800dcf4:	4649      	mov	r1, r9
 800dcf6:	f7f2 fc7f 	bl	80005f8 <__aeabi_dmul>
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	4b4e      	ldr	r3, [pc, #312]	; (800de38 <__kernel_cos+0x178>)
 800dcfe:	4604      	mov	r4, r0
 800dd00:	460d      	mov	r5, r1
 800dd02:	f7f2 fc79 	bl	80005f8 <__aeabi_dmul>
 800dd06:	a340      	add	r3, pc, #256	; (adr r3, 800de08 <__kernel_cos+0x148>)
 800dd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0c:	4682      	mov	sl, r0
 800dd0e:	468b      	mov	fp, r1
 800dd10:	4620      	mov	r0, r4
 800dd12:	4629      	mov	r1, r5
 800dd14:	f7f2 fc70 	bl	80005f8 <__aeabi_dmul>
 800dd18:	a33d      	add	r3, pc, #244	; (adr r3, 800de10 <__kernel_cos+0x150>)
 800dd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1e:	f7f2 fab5 	bl	800028c <__adddf3>
 800dd22:	4622      	mov	r2, r4
 800dd24:	462b      	mov	r3, r5
 800dd26:	f7f2 fc67 	bl	80005f8 <__aeabi_dmul>
 800dd2a:	a33b      	add	r3, pc, #236	; (adr r3, 800de18 <__kernel_cos+0x158>)
 800dd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd30:	f7f2 faaa 	bl	8000288 <__aeabi_dsub>
 800dd34:	4622      	mov	r2, r4
 800dd36:	462b      	mov	r3, r5
 800dd38:	f7f2 fc5e 	bl	80005f8 <__aeabi_dmul>
 800dd3c:	a338      	add	r3, pc, #224	; (adr r3, 800de20 <__kernel_cos+0x160>)
 800dd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd42:	f7f2 faa3 	bl	800028c <__adddf3>
 800dd46:	4622      	mov	r2, r4
 800dd48:	462b      	mov	r3, r5
 800dd4a:	f7f2 fc55 	bl	80005f8 <__aeabi_dmul>
 800dd4e:	a336      	add	r3, pc, #216	; (adr r3, 800de28 <__kernel_cos+0x168>)
 800dd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd54:	f7f2 fa98 	bl	8000288 <__aeabi_dsub>
 800dd58:	4622      	mov	r2, r4
 800dd5a:	462b      	mov	r3, r5
 800dd5c:	f7f2 fc4c 	bl	80005f8 <__aeabi_dmul>
 800dd60:	a333      	add	r3, pc, #204	; (adr r3, 800de30 <__kernel_cos+0x170>)
 800dd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd66:	f7f2 fa91 	bl	800028c <__adddf3>
 800dd6a:	4622      	mov	r2, r4
 800dd6c:	462b      	mov	r3, r5
 800dd6e:	f7f2 fc43 	bl	80005f8 <__aeabi_dmul>
 800dd72:	4622      	mov	r2, r4
 800dd74:	462b      	mov	r3, r5
 800dd76:	f7f2 fc3f 	bl	80005f8 <__aeabi_dmul>
 800dd7a:	ec53 2b18 	vmov	r2, r3, d8
 800dd7e:	4604      	mov	r4, r0
 800dd80:	460d      	mov	r5, r1
 800dd82:	4640      	mov	r0, r8
 800dd84:	4649      	mov	r1, r9
 800dd86:	f7f2 fc37 	bl	80005f8 <__aeabi_dmul>
 800dd8a:	460b      	mov	r3, r1
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	4629      	mov	r1, r5
 800dd90:	4620      	mov	r0, r4
 800dd92:	f7f2 fa79 	bl	8000288 <__aeabi_dsub>
 800dd96:	4b29      	ldr	r3, [pc, #164]	; (800de3c <__kernel_cos+0x17c>)
 800dd98:	429e      	cmp	r6, r3
 800dd9a:	4680      	mov	r8, r0
 800dd9c:	4689      	mov	r9, r1
 800dd9e:	dc11      	bgt.n	800ddc4 <__kernel_cos+0x104>
 800dda0:	4602      	mov	r2, r0
 800dda2:	460b      	mov	r3, r1
 800dda4:	4650      	mov	r0, sl
 800dda6:	4659      	mov	r1, fp
 800dda8:	f7f2 fa6e 	bl	8000288 <__aeabi_dsub>
 800ddac:	460b      	mov	r3, r1
 800ddae:	4924      	ldr	r1, [pc, #144]	; (800de40 <__kernel_cos+0x180>)
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	2000      	movs	r0, #0
 800ddb4:	f7f2 fa68 	bl	8000288 <__aeabi_dsub>
 800ddb8:	ecbd 8b02 	vpop	{d8}
 800ddbc:	ec41 0b10 	vmov	d0, r0, r1
 800ddc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc4:	4b1f      	ldr	r3, [pc, #124]	; (800de44 <__kernel_cos+0x184>)
 800ddc6:	491e      	ldr	r1, [pc, #120]	; (800de40 <__kernel_cos+0x180>)
 800ddc8:	429e      	cmp	r6, r3
 800ddca:	bfcc      	ite	gt
 800ddcc:	4d1e      	ldrgt	r5, [pc, #120]	; (800de48 <__kernel_cos+0x188>)
 800ddce:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ddd2:	2400      	movs	r4, #0
 800ddd4:	4622      	mov	r2, r4
 800ddd6:	462b      	mov	r3, r5
 800ddd8:	2000      	movs	r0, #0
 800ddda:	f7f2 fa55 	bl	8000288 <__aeabi_dsub>
 800ddde:	4622      	mov	r2, r4
 800dde0:	4606      	mov	r6, r0
 800dde2:	460f      	mov	r7, r1
 800dde4:	462b      	mov	r3, r5
 800dde6:	4650      	mov	r0, sl
 800dde8:	4659      	mov	r1, fp
 800ddea:	f7f2 fa4d 	bl	8000288 <__aeabi_dsub>
 800ddee:	4642      	mov	r2, r8
 800ddf0:	464b      	mov	r3, r9
 800ddf2:	f7f2 fa49 	bl	8000288 <__aeabi_dsub>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	4630      	mov	r0, r6
 800ddfc:	4639      	mov	r1, r7
 800ddfe:	e7d9      	b.n	800ddb4 <__kernel_cos+0xf4>
 800de00:	2000      	movs	r0, #0
 800de02:	490f      	ldr	r1, [pc, #60]	; (800de40 <__kernel_cos+0x180>)
 800de04:	e7d8      	b.n	800ddb8 <__kernel_cos+0xf8>
 800de06:	bf00      	nop
 800de08:	be8838d4 	.word	0xbe8838d4
 800de0c:	bda8fae9 	.word	0xbda8fae9
 800de10:	bdb4b1c4 	.word	0xbdb4b1c4
 800de14:	3e21ee9e 	.word	0x3e21ee9e
 800de18:	809c52ad 	.word	0x809c52ad
 800de1c:	3e927e4f 	.word	0x3e927e4f
 800de20:	19cb1590 	.word	0x19cb1590
 800de24:	3efa01a0 	.word	0x3efa01a0
 800de28:	16c15177 	.word	0x16c15177
 800de2c:	3f56c16c 	.word	0x3f56c16c
 800de30:	5555554c 	.word	0x5555554c
 800de34:	3fa55555 	.word	0x3fa55555
 800de38:	3fe00000 	.word	0x3fe00000
 800de3c:	3fd33332 	.word	0x3fd33332
 800de40:	3ff00000 	.word	0x3ff00000
 800de44:	3fe90000 	.word	0x3fe90000
 800de48:	3fd20000 	.word	0x3fd20000
 800de4c:	00000000 	.word	0x00000000

0800de50 <__kernel_rem_pio2>:
 800de50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de54:	ed2d 8b02 	vpush	{d8}
 800de58:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800de5c:	1ed4      	subs	r4, r2, #3
 800de5e:	9308      	str	r3, [sp, #32]
 800de60:	9101      	str	r1, [sp, #4]
 800de62:	4bc5      	ldr	r3, [pc, #788]	; (800e178 <__kernel_rem_pio2+0x328>)
 800de64:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800de66:	9009      	str	r0, [sp, #36]	; 0x24
 800de68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de6c:	9304      	str	r3, [sp, #16]
 800de6e:	9b08      	ldr	r3, [sp, #32]
 800de70:	3b01      	subs	r3, #1
 800de72:	9307      	str	r3, [sp, #28]
 800de74:	2318      	movs	r3, #24
 800de76:	fb94 f4f3 	sdiv	r4, r4, r3
 800de7a:	f06f 0317 	mvn.w	r3, #23
 800de7e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800de82:	fb04 3303 	mla	r3, r4, r3, r3
 800de86:	eb03 0a02 	add.w	sl, r3, r2
 800de8a:	9b04      	ldr	r3, [sp, #16]
 800de8c:	9a07      	ldr	r2, [sp, #28]
 800de8e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800e168 <__kernel_rem_pio2+0x318>
 800de92:	eb03 0802 	add.w	r8, r3, r2
 800de96:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800de98:	1aa7      	subs	r7, r4, r2
 800de9a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800de9e:	ae22      	add	r6, sp, #136	; 0x88
 800dea0:	2500      	movs	r5, #0
 800dea2:	4545      	cmp	r5, r8
 800dea4:	dd13      	ble.n	800dece <__kernel_rem_pio2+0x7e>
 800dea6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800e168 <__kernel_rem_pio2+0x318>
 800deaa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800deae:	2600      	movs	r6, #0
 800deb0:	9b04      	ldr	r3, [sp, #16]
 800deb2:	429e      	cmp	r6, r3
 800deb4:	dc32      	bgt.n	800df1c <__kernel_rem_pio2+0xcc>
 800deb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deb8:	9302      	str	r3, [sp, #8]
 800deba:	9b08      	ldr	r3, [sp, #32]
 800debc:	199d      	adds	r5, r3, r6
 800debe:	ab22      	add	r3, sp, #136	; 0x88
 800dec0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dec4:	9306      	str	r3, [sp, #24]
 800dec6:	ec59 8b18 	vmov	r8, r9, d8
 800deca:	2700      	movs	r7, #0
 800decc:	e01f      	b.n	800df0e <__kernel_rem_pio2+0xbe>
 800dece:	42ef      	cmn	r7, r5
 800ded0:	d407      	bmi.n	800dee2 <__kernel_rem_pio2+0x92>
 800ded2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ded6:	f7f2 fb25 	bl	8000524 <__aeabi_i2d>
 800deda:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dede:	3501      	adds	r5, #1
 800dee0:	e7df      	b.n	800dea2 <__kernel_rem_pio2+0x52>
 800dee2:	ec51 0b18 	vmov	r0, r1, d8
 800dee6:	e7f8      	b.n	800deda <__kernel_rem_pio2+0x8a>
 800dee8:	9906      	ldr	r1, [sp, #24]
 800deea:	9d02      	ldr	r5, [sp, #8]
 800deec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800def0:	9106      	str	r1, [sp, #24]
 800def2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800def6:	9502      	str	r5, [sp, #8]
 800def8:	f7f2 fb7e 	bl	80005f8 <__aeabi_dmul>
 800defc:	4602      	mov	r2, r0
 800defe:	460b      	mov	r3, r1
 800df00:	4640      	mov	r0, r8
 800df02:	4649      	mov	r1, r9
 800df04:	f7f2 f9c2 	bl	800028c <__adddf3>
 800df08:	3701      	adds	r7, #1
 800df0a:	4680      	mov	r8, r0
 800df0c:	4689      	mov	r9, r1
 800df0e:	9b07      	ldr	r3, [sp, #28]
 800df10:	429f      	cmp	r7, r3
 800df12:	dde9      	ble.n	800dee8 <__kernel_rem_pio2+0x98>
 800df14:	e8eb 8902 	strd	r8, r9, [fp], #8
 800df18:	3601      	adds	r6, #1
 800df1a:	e7c9      	b.n	800deb0 <__kernel_rem_pio2+0x60>
 800df1c:	9b04      	ldr	r3, [sp, #16]
 800df1e:	aa0e      	add	r2, sp, #56	; 0x38
 800df20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df24:	930c      	str	r3, [sp, #48]	; 0x30
 800df26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800df28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800df2c:	9c04      	ldr	r4, [sp, #16]
 800df2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800df30:	ab9a      	add	r3, sp, #616	; 0x268
 800df32:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800df36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800df3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df3e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800df42:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800df46:	ab9a      	add	r3, sp, #616	; 0x268
 800df48:	445b      	add	r3, fp
 800df4a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800df4e:	2500      	movs	r5, #0
 800df50:	1b63      	subs	r3, r4, r5
 800df52:	2b00      	cmp	r3, #0
 800df54:	dc78      	bgt.n	800e048 <__kernel_rem_pio2+0x1f8>
 800df56:	4650      	mov	r0, sl
 800df58:	ec49 8b10 	vmov	d0, r8, r9
 800df5c:	f000 fe3c 	bl	800ebd8 <scalbn>
 800df60:	ec57 6b10 	vmov	r6, r7, d0
 800df64:	2200      	movs	r2, #0
 800df66:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800df6a:	ee10 0a10 	vmov	r0, s0
 800df6e:	4639      	mov	r1, r7
 800df70:	f7f2 fb42 	bl	80005f8 <__aeabi_dmul>
 800df74:	ec41 0b10 	vmov	d0, r0, r1
 800df78:	f000 fd1a 	bl	800e9b0 <floor>
 800df7c:	2200      	movs	r2, #0
 800df7e:	ec51 0b10 	vmov	r0, r1, d0
 800df82:	4b7e      	ldr	r3, [pc, #504]	; (800e17c <__kernel_rem_pio2+0x32c>)
 800df84:	f7f2 fb38 	bl	80005f8 <__aeabi_dmul>
 800df88:	4602      	mov	r2, r0
 800df8a:	460b      	mov	r3, r1
 800df8c:	4630      	mov	r0, r6
 800df8e:	4639      	mov	r1, r7
 800df90:	f7f2 f97a 	bl	8000288 <__aeabi_dsub>
 800df94:	460f      	mov	r7, r1
 800df96:	4606      	mov	r6, r0
 800df98:	f7f2 fdde 	bl	8000b58 <__aeabi_d2iz>
 800df9c:	9006      	str	r0, [sp, #24]
 800df9e:	f7f2 fac1 	bl	8000524 <__aeabi_i2d>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	4630      	mov	r0, r6
 800dfa8:	4639      	mov	r1, r7
 800dfaa:	f7f2 f96d 	bl	8000288 <__aeabi_dsub>
 800dfae:	f1ba 0f00 	cmp.w	sl, #0
 800dfb2:	4606      	mov	r6, r0
 800dfb4:	460f      	mov	r7, r1
 800dfb6:	dd6c      	ble.n	800e092 <__kernel_rem_pio2+0x242>
 800dfb8:	1e62      	subs	r2, r4, #1
 800dfba:	ab0e      	add	r3, sp, #56	; 0x38
 800dfbc:	f1ca 0118 	rsb	r1, sl, #24
 800dfc0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dfc4:	9d06      	ldr	r5, [sp, #24]
 800dfc6:	fa40 f301 	asr.w	r3, r0, r1
 800dfca:	441d      	add	r5, r3
 800dfcc:	408b      	lsls	r3, r1
 800dfce:	1ac0      	subs	r0, r0, r3
 800dfd0:	ab0e      	add	r3, sp, #56	; 0x38
 800dfd2:	9506      	str	r5, [sp, #24]
 800dfd4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800dfd8:	f1ca 0317 	rsb	r3, sl, #23
 800dfdc:	fa40 f303 	asr.w	r3, r0, r3
 800dfe0:	9302      	str	r3, [sp, #8]
 800dfe2:	9b02      	ldr	r3, [sp, #8]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	dd62      	ble.n	800e0ae <__kernel_rem_pio2+0x25e>
 800dfe8:	9b06      	ldr	r3, [sp, #24]
 800dfea:	2200      	movs	r2, #0
 800dfec:	3301      	adds	r3, #1
 800dfee:	9306      	str	r3, [sp, #24]
 800dff0:	4615      	mov	r5, r2
 800dff2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dff6:	4294      	cmp	r4, r2
 800dff8:	f300 8095 	bgt.w	800e126 <__kernel_rem_pio2+0x2d6>
 800dffc:	f1ba 0f00 	cmp.w	sl, #0
 800e000:	dd07      	ble.n	800e012 <__kernel_rem_pio2+0x1c2>
 800e002:	f1ba 0f01 	cmp.w	sl, #1
 800e006:	f000 80a2 	beq.w	800e14e <__kernel_rem_pio2+0x2fe>
 800e00a:	f1ba 0f02 	cmp.w	sl, #2
 800e00e:	f000 80c1 	beq.w	800e194 <__kernel_rem_pio2+0x344>
 800e012:	9b02      	ldr	r3, [sp, #8]
 800e014:	2b02      	cmp	r3, #2
 800e016:	d14a      	bne.n	800e0ae <__kernel_rem_pio2+0x25e>
 800e018:	4632      	mov	r2, r6
 800e01a:	463b      	mov	r3, r7
 800e01c:	2000      	movs	r0, #0
 800e01e:	4958      	ldr	r1, [pc, #352]	; (800e180 <__kernel_rem_pio2+0x330>)
 800e020:	f7f2 f932 	bl	8000288 <__aeabi_dsub>
 800e024:	4606      	mov	r6, r0
 800e026:	460f      	mov	r7, r1
 800e028:	2d00      	cmp	r5, #0
 800e02a:	d040      	beq.n	800e0ae <__kernel_rem_pio2+0x25e>
 800e02c:	4650      	mov	r0, sl
 800e02e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800e170 <__kernel_rem_pio2+0x320>
 800e032:	f000 fdd1 	bl	800ebd8 <scalbn>
 800e036:	4630      	mov	r0, r6
 800e038:	4639      	mov	r1, r7
 800e03a:	ec53 2b10 	vmov	r2, r3, d0
 800e03e:	f7f2 f923 	bl	8000288 <__aeabi_dsub>
 800e042:	4606      	mov	r6, r0
 800e044:	460f      	mov	r7, r1
 800e046:	e032      	b.n	800e0ae <__kernel_rem_pio2+0x25e>
 800e048:	2200      	movs	r2, #0
 800e04a:	4b4e      	ldr	r3, [pc, #312]	; (800e184 <__kernel_rem_pio2+0x334>)
 800e04c:	4640      	mov	r0, r8
 800e04e:	4649      	mov	r1, r9
 800e050:	f7f2 fad2 	bl	80005f8 <__aeabi_dmul>
 800e054:	f7f2 fd80 	bl	8000b58 <__aeabi_d2iz>
 800e058:	f7f2 fa64 	bl	8000524 <__aeabi_i2d>
 800e05c:	2200      	movs	r2, #0
 800e05e:	4b4a      	ldr	r3, [pc, #296]	; (800e188 <__kernel_rem_pio2+0x338>)
 800e060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e064:	f7f2 fac8 	bl	80005f8 <__aeabi_dmul>
 800e068:	4602      	mov	r2, r0
 800e06a:	460b      	mov	r3, r1
 800e06c:	4640      	mov	r0, r8
 800e06e:	4649      	mov	r1, r9
 800e070:	f7f2 f90a 	bl	8000288 <__aeabi_dsub>
 800e074:	f7f2 fd70 	bl	8000b58 <__aeabi_d2iz>
 800e078:	ab0e      	add	r3, sp, #56	; 0x38
 800e07a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800e07e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e082:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e086:	f7f2 f901 	bl	800028c <__adddf3>
 800e08a:	3501      	adds	r5, #1
 800e08c:	4680      	mov	r8, r0
 800e08e:	4689      	mov	r9, r1
 800e090:	e75e      	b.n	800df50 <__kernel_rem_pio2+0x100>
 800e092:	d105      	bne.n	800e0a0 <__kernel_rem_pio2+0x250>
 800e094:	1e63      	subs	r3, r4, #1
 800e096:	aa0e      	add	r2, sp, #56	; 0x38
 800e098:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e09c:	15c3      	asrs	r3, r0, #23
 800e09e:	e79f      	b.n	800dfe0 <__kernel_rem_pio2+0x190>
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	4b3a      	ldr	r3, [pc, #232]	; (800e18c <__kernel_rem_pio2+0x33c>)
 800e0a4:	f7f2 fd2e 	bl	8000b04 <__aeabi_dcmpge>
 800e0a8:	2800      	cmp	r0, #0
 800e0aa:	d139      	bne.n	800e120 <__kernel_rem_pio2+0x2d0>
 800e0ac:	9002      	str	r0, [sp, #8]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	4639      	mov	r1, r7
 800e0b6:	f7f2 fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	f000 80c7 	beq.w	800e24e <__kernel_rem_pio2+0x3fe>
 800e0c0:	1e65      	subs	r5, r4, #1
 800e0c2:	462b      	mov	r3, r5
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	9904      	ldr	r1, [sp, #16]
 800e0c8:	428b      	cmp	r3, r1
 800e0ca:	da6a      	bge.n	800e1a2 <__kernel_rem_pio2+0x352>
 800e0cc:	2a00      	cmp	r2, #0
 800e0ce:	f000 8088 	beq.w	800e1e2 <__kernel_rem_pio2+0x392>
 800e0d2:	ab0e      	add	r3, sp, #56	; 0x38
 800e0d4:	f1aa 0a18 	sub.w	sl, sl, #24
 800e0d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	f000 80b4 	beq.w	800e24a <__kernel_rem_pio2+0x3fa>
 800e0e2:	4650      	mov	r0, sl
 800e0e4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800e170 <__kernel_rem_pio2+0x320>
 800e0e8:	f000 fd76 	bl	800ebd8 <scalbn>
 800e0ec:	00ec      	lsls	r4, r5, #3
 800e0ee:	ab72      	add	r3, sp, #456	; 0x1c8
 800e0f0:	191e      	adds	r6, r3, r4
 800e0f2:	ec59 8b10 	vmov	r8, r9, d0
 800e0f6:	f106 0a08 	add.w	sl, r6, #8
 800e0fa:	462f      	mov	r7, r5
 800e0fc:	2f00      	cmp	r7, #0
 800e0fe:	f280 80df 	bge.w	800e2c0 <__kernel_rem_pio2+0x470>
 800e102:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800e168 <__kernel_rem_pio2+0x318>
 800e106:	f04f 0a00 	mov.w	sl, #0
 800e10a:	eba5 030a 	sub.w	r3, r5, sl
 800e10e:	2b00      	cmp	r3, #0
 800e110:	f2c0 810a 	blt.w	800e328 <__kernel_rem_pio2+0x4d8>
 800e114:	f8df b078 	ldr.w	fp, [pc, #120]	; 800e190 <__kernel_rem_pio2+0x340>
 800e118:	ec59 8b18 	vmov	r8, r9, d8
 800e11c:	2700      	movs	r7, #0
 800e11e:	e0f5      	b.n	800e30c <__kernel_rem_pio2+0x4bc>
 800e120:	2302      	movs	r3, #2
 800e122:	9302      	str	r3, [sp, #8]
 800e124:	e760      	b.n	800dfe8 <__kernel_rem_pio2+0x198>
 800e126:	ab0e      	add	r3, sp, #56	; 0x38
 800e128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e12c:	b94d      	cbnz	r5, 800e142 <__kernel_rem_pio2+0x2f2>
 800e12e:	b12b      	cbz	r3, 800e13c <__kernel_rem_pio2+0x2ec>
 800e130:	a80e      	add	r0, sp, #56	; 0x38
 800e132:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e136:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e13a:	2301      	movs	r3, #1
 800e13c:	3201      	adds	r2, #1
 800e13e:	461d      	mov	r5, r3
 800e140:	e759      	b.n	800dff6 <__kernel_rem_pio2+0x1a6>
 800e142:	a80e      	add	r0, sp, #56	; 0x38
 800e144:	1acb      	subs	r3, r1, r3
 800e146:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e14a:	462b      	mov	r3, r5
 800e14c:	e7f6      	b.n	800e13c <__kernel_rem_pio2+0x2ec>
 800e14e:	1e62      	subs	r2, r4, #1
 800e150:	ab0e      	add	r3, sp, #56	; 0x38
 800e152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e156:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e15a:	a90e      	add	r1, sp, #56	; 0x38
 800e15c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e160:	e757      	b.n	800e012 <__kernel_rem_pio2+0x1c2>
 800e162:	bf00      	nop
 800e164:	f3af 8000 	nop.w
	...
 800e174:	3ff00000 	.word	0x3ff00000
 800e178:	0800f270 	.word	0x0800f270
 800e17c:	40200000 	.word	0x40200000
 800e180:	3ff00000 	.word	0x3ff00000
 800e184:	3e700000 	.word	0x3e700000
 800e188:	41700000 	.word	0x41700000
 800e18c:	3fe00000 	.word	0x3fe00000
 800e190:	0800f230 	.word	0x0800f230
 800e194:	1e62      	subs	r2, r4, #1
 800e196:	ab0e      	add	r3, sp, #56	; 0x38
 800e198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e19c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e1a0:	e7db      	b.n	800e15a <__kernel_rem_pio2+0x30a>
 800e1a2:	a90e      	add	r1, sp, #56	; 0x38
 800e1a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e1a8:	3b01      	subs	r3, #1
 800e1aa:	430a      	orrs	r2, r1
 800e1ac:	e78b      	b.n	800e0c6 <__kernel_rem_pio2+0x276>
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e1b4:	2900      	cmp	r1, #0
 800e1b6:	d0fa      	beq.n	800e1ae <__kernel_rem_pio2+0x35e>
 800e1b8:	9a08      	ldr	r2, [sp, #32]
 800e1ba:	4422      	add	r2, r4
 800e1bc:	00d2      	lsls	r2, r2, #3
 800e1be:	a922      	add	r1, sp, #136	; 0x88
 800e1c0:	18e3      	adds	r3, r4, r3
 800e1c2:	9206      	str	r2, [sp, #24]
 800e1c4:	440a      	add	r2, r1
 800e1c6:	9302      	str	r3, [sp, #8]
 800e1c8:	f10b 0108 	add.w	r1, fp, #8
 800e1cc:	f102 0308 	add.w	r3, r2, #8
 800e1d0:	1c66      	adds	r6, r4, #1
 800e1d2:	910a      	str	r1, [sp, #40]	; 0x28
 800e1d4:	2500      	movs	r5, #0
 800e1d6:	930d      	str	r3, [sp, #52]	; 0x34
 800e1d8:	9b02      	ldr	r3, [sp, #8]
 800e1da:	42b3      	cmp	r3, r6
 800e1dc:	da04      	bge.n	800e1e8 <__kernel_rem_pio2+0x398>
 800e1de:	461c      	mov	r4, r3
 800e1e0:	e6a6      	b.n	800df30 <__kernel_rem_pio2+0xe0>
 800e1e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	e7e3      	b.n	800e1b0 <__kernel_rem_pio2+0x360>
 800e1e8:	9b06      	ldr	r3, [sp, #24]
 800e1ea:	18ef      	adds	r7, r5, r3
 800e1ec:	ab22      	add	r3, sp, #136	; 0x88
 800e1ee:	441f      	add	r7, r3
 800e1f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e1f6:	f7f2 f995 	bl	8000524 <__aeabi_i2d>
 800e1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1fc:	461c      	mov	r4, r3
 800e1fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e200:	e9c7 0100 	strd	r0, r1, [r7]
 800e204:	eb03 0b05 	add.w	fp, r3, r5
 800e208:	2700      	movs	r7, #0
 800e20a:	f04f 0800 	mov.w	r8, #0
 800e20e:	f04f 0900 	mov.w	r9, #0
 800e212:	9b07      	ldr	r3, [sp, #28]
 800e214:	429f      	cmp	r7, r3
 800e216:	dd08      	ble.n	800e22a <__kernel_rem_pio2+0x3da>
 800e218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e21a:	aa72      	add	r2, sp, #456	; 0x1c8
 800e21c:	18eb      	adds	r3, r5, r3
 800e21e:	4413      	add	r3, r2
 800e220:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800e224:	3601      	adds	r6, #1
 800e226:	3508      	adds	r5, #8
 800e228:	e7d6      	b.n	800e1d8 <__kernel_rem_pio2+0x388>
 800e22a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e22e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e232:	f7f2 f9e1 	bl	80005f8 <__aeabi_dmul>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	4640      	mov	r0, r8
 800e23c:	4649      	mov	r1, r9
 800e23e:	f7f2 f825 	bl	800028c <__adddf3>
 800e242:	3701      	adds	r7, #1
 800e244:	4680      	mov	r8, r0
 800e246:	4689      	mov	r9, r1
 800e248:	e7e3      	b.n	800e212 <__kernel_rem_pio2+0x3c2>
 800e24a:	3d01      	subs	r5, #1
 800e24c:	e741      	b.n	800e0d2 <__kernel_rem_pio2+0x282>
 800e24e:	f1ca 0000 	rsb	r0, sl, #0
 800e252:	ec47 6b10 	vmov	d0, r6, r7
 800e256:	f000 fcbf 	bl	800ebd8 <scalbn>
 800e25a:	ec57 6b10 	vmov	r6, r7, d0
 800e25e:	2200      	movs	r2, #0
 800e260:	4b99      	ldr	r3, [pc, #612]	; (800e4c8 <__kernel_rem_pio2+0x678>)
 800e262:	ee10 0a10 	vmov	r0, s0
 800e266:	4639      	mov	r1, r7
 800e268:	f7f2 fc4c 	bl	8000b04 <__aeabi_dcmpge>
 800e26c:	b1f8      	cbz	r0, 800e2ae <__kernel_rem_pio2+0x45e>
 800e26e:	2200      	movs	r2, #0
 800e270:	4b96      	ldr	r3, [pc, #600]	; (800e4cc <__kernel_rem_pio2+0x67c>)
 800e272:	4630      	mov	r0, r6
 800e274:	4639      	mov	r1, r7
 800e276:	f7f2 f9bf 	bl	80005f8 <__aeabi_dmul>
 800e27a:	f7f2 fc6d 	bl	8000b58 <__aeabi_d2iz>
 800e27e:	4680      	mov	r8, r0
 800e280:	f7f2 f950 	bl	8000524 <__aeabi_i2d>
 800e284:	2200      	movs	r2, #0
 800e286:	4b90      	ldr	r3, [pc, #576]	; (800e4c8 <__kernel_rem_pio2+0x678>)
 800e288:	f7f2 f9b6 	bl	80005f8 <__aeabi_dmul>
 800e28c:	460b      	mov	r3, r1
 800e28e:	4602      	mov	r2, r0
 800e290:	4639      	mov	r1, r7
 800e292:	4630      	mov	r0, r6
 800e294:	f7f1 fff8 	bl	8000288 <__aeabi_dsub>
 800e298:	f7f2 fc5e 	bl	8000b58 <__aeabi_d2iz>
 800e29c:	1c65      	adds	r5, r4, #1
 800e29e:	ab0e      	add	r3, sp, #56	; 0x38
 800e2a0:	f10a 0a18 	add.w	sl, sl, #24
 800e2a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e2a8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e2ac:	e719      	b.n	800e0e2 <__kernel_rem_pio2+0x292>
 800e2ae:	4630      	mov	r0, r6
 800e2b0:	4639      	mov	r1, r7
 800e2b2:	f7f2 fc51 	bl	8000b58 <__aeabi_d2iz>
 800e2b6:	ab0e      	add	r3, sp, #56	; 0x38
 800e2b8:	4625      	mov	r5, r4
 800e2ba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e2be:	e710      	b.n	800e0e2 <__kernel_rem_pio2+0x292>
 800e2c0:	ab0e      	add	r3, sp, #56	; 0x38
 800e2c2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e2c6:	f7f2 f92d 	bl	8000524 <__aeabi_i2d>
 800e2ca:	4642      	mov	r2, r8
 800e2cc:	464b      	mov	r3, r9
 800e2ce:	f7f2 f993 	bl	80005f8 <__aeabi_dmul>
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e2d8:	4b7c      	ldr	r3, [pc, #496]	; (800e4cc <__kernel_rem_pio2+0x67c>)
 800e2da:	4640      	mov	r0, r8
 800e2dc:	4649      	mov	r1, r9
 800e2de:	f7f2 f98b 	bl	80005f8 <__aeabi_dmul>
 800e2e2:	3f01      	subs	r7, #1
 800e2e4:	4680      	mov	r8, r0
 800e2e6:	4689      	mov	r9, r1
 800e2e8:	e708      	b.n	800e0fc <__kernel_rem_pio2+0x2ac>
 800e2ea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800e2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800e2f6:	f7f2 f97f 	bl	80005f8 <__aeabi_dmul>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	4640      	mov	r0, r8
 800e300:	4649      	mov	r1, r9
 800e302:	f7f1 ffc3 	bl	800028c <__adddf3>
 800e306:	3701      	adds	r7, #1
 800e308:	4680      	mov	r8, r0
 800e30a:	4689      	mov	r9, r1
 800e30c:	9b04      	ldr	r3, [sp, #16]
 800e30e:	429f      	cmp	r7, r3
 800e310:	dc01      	bgt.n	800e316 <__kernel_rem_pio2+0x4c6>
 800e312:	45ba      	cmp	sl, r7
 800e314:	dae9      	bge.n	800e2ea <__kernel_rem_pio2+0x49a>
 800e316:	ab4a      	add	r3, sp, #296	; 0x128
 800e318:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e31c:	e9c3 8900 	strd	r8, r9, [r3]
 800e320:	f10a 0a01 	add.w	sl, sl, #1
 800e324:	3e08      	subs	r6, #8
 800e326:	e6f0      	b.n	800e10a <__kernel_rem_pio2+0x2ba>
 800e328:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e32a:	2b03      	cmp	r3, #3
 800e32c:	d85b      	bhi.n	800e3e6 <__kernel_rem_pio2+0x596>
 800e32e:	e8df f003 	tbb	[pc, r3]
 800e332:	264a      	.short	0x264a
 800e334:	0226      	.short	0x0226
 800e336:	ab9a      	add	r3, sp, #616	; 0x268
 800e338:	441c      	add	r4, r3
 800e33a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e33e:	46a2      	mov	sl, r4
 800e340:	46ab      	mov	fp, r5
 800e342:	f1bb 0f00 	cmp.w	fp, #0
 800e346:	dc6c      	bgt.n	800e422 <__kernel_rem_pio2+0x5d2>
 800e348:	46a2      	mov	sl, r4
 800e34a:	46ab      	mov	fp, r5
 800e34c:	f1bb 0f01 	cmp.w	fp, #1
 800e350:	f300 8086 	bgt.w	800e460 <__kernel_rem_pio2+0x610>
 800e354:	2000      	movs	r0, #0
 800e356:	2100      	movs	r1, #0
 800e358:	2d01      	cmp	r5, #1
 800e35a:	f300 80a0 	bgt.w	800e49e <__kernel_rem_pio2+0x64e>
 800e35e:	9b02      	ldr	r3, [sp, #8]
 800e360:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e364:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800e368:	2b00      	cmp	r3, #0
 800e36a:	f040 809e 	bne.w	800e4aa <__kernel_rem_pio2+0x65a>
 800e36e:	9b01      	ldr	r3, [sp, #4]
 800e370:	e9c3 7800 	strd	r7, r8, [r3]
 800e374:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e378:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e37c:	e033      	b.n	800e3e6 <__kernel_rem_pio2+0x596>
 800e37e:	3408      	adds	r4, #8
 800e380:	ab4a      	add	r3, sp, #296	; 0x128
 800e382:	441c      	add	r4, r3
 800e384:	462e      	mov	r6, r5
 800e386:	2000      	movs	r0, #0
 800e388:	2100      	movs	r1, #0
 800e38a:	2e00      	cmp	r6, #0
 800e38c:	da3a      	bge.n	800e404 <__kernel_rem_pio2+0x5b4>
 800e38e:	9b02      	ldr	r3, [sp, #8]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d03d      	beq.n	800e410 <__kernel_rem_pio2+0x5c0>
 800e394:	4602      	mov	r2, r0
 800e396:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e39a:	9c01      	ldr	r4, [sp, #4]
 800e39c:	e9c4 2300 	strd	r2, r3, [r4]
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e3a8:	f7f1 ff6e 	bl	8000288 <__aeabi_dsub>
 800e3ac:	ae4c      	add	r6, sp, #304	; 0x130
 800e3ae:	2401      	movs	r4, #1
 800e3b0:	42a5      	cmp	r5, r4
 800e3b2:	da30      	bge.n	800e416 <__kernel_rem_pio2+0x5c6>
 800e3b4:	9b02      	ldr	r3, [sp, #8]
 800e3b6:	b113      	cbz	r3, 800e3be <__kernel_rem_pio2+0x56e>
 800e3b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e3bc:	4619      	mov	r1, r3
 800e3be:	9b01      	ldr	r3, [sp, #4]
 800e3c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e3c4:	e00f      	b.n	800e3e6 <__kernel_rem_pio2+0x596>
 800e3c6:	ab9a      	add	r3, sp, #616	; 0x268
 800e3c8:	441c      	add	r4, r3
 800e3ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	2d00      	cmp	r5, #0
 800e3d4:	da10      	bge.n	800e3f8 <__kernel_rem_pio2+0x5a8>
 800e3d6:	9b02      	ldr	r3, [sp, #8]
 800e3d8:	b113      	cbz	r3, 800e3e0 <__kernel_rem_pio2+0x590>
 800e3da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e3de:	4619      	mov	r1, r3
 800e3e0:	9b01      	ldr	r3, [sp, #4]
 800e3e2:	e9c3 0100 	strd	r0, r1, [r3]
 800e3e6:	9b06      	ldr	r3, [sp, #24]
 800e3e8:	f003 0007 	and.w	r0, r3, #7
 800e3ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e3f0:	ecbd 8b02 	vpop	{d8}
 800e3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3f8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e3fc:	f7f1 ff46 	bl	800028c <__adddf3>
 800e400:	3d01      	subs	r5, #1
 800e402:	e7e6      	b.n	800e3d2 <__kernel_rem_pio2+0x582>
 800e404:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e408:	f7f1 ff40 	bl	800028c <__adddf3>
 800e40c:	3e01      	subs	r6, #1
 800e40e:	e7bc      	b.n	800e38a <__kernel_rem_pio2+0x53a>
 800e410:	4602      	mov	r2, r0
 800e412:	460b      	mov	r3, r1
 800e414:	e7c1      	b.n	800e39a <__kernel_rem_pio2+0x54a>
 800e416:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e41a:	f7f1 ff37 	bl	800028c <__adddf3>
 800e41e:	3401      	adds	r4, #1
 800e420:	e7c6      	b.n	800e3b0 <__kernel_rem_pio2+0x560>
 800e422:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800e426:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e42a:	4640      	mov	r0, r8
 800e42c:	ec53 2b17 	vmov	r2, r3, d7
 800e430:	4649      	mov	r1, r9
 800e432:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e436:	f7f1 ff29 	bl	800028c <__adddf3>
 800e43a:	4602      	mov	r2, r0
 800e43c:	460b      	mov	r3, r1
 800e43e:	4606      	mov	r6, r0
 800e440:	460f      	mov	r7, r1
 800e442:	4640      	mov	r0, r8
 800e444:	4649      	mov	r1, r9
 800e446:	f7f1 ff1f 	bl	8000288 <__aeabi_dsub>
 800e44a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e44e:	f7f1 ff1d 	bl	800028c <__adddf3>
 800e452:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e456:	e9ca 0100 	strd	r0, r1, [sl]
 800e45a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800e45e:	e770      	b.n	800e342 <__kernel_rem_pio2+0x4f2>
 800e460:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800e464:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e468:	4630      	mov	r0, r6
 800e46a:	ec53 2b17 	vmov	r2, r3, d7
 800e46e:	4639      	mov	r1, r7
 800e470:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e474:	f7f1 ff0a 	bl	800028c <__adddf3>
 800e478:	4602      	mov	r2, r0
 800e47a:	460b      	mov	r3, r1
 800e47c:	4680      	mov	r8, r0
 800e47e:	4689      	mov	r9, r1
 800e480:	4630      	mov	r0, r6
 800e482:	4639      	mov	r1, r7
 800e484:	f7f1 ff00 	bl	8000288 <__aeabi_dsub>
 800e488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e48c:	f7f1 fefe 	bl	800028c <__adddf3>
 800e490:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e494:	e9ca 0100 	strd	r0, r1, [sl]
 800e498:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800e49c:	e756      	b.n	800e34c <__kernel_rem_pio2+0x4fc>
 800e49e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e4a2:	f7f1 fef3 	bl	800028c <__adddf3>
 800e4a6:	3d01      	subs	r5, #1
 800e4a8:	e756      	b.n	800e358 <__kernel_rem_pio2+0x508>
 800e4aa:	9b01      	ldr	r3, [sp, #4]
 800e4ac:	9a01      	ldr	r2, [sp, #4]
 800e4ae:	601f      	str	r7, [r3, #0]
 800e4b0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e4b4:	605c      	str	r4, [r3, #4]
 800e4b6:	609d      	str	r5, [r3, #8]
 800e4b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e4bc:	60d3      	str	r3, [r2, #12]
 800e4be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4c2:	6110      	str	r0, [r2, #16]
 800e4c4:	6153      	str	r3, [r2, #20]
 800e4c6:	e78e      	b.n	800e3e6 <__kernel_rem_pio2+0x596>
 800e4c8:	41700000 	.word	0x41700000
 800e4cc:	3e700000 	.word	0x3e700000

0800e4d0 <__kernel_sin>:
 800e4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d4:	ec55 4b10 	vmov	r4, r5, d0
 800e4d8:	b085      	sub	sp, #20
 800e4da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e4de:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e4e2:	ed8d 1b00 	vstr	d1, [sp]
 800e4e6:	9002      	str	r0, [sp, #8]
 800e4e8:	da06      	bge.n	800e4f8 <__kernel_sin+0x28>
 800e4ea:	ee10 0a10 	vmov	r0, s0
 800e4ee:	4629      	mov	r1, r5
 800e4f0:	f7f2 fb32 	bl	8000b58 <__aeabi_d2iz>
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	d051      	beq.n	800e59c <__kernel_sin+0xcc>
 800e4f8:	4622      	mov	r2, r4
 800e4fa:	462b      	mov	r3, r5
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	4629      	mov	r1, r5
 800e500:	f7f2 f87a 	bl	80005f8 <__aeabi_dmul>
 800e504:	4682      	mov	sl, r0
 800e506:	468b      	mov	fp, r1
 800e508:	4602      	mov	r2, r0
 800e50a:	460b      	mov	r3, r1
 800e50c:	4620      	mov	r0, r4
 800e50e:	4629      	mov	r1, r5
 800e510:	f7f2 f872 	bl	80005f8 <__aeabi_dmul>
 800e514:	a341      	add	r3, pc, #260	; (adr r3, 800e61c <__kernel_sin+0x14c>)
 800e516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51a:	4680      	mov	r8, r0
 800e51c:	4689      	mov	r9, r1
 800e51e:	4650      	mov	r0, sl
 800e520:	4659      	mov	r1, fp
 800e522:	f7f2 f869 	bl	80005f8 <__aeabi_dmul>
 800e526:	a33f      	add	r3, pc, #252	; (adr r3, 800e624 <__kernel_sin+0x154>)
 800e528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52c:	f7f1 feac 	bl	8000288 <__aeabi_dsub>
 800e530:	4652      	mov	r2, sl
 800e532:	465b      	mov	r3, fp
 800e534:	f7f2 f860 	bl	80005f8 <__aeabi_dmul>
 800e538:	a33c      	add	r3, pc, #240	; (adr r3, 800e62c <__kernel_sin+0x15c>)
 800e53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53e:	f7f1 fea5 	bl	800028c <__adddf3>
 800e542:	4652      	mov	r2, sl
 800e544:	465b      	mov	r3, fp
 800e546:	f7f2 f857 	bl	80005f8 <__aeabi_dmul>
 800e54a:	a33a      	add	r3, pc, #232	; (adr r3, 800e634 <__kernel_sin+0x164>)
 800e54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e550:	f7f1 fe9a 	bl	8000288 <__aeabi_dsub>
 800e554:	4652      	mov	r2, sl
 800e556:	465b      	mov	r3, fp
 800e558:	f7f2 f84e 	bl	80005f8 <__aeabi_dmul>
 800e55c:	a337      	add	r3, pc, #220	; (adr r3, 800e63c <__kernel_sin+0x16c>)
 800e55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e562:	f7f1 fe93 	bl	800028c <__adddf3>
 800e566:	9b02      	ldr	r3, [sp, #8]
 800e568:	4606      	mov	r6, r0
 800e56a:	460f      	mov	r7, r1
 800e56c:	b9db      	cbnz	r3, 800e5a6 <__kernel_sin+0xd6>
 800e56e:	4602      	mov	r2, r0
 800e570:	460b      	mov	r3, r1
 800e572:	4650      	mov	r0, sl
 800e574:	4659      	mov	r1, fp
 800e576:	f7f2 f83f 	bl	80005f8 <__aeabi_dmul>
 800e57a:	a325      	add	r3, pc, #148	; (adr r3, 800e610 <__kernel_sin+0x140>)
 800e57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e580:	f7f1 fe82 	bl	8000288 <__aeabi_dsub>
 800e584:	4642      	mov	r2, r8
 800e586:	464b      	mov	r3, r9
 800e588:	f7f2 f836 	bl	80005f8 <__aeabi_dmul>
 800e58c:	4602      	mov	r2, r0
 800e58e:	460b      	mov	r3, r1
 800e590:	4620      	mov	r0, r4
 800e592:	4629      	mov	r1, r5
 800e594:	f7f1 fe7a 	bl	800028c <__adddf3>
 800e598:	4604      	mov	r4, r0
 800e59a:	460d      	mov	r5, r1
 800e59c:	ec45 4b10 	vmov	d0, r4, r5
 800e5a0:	b005      	add	sp, #20
 800e5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	4b1b      	ldr	r3, [pc, #108]	; (800e618 <__kernel_sin+0x148>)
 800e5aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5ae:	f7f2 f823 	bl	80005f8 <__aeabi_dmul>
 800e5b2:	4632      	mov	r2, r6
 800e5b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5b8:	463b      	mov	r3, r7
 800e5ba:	4640      	mov	r0, r8
 800e5bc:	4649      	mov	r1, r9
 800e5be:	f7f2 f81b 	bl	80005f8 <__aeabi_dmul>
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5ca:	f7f1 fe5d 	bl	8000288 <__aeabi_dsub>
 800e5ce:	4652      	mov	r2, sl
 800e5d0:	465b      	mov	r3, fp
 800e5d2:	f7f2 f811 	bl	80005f8 <__aeabi_dmul>
 800e5d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5da:	f7f1 fe55 	bl	8000288 <__aeabi_dsub>
 800e5de:	a30c      	add	r3, pc, #48	; (adr r3, 800e610 <__kernel_sin+0x140>)
 800e5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e4:	4606      	mov	r6, r0
 800e5e6:	460f      	mov	r7, r1
 800e5e8:	4640      	mov	r0, r8
 800e5ea:	4649      	mov	r1, r9
 800e5ec:	f7f2 f804 	bl	80005f8 <__aeabi_dmul>
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	4639      	mov	r1, r7
 800e5f8:	f7f1 fe48 	bl	800028c <__adddf3>
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	460b      	mov	r3, r1
 800e600:	4620      	mov	r0, r4
 800e602:	4629      	mov	r1, r5
 800e604:	f7f1 fe40 	bl	8000288 <__aeabi_dsub>
 800e608:	e7c6      	b.n	800e598 <__kernel_sin+0xc8>
 800e60a:	bf00      	nop
 800e60c:	f3af 8000 	nop.w
 800e610:	55555549 	.word	0x55555549
 800e614:	3fc55555 	.word	0x3fc55555
 800e618:	3fe00000 	.word	0x3fe00000
 800e61c:	5acfd57c 	.word	0x5acfd57c
 800e620:	3de5d93a 	.word	0x3de5d93a
 800e624:	8a2b9ceb 	.word	0x8a2b9ceb
 800e628:	3e5ae5e6 	.word	0x3e5ae5e6
 800e62c:	57b1fe7d 	.word	0x57b1fe7d
 800e630:	3ec71de3 	.word	0x3ec71de3
 800e634:	19c161d5 	.word	0x19c161d5
 800e638:	3f2a01a0 	.word	0x3f2a01a0
 800e63c:	1110f8a6 	.word	0x1110f8a6
 800e640:	3f811111 	.word	0x3f811111
 800e644:	00000000 	.word	0x00000000

0800e648 <atan>:
 800e648:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e64c:	ec55 4b10 	vmov	r4, r5, d0
 800e650:	4bc3      	ldr	r3, [pc, #780]	; (800e960 <atan+0x318>)
 800e652:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e656:	429e      	cmp	r6, r3
 800e658:	46ab      	mov	fp, r5
 800e65a:	dd18      	ble.n	800e68e <atan+0x46>
 800e65c:	4bc1      	ldr	r3, [pc, #772]	; (800e964 <atan+0x31c>)
 800e65e:	429e      	cmp	r6, r3
 800e660:	dc01      	bgt.n	800e666 <atan+0x1e>
 800e662:	d109      	bne.n	800e678 <atan+0x30>
 800e664:	b144      	cbz	r4, 800e678 <atan+0x30>
 800e666:	4622      	mov	r2, r4
 800e668:	462b      	mov	r3, r5
 800e66a:	4620      	mov	r0, r4
 800e66c:	4629      	mov	r1, r5
 800e66e:	f7f1 fe0d 	bl	800028c <__adddf3>
 800e672:	4604      	mov	r4, r0
 800e674:	460d      	mov	r5, r1
 800e676:	e006      	b.n	800e686 <atan+0x3e>
 800e678:	f1bb 0f00 	cmp.w	fp, #0
 800e67c:	f340 8131 	ble.w	800e8e2 <atan+0x29a>
 800e680:	a59b      	add	r5, pc, #620	; (adr r5, 800e8f0 <atan+0x2a8>)
 800e682:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e686:	ec45 4b10 	vmov	d0, r4, r5
 800e68a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e68e:	4bb6      	ldr	r3, [pc, #728]	; (800e968 <atan+0x320>)
 800e690:	429e      	cmp	r6, r3
 800e692:	dc14      	bgt.n	800e6be <atan+0x76>
 800e694:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e698:	429e      	cmp	r6, r3
 800e69a:	dc0d      	bgt.n	800e6b8 <atan+0x70>
 800e69c:	a396      	add	r3, pc, #600	; (adr r3, 800e8f8 <atan+0x2b0>)
 800e69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a2:	ee10 0a10 	vmov	r0, s0
 800e6a6:	4629      	mov	r1, r5
 800e6a8:	f7f1 fdf0 	bl	800028c <__adddf3>
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	4baf      	ldr	r3, [pc, #700]	; (800e96c <atan+0x324>)
 800e6b0:	f7f2 fa32 	bl	8000b18 <__aeabi_dcmpgt>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	d1e6      	bne.n	800e686 <atan+0x3e>
 800e6b8:	f04f 3aff 	mov.w	sl, #4294967295
 800e6bc:	e02b      	b.n	800e716 <atan+0xce>
 800e6be:	f000 f963 	bl	800e988 <fabs>
 800e6c2:	4bab      	ldr	r3, [pc, #684]	; (800e970 <atan+0x328>)
 800e6c4:	429e      	cmp	r6, r3
 800e6c6:	ec55 4b10 	vmov	r4, r5, d0
 800e6ca:	f300 80bf 	bgt.w	800e84c <atan+0x204>
 800e6ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e6d2:	429e      	cmp	r6, r3
 800e6d4:	f300 80a0 	bgt.w	800e818 <atan+0x1d0>
 800e6d8:	ee10 2a10 	vmov	r2, s0
 800e6dc:	ee10 0a10 	vmov	r0, s0
 800e6e0:	462b      	mov	r3, r5
 800e6e2:	4629      	mov	r1, r5
 800e6e4:	f7f1 fdd2 	bl	800028c <__adddf3>
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	4ba0      	ldr	r3, [pc, #640]	; (800e96c <atan+0x324>)
 800e6ec:	f7f1 fdcc 	bl	8000288 <__aeabi_dsub>
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	4606      	mov	r6, r0
 800e6f4:	460f      	mov	r7, r1
 800e6f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	4629      	mov	r1, r5
 800e6fe:	f7f1 fdc5 	bl	800028c <__adddf3>
 800e702:	4602      	mov	r2, r0
 800e704:	460b      	mov	r3, r1
 800e706:	4630      	mov	r0, r6
 800e708:	4639      	mov	r1, r7
 800e70a:	f7f2 f89f 	bl	800084c <__aeabi_ddiv>
 800e70e:	f04f 0a00 	mov.w	sl, #0
 800e712:	4604      	mov	r4, r0
 800e714:	460d      	mov	r5, r1
 800e716:	4622      	mov	r2, r4
 800e718:	462b      	mov	r3, r5
 800e71a:	4620      	mov	r0, r4
 800e71c:	4629      	mov	r1, r5
 800e71e:	f7f1 ff6b 	bl	80005f8 <__aeabi_dmul>
 800e722:	4602      	mov	r2, r0
 800e724:	460b      	mov	r3, r1
 800e726:	4680      	mov	r8, r0
 800e728:	4689      	mov	r9, r1
 800e72a:	f7f1 ff65 	bl	80005f8 <__aeabi_dmul>
 800e72e:	a374      	add	r3, pc, #464	; (adr r3, 800e900 <atan+0x2b8>)
 800e730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e734:	4606      	mov	r6, r0
 800e736:	460f      	mov	r7, r1
 800e738:	f7f1 ff5e 	bl	80005f8 <__aeabi_dmul>
 800e73c:	a372      	add	r3, pc, #456	; (adr r3, 800e908 <atan+0x2c0>)
 800e73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e742:	f7f1 fda3 	bl	800028c <__adddf3>
 800e746:	4632      	mov	r2, r6
 800e748:	463b      	mov	r3, r7
 800e74a:	f7f1 ff55 	bl	80005f8 <__aeabi_dmul>
 800e74e:	a370      	add	r3, pc, #448	; (adr r3, 800e910 <atan+0x2c8>)
 800e750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e754:	f7f1 fd9a 	bl	800028c <__adddf3>
 800e758:	4632      	mov	r2, r6
 800e75a:	463b      	mov	r3, r7
 800e75c:	f7f1 ff4c 	bl	80005f8 <__aeabi_dmul>
 800e760:	a36d      	add	r3, pc, #436	; (adr r3, 800e918 <atan+0x2d0>)
 800e762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e766:	f7f1 fd91 	bl	800028c <__adddf3>
 800e76a:	4632      	mov	r2, r6
 800e76c:	463b      	mov	r3, r7
 800e76e:	f7f1 ff43 	bl	80005f8 <__aeabi_dmul>
 800e772:	a36b      	add	r3, pc, #428	; (adr r3, 800e920 <atan+0x2d8>)
 800e774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e778:	f7f1 fd88 	bl	800028c <__adddf3>
 800e77c:	4632      	mov	r2, r6
 800e77e:	463b      	mov	r3, r7
 800e780:	f7f1 ff3a 	bl	80005f8 <__aeabi_dmul>
 800e784:	a368      	add	r3, pc, #416	; (adr r3, 800e928 <atan+0x2e0>)
 800e786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78a:	f7f1 fd7f 	bl	800028c <__adddf3>
 800e78e:	4642      	mov	r2, r8
 800e790:	464b      	mov	r3, r9
 800e792:	f7f1 ff31 	bl	80005f8 <__aeabi_dmul>
 800e796:	a366      	add	r3, pc, #408	; (adr r3, 800e930 <atan+0x2e8>)
 800e798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79c:	4680      	mov	r8, r0
 800e79e:	4689      	mov	r9, r1
 800e7a0:	4630      	mov	r0, r6
 800e7a2:	4639      	mov	r1, r7
 800e7a4:	f7f1 ff28 	bl	80005f8 <__aeabi_dmul>
 800e7a8:	a363      	add	r3, pc, #396	; (adr r3, 800e938 <atan+0x2f0>)
 800e7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ae:	f7f1 fd6b 	bl	8000288 <__aeabi_dsub>
 800e7b2:	4632      	mov	r2, r6
 800e7b4:	463b      	mov	r3, r7
 800e7b6:	f7f1 ff1f 	bl	80005f8 <__aeabi_dmul>
 800e7ba:	a361      	add	r3, pc, #388	; (adr r3, 800e940 <atan+0x2f8>)
 800e7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c0:	f7f1 fd62 	bl	8000288 <__aeabi_dsub>
 800e7c4:	4632      	mov	r2, r6
 800e7c6:	463b      	mov	r3, r7
 800e7c8:	f7f1 ff16 	bl	80005f8 <__aeabi_dmul>
 800e7cc:	a35e      	add	r3, pc, #376	; (adr r3, 800e948 <atan+0x300>)
 800e7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d2:	f7f1 fd59 	bl	8000288 <__aeabi_dsub>
 800e7d6:	4632      	mov	r2, r6
 800e7d8:	463b      	mov	r3, r7
 800e7da:	f7f1 ff0d 	bl	80005f8 <__aeabi_dmul>
 800e7de:	a35c      	add	r3, pc, #368	; (adr r3, 800e950 <atan+0x308>)
 800e7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e4:	f7f1 fd50 	bl	8000288 <__aeabi_dsub>
 800e7e8:	4632      	mov	r2, r6
 800e7ea:	463b      	mov	r3, r7
 800e7ec:	f7f1 ff04 	bl	80005f8 <__aeabi_dmul>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	4640      	mov	r0, r8
 800e7f6:	4649      	mov	r1, r9
 800e7f8:	f7f1 fd48 	bl	800028c <__adddf3>
 800e7fc:	4622      	mov	r2, r4
 800e7fe:	462b      	mov	r3, r5
 800e800:	f7f1 fefa 	bl	80005f8 <__aeabi_dmul>
 800e804:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e808:	4602      	mov	r2, r0
 800e80a:	460b      	mov	r3, r1
 800e80c:	d14b      	bne.n	800e8a6 <atan+0x25e>
 800e80e:	4620      	mov	r0, r4
 800e810:	4629      	mov	r1, r5
 800e812:	f7f1 fd39 	bl	8000288 <__aeabi_dsub>
 800e816:	e72c      	b.n	800e672 <atan+0x2a>
 800e818:	ee10 0a10 	vmov	r0, s0
 800e81c:	2200      	movs	r2, #0
 800e81e:	4b53      	ldr	r3, [pc, #332]	; (800e96c <atan+0x324>)
 800e820:	4629      	mov	r1, r5
 800e822:	f7f1 fd31 	bl	8000288 <__aeabi_dsub>
 800e826:	2200      	movs	r2, #0
 800e828:	4606      	mov	r6, r0
 800e82a:	460f      	mov	r7, r1
 800e82c:	4b4f      	ldr	r3, [pc, #316]	; (800e96c <atan+0x324>)
 800e82e:	4620      	mov	r0, r4
 800e830:	4629      	mov	r1, r5
 800e832:	f7f1 fd2b 	bl	800028c <__adddf3>
 800e836:	4602      	mov	r2, r0
 800e838:	460b      	mov	r3, r1
 800e83a:	4630      	mov	r0, r6
 800e83c:	4639      	mov	r1, r7
 800e83e:	f7f2 f805 	bl	800084c <__aeabi_ddiv>
 800e842:	f04f 0a01 	mov.w	sl, #1
 800e846:	4604      	mov	r4, r0
 800e848:	460d      	mov	r5, r1
 800e84a:	e764      	b.n	800e716 <atan+0xce>
 800e84c:	4b49      	ldr	r3, [pc, #292]	; (800e974 <atan+0x32c>)
 800e84e:	429e      	cmp	r6, r3
 800e850:	dc1d      	bgt.n	800e88e <atan+0x246>
 800e852:	ee10 0a10 	vmov	r0, s0
 800e856:	2200      	movs	r2, #0
 800e858:	4b47      	ldr	r3, [pc, #284]	; (800e978 <atan+0x330>)
 800e85a:	4629      	mov	r1, r5
 800e85c:	f7f1 fd14 	bl	8000288 <__aeabi_dsub>
 800e860:	2200      	movs	r2, #0
 800e862:	4606      	mov	r6, r0
 800e864:	460f      	mov	r7, r1
 800e866:	4b44      	ldr	r3, [pc, #272]	; (800e978 <atan+0x330>)
 800e868:	4620      	mov	r0, r4
 800e86a:	4629      	mov	r1, r5
 800e86c:	f7f1 fec4 	bl	80005f8 <__aeabi_dmul>
 800e870:	2200      	movs	r2, #0
 800e872:	4b3e      	ldr	r3, [pc, #248]	; (800e96c <atan+0x324>)
 800e874:	f7f1 fd0a 	bl	800028c <__adddf3>
 800e878:	4602      	mov	r2, r0
 800e87a:	460b      	mov	r3, r1
 800e87c:	4630      	mov	r0, r6
 800e87e:	4639      	mov	r1, r7
 800e880:	f7f1 ffe4 	bl	800084c <__aeabi_ddiv>
 800e884:	f04f 0a02 	mov.w	sl, #2
 800e888:	4604      	mov	r4, r0
 800e88a:	460d      	mov	r5, r1
 800e88c:	e743      	b.n	800e716 <atan+0xce>
 800e88e:	462b      	mov	r3, r5
 800e890:	ee10 2a10 	vmov	r2, s0
 800e894:	2000      	movs	r0, #0
 800e896:	4939      	ldr	r1, [pc, #228]	; (800e97c <atan+0x334>)
 800e898:	f7f1 ffd8 	bl	800084c <__aeabi_ddiv>
 800e89c:	f04f 0a03 	mov.w	sl, #3
 800e8a0:	4604      	mov	r4, r0
 800e8a2:	460d      	mov	r5, r1
 800e8a4:	e737      	b.n	800e716 <atan+0xce>
 800e8a6:	4b36      	ldr	r3, [pc, #216]	; (800e980 <atan+0x338>)
 800e8a8:	4e36      	ldr	r6, [pc, #216]	; (800e984 <atan+0x33c>)
 800e8aa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800e8ae:	4456      	add	r6, sl
 800e8b0:	449a      	add	sl, r3
 800e8b2:	e9da 2300 	ldrd	r2, r3, [sl]
 800e8b6:	f7f1 fce7 	bl	8000288 <__aeabi_dsub>
 800e8ba:	4622      	mov	r2, r4
 800e8bc:	462b      	mov	r3, r5
 800e8be:	f7f1 fce3 	bl	8000288 <__aeabi_dsub>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e8ca:	f7f1 fcdd 	bl	8000288 <__aeabi_dsub>
 800e8ce:	f1bb 0f00 	cmp.w	fp, #0
 800e8d2:	4604      	mov	r4, r0
 800e8d4:	460d      	mov	r5, r1
 800e8d6:	f6bf aed6 	bge.w	800e686 <atan+0x3e>
 800e8da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8de:	461d      	mov	r5, r3
 800e8e0:	e6d1      	b.n	800e686 <atan+0x3e>
 800e8e2:	a51d      	add	r5, pc, #116	; (adr r5, 800e958 <atan+0x310>)
 800e8e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e8e8:	e6cd      	b.n	800e686 <atan+0x3e>
 800e8ea:	bf00      	nop
 800e8ec:	f3af 8000 	nop.w
 800e8f0:	54442d18 	.word	0x54442d18
 800e8f4:	3ff921fb 	.word	0x3ff921fb
 800e8f8:	8800759c 	.word	0x8800759c
 800e8fc:	7e37e43c 	.word	0x7e37e43c
 800e900:	e322da11 	.word	0xe322da11
 800e904:	3f90ad3a 	.word	0x3f90ad3a
 800e908:	24760deb 	.word	0x24760deb
 800e90c:	3fa97b4b 	.word	0x3fa97b4b
 800e910:	a0d03d51 	.word	0xa0d03d51
 800e914:	3fb10d66 	.word	0x3fb10d66
 800e918:	c54c206e 	.word	0xc54c206e
 800e91c:	3fb745cd 	.word	0x3fb745cd
 800e920:	920083ff 	.word	0x920083ff
 800e924:	3fc24924 	.word	0x3fc24924
 800e928:	5555550d 	.word	0x5555550d
 800e92c:	3fd55555 	.word	0x3fd55555
 800e930:	2c6a6c2f 	.word	0x2c6a6c2f
 800e934:	bfa2b444 	.word	0xbfa2b444
 800e938:	52defd9a 	.word	0x52defd9a
 800e93c:	3fadde2d 	.word	0x3fadde2d
 800e940:	af749a6d 	.word	0xaf749a6d
 800e944:	3fb3b0f2 	.word	0x3fb3b0f2
 800e948:	fe231671 	.word	0xfe231671
 800e94c:	3fbc71c6 	.word	0x3fbc71c6
 800e950:	9998ebc4 	.word	0x9998ebc4
 800e954:	3fc99999 	.word	0x3fc99999
 800e958:	54442d18 	.word	0x54442d18
 800e95c:	bff921fb 	.word	0xbff921fb
 800e960:	440fffff 	.word	0x440fffff
 800e964:	7ff00000 	.word	0x7ff00000
 800e968:	3fdbffff 	.word	0x3fdbffff
 800e96c:	3ff00000 	.word	0x3ff00000
 800e970:	3ff2ffff 	.word	0x3ff2ffff
 800e974:	40037fff 	.word	0x40037fff
 800e978:	3ff80000 	.word	0x3ff80000
 800e97c:	bff00000 	.word	0xbff00000
 800e980:	0800f2a0 	.word	0x0800f2a0
 800e984:	0800f280 	.word	0x0800f280

0800e988 <fabs>:
 800e988:	ec51 0b10 	vmov	r0, r1, d0
 800e98c:	ee10 2a10 	vmov	r2, s0
 800e990:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e994:	ec43 2b10 	vmov	d0, r2, r3
 800e998:	4770      	bx	lr

0800e99a <finite>:
 800e99a:	ee10 3a90 	vmov	r3, s1
 800e99e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800e9a2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e9a6:	0fc0      	lsrs	r0, r0, #31
 800e9a8:	4770      	bx	lr
 800e9aa:	0000      	movs	r0, r0
 800e9ac:	0000      	movs	r0, r0
	...

0800e9b0 <floor>:
 800e9b0:	ec51 0b10 	vmov	r0, r1, d0
 800e9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e9bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e9c0:	2e13      	cmp	r6, #19
 800e9c2:	460c      	mov	r4, r1
 800e9c4:	ee10 5a10 	vmov	r5, s0
 800e9c8:	4680      	mov	r8, r0
 800e9ca:	dc34      	bgt.n	800ea36 <floor+0x86>
 800e9cc:	2e00      	cmp	r6, #0
 800e9ce:	da16      	bge.n	800e9fe <floor+0x4e>
 800e9d0:	a335      	add	r3, pc, #212	; (adr r3, 800eaa8 <floor+0xf8>)
 800e9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d6:	f7f1 fc59 	bl	800028c <__adddf3>
 800e9da:	2200      	movs	r2, #0
 800e9dc:	2300      	movs	r3, #0
 800e9de:	f7f2 f89b 	bl	8000b18 <__aeabi_dcmpgt>
 800e9e2:	b148      	cbz	r0, 800e9f8 <floor+0x48>
 800e9e4:	2c00      	cmp	r4, #0
 800e9e6:	da59      	bge.n	800ea9c <floor+0xec>
 800e9e8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e9ec:	4a30      	ldr	r2, [pc, #192]	; (800eab0 <floor+0x100>)
 800e9ee:	432b      	orrs	r3, r5
 800e9f0:	2500      	movs	r5, #0
 800e9f2:	42ab      	cmp	r3, r5
 800e9f4:	bf18      	it	ne
 800e9f6:	4614      	movne	r4, r2
 800e9f8:	4621      	mov	r1, r4
 800e9fa:	4628      	mov	r0, r5
 800e9fc:	e025      	b.n	800ea4a <floor+0x9a>
 800e9fe:	4f2d      	ldr	r7, [pc, #180]	; (800eab4 <floor+0x104>)
 800ea00:	4137      	asrs	r7, r6
 800ea02:	ea01 0307 	and.w	r3, r1, r7
 800ea06:	4303      	orrs	r3, r0
 800ea08:	d01f      	beq.n	800ea4a <floor+0x9a>
 800ea0a:	a327      	add	r3, pc, #156	; (adr r3, 800eaa8 <floor+0xf8>)
 800ea0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea10:	f7f1 fc3c 	bl	800028c <__adddf3>
 800ea14:	2200      	movs	r2, #0
 800ea16:	2300      	movs	r3, #0
 800ea18:	f7f2 f87e 	bl	8000b18 <__aeabi_dcmpgt>
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	d0eb      	beq.n	800e9f8 <floor+0x48>
 800ea20:	2c00      	cmp	r4, #0
 800ea22:	bfbe      	ittt	lt
 800ea24:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ea28:	fa43 f606 	asrlt.w	r6, r3, r6
 800ea2c:	19a4      	addlt	r4, r4, r6
 800ea2e:	ea24 0407 	bic.w	r4, r4, r7
 800ea32:	2500      	movs	r5, #0
 800ea34:	e7e0      	b.n	800e9f8 <floor+0x48>
 800ea36:	2e33      	cmp	r6, #51	; 0x33
 800ea38:	dd0b      	ble.n	800ea52 <floor+0xa2>
 800ea3a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ea3e:	d104      	bne.n	800ea4a <floor+0x9a>
 800ea40:	ee10 2a10 	vmov	r2, s0
 800ea44:	460b      	mov	r3, r1
 800ea46:	f7f1 fc21 	bl	800028c <__adddf3>
 800ea4a:	ec41 0b10 	vmov	d0, r0, r1
 800ea4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea52:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ea56:	f04f 33ff 	mov.w	r3, #4294967295
 800ea5a:	fa23 f707 	lsr.w	r7, r3, r7
 800ea5e:	4207      	tst	r7, r0
 800ea60:	d0f3      	beq.n	800ea4a <floor+0x9a>
 800ea62:	a311      	add	r3, pc, #68	; (adr r3, 800eaa8 <floor+0xf8>)
 800ea64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea68:	f7f1 fc10 	bl	800028c <__adddf3>
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	2300      	movs	r3, #0
 800ea70:	f7f2 f852 	bl	8000b18 <__aeabi_dcmpgt>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	d0bf      	beq.n	800e9f8 <floor+0x48>
 800ea78:	2c00      	cmp	r4, #0
 800ea7a:	da02      	bge.n	800ea82 <floor+0xd2>
 800ea7c:	2e14      	cmp	r6, #20
 800ea7e:	d103      	bne.n	800ea88 <floor+0xd8>
 800ea80:	3401      	adds	r4, #1
 800ea82:	ea25 0507 	bic.w	r5, r5, r7
 800ea86:	e7b7      	b.n	800e9f8 <floor+0x48>
 800ea88:	2301      	movs	r3, #1
 800ea8a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ea8e:	fa03 f606 	lsl.w	r6, r3, r6
 800ea92:	4435      	add	r5, r6
 800ea94:	4545      	cmp	r5, r8
 800ea96:	bf38      	it	cc
 800ea98:	18e4      	addcc	r4, r4, r3
 800ea9a:	e7f2      	b.n	800ea82 <floor+0xd2>
 800ea9c:	2500      	movs	r5, #0
 800ea9e:	462c      	mov	r4, r5
 800eaa0:	e7aa      	b.n	800e9f8 <floor+0x48>
 800eaa2:	bf00      	nop
 800eaa4:	f3af 8000 	nop.w
 800eaa8:	8800759c 	.word	0x8800759c
 800eaac:	7e37e43c 	.word	0x7e37e43c
 800eab0:	bff00000 	.word	0xbff00000
 800eab4:	000fffff 	.word	0x000fffff

0800eab8 <matherr>:
 800eab8:	2000      	movs	r0, #0
 800eaba:	4770      	bx	lr
 800eabc:	0000      	movs	r0, r0
	...

0800eac0 <nan>:
 800eac0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eac8 <nan+0x8>
 800eac4:	4770      	bx	lr
 800eac6:	bf00      	nop
 800eac8:	00000000 	.word	0x00000000
 800eacc:	7ff80000 	.word	0x7ff80000

0800ead0 <rint>:
 800ead0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ead2:	ec51 0b10 	vmov	r0, r1, d0
 800ead6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800eada:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800eade:	2e13      	cmp	r6, #19
 800eae0:	460b      	mov	r3, r1
 800eae2:	ee10 4a10 	vmov	r4, s0
 800eae6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800eaea:	dc56      	bgt.n	800eb9a <rint+0xca>
 800eaec:	2e00      	cmp	r6, #0
 800eaee:	da2b      	bge.n	800eb48 <rint+0x78>
 800eaf0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800eaf4:	4302      	orrs	r2, r0
 800eaf6:	d023      	beq.n	800eb40 <rint+0x70>
 800eaf8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800eafc:	4302      	orrs	r2, r0
 800eafe:	4254      	negs	r4, r2
 800eb00:	4314      	orrs	r4, r2
 800eb02:	0c4b      	lsrs	r3, r1, #17
 800eb04:	0b24      	lsrs	r4, r4, #12
 800eb06:	045b      	lsls	r3, r3, #17
 800eb08:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800eb0c:	ea44 0103 	orr.w	r1, r4, r3
 800eb10:	460b      	mov	r3, r1
 800eb12:	492f      	ldr	r1, [pc, #188]	; (800ebd0 <rint+0x100>)
 800eb14:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800eb18:	e9d1 6700 	ldrd	r6, r7, [r1]
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	4639      	mov	r1, r7
 800eb20:	4630      	mov	r0, r6
 800eb22:	f7f1 fbb3 	bl	800028c <__adddf3>
 800eb26:	e9cd 0100 	strd	r0, r1, [sp]
 800eb2a:	463b      	mov	r3, r7
 800eb2c:	4632      	mov	r2, r6
 800eb2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb32:	f7f1 fba9 	bl	8000288 <__aeabi_dsub>
 800eb36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eb3a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800eb3e:	4639      	mov	r1, r7
 800eb40:	ec41 0b10 	vmov	d0, r0, r1
 800eb44:	b003      	add	sp, #12
 800eb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb48:	4a22      	ldr	r2, [pc, #136]	; (800ebd4 <rint+0x104>)
 800eb4a:	4132      	asrs	r2, r6
 800eb4c:	ea01 0702 	and.w	r7, r1, r2
 800eb50:	4307      	orrs	r7, r0
 800eb52:	d0f5      	beq.n	800eb40 <rint+0x70>
 800eb54:	0852      	lsrs	r2, r2, #1
 800eb56:	4011      	ands	r1, r2
 800eb58:	430c      	orrs	r4, r1
 800eb5a:	d00b      	beq.n	800eb74 <rint+0xa4>
 800eb5c:	ea23 0202 	bic.w	r2, r3, r2
 800eb60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800eb64:	2e13      	cmp	r6, #19
 800eb66:	fa43 f306 	asr.w	r3, r3, r6
 800eb6a:	bf0c      	ite	eq
 800eb6c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800eb70:	2400      	movne	r4, #0
 800eb72:	4313      	orrs	r3, r2
 800eb74:	4916      	ldr	r1, [pc, #88]	; (800ebd0 <rint+0x100>)
 800eb76:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800eb7a:	4622      	mov	r2, r4
 800eb7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800eb80:	4620      	mov	r0, r4
 800eb82:	4629      	mov	r1, r5
 800eb84:	f7f1 fb82 	bl	800028c <__adddf3>
 800eb88:	e9cd 0100 	strd	r0, r1, [sp]
 800eb8c:	4622      	mov	r2, r4
 800eb8e:	462b      	mov	r3, r5
 800eb90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb94:	f7f1 fb78 	bl	8000288 <__aeabi_dsub>
 800eb98:	e7d2      	b.n	800eb40 <rint+0x70>
 800eb9a:	2e33      	cmp	r6, #51	; 0x33
 800eb9c:	dd07      	ble.n	800ebae <rint+0xde>
 800eb9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800eba2:	d1cd      	bne.n	800eb40 <rint+0x70>
 800eba4:	ee10 2a10 	vmov	r2, s0
 800eba8:	f7f1 fb70 	bl	800028c <__adddf3>
 800ebac:	e7c8      	b.n	800eb40 <rint+0x70>
 800ebae:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800ebb2:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb6:	40f2      	lsrs	r2, r6
 800ebb8:	4210      	tst	r0, r2
 800ebba:	d0c1      	beq.n	800eb40 <rint+0x70>
 800ebbc:	0852      	lsrs	r2, r2, #1
 800ebbe:	4210      	tst	r0, r2
 800ebc0:	bf1f      	itttt	ne
 800ebc2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ebc6:	ea20 0202 	bicne.w	r2, r0, r2
 800ebca:	4134      	asrne	r4, r6
 800ebcc:	4314      	orrne	r4, r2
 800ebce:	e7d1      	b.n	800eb74 <rint+0xa4>
 800ebd0:	0800f2c0 	.word	0x0800f2c0
 800ebd4:	000fffff 	.word	0x000fffff

0800ebd8 <scalbn>:
 800ebd8:	b570      	push	{r4, r5, r6, lr}
 800ebda:	ec55 4b10 	vmov	r4, r5, d0
 800ebde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ebe2:	4606      	mov	r6, r0
 800ebe4:	462b      	mov	r3, r5
 800ebe6:	b9aa      	cbnz	r2, 800ec14 <scalbn+0x3c>
 800ebe8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ebec:	4323      	orrs	r3, r4
 800ebee:	d03b      	beq.n	800ec68 <scalbn+0x90>
 800ebf0:	4b31      	ldr	r3, [pc, #196]	; (800ecb8 <scalbn+0xe0>)
 800ebf2:	4629      	mov	r1, r5
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	ee10 0a10 	vmov	r0, s0
 800ebfa:	f7f1 fcfd 	bl	80005f8 <__aeabi_dmul>
 800ebfe:	4b2f      	ldr	r3, [pc, #188]	; (800ecbc <scalbn+0xe4>)
 800ec00:	429e      	cmp	r6, r3
 800ec02:	4604      	mov	r4, r0
 800ec04:	460d      	mov	r5, r1
 800ec06:	da12      	bge.n	800ec2e <scalbn+0x56>
 800ec08:	a327      	add	r3, pc, #156	; (adr r3, 800eca8 <scalbn+0xd0>)
 800ec0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0e:	f7f1 fcf3 	bl	80005f8 <__aeabi_dmul>
 800ec12:	e009      	b.n	800ec28 <scalbn+0x50>
 800ec14:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ec18:	428a      	cmp	r2, r1
 800ec1a:	d10c      	bne.n	800ec36 <scalbn+0x5e>
 800ec1c:	ee10 2a10 	vmov	r2, s0
 800ec20:	4620      	mov	r0, r4
 800ec22:	4629      	mov	r1, r5
 800ec24:	f7f1 fb32 	bl	800028c <__adddf3>
 800ec28:	4604      	mov	r4, r0
 800ec2a:	460d      	mov	r5, r1
 800ec2c:	e01c      	b.n	800ec68 <scalbn+0x90>
 800ec2e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ec32:	460b      	mov	r3, r1
 800ec34:	3a36      	subs	r2, #54	; 0x36
 800ec36:	4432      	add	r2, r6
 800ec38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ec3c:	428a      	cmp	r2, r1
 800ec3e:	dd0b      	ble.n	800ec58 <scalbn+0x80>
 800ec40:	ec45 4b11 	vmov	d1, r4, r5
 800ec44:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800ecb0 <scalbn+0xd8>
 800ec48:	f000 f83c 	bl	800ecc4 <copysign>
 800ec4c:	a318      	add	r3, pc, #96	; (adr r3, 800ecb0 <scalbn+0xd8>)
 800ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec52:	ec51 0b10 	vmov	r0, r1, d0
 800ec56:	e7da      	b.n	800ec0e <scalbn+0x36>
 800ec58:	2a00      	cmp	r2, #0
 800ec5a:	dd08      	ble.n	800ec6e <scalbn+0x96>
 800ec5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ec60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ec64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ec68:	ec45 4b10 	vmov	d0, r4, r5
 800ec6c:	bd70      	pop	{r4, r5, r6, pc}
 800ec6e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ec72:	da0d      	bge.n	800ec90 <scalbn+0xb8>
 800ec74:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ec78:	429e      	cmp	r6, r3
 800ec7a:	ec45 4b11 	vmov	d1, r4, r5
 800ec7e:	dce1      	bgt.n	800ec44 <scalbn+0x6c>
 800ec80:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800eca8 <scalbn+0xd0>
 800ec84:	f000 f81e 	bl	800ecc4 <copysign>
 800ec88:	a307      	add	r3, pc, #28	; (adr r3, 800eca8 <scalbn+0xd0>)
 800ec8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8e:	e7e0      	b.n	800ec52 <scalbn+0x7a>
 800ec90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ec94:	3236      	adds	r2, #54	; 0x36
 800ec96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ec9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ec9e:	4620      	mov	r0, r4
 800eca0:	4629      	mov	r1, r5
 800eca2:	2200      	movs	r2, #0
 800eca4:	4b06      	ldr	r3, [pc, #24]	; (800ecc0 <scalbn+0xe8>)
 800eca6:	e7b2      	b.n	800ec0e <scalbn+0x36>
 800eca8:	c2f8f359 	.word	0xc2f8f359
 800ecac:	01a56e1f 	.word	0x01a56e1f
 800ecb0:	8800759c 	.word	0x8800759c
 800ecb4:	7e37e43c 	.word	0x7e37e43c
 800ecb8:	43500000 	.word	0x43500000
 800ecbc:	ffff3cb0 	.word	0xffff3cb0
 800ecc0:	3c900000 	.word	0x3c900000

0800ecc4 <copysign>:
 800ecc4:	ec51 0b10 	vmov	r0, r1, d0
 800ecc8:	ee11 0a90 	vmov	r0, s3
 800eccc:	ee10 2a10 	vmov	r2, s0
 800ecd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ecd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ecd8:	ea41 0300 	orr.w	r3, r1, r0
 800ecdc:	ec43 2b10 	vmov	d0, r2, r3
 800ece0:	4770      	bx	lr
	...

0800ece4 <_sbrk>:
 800ece4:	4b04      	ldr	r3, [pc, #16]	; (800ecf8 <_sbrk+0x14>)
 800ece6:	6819      	ldr	r1, [r3, #0]
 800ece8:	4602      	mov	r2, r0
 800ecea:	b909      	cbnz	r1, 800ecf0 <_sbrk+0xc>
 800ecec:	4903      	ldr	r1, [pc, #12]	; (800ecfc <_sbrk+0x18>)
 800ecee:	6019      	str	r1, [r3, #0]
 800ecf0:	6818      	ldr	r0, [r3, #0]
 800ecf2:	4402      	add	r2, r0
 800ecf4:	601a      	str	r2, [r3, #0]
 800ecf6:	4770      	bx	lr
 800ecf8:	20000a18 	.word	0x20000a18
 800ecfc:	20000f90 	.word	0x20000f90

0800ed00 <_init>:
 800ed00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed02:	bf00      	nop
 800ed04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed06:	bc08      	pop	{r3}
 800ed08:	469e      	mov	lr, r3
 800ed0a:	4770      	bx	lr

0800ed0c <_fini>:
 800ed0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed0e:	bf00      	nop
 800ed10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed12:	bc08      	pop	{r3}
 800ed14:	469e      	mov	lr, r3
 800ed16:	4770      	bx	lr
