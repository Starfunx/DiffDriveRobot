
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008690  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08008820  08008820  00018820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cb8  08008cb8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008cb8  08008cb8  00018cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cc0  08008cc0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cc0  08008cc0  00018cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cc4  08008cc4  00018cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001dc  08008ea4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08008ea4  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000c3c1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0001106c  00000000  00000000  0002c5cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002061  00000000  00000000  0003d639  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001018  00000000  00000000  0003f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000f4806  00000000  00000000  000406b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000f10  00000000  00000000  00134ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002786b  00000000  00000000  00135dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015d63b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000503c  00000000  00000000  0015d6b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008808 	.word	0x08008808

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008808 	.word	0x08008808

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f4e:	e003      	b.n	8000f58 <LoopCopyDataInit>

08000f50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f56:	3104      	adds	r1, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f60:	d3f6      	bcc.n	8000f50 <CopyDataInit>
	ldr	r2, =_sbss
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f64:	e002      	b.n	8000f6c <LoopFillZerobss>

08000f66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f68:	f842 3b04 	str.w	r3, [r2], #4

08000f6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <LoopForever+0x16>)
	cmp	r2, r3
 8000f6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f70:	d3f9      	bcc.n	8000f66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f72:	f004 fb47 	bl	8005604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f004 fb7b 	bl	8005670 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7a:	f003 fc25 	bl	80047c8 <main>

08000f7e <LoopForever>:

LoopForever:
    b LoopForever
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f80:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000f84:	08008cc8 	.word	0x08008cc8
	ldr	r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f8c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8000f90:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8000f94:	200003f0 	.word	0x200003f0

08000f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_2_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_Init+0x3c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_Init+0x3c>)
 8000fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb2:	2003      	movs	r0, #3
 8000fb4:	f000 f95c 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 f80f 	bl	8000fdc <HAL_InitTick>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	e001      	b.n	8000fce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fca:	f004 f911 	bl	80051f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_InitTick+0x68>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d022      	beq.n	8001036 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_InitTick+0x6c>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <HAL_InitTick+0x68>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ffc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001000:	fbb2 f3f3 	udiv	r3, r2, r3
 8001004:	4618      	mov	r0, r3
 8001006:	f000 f968 	bl	80012da <HAL_SYSTICK_Config>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10f      	bne.n	8001030 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b0f      	cmp	r3, #15
 8001014:	d809      	bhi.n	800102a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001016:	2200      	movs	r2, #0
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	f04f 30ff 	mov.w	r0, #4294967295
 800101e:	f000 f932 	bl	8001286 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_InitTick+0x70>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	e007      	b.n	800103a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e004      	b.n	800103a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e001      	b.n	800103a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000004 	.word	0x20000004
 8001048:	20000008 	.word	0x20000008
 800104c:	20000000 	.word	0x20000000

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_IncTick+0x1c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <HAL_IncTick+0x20>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4413      	add	r3, r2
 800105e:	4a03      	ldr	r2, [pc, #12]	; (800106c <HAL_IncTick+0x1c>)
 8001060:	6013      	str	r3, [r2, #0]
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	20000204 	.word	0x20000204
 8001070:	20000004 	.word	0x20000004

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000204 	.word	0x20000204

0800108c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff ffee 	bl	8001074 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d004      	beq.n	80010b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_Delay+0x40>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b0:	bf00      	nop
 80010b2:	f7ff ffdf 	bl	8001074 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d8f7      	bhi.n	80010b2 <HAL_Delay+0x26>
  {
  }
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000004 	.word	0x20000004

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	; (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff29 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001298:	f7ff ff3e 	bl	8001118 <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff8e 	bl	80011c4 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5d 	bl	8001170 <__NVIC_SetPriority>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff31 	bl	8001134 <__NVIC_EnableIRQ>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffa2 	bl	800122c <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001302:	e17f      	b.n	8001604 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2101      	movs	r1, #1
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8171 	beq.w	80015fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x38>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b12      	cmp	r3, #18
 800132a:	d123      	bne.n	8001374 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	220f      	movs	r2, #15
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	6939      	ldr	r1, [r7, #16]
 8001370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0203 	and.w	r2, r3, #3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d00b      	beq.n	80013c8 <HAL_GPIO_Init+0xd4>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d007      	beq.n	80013c8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013bc:	2b11      	cmp	r3, #17
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b12      	cmp	r3, #18
 80013c6:	d130      	bne.n	800142a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013fe:	2201      	movs	r2, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f003 0201 	and.w	r2, r3, #1
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b03      	cmp	r3, #3
 8001434:	d118      	bne.n	8001468 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800143c:	2201      	movs	r2, #1
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	08db      	lsrs	r3, r3, #3
 8001452:	f003 0201 	and.w	r2, r3, #1
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80ac 	beq.w	80015fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	4b5e      	ldr	r3, [pc, #376]	; (8001620 <HAL_GPIO_Init+0x32c>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014aa:	4a5d      	ldr	r2, [pc, #372]	; (8001620 <HAL_GPIO_Init+0x32c>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6613      	str	r3, [r2, #96]	; 0x60
 80014b2:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <HAL_GPIO_Init+0x32c>)
 80014b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014be:	4a59      	ldr	r2, [pc, #356]	; (8001624 <HAL_GPIO_Init+0x330>)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	3302      	adds	r3, #2
 80014c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	220f      	movs	r2, #15
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014e8:	d025      	beq.n	8001536 <HAL_GPIO_Init+0x242>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4e      	ldr	r2, [pc, #312]	; (8001628 <HAL_GPIO_Init+0x334>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d01f      	beq.n	8001532 <HAL_GPIO_Init+0x23e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4d      	ldr	r2, [pc, #308]	; (800162c <HAL_GPIO_Init+0x338>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d019      	beq.n	800152e <HAL_GPIO_Init+0x23a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4c      	ldr	r2, [pc, #304]	; (8001630 <HAL_GPIO_Init+0x33c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d013      	beq.n	800152a <HAL_GPIO_Init+0x236>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4b      	ldr	r2, [pc, #300]	; (8001634 <HAL_GPIO_Init+0x340>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00d      	beq.n	8001526 <HAL_GPIO_Init+0x232>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4a      	ldr	r2, [pc, #296]	; (8001638 <HAL_GPIO_Init+0x344>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d007      	beq.n	8001522 <HAL_GPIO_Init+0x22e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a49      	ldr	r2, [pc, #292]	; (800163c <HAL_GPIO_Init+0x348>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_GPIO_Init+0x22a>
 800151a:	2306      	movs	r3, #6
 800151c:	e00c      	b.n	8001538 <HAL_GPIO_Init+0x244>
 800151e:	2307      	movs	r3, #7
 8001520:	e00a      	b.n	8001538 <HAL_GPIO_Init+0x244>
 8001522:	2305      	movs	r3, #5
 8001524:	e008      	b.n	8001538 <HAL_GPIO_Init+0x244>
 8001526:	2304      	movs	r3, #4
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x244>
 800152a:	2303      	movs	r3, #3
 800152c:	e004      	b.n	8001538 <HAL_GPIO_Init+0x244>
 800152e:	2302      	movs	r3, #2
 8001530:	e002      	b.n	8001538 <HAL_GPIO_Init+0x244>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_GPIO_Init+0x244>
 8001536:	2300      	movs	r3, #0
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	f002 0203 	and.w	r2, r2, #3
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	4093      	lsls	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001548:	4936      	ldr	r1, [pc, #216]	; (8001624 <HAL_GPIO_Init+0x330>)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	3302      	adds	r3, #2
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001556:	4b3a      	ldr	r3, [pc, #232]	; (8001640 <HAL_GPIO_Init+0x34c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800157a:	4a31      	ldr	r2, [pc, #196]	; (8001640 <HAL_GPIO_Init+0x34c>)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <HAL_GPIO_Init+0x34c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015a4:	4a26      	ldr	r2, [pc, #152]	; (8001640 <HAL_GPIO_Init+0x34c>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_GPIO_Init+0x34c>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ce:	4a1c      	ldr	r2, [pc, #112]	; (8001640 <HAL_GPIO_Init+0x34c>)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <HAL_GPIO_Init+0x34c>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f8:	4a11      	ldr	r2, [pc, #68]	; (8001640 <HAL_GPIO_Init+0x34c>)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3301      	adds	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa22 f303 	lsr.w	r3, r2, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	f47f ae78 	bne.w	8001304 <HAL_GPIO_Init+0x10>
  }
}
 8001614:	bf00      	nop
 8001616:	371c      	adds	r7, #28
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000
 8001628:	48000400 	.word	0x48000400
 800162c:	48000800 	.word	0x48000800
 8001630:	48000c00 	.word	0x48000c00
 8001634:	48001000 	.word	0x48001000
 8001638:	48001400 	.word	0x48001400
 800163c:	48001800 	.word	0x48001800
 8001640:	40010400 	.word	0x40010400

08001644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
 8001650:	4613      	mov	r3, r2
 8001652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001654:	787b      	ldrb	r3, [r7, #1]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001660:	e002      	b.n	8001668 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <HAL_PWREx_GetVoltageRange+0x18>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40007000 	.word	0x40007000

08001690 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800169e:	d130      	bne.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016a0:	4b23      	ldr	r3, [pc, #140]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ac:	d038      	beq.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016b6:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2232      	movs	r2, #50	; 0x32
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	0c9b      	lsrs	r3, r3, #18
 80016d0:	3301      	adds	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d4:	e002      	b.n	80016dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3b01      	subs	r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e8:	d102      	bne.n	80016f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f2      	bne.n	80016d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fc:	d110      	bne.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e00f      	b.n	8001722 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800170a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170e:	d007      	beq.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001718:	4a05      	ldr	r2, [pc, #20]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40007000 	.word	0x40007000
 8001734:	20000008 	.word	0x20000008
 8001738:	431bde83 	.word	0x431bde83

0800173c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e39d      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174e:	4ba4      	ldr	r3, [pc, #656]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001758:	4ba1      	ldr	r3, [pc, #644]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80e1 	beq.w	8001932 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d007      	beq.n	8001786 <HAL_RCC_OscConfig+0x4a>
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b0c      	cmp	r3, #12
 800177a:	f040 8088 	bne.w	800188e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2b01      	cmp	r3, #1
 8001782:	f040 8084 	bne.w	800188e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001786:	4b96      	ldr	r3, [pc, #600]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <HAL_RCC_OscConfig+0x62>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e375      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1a      	ldr	r2, [r3, #32]
 80017a2:	4b8f      	ldr	r3, [pc, #572]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d004      	beq.n	80017b8 <HAL_RCC_OscConfig+0x7c>
 80017ae:	4b8c      	ldr	r3, [pc, #560]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b6:	e005      	b.n	80017c4 <HAL_RCC_OscConfig+0x88>
 80017b8:	4b89      	ldr	r3, [pc, #548]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80017ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d223      	bcs.n	8001810 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fd09 	bl	80021e4 <RCC_SetFlashLatencyFromMSIRange>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e356      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017dc:	4b80      	ldr	r3, [pc, #512]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a7f      	ldr	r2, [pc, #508]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80017e2:	f043 0308 	orr.w	r3, r3, #8
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b7d      	ldr	r3, [pc, #500]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	497a      	ldr	r1, [pc, #488]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017fa:	4b79      	ldr	r3, [pc, #484]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	4975      	ldr	r1, [pc, #468]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 800180a:	4313      	orrs	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
 800180e:	e022      	b.n	8001856 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001810:	4b73      	ldr	r3, [pc, #460]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a72      	ldr	r2, [pc, #456]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 8001816:	f043 0308 	orr.w	r3, r3, #8
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b70      	ldr	r3, [pc, #448]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	496d      	ldr	r1, [pc, #436]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800182e:	4b6c      	ldr	r3, [pc, #432]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	4968      	ldr	r1, [pc, #416]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fccc 	bl	80021e4 <RCC_SetFlashLatencyFromMSIRange>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e319      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001856:	f000 fc03 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 800185a:	4601      	mov	r1, r0
 800185c:	4b60      	ldr	r3, [pc, #384]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	4a5f      	ldr	r2, [pc, #380]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 8001868:	5cd3      	ldrb	r3, [r2, r3]
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	fa21 f303 	lsr.w	r3, r1, r3
 8001872:	4a5d      	ldr	r2, [pc, #372]	; (80019e8 <HAL_RCC_OscConfig+0x2ac>)
 8001874:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001876:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <HAL_RCC_OscConfig+0x2b0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fbae 	bl	8000fdc <HAL_InitTick>
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d052      	beq.n	8001930 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	e2fd      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d032      	beq.n	80018fc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001896:	4b52      	ldr	r3, [pc, #328]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a51      	ldr	r2, [pc, #324]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fbe7 	bl	8001074 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018aa:	f7ff fbe3 	bl	8001074 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e2e6      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018bc:	4b48      	ldr	r3, [pc, #288]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c8:	4b45      	ldr	r3, [pc, #276]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a44      	ldr	r2, [pc, #272]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b42      	ldr	r3, [pc, #264]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	493f      	ldr	r1, [pc, #252]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e6:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	493a      	ldr	r1, [pc, #232]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
 80018fa:	e01a      	b.n	8001932 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018fc:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a37      	ldr	r2, [pc, #220]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001908:	f7ff fbb4 	bl	8001074 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001910:	f7ff fbb0 	bl	8001074 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e2b3      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001922:	4b2f      	ldr	r3, [pc, #188]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x1d4>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d074      	beq.n	8001a28 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b08      	cmp	r3, #8
 8001942:	d005      	beq.n	8001950 <HAL_RCC_OscConfig+0x214>
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d10e      	bne.n	8001968 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d10b      	bne.n	8001968 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d064      	beq.n	8001a26 <HAL_RCC_OscConfig+0x2ea>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d160      	bne.n	8001a26 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e290      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001970:	d106      	bne.n	8001980 <HAL_RCC_OscConfig+0x244>
 8001972:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1a      	ldr	r2, [pc, #104]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e01d      	b.n	80019bc <HAL_RCC_OscConfig+0x280>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x268>
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 8001990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 800199c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e00b      	b.n	80019bc <HAL_RCC_OscConfig+0x280>
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0d      	ldr	r2, [pc, #52]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80019aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_RCC_OscConfig+0x2a4>)
 80019b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01c      	beq.n	80019fe <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fb56 	bl	8001074 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ca:	e011      	b.n	80019f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff fb52 	bl	8001074 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	; 0x64
 80019d8:	d90a      	bls.n	80019f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e255      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08008838 	.word	0x08008838
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f0:	4bae      	ldr	r3, [pc, #696]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0e7      	beq.n	80019cc <HAL_RCC_OscConfig+0x290>
 80019fc:	e014      	b.n	8001a28 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff fb39 	bl	8001074 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a06:	f7ff fb35 	bl	8001074 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b64      	cmp	r3, #100	; 0x64
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e238      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a18:	4ba4      	ldr	r3, [pc, #656]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f0      	bne.n	8001a06 <HAL_RCC_OscConfig+0x2ca>
 8001a24:	e000      	b.n	8001a28 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a26:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d060      	beq.n	8001af6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d005      	beq.n	8001a46 <HAL_RCC_OscConfig+0x30a>
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b0c      	cmp	r3, #12
 8001a3e:	d119      	bne.n	8001a74 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d116      	bne.n	8001a74 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a46:	4b99      	ldr	r3, [pc, #612]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <HAL_RCC_OscConfig+0x322>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e215      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5e:	4b93      	ldr	r3, [pc, #588]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	061b      	lsls	r3, r3, #24
 8001a6c:	498f      	ldr	r1, [pc, #572]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a72:	e040      	b.n	8001af6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d023      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a7c:	4b8b      	ldr	r3, [pc, #556]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a8a      	ldr	r2, [pc, #552]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff faf4 	bl	8001074 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a90:	f7ff faf0 	bl	8001074 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e1f3      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa2:	4b82      	ldr	r3, [pc, #520]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aae:	4b7f      	ldr	r3, [pc, #508]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	061b      	lsls	r3, r3, #24
 8001abc:	497b      	ldr	r1, [pc, #492]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
 8001ac2:	e018      	b.n	8001af6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac4:	4b79      	ldr	r3, [pc, #484]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a78      	ldr	r2, [pc, #480]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001aca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fad0 	bl	8001074 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad8:	f7ff facc 	bl	8001074 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e1cf      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aea:	4b70      	ldr	r3, [pc, #448]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d03c      	beq.n	8001b7c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d01c      	beq.n	8001b44 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0a:	4b68      	ldr	r3, [pc, #416]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b10:	4a66      	ldr	r2, [pc, #408]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1a:	f7ff faab 	bl	8001074 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b22:	f7ff faa7 	bl	8001074 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1aa      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b34:	4b5d      	ldr	r3, [pc, #372]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0ef      	beq.n	8001b22 <HAL_RCC_OscConfig+0x3e6>
 8001b42:	e01b      	b.n	8001b7c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b44:	4b59      	ldr	r3, [pc, #356]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4a:	4a58      	ldr	r2, [pc, #352]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b54:	f7ff fa8e 	bl	8001074 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5c:	f7ff fa8a 	bl	8001074 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e18d      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b6e:	4b4f      	ldr	r3, [pc, #316]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1ef      	bne.n	8001b5c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80a5 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b8e:	4b47      	ldr	r3, [pc, #284]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10d      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b44      	ldr	r3, [pc, #272]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	4a43      	ldr	r2, [pc, #268]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba6:	4b41      	ldr	r3, [pc, #260]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb6:	4b3e      	ldr	r3, [pc, #248]	; (8001cb0 <HAL_RCC_OscConfig+0x574>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d118      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_RCC_OscConfig+0x574>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a3a      	ldr	r2, [pc, #232]	; (8001cb0 <HAL_RCC_OscConfig+0x574>)
 8001bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bce:	f7ff fa51 	bl	8001074 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd6:	f7ff fa4d 	bl	8001074 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e150      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be8:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_RCC_OscConfig+0x574>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d108      	bne.n	8001c0e <HAL_RCC_OscConfig+0x4d2>
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c02:	4a2a      	ldr	r2, [pc, #168]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c0c:	e024      	b.n	8001c58 <HAL_RCC_OscConfig+0x51c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d110      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4fc>
 8001c16:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2c:	4a1f      	ldr	r2, [pc, #124]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c36:	e00f      	b.n	8001c58 <HAL_RCC_OscConfig+0x51c>
 8001c38:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3e:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4e:	4a17      	ldr	r2, [pc, #92]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001c50:	f023 0304 	bic.w	r3, r3, #4
 8001c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d016      	beq.n	8001c8e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff fa08 	bl	8001074 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7ff fa04 	bl	8001074 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e105      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_OscConfig+0x570>)
 8001c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0ed      	beq.n	8001c68 <HAL_RCC_OscConfig+0x52c>
 8001c8c:	e019      	b.n	8001cc2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff f9f1 	bl	8001074 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c94:	e00e      	b.n	8001cb4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7ff f9ed 	bl	8001074 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d905      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e0ee      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb4:	4b77      	ldr	r3, [pc, #476]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1e9      	bne.n	8001c96 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cc2:	7ffb      	ldrb	r3, [r7, #31]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc8:	4b72      	ldr	r3, [pc, #456]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	4a71      	ldr	r2, [pc, #452]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80d5 	beq.w	8001e88 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	2b0c      	cmp	r3, #12
 8001ce2:	f000 808e 	beq.w	8001e02 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d15b      	bne.n	8001da6 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cee:	4b69      	ldr	r3, [pc, #420]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a68      	ldr	r2, [pc, #416]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfa:	f7ff f9bb 	bl	8001074 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d02:	f7ff f9b7 	bl	8001074 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e0ba      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d14:	4b5f      	ldr	r3, [pc, #380]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f0      	bne.n	8001d02 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d20:	4b5c      	ldr	r3, [pc, #368]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <HAL_RCC_OscConfig+0x75c>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d30:	3a01      	subs	r2, #1
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	4311      	orrs	r1, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d3a:	0212      	lsls	r2, r2, #8
 8001d3c:	4311      	orrs	r1, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d42:	0852      	lsrs	r2, r2, #1
 8001d44:	3a01      	subs	r2, #1
 8001d46:	0552      	lsls	r2, r2, #21
 8001d48:	4311      	orrs	r1, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d4e:	0852      	lsrs	r2, r2, #1
 8001d50:	3a01      	subs	r2, #1
 8001d52:	0652      	lsls	r2, r2, #25
 8001d54:	4311      	orrs	r1, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d5a:	0912      	lsrs	r2, r2, #4
 8001d5c:	0452      	lsls	r2, r2, #17
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	494c      	ldr	r1, [pc, #304]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d66:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a4a      	ldr	r2, [pc, #296]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001d6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d70:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d72:	4b48      	ldr	r3, [pc, #288]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	4a47      	ldr	r2, [pc, #284]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001d78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	f7ff f979 	bl	8001074 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d86:	f7ff f975 	bl	8001074 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e078      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d98:	4b3e      	ldr	r3, [pc, #248]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x64a>
 8001da4:	e070      	b.n	8001e88 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da6:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a3a      	ldr	r2, [pc, #232]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001dac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001db2:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d105      	bne.n	8001dca <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dbe:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	4a34      	ldr	r2, [pc, #208]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001dc4:	f023 0303 	bic.w	r3, r3, #3
 8001dc8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dca:	4b32      	ldr	r3, [pc, #200]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	4a31      	ldr	r2, [pc, #196]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001dd0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7ff f94b 	bl	8001074 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de2:	f7ff f947 	bl	8001074 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e04a      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df4:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f0      	bne.n	8001de2 <HAL_RCC_OscConfig+0x6a6>
 8001e00:	e042      	b.n	8001e88 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e03d      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <HAL_RCC_OscConfig+0x758>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f003 0203 	and.w	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d130      	bne.n	8001e84 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d127      	bne.n	8001e84 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d11f      	bne.n	8001e84 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e4e:	2a07      	cmp	r2, #7
 8001e50:	bf14      	ite	ne
 8001e52:	2201      	movne	r2, #1
 8001e54:	2200      	moveq	r2, #0
 8001e56:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d113      	bne.n	8001e84 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e66:	085b      	lsrs	r3, r3, #1
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d109      	bne.n	8001e84 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	085b      	lsrs	r3, r3, #1
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3720      	adds	r7, #32
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	f99d808c 	.word	0xf99d808c

08001e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0c8      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b66      	ldr	r3, [pc, #408]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d910      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b63      	ldr	r3, [pc, #396]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 0207 	bic.w	r2, r3, #7
 8001ec6:	4961      	ldr	r1, [pc, #388]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0b0      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d04c      	beq.n	8001f86 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d107      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef4:	4b56      	ldr	r3, [pc, #344]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d121      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e09e      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d107      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0c:	4b50      	ldr	r3, [pc, #320]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d115      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e092      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d107      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f24:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e086      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f34:	4b46      	ldr	r3, [pc, #280]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e07e      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f44:	4b42      	ldr	r3, [pc, #264]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 0203 	bic.w	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	493f      	ldr	r1, [pc, #252]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f56:	f7ff f88d 	bl	8001074 <HAL_GetTick>
 8001f5a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5e:	f7ff f889 	bl	8001074 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e066      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f74:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 020c 	and.w	r2, r3, #12
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d1eb      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f92:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	492c      	ldr	r1, [pc, #176]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b29      	ldr	r3, [pc, #164]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d210      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4924      	ldr	r1, [pc, #144]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e036      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4918      	ldr	r1, [pc, #96]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4910      	ldr	r1, [pc, #64]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002012:	f000 f825 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002016:	4601      	mov	r1, r0
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	5cd3      	ldrb	r3, [r2, r3]
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	fa21 f303 	lsr.w	r3, r1, r3
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe ffd0 	bl	8000fdc <HAL_InitTick>
 800203c:	4603      	mov	r3, r0
 800203e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002040:	7afb      	ldrb	r3, [r7, #11]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40022000 	.word	0x40022000
 8002050:	40021000 	.word	0x40021000
 8002054:	08008838 	.word	0x08008838
 8002058:	20000008 	.word	0x20000008
 800205c:	20000000 	.word	0x20000000

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800206e:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <HAL_RCC_GetSysClockFreq+0x104>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002078:	4b3a      	ldr	r3, [pc, #232]	; (8002164 <HAL_RCC_GetSysClockFreq+0x104>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x34>
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2b0c      	cmp	r3, #12
 800208c:	d121      	bne.n	80020d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d11e      	bne.n	80020d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002094:	4b33      	ldr	r3, [pc, #204]	; (8002164 <HAL_RCC_GetSysClockFreq+0x104>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020a0:	4b30      	ldr	r3, [pc, #192]	; (8002164 <HAL_RCC_GetSysClockFreq+0x104>)
 80020a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	e005      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020b0:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <HAL_RCC_GetSysClockFreq+0x104>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020bc:	4a2a      	ldr	r2, [pc, #168]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10d      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d102      	bne.n	80020de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_RCC_GetSysClockFreq+0x10c>)
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	e004      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020e4:	4b22      	ldr	r3, [pc, #136]	; (8002170 <HAL_RCC_GetSysClockFreq+0x110>)
 80020e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d133      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_RCC_GetSysClockFreq+0x104>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d002      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0xa4>
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d003      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0xaa>
 8002102:	e005      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002106:	617b      	str	r3, [r7, #20]
      break;
 8002108:	e005      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800210a:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_RCC_GetSysClockFreq+0x110>)
 800210c:	617b      	str	r3, [r7, #20]
      break;
 800210e:	e002      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	617b      	str	r3, [r7, #20]
      break;
 8002114:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HAL_RCC_GetSysClockFreq+0x104>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	3301      	adds	r3, #1
 8002122:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_RCC_GetSysClockFreq+0x104>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	fb02 f203 	mul.w	r2, r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	fbb2 f3f3 	udiv	r3, r2, r3
 800213a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_RCC_GetSysClockFreq+0x104>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	0e5b      	lsrs	r3, r3, #25
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	3301      	adds	r3, #1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002156:	69bb      	ldr	r3, [r7, #24]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3724      	adds	r7, #36	; 0x24
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40021000 	.word	0x40021000
 8002168:	08008850 	.word	0x08008850
 800216c:	00f42400 	.word	0x00f42400
 8002170:	007a1200 	.word	0x007a1200

08002174 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_RCC_GetHCLKFreq+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20000008 	.word	0x20000008

0800218c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002190:	f7ff fff0 	bl	8002174 <HAL_RCC_GetHCLKFreq>
 8002194:	4601      	mov	r1, r0
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021a2:	5cd3      	ldrb	r3, [r2, r3]
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08008848 	.word	0x08008848

080021b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021bc:	f7ff ffda 	bl	8002174 <HAL_RCC_GetHCLKFreq>
 80021c0:	4601      	mov	r1, r0
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	0adb      	lsrs	r3, r3, #11
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08008848 	.word	0x08008848

080021e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021f0:	4b2a      	ldr	r3, [pc, #168]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021fc:	f7ff fa3a 	bl	8001674 <HAL_PWREx_GetVoltageRange>
 8002200:	6178      	str	r0, [r7, #20]
 8002202:	e014      	b.n	800222e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	4a24      	ldr	r2, [pc, #144]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220e:	6593      	str	r3, [r2, #88]	; 0x58
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800221c:	f7ff fa2a 	bl	8001674 <HAL_PWREx_GetVoltageRange>
 8002220:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	4a1d      	ldr	r2, [pc, #116]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002234:	d10b      	bne.n	800224e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b80      	cmp	r3, #128	; 0x80
 800223a:	d919      	bls.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2ba0      	cmp	r3, #160	; 0xa0
 8002240:	d902      	bls.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002242:	2302      	movs	r3, #2
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	e013      	b.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002248:	2301      	movs	r3, #1
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	e010      	b.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b80      	cmp	r3, #128	; 0x80
 8002252:	d902      	bls.n	800225a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002254:	2303      	movs	r3, #3
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	e00a      	b.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b80      	cmp	r3, #128	; 0x80
 800225e:	d102      	bne.n	8002266 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002260:	2302      	movs	r3, #2
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	e004      	b.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b70      	cmp	r3, #112	; 0x70
 800226a:	d101      	bne.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800226c:	2301      	movs	r3, #1
 800226e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 0207 	bic.w	r2, r3, #7
 8002278:	4909      	ldr	r1, [pc, #36]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	429a      	cmp	r2, r3
 800228c:	d001      	beq.n	8002292 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000
 80022a0:	40022000 	.word	0x40022000

080022a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022ac:	2300      	movs	r3, #0
 80022ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022b0:	2300      	movs	r3, #0
 80022b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d03f      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c8:	d01c      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80022ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ce:	d802      	bhi.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00e      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80022d4:	e01f      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80022d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022da:	d003      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80022dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022e0:	d01c      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80022e2:	e018      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022e4:	4b85      	ldr	r3, [pc, #532]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a84      	ldr	r2, [pc, #528]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022f0:	e015      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3304      	adds	r3, #4
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fab9 	bl	8002870 <RCCEx_PLLSAI1_Config>
 80022fe:	4603      	mov	r3, r0
 8002300:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002302:	e00c      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3320      	adds	r3, #32
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fba0 	bl	8002a50 <RCCEx_PLLSAI2_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002314:	e003      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	74fb      	strb	r3, [r7, #19]
      break;
 800231a:	e000      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800231c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800231e:	7cfb      	ldrb	r3, [r7, #19]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10b      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002324:	4b75      	ldr	r3, [pc, #468]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002332:	4972      	ldr	r1, [pc, #456]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800233a:	e001      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d03f      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002354:	d01c      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002356:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800235a:	d802      	bhi.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00e      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002360:	e01f      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002362:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002366:	d003      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002368:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800236c:	d01c      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800236e:	e018      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002370:	4b62      	ldr	r3, [pc, #392]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a61      	ldr	r2, [pc, #388]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800237c:	e015      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3304      	adds	r3, #4
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fa73 	bl	8002870 <RCCEx_PLLSAI1_Config>
 800238a:	4603      	mov	r3, r0
 800238c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800238e:	e00c      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3320      	adds	r3, #32
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fb5a 	bl	8002a50 <RCCEx_PLLSAI2_Config>
 800239c:	4603      	mov	r3, r0
 800239e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023a0:	e003      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	74fb      	strb	r3, [r7, #19]
      break;
 80023a6:	e000      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80023a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023aa:	7cfb      	ldrb	r3, [r7, #19]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10b      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023b0:	4b52      	ldr	r3, [pc, #328]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023be:	494f      	ldr	r1, [pc, #316]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023c6:	e001      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a0 	beq.w	800251a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80023ee:	2300      	movs	r3, #0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00d      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f4:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f8:	4a40      	ldr	r2, [pc, #256]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002400:	4b3e      	ldr	r3, [pc, #248]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240c:	2301      	movs	r3, #1
 800240e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002410:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a3a      	ldr	r2, [pc, #232]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800241c:	f7fe fe2a 	bl	8001074 <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002422:	e009      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002424:	f7fe fe26 	bl	8001074 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d902      	bls.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	74fb      	strb	r3, [r7, #19]
        break;
 8002436:	e005      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002438:	4b31      	ldr	r3, [pc, #196]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ef      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002444:	7cfb      	ldrb	r3, [r7, #19]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d15c      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800244a:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002454:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01f      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	429a      	cmp	r2, r3
 8002466:	d019      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002468:	4b24      	ldr	r3, [pc, #144]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002472:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002474:	4b21      	ldr	r3, [pc, #132]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	4a20      	ldr	r2, [pc, #128]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	4a1c      	ldr	r2, [pc, #112]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800248c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002494:	4a19      	ldr	r2, [pc, #100]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d016      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a6:	f7fe fde5 	bl	8001074 <HAL_GetTick>
 80024aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ac:	e00b      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7fe fde1 	bl	8001074 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d902      	bls.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	74fb      	strb	r3, [r7, #19]
            break;
 80024c4:	e006      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0ec      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ea:	4904      	ldr	r1, [pc, #16]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024f2:	e009      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	74bb      	strb	r3, [r7, #18]
 80024f8:	e006      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002508:	7c7b      	ldrb	r3, [r7, #17]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d105      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250e:	4b9e      	ldr	r3, [pc, #632]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	4a9d      	ldr	r2, [pc, #628]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002518:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002526:	4b98      	ldr	r3, [pc, #608]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252c:	f023 0203 	bic.w	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002534:	4994      	ldr	r1, [pc, #592]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002548:	4b8f      	ldr	r3, [pc, #572]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f023 020c 	bic.w	r2, r3, #12
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	498c      	ldr	r1, [pc, #560]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800256a:	4b87      	ldr	r3, [pc, #540]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002570:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	4983      	ldr	r1, [pc, #524]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800258c:	4b7e      	ldr	r3, [pc, #504]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	497b      	ldr	r1, [pc, #492]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025ae:	4b76      	ldr	r3, [pc, #472]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025bc:	4972      	ldr	r1, [pc, #456]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025d0:	4b6d      	ldr	r3, [pc, #436]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	496a      	ldr	r1, [pc, #424]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025f2:	4b65      	ldr	r3, [pc, #404]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	4961      	ldr	r1, [pc, #388]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002614:	4b5c      	ldr	r3, [pc, #368]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002622:	4959      	ldr	r1, [pc, #356]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002636:	4b54      	ldr	r3, [pc, #336]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002644:	4950      	ldr	r1, [pc, #320]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002658:	4b4b      	ldr	r3, [pc, #300]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	4948      	ldr	r1, [pc, #288]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800267a:	4b43      	ldr	r3, [pc, #268]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	493f      	ldr	r1, [pc, #252]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d028      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800269c:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026aa:	4937      	ldr	r1, [pc, #220]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ba:	d106      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026bc:	4b32      	ldr	r3, [pc, #200]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4a31      	ldr	r2, [pc, #196]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026c6:	60d3      	str	r3, [r2, #12]
 80026c8:	e011      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026d2:	d10c      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3304      	adds	r3, #4
 80026d8:	2101      	movs	r1, #1
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f8c8 	bl	8002870 <RCCEx_PLLSAI1_Config>
 80026e0:	4603      	mov	r3, r0
 80026e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026e4:	7cfb      	ldrb	r3, [r7, #19]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80026ea:	7cfb      	ldrb	r3, [r7, #19]
 80026ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d028      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026fa:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	491f      	ldr	r1, [pc, #124]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002718:	d106      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	4a1a      	ldr	r2, [pc, #104]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002724:	60d3      	str	r3, [r2, #12]
 8002726:	e011      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002730:	d10c      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3304      	adds	r3, #4
 8002736:	2101      	movs	r1, #1
 8002738:	4618      	mov	r0, r3
 800273a:	f000 f899 	bl	8002870 <RCCEx_PLLSAI1_Config>
 800273e:	4603      	mov	r3, r0
 8002740:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d02b      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002766:	4908      	ldr	r1, [pc, #32]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002776:	d109      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a02      	ldr	r2, [pc, #8]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800277e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002782:	60d3      	str	r3, [r2, #12]
 8002784:	e014      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002790:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002794:	d10c      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	2101      	movs	r1, #1
 800279c:	4618      	mov	r0, r3
 800279e:	f000 f867 	bl	8002870 <RCCEx_PLLSAI1_Config>
 80027a2:	4603      	mov	r3, r0
 80027a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d02f      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027bc:	4b2b      	ldr	r3, [pc, #172]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ca:	4928      	ldr	r1, [pc, #160]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027da:	d10d      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3304      	adds	r3, #4
 80027e0:	2102      	movs	r1, #2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f844 	bl	8002870 <RCCEx_PLLSAI1_Config>
 80027e8:	4603      	mov	r3, r0
 80027ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ec:	7cfb      	ldrb	r3, [r7, #19]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d014      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	74bb      	strb	r3, [r7, #18]
 80027f6:	e011      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002800:	d10c      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3320      	adds	r3, #32
 8002806:	2102      	movs	r1, #2
 8002808:	4618      	mov	r0, r3
 800280a:	f000 f921 	bl	8002a50 <RCCEx_PLLSAI2_Config>
 800280e:	4603      	mov	r3, r0
 8002810:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002828:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002836:	490d      	ldr	r1, [pc, #52]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800285a:	4904      	ldr	r1, [pc, #16]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002862:	7cbb      	ldrb	r3, [r7, #18]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000

08002870 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800287e:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d018      	beq.n	80028bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800288a:	4b70      	ldr	r3, [pc, #448]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0203 	and.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d10d      	bne.n	80028b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
       ||
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d009      	beq.n	80028b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028a2:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
       ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d044      	beq.n	8002940 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
 80028ba:	e041      	b.n	8002940 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d00c      	beq.n	80028de <RCCEx_PLLSAI1_Config+0x6e>
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d013      	beq.n	80028f0 <RCCEx_PLLSAI1_Config+0x80>
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d120      	bne.n	800290e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028cc:	4b5f      	ldr	r3, [pc, #380]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d11d      	bne.n	8002914 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028dc:	e01a      	b.n	8002914 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028de:	4b5b      	ldr	r3, [pc, #364]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d116      	bne.n	8002918 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ee:	e013      	b.n	8002918 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028f0:	4b56      	ldr	r3, [pc, #344]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10f      	bne.n	800291c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028fc:	4b53      	ldr	r3, [pc, #332]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d109      	bne.n	800291c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800290c:	e006      	b.n	800291c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
      break;
 8002912:	e004      	b.n	800291e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002914:	bf00      	nop
 8002916:	e002      	b.n	800291e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002918:	bf00      	nop
 800291a:	e000      	b.n	800291e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800291c:	bf00      	nop
    }

    if(status == HAL_OK)
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10d      	bne.n	8002940 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002924:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6819      	ldr	r1, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	3b01      	subs	r3, #1
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	430b      	orrs	r3, r1
 800293a:	4944      	ldr	r1, [pc, #272]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 800293c:	4313      	orrs	r3, r2
 800293e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d17d      	bne.n	8002a42 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002946:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a40      	ldr	r2, [pc, #256]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 800294c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002950:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002952:	f7fe fb8f 	bl	8001074 <HAL_GetTick>
 8002956:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002958:	e009      	b.n	800296e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800295a:	f7fe fb8b 	bl	8001074 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d902      	bls.n	800296e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	73fb      	strb	r3, [r7, #15]
        break;
 800296c:	e005      	b.n	800297a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800296e:	4b37      	ldr	r3, [pc, #220]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1ef      	bne.n	800295a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d160      	bne.n	8002a42 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d111      	bne.n	80029aa <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002986:	4b31      	ldr	r3, [pc, #196]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800298e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6892      	ldr	r2, [r2, #8]
 8002996:	0211      	lsls	r1, r2, #8
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	68d2      	ldr	r2, [r2, #12]
 800299c:	0912      	lsrs	r2, r2, #4
 800299e:	0452      	lsls	r2, r2, #17
 80029a0:	430a      	orrs	r2, r1
 80029a2:	492a      	ldr	r1, [pc, #168]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	610b      	str	r3, [r1, #16]
 80029a8:	e027      	b.n	80029fa <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d112      	bne.n	80029d6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029b0:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6892      	ldr	r2, [r2, #8]
 80029c0:	0211      	lsls	r1, r2, #8
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6912      	ldr	r2, [r2, #16]
 80029c6:	0852      	lsrs	r2, r2, #1
 80029c8:	3a01      	subs	r2, #1
 80029ca:	0552      	lsls	r2, r2, #21
 80029cc:	430a      	orrs	r2, r1
 80029ce:	491f      	ldr	r1, [pc, #124]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	610b      	str	r3, [r1, #16]
 80029d4:	e011      	b.n	80029fa <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6892      	ldr	r2, [r2, #8]
 80029e6:	0211      	lsls	r1, r2, #8
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6952      	ldr	r2, [r2, #20]
 80029ec:	0852      	lsrs	r2, r2, #1
 80029ee:	3a01      	subs	r2, #1
 80029f0:	0652      	lsls	r2, r2, #25
 80029f2:	430a      	orrs	r2, r1
 80029f4:	4915      	ldr	r1, [pc, #84]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a06:	f7fe fb35 	bl	8001074 <HAL_GetTick>
 8002a0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a0c:	e009      	b.n	8002a22 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a0e:	f7fe fb31 	bl	8001074 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d902      	bls.n	8002a22 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	73fb      	strb	r3, [r7, #15]
          break;
 8002a20:	e005      	b.n	8002a2e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0ef      	beq.n	8002a0e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d106      	bne.n	8002a42 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	4903      	ldr	r1, [pc, #12]	; (8002a4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000

08002a50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a5e:	4b68      	ldr	r3, [pc, #416]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d018      	beq.n	8002a9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a6a:	4b65      	ldr	r3, [pc, #404]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f003 0203 	and.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d10d      	bne.n	8002a96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a82:	4b5f      	ldr	r3, [pc, #380]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	091b      	lsrs	r3, r3, #4
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
       ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d044      	beq.n	8002b20 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
 8002a9a:	e041      	b.n	8002b20 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d00c      	beq.n	8002abe <RCCEx_PLLSAI2_Config+0x6e>
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d013      	beq.n	8002ad0 <RCCEx_PLLSAI2_Config+0x80>
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d120      	bne.n	8002aee <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aac:	4b54      	ldr	r3, [pc, #336]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d11d      	bne.n	8002af4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002abc:	e01a      	b.n	8002af4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002abe:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d116      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ace:	e013      	b.n	8002af8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ad0:	4b4b      	ldr	r3, [pc, #300]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10f      	bne.n	8002afc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002adc:	4b48      	ldr	r3, [pc, #288]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aec:	e006      	b.n	8002afc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
      break;
 8002af2:	e004      	b.n	8002afe <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002af4:	bf00      	nop
 8002af6:	e002      	b.n	8002afe <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002af8:	bf00      	nop
 8002afa:	e000      	b.n	8002afe <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002afc:	bf00      	nop
    }

    if(status == HAL_OK)
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10d      	bne.n	8002b20 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b04:	4b3e      	ldr	r3, [pc, #248]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6819      	ldr	r1, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	4939      	ldr	r1, [pc, #228]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d167      	bne.n	8002bf6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b26:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a35      	ldr	r2, [pc, #212]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b32:	f7fe fa9f 	bl	8001074 <HAL_GetTick>
 8002b36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b38:	e009      	b.n	8002b4e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b3a:	f7fe fa9b 	bl	8001074 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d902      	bls.n	8002b4e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	73fb      	strb	r3, [r7, #15]
        break;
 8002b4c:	e005      	b.n	8002b5a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b4e:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1ef      	bne.n	8002b3a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d14a      	bne.n	8002bf6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d111      	bne.n	8002b8a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b66:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6892      	ldr	r2, [r2, #8]
 8002b76:	0211      	lsls	r1, r2, #8
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68d2      	ldr	r2, [r2, #12]
 8002b7c:	0912      	lsrs	r2, r2, #4
 8002b7e:	0452      	lsls	r2, r2, #17
 8002b80:	430a      	orrs	r2, r1
 8002b82:	491f      	ldr	r1, [pc, #124]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	614b      	str	r3, [r1, #20]
 8002b88:	e011      	b.n	8002bae <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6892      	ldr	r2, [r2, #8]
 8002b9a:	0211      	lsls	r1, r2, #8
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6912      	ldr	r2, [r2, #16]
 8002ba0:	0852      	lsrs	r2, r2, #1
 8002ba2:	3a01      	subs	r2, #1
 8002ba4:	0652      	lsls	r2, r2, #25
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	4915      	ldr	r1, [pc, #84]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bae:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bba:	f7fe fa5b 	bl	8001074 <HAL_GetTick>
 8002bbe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bc0:	e009      	b.n	8002bd6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bc2:	f7fe fa57 	bl	8001074 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d902      	bls.n	8002bd6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	73fb      	strb	r3, [r7, #15]
          break;
 8002bd4:	e005      	b.n	8002be2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0ef      	beq.n	8002bc2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	4903      	ldr	r1, [pc, #12]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000

08002c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e07c      	b.n	8002d10 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d106      	bne.n	8002c36 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f002 fb01 	bl	8005238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c56:	d902      	bls.n	8002c5e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	e002      	b.n	8002c64 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c62:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c6c:	d007      	beq.n	8002c7e <HAL_SPI_Init+0x7a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c76:	d002      	beq.n	8002c7e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10b      	bne.n	8002c9e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c8e:	d903      	bls.n	8002c98 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
 8002c96:	e002      	b.n	8002c9e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	ea42 0103 	orr.w	r1, r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	f003 0204 	and.w	r2, r3, #4
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	ea42 0103 	orr.w	r1, r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e01d      	b.n	8002d66 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f002 fb5a 	bl	80053f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3304      	adds	r3, #4
 8002d54:	4619      	mov	r1, r3
 8002d56:	4610      	mov	r0, r2
 8002d58:	f000 fbcc 	bl	80034f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	6839      	ldr	r1, [r7, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 ff26 	bl	8003bd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1e      	ldr	r2, [pc, #120]	; (8002e08 <HAL_TIM_PWM_Start+0x98>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d013      	beq.n	8002dba <HAL_TIM_PWM_Start+0x4a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <HAL_TIM_PWM_Start+0x9c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00e      	beq.n	8002dba <HAL_TIM_PWM_Start+0x4a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1b      	ldr	r2, [pc, #108]	; (8002e10 <HAL_TIM_PWM_Start+0xa0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d009      	beq.n	8002dba <HAL_TIM_PWM_Start+0x4a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1a      	ldr	r2, [pc, #104]	; (8002e14 <HAL_TIM_PWM_Start+0xa4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d004      	beq.n	8002dba <HAL_TIM_PWM_Start+0x4a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a18      	ldr	r2, [pc, #96]	; (8002e18 <HAL_TIM_PWM_Start+0xa8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d101      	bne.n	8002dbe <HAL_TIM_PWM_Start+0x4e>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_TIM_PWM_Start+0x50>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d007      	beq.n	8002dd4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <HAL_TIM_PWM_Start+0xac>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d00b      	beq.n	8002dfe <HAL_TIM_PWM_Start+0x8e>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dec:	d007      	beq.n	8002dfe <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40013400 	.word	0x40013400
 8002e10:	40014000 	.word	0x40014000
 8002e14:	40014400 	.word	0x40014400
 8002e18:	40014800 	.word	0x40014800
 8002e1c:	00010007 	.word	0x00010007

08002e20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	6839      	ldr	r1, [r7, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fece 	bl	8003bd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ee8 <HAL_TIM_PWM_Stop+0xc8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <HAL_TIM_PWM_Stop+0x4a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a29      	ldr	r2, [pc, #164]	; (8002eec <HAL_TIM_PWM_Stop+0xcc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00e      	beq.n	8002e6a <HAL_TIM_PWM_Stop+0x4a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a27      	ldr	r2, [pc, #156]	; (8002ef0 <HAL_TIM_PWM_Stop+0xd0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d009      	beq.n	8002e6a <HAL_TIM_PWM_Stop+0x4a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a26      	ldr	r2, [pc, #152]	; (8002ef4 <HAL_TIM_PWM_Stop+0xd4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d004      	beq.n	8002e6a <HAL_TIM_PWM_Stop+0x4a>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a24      	ldr	r2, [pc, #144]	; (8002ef8 <HAL_TIM_PWM_Stop+0xd8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_TIM_PWM_Stop+0x4e>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <HAL_TIM_PWM_Stop+0x50>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d017      	beq.n	8002ea4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6a1a      	ldr	r2, [r3, #32]
 8002e7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10f      	bne.n	8002ea4 <HAL_TIM_PWM_Stop+0x84>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6a1a      	ldr	r2, [r3, #32]
 8002e8a:	f240 4344 	movw	r3, #1092	; 0x444
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d107      	bne.n	8002ea4 <HAL_TIM_PWM_Stop+0x84>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6a1a      	ldr	r2, [r3, #32]
 8002eaa:	f241 1311 	movw	r3, #4369	; 0x1111
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10f      	bne.n	8002ed4 <HAL_TIM_PWM_Stop+0xb4>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	f240 4344 	movw	r3, #1092	; 0x444
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d107      	bne.n	8002ed4 <HAL_TIM_PWM_Stop+0xb4>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40012c00 	.word	0x40012c00
 8002eec:	40013400 	.word	0x40013400
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40014400 	.word	0x40014400
 8002ef8:	40014800 	.word	0x40014800

08002efc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e083      	b.n	8003018 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d106      	bne.n	8002f2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f002 f9e9 	bl	80052fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002f40:	f023 0307 	bic.w	r3, r3, #7
 8002f44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4610      	mov	r0, r2
 8002f52:	f000 facf 	bl	80034f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7e:	f023 0303 	bic.w	r3, r3, #3
 8002f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f9c:	f023 030c 	bic.w	r3, r3, #12
 8002fa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	011a      	lsls	r2, r3, #4
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	031b      	lsls	r3, r3, #12
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002fda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b02      	cmp	r3, #2
 8003034:	d122      	bne.n	800307c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b02      	cmp	r3, #2
 8003042:	d11b      	bne.n	800307c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0202 	mvn.w	r2, #2
 800304c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fa28 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
 8003068:	e005      	b.n	8003076 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fa1a 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fa2b 	bl	80034cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b04      	cmp	r3, #4
 8003088:	d122      	bne.n	80030d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b04      	cmp	r3, #4
 8003096:	d11b      	bne.n	80030d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0204 	mvn.w	r2, #4
 80030a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f9fe 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
 80030bc:	e005      	b.n	80030ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f9f0 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fa01 	bl	80034cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d122      	bne.n	8003124 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d11b      	bne.n	8003124 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0208 	mvn.w	r2, #8
 80030f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2204      	movs	r2, #4
 80030fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f9d4 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f9c6 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f9d7 	bl	80034cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b10      	cmp	r3, #16
 8003130:	d122      	bne.n	8003178 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b10      	cmp	r3, #16
 800313e:	d11b      	bne.n	8003178 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0210 	mvn.w	r2, #16
 8003148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2208      	movs	r2, #8
 800314e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f9aa 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
 8003164:	e005      	b.n	8003172 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f99c 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f9ad 	bl	80034cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b01      	cmp	r3, #1
 8003184:	d10e      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b01      	cmp	r3, #1
 8003192:	d107      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0201 	mvn.w	r2, #1
 800319c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f976 	bl	8003490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ae:	2b80      	cmp	r3, #128	; 0x80
 80031b0:	d10e      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031bc:	2b80      	cmp	r3, #128	; 0x80
 80031be:	d107      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fd8e 	bl	8003cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031de:	d10e      	bne.n	80031fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	2b80      	cmp	r3, #128	; 0x80
 80031ec:	d107      	bne.n	80031fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fd81 	bl	8003d00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003208:	2b40      	cmp	r3, #64	; 0x40
 800320a:	d10e      	bne.n	800322a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b40      	cmp	r3, #64	; 0x40
 8003218:	d107      	bne.n	800322a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f95b 	bl	80034e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b20      	cmp	r3, #32
 8003236:	d10e      	bne.n	8003256 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b20      	cmp	r3, #32
 8003244:	d107      	bne.n	8003256 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f06f 0220 	mvn.w	r2, #32
 800324e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fd41 	bl	8003cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003276:	2302      	movs	r3, #2
 8003278:	e105      	b.n	8003486 <HAL_TIM_PWM_ConfigChannel+0x226>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2202      	movs	r2, #2
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b14      	cmp	r3, #20
 800328e:	f200 80f0 	bhi.w	8003472 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003292:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003298:	080032ed 	.word	0x080032ed
 800329c:	08003473 	.word	0x08003473
 80032a0:	08003473 	.word	0x08003473
 80032a4:	08003473 	.word	0x08003473
 80032a8:	0800332d 	.word	0x0800332d
 80032ac:	08003473 	.word	0x08003473
 80032b0:	08003473 	.word	0x08003473
 80032b4:	08003473 	.word	0x08003473
 80032b8:	0800336f 	.word	0x0800336f
 80032bc:	08003473 	.word	0x08003473
 80032c0:	08003473 	.word	0x08003473
 80032c4:	08003473 	.word	0x08003473
 80032c8:	080033af 	.word	0x080033af
 80032cc:	08003473 	.word	0x08003473
 80032d0:	08003473 	.word	0x08003473
 80032d4:	08003473 	.word	0x08003473
 80032d8:	080033f1 	.word	0x080033f1
 80032dc:	08003473 	.word	0x08003473
 80032e0:	08003473 	.word	0x08003473
 80032e4:	08003473 	.word	0x08003473
 80032e8:	08003431 	.word	0x08003431
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f998 	bl	8003628 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0208 	orr.w	r2, r2, #8
 8003306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0204 	bic.w	r2, r2, #4
 8003316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6999      	ldr	r1, [r3, #24]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	619a      	str	r2, [r3, #24]
      break;
 800332a:	e0a3      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fa08 	bl	8003748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6999      	ldr	r1, [r3, #24]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	021a      	lsls	r2, r3, #8
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	619a      	str	r2, [r3, #24]
      break;
 800336c:	e082      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fa71 	bl	800385c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0208 	orr.w	r2, r2, #8
 8003388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0204 	bic.w	r2, r2, #4
 8003398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69d9      	ldr	r1, [r3, #28]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	61da      	str	r2, [r3, #28]
      break;
 80033ac:	e062      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fad9 	bl	800396c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69da      	ldr	r2, [r3, #28]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69d9      	ldr	r1, [r3, #28]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	021a      	lsls	r2, r3, #8
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	61da      	str	r2, [r3, #28]
      break;
 80033ee:	e041      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fb22 	bl	8003a40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0208 	orr.w	r2, r2, #8
 800340a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0204 	bic.w	r2, r2, #4
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800342e:	e021      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fb66 	bl	8003b08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800344a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	021a      	lsls	r2, r3, #8
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003470:	e000      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003472:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop

08003490 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a40      	ldr	r2, [pc, #256]	; (8003608 <TIM_Base_SetConfig+0x114>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d013      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003512:	d00f      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a3d      	ldr	r2, [pc, #244]	; (800360c <TIM_Base_SetConfig+0x118>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00b      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a3c      	ldr	r2, [pc, #240]	; (8003610 <TIM_Base_SetConfig+0x11c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d007      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3b      	ldr	r2, [pc, #236]	; (8003614 <TIM_Base_SetConfig+0x120>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a3a      	ldr	r2, [pc, #232]	; (8003618 <TIM_Base_SetConfig+0x124>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d108      	bne.n	8003546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2f      	ldr	r2, [pc, #188]	; (8003608 <TIM_Base_SetConfig+0x114>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01f      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003554:	d01b      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2c      	ldr	r2, [pc, #176]	; (800360c <TIM_Base_SetConfig+0x118>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d017      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2b      	ldr	r2, [pc, #172]	; (8003610 <TIM_Base_SetConfig+0x11c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <TIM_Base_SetConfig+0x120>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00f      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a29      	ldr	r2, [pc, #164]	; (8003618 <TIM_Base_SetConfig+0x124>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00b      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a28      	ldr	r2, [pc, #160]	; (800361c <TIM_Base_SetConfig+0x128>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a27      	ldr	r2, [pc, #156]	; (8003620 <TIM_Base_SetConfig+0x12c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d003      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a26      	ldr	r2, [pc, #152]	; (8003624 <TIM_Base_SetConfig+0x130>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d108      	bne.n	80035a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a10      	ldr	r2, [pc, #64]	; (8003608 <TIM_Base_SetConfig+0x114>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00f      	beq.n	80035ec <TIM_Base_SetConfig+0xf8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a12      	ldr	r2, [pc, #72]	; (8003618 <TIM_Base_SetConfig+0x124>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00b      	beq.n	80035ec <TIM_Base_SetConfig+0xf8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a11      	ldr	r2, [pc, #68]	; (800361c <TIM_Base_SetConfig+0x128>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d007      	beq.n	80035ec <TIM_Base_SetConfig+0xf8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a10      	ldr	r2, [pc, #64]	; (8003620 <TIM_Base_SetConfig+0x12c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d003      	beq.n	80035ec <TIM_Base_SetConfig+0xf8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a0f      	ldr	r2, [pc, #60]	; (8003624 <TIM_Base_SetConfig+0x130>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d103      	bne.n	80035f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	615a      	str	r2, [r3, #20]
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800
 8003614:	40000c00 	.word	0x40000c00
 8003618:	40013400 	.word	0x40013400
 800361c:	40014000 	.word	0x40014000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800

08003628 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f023 0201 	bic.w	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0303 	bic.w	r3, r3, #3
 8003662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f023 0302 	bic.w	r3, r3, #2
 8003674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a2c      	ldr	r2, [pc, #176]	; (8003734 <TIM_OC1_SetConfig+0x10c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00f      	beq.n	80036a8 <TIM_OC1_SetConfig+0x80>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a2b      	ldr	r2, [pc, #172]	; (8003738 <TIM_OC1_SetConfig+0x110>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00b      	beq.n	80036a8 <TIM_OC1_SetConfig+0x80>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a2a      	ldr	r2, [pc, #168]	; (800373c <TIM_OC1_SetConfig+0x114>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <TIM_OC1_SetConfig+0x80>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a29      	ldr	r2, [pc, #164]	; (8003740 <TIM_OC1_SetConfig+0x118>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_OC1_SetConfig+0x80>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a28      	ldr	r2, [pc, #160]	; (8003744 <TIM_OC1_SetConfig+0x11c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d10c      	bne.n	80036c2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0308 	bic.w	r3, r3, #8
 80036ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <TIM_OC1_SetConfig+0x10c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00f      	beq.n	80036ea <TIM_OC1_SetConfig+0xc2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a1a      	ldr	r2, [pc, #104]	; (8003738 <TIM_OC1_SetConfig+0x110>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00b      	beq.n	80036ea <TIM_OC1_SetConfig+0xc2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a19      	ldr	r2, [pc, #100]	; (800373c <TIM_OC1_SetConfig+0x114>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d007      	beq.n	80036ea <TIM_OC1_SetConfig+0xc2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a18      	ldr	r2, [pc, #96]	; (8003740 <TIM_OC1_SetConfig+0x118>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d003      	beq.n	80036ea <TIM_OC1_SetConfig+0xc2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a17      	ldr	r2, [pc, #92]	; (8003744 <TIM_OC1_SetConfig+0x11c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d111      	bne.n	800370e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	621a      	str	r2, [r3, #32]
}
 8003728:	bf00      	nop
 800372a:	371c      	adds	r7, #28
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40012c00 	.word	0x40012c00
 8003738:	40013400 	.word	0x40013400
 800373c:	40014000 	.word	0x40014000
 8003740:	40014400 	.word	0x40014400
 8003744:	40014800 	.word	0x40014800

08003748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f023 0210 	bic.w	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	021b      	lsls	r3, r3, #8
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f023 0320 	bic.w	r3, r3, #32
 8003796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a28      	ldr	r2, [pc, #160]	; (8003848 <TIM_OC2_SetConfig+0x100>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d003      	beq.n	80037b4 <TIM_OC2_SetConfig+0x6c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a27      	ldr	r2, [pc, #156]	; (800384c <TIM_OC2_SetConfig+0x104>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d10d      	bne.n	80037d0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <TIM_OC2_SetConfig+0x100>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00f      	beq.n	80037f8 <TIM_OC2_SetConfig+0xb0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a1c      	ldr	r2, [pc, #112]	; (800384c <TIM_OC2_SetConfig+0x104>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00b      	beq.n	80037f8 <TIM_OC2_SetConfig+0xb0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a1b      	ldr	r2, [pc, #108]	; (8003850 <TIM_OC2_SetConfig+0x108>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d007      	beq.n	80037f8 <TIM_OC2_SetConfig+0xb0>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a1a      	ldr	r2, [pc, #104]	; (8003854 <TIM_OC2_SetConfig+0x10c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_OC2_SetConfig+0xb0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a19      	ldr	r2, [pc, #100]	; (8003858 <TIM_OC2_SetConfig+0x110>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d113      	bne.n	8003820 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	621a      	str	r2, [r3, #32]
}
 800383a:	bf00      	nop
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40013400 	.word	0x40013400
 8003850:	40014000 	.word	0x40014000
 8003854:	40014400 	.word	0x40014400
 8003858:	40014800 	.word	0x40014800

0800385c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0303 	bic.w	r3, r3, #3
 8003896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a27      	ldr	r2, [pc, #156]	; (8003958 <TIM_OC3_SetConfig+0xfc>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_OC3_SetConfig+0x6a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a26      	ldr	r2, [pc, #152]	; (800395c <TIM_OC3_SetConfig+0x100>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d10d      	bne.n	80038e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <TIM_OC3_SetConfig+0xfc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00f      	beq.n	800390a <TIM_OC3_SetConfig+0xae>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a1b      	ldr	r2, [pc, #108]	; (800395c <TIM_OC3_SetConfig+0x100>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00b      	beq.n	800390a <TIM_OC3_SetConfig+0xae>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1a      	ldr	r2, [pc, #104]	; (8003960 <TIM_OC3_SetConfig+0x104>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <TIM_OC3_SetConfig+0xae>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a19      	ldr	r2, [pc, #100]	; (8003964 <TIM_OC3_SetConfig+0x108>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_OC3_SetConfig+0xae>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a18      	ldr	r2, [pc, #96]	; (8003968 <TIM_OC3_SetConfig+0x10c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d113      	bne.n	8003932 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	621a      	str	r2, [r3, #32]
}
 800394c:	bf00      	nop
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	40012c00 	.word	0x40012c00
 800395c:	40013400 	.word	0x40013400
 8003960:	40014000 	.word	0x40014000
 8003964:	40014400 	.word	0x40014400
 8003968:	40014800 	.word	0x40014800

0800396c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800399a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800399e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	031b      	lsls	r3, r3, #12
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <TIM_OC4_SetConfig+0xc0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00f      	beq.n	80039f0 <TIM_OC4_SetConfig+0x84>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a17      	ldr	r2, [pc, #92]	; (8003a30 <TIM_OC4_SetConfig+0xc4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00b      	beq.n	80039f0 <TIM_OC4_SetConfig+0x84>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a16      	ldr	r2, [pc, #88]	; (8003a34 <TIM_OC4_SetConfig+0xc8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d007      	beq.n	80039f0 <TIM_OC4_SetConfig+0x84>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <TIM_OC4_SetConfig+0xcc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d003      	beq.n	80039f0 <TIM_OC4_SetConfig+0x84>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <TIM_OC4_SetConfig+0xd0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d109      	bne.n	8003a04 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	019b      	lsls	r3, r3, #6
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40013400 	.word	0x40013400
 8003a34:	40014000 	.word	0x40014000
 8003a38:	40014400 	.word	0x40014400
 8003a3c:	40014800 	.word	0x40014800

08003a40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	041b      	lsls	r3, r3, #16
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a17      	ldr	r2, [pc, #92]	; (8003af4 <TIM_OC5_SetConfig+0xb4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00f      	beq.n	8003aba <TIM_OC5_SetConfig+0x7a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a16      	ldr	r2, [pc, #88]	; (8003af8 <TIM_OC5_SetConfig+0xb8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00b      	beq.n	8003aba <TIM_OC5_SetConfig+0x7a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a15      	ldr	r2, [pc, #84]	; (8003afc <TIM_OC5_SetConfig+0xbc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <TIM_OC5_SetConfig+0x7a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <TIM_OC5_SetConfig+0xc0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <TIM_OC5_SetConfig+0x7a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a13      	ldr	r2, [pc, #76]	; (8003b04 <TIM_OC5_SetConfig+0xc4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d109      	bne.n	8003ace <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	621a      	str	r2, [r3, #32]
}
 8003ae8:	bf00      	nop
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40013400 	.word	0x40013400
 8003afc:	40014000 	.word	0x40014000
 8003b00:	40014400 	.word	0x40014400
 8003b04:	40014800 	.word	0x40014800

08003b08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	051b      	lsls	r3, r3, #20
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a18      	ldr	r2, [pc, #96]	; (8003bc0 <TIM_OC6_SetConfig+0xb8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00f      	beq.n	8003b84 <TIM_OC6_SetConfig+0x7c>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a17      	ldr	r2, [pc, #92]	; (8003bc4 <TIM_OC6_SetConfig+0xbc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <TIM_OC6_SetConfig+0x7c>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a16      	ldr	r2, [pc, #88]	; (8003bc8 <TIM_OC6_SetConfig+0xc0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d007      	beq.n	8003b84 <TIM_OC6_SetConfig+0x7c>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <TIM_OC6_SetConfig+0xc4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_OC6_SetConfig+0x7c>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a14      	ldr	r2, [pc, #80]	; (8003bd0 <TIM_OC6_SetConfig+0xc8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d109      	bne.n	8003b98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	029b      	lsls	r3, r3, #10
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40013400 	.word	0x40013400
 8003bc8:	40014000 	.word	0x40014000
 8003bcc:	40014400 	.word	0x40014400
 8003bd0:	40014800 	.word	0x40014800

08003bd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f003 031f 	and.w	r3, r3, #31
 8003be6:	2201      	movs	r2, #1
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a1a      	ldr	r2, [r3, #32]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a1a      	ldr	r2, [r3, #32]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	621a      	str	r2, [r3, #32]
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e045      	b.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d004      	beq.n	8003c6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d108      	bne.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c96:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	40012c00 	.word	0x40012c00
 8003cd4:	40013400 	.word	0x40013400

08003cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e040      	b.n	8003da8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f001 fbea 	bl	8005510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2224      	movs	r2, #36	; 0x24
 8003d40:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f8c0 	bl	8003ed8 <UART_SetConfig>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e022      	b.n	8003da8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fbfc 	bl	8004568 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fc83 	bl	80046ac <UART_CheckIdleState>
 8003da6:	4603      	mov	r3, r0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	f040 8081 	bne.w	8003ecc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_UART_Transmit+0x26>
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e079      	b.n	8003ece <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_UART_Transmit+0x38>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e072      	b.n	8003ece <HAL_UART_Transmit+0x11e>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2221      	movs	r2, #33	; 0x21
 8003dfa:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003dfc:	f7fd f93a 	bl	8001074 <HAL_GetTick>
 8003e00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	88fa      	ldrh	r2, [r7, #6]
 8003e0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1a:	d108      	bne.n	8003e2e <HAL_UART_Transmit+0x7e>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d104      	bne.n	8003e2e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	61bb      	str	r3, [r7, #24]
 8003e2c:	e003      	b.n	8003e36 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e36:	e02d      	b.n	8003e94 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2180      	movs	r1, #128	; 0x80
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 fc77 	bl	8004736 <UART_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e03d      	b.n	8003ece <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10b      	bne.n	8003e70 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	881a      	ldrh	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e64:	b292      	uxth	r2, r2
 8003e66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	3302      	adds	r3, #2
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	e008      	b.n	8003e82 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	781a      	ldrb	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	b292      	uxth	r2, r2
 8003e7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1cb      	bne.n	8003e38 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2140      	movs	r1, #64	; 0x40
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fc43 	bl	8004736 <UART_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e009      	b.n	8003ece <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e000      	b.n	8003ece <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ecc:	2302      	movs	r3, #2
  }
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003edc:	b088      	sub	sp, #32
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4bac      	ldr	r3, [pc, #688]	; (80041c0 <UART_SetConfig+0x2e8>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	69f9      	ldr	r1, [r7, #28]
 8003f16:	430b      	orrs	r3, r1
 8003f18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4aa2      	ldr	r2, [pc, #648]	; (80041c4 <UART_SetConfig+0x2ec>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d004      	beq.n	8003f4a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a99      	ldr	r2, [pc, #612]	; (80041c8 <UART_SetConfig+0x2f0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d121      	bne.n	8003fac <UART_SetConfig+0xd4>
 8003f68:	4b98      	ldr	r3, [pc, #608]	; (80041cc <UART_SetConfig+0x2f4>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d816      	bhi.n	8003fa4 <UART_SetConfig+0xcc>
 8003f76:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <UART_SetConfig+0xa4>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003f8d 	.word	0x08003f8d
 8003f80:	08003f99 	.word	0x08003f99
 8003f84:	08003f93 	.word	0x08003f93
 8003f88:	08003f9f 	.word	0x08003f9f
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	76fb      	strb	r3, [r7, #27]
 8003f90:	e0e8      	b.n	8004164 <UART_SetConfig+0x28c>
 8003f92:	2302      	movs	r3, #2
 8003f94:	76fb      	strb	r3, [r7, #27]
 8003f96:	e0e5      	b.n	8004164 <UART_SetConfig+0x28c>
 8003f98:	2304      	movs	r3, #4
 8003f9a:	76fb      	strb	r3, [r7, #27]
 8003f9c:	e0e2      	b.n	8004164 <UART_SetConfig+0x28c>
 8003f9e:	2308      	movs	r3, #8
 8003fa0:	76fb      	strb	r3, [r7, #27]
 8003fa2:	e0df      	b.n	8004164 <UART_SetConfig+0x28c>
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	76fb      	strb	r3, [r7, #27]
 8003fa8:	bf00      	nop
 8003faa:	e0db      	b.n	8004164 <UART_SetConfig+0x28c>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a87      	ldr	r2, [pc, #540]	; (80041d0 <UART_SetConfig+0x2f8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d134      	bne.n	8004020 <UART_SetConfig+0x148>
 8003fb6:	4b85      	ldr	r3, [pc, #532]	; (80041cc <UART_SetConfig+0x2f4>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b0c      	cmp	r3, #12
 8003fc2:	d829      	bhi.n	8004018 <UART_SetConfig+0x140>
 8003fc4:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <UART_SetConfig+0xf4>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08004001 	.word	0x08004001
 8003fd0:	08004019 	.word	0x08004019
 8003fd4:	08004019 	.word	0x08004019
 8003fd8:	08004019 	.word	0x08004019
 8003fdc:	0800400d 	.word	0x0800400d
 8003fe0:	08004019 	.word	0x08004019
 8003fe4:	08004019 	.word	0x08004019
 8003fe8:	08004019 	.word	0x08004019
 8003fec:	08004007 	.word	0x08004007
 8003ff0:	08004019 	.word	0x08004019
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	08004019 	.word	0x08004019
 8003ffc:	08004013 	.word	0x08004013
 8004000:	2300      	movs	r3, #0
 8004002:	76fb      	strb	r3, [r7, #27]
 8004004:	e0ae      	b.n	8004164 <UART_SetConfig+0x28c>
 8004006:	2302      	movs	r3, #2
 8004008:	76fb      	strb	r3, [r7, #27]
 800400a:	e0ab      	b.n	8004164 <UART_SetConfig+0x28c>
 800400c:	2304      	movs	r3, #4
 800400e:	76fb      	strb	r3, [r7, #27]
 8004010:	e0a8      	b.n	8004164 <UART_SetConfig+0x28c>
 8004012:	2308      	movs	r3, #8
 8004014:	76fb      	strb	r3, [r7, #27]
 8004016:	e0a5      	b.n	8004164 <UART_SetConfig+0x28c>
 8004018:	2310      	movs	r3, #16
 800401a:	76fb      	strb	r3, [r7, #27]
 800401c:	bf00      	nop
 800401e:	e0a1      	b.n	8004164 <UART_SetConfig+0x28c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a6b      	ldr	r2, [pc, #428]	; (80041d4 <UART_SetConfig+0x2fc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d120      	bne.n	800406c <UART_SetConfig+0x194>
 800402a:	4b68      	ldr	r3, [pc, #416]	; (80041cc <UART_SetConfig+0x2f4>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004034:	2b10      	cmp	r3, #16
 8004036:	d00f      	beq.n	8004058 <UART_SetConfig+0x180>
 8004038:	2b10      	cmp	r3, #16
 800403a:	d802      	bhi.n	8004042 <UART_SetConfig+0x16a>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <UART_SetConfig+0x174>
 8004040:	e010      	b.n	8004064 <UART_SetConfig+0x18c>
 8004042:	2b20      	cmp	r3, #32
 8004044:	d005      	beq.n	8004052 <UART_SetConfig+0x17a>
 8004046:	2b30      	cmp	r3, #48	; 0x30
 8004048:	d009      	beq.n	800405e <UART_SetConfig+0x186>
 800404a:	e00b      	b.n	8004064 <UART_SetConfig+0x18c>
 800404c:	2300      	movs	r3, #0
 800404e:	76fb      	strb	r3, [r7, #27]
 8004050:	e088      	b.n	8004164 <UART_SetConfig+0x28c>
 8004052:	2302      	movs	r3, #2
 8004054:	76fb      	strb	r3, [r7, #27]
 8004056:	e085      	b.n	8004164 <UART_SetConfig+0x28c>
 8004058:	2304      	movs	r3, #4
 800405a:	76fb      	strb	r3, [r7, #27]
 800405c:	e082      	b.n	8004164 <UART_SetConfig+0x28c>
 800405e:	2308      	movs	r3, #8
 8004060:	76fb      	strb	r3, [r7, #27]
 8004062:	e07f      	b.n	8004164 <UART_SetConfig+0x28c>
 8004064:	2310      	movs	r3, #16
 8004066:	76fb      	strb	r3, [r7, #27]
 8004068:	bf00      	nop
 800406a:	e07b      	b.n	8004164 <UART_SetConfig+0x28c>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a59      	ldr	r2, [pc, #356]	; (80041d8 <UART_SetConfig+0x300>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d120      	bne.n	80040b8 <UART_SetConfig+0x1e0>
 8004076:	4b55      	ldr	r3, [pc, #340]	; (80041cc <UART_SetConfig+0x2f4>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d00f      	beq.n	80040a4 <UART_SetConfig+0x1cc>
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	d802      	bhi.n	800408e <UART_SetConfig+0x1b6>
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <UART_SetConfig+0x1c0>
 800408c:	e010      	b.n	80040b0 <UART_SetConfig+0x1d8>
 800408e:	2b80      	cmp	r3, #128	; 0x80
 8004090:	d005      	beq.n	800409e <UART_SetConfig+0x1c6>
 8004092:	2bc0      	cmp	r3, #192	; 0xc0
 8004094:	d009      	beq.n	80040aa <UART_SetConfig+0x1d2>
 8004096:	e00b      	b.n	80040b0 <UART_SetConfig+0x1d8>
 8004098:	2300      	movs	r3, #0
 800409a:	76fb      	strb	r3, [r7, #27]
 800409c:	e062      	b.n	8004164 <UART_SetConfig+0x28c>
 800409e:	2302      	movs	r3, #2
 80040a0:	76fb      	strb	r3, [r7, #27]
 80040a2:	e05f      	b.n	8004164 <UART_SetConfig+0x28c>
 80040a4:	2304      	movs	r3, #4
 80040a6:	76fb      	strb	r3, [r7, #27]
 80040a8:	e05c      	b.n	8004164 <UART_SetConfig+0x28c>
 80040aa:	2308      	movs	r3, #8
 80040ac:	76fb      	strb	r3, [r7, #27]
 80040ae:	e059      	b.n	8004164 <UART_SetConfig+0x28c>
 80040b0:	2310      	movs	r3, #16
 80040b2:	76fb      	strb	r3, [r7, #27]
 80040b4:	bf00      	nop
 80040b6:	e055      	b.n	8004164 <UART_SetConfig+0x28c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a47      	ldr	r2, [pc, #284]	; (80041dc <UART_SetConfig+0x304>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d124      	bne.n	800410c <UART_SetConfig+0x234>
 80040c2:	4b42      	ldr	r3, [pc, #264]	; (80041cc <UART_SetConfig+0x2f4>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d0:	d012      	beq.n	80040f8 <UART_SetConfig+0x220>
 80040d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d6:	d802      	bhi.n	80040de <UART_SetConfig+0x206>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <UART_SetConfig+0x214>
 80040dc:	e012      	b.n	8004104 <UART_SetConfig+0x22c>
 80040de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e2:	d006      	beq.n	80040f2 <UART_SetConfig+0x21a>
 80040e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e8:	d009      	beq.n	80040fe <UART_SetConfig+0x226>
 80040ea:	e00b      	b.n	8004104 <UART_SetConfig+0x22c>
 80040ec:	2300      	movs	r3, #0
 80040ee:	76fb      	strb	r3, [r7, #27]
 80040f0:	e038      	b.n	8004164 <UART_SetConfig+0x28c>
 80040f2:	2302      	movs	r3, #2
 80040f4:	76fb      	strb	r3, [r7, #27]
 80040f6:	e035      	b.n	8004164 <UART_SetConfig+0x28c>
 80040f8:	2304      	movs	r3, #4
 80040fa:	76fb      	strb	r3, [r7, #27]
 80040fc:	e032      	b.n	8004164 <UART_SetConfig+0x28c>
 80040fe:	2308      	movs	r3, #8
 8004100:	76fb      	strb	r3, [r7, #27]
 8004102:	e02f      	b.n	8004164 <UART_SetConfig+0x28c>
 8004104:	2310      	movs	r3, #16
 8004106:	76fb      	strb	r3, [r7, #27]
 8004108:	bf00      	nop
 800410a:	e02b      	b.n	8004164 <UART_SetConfig+0x28c>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a2c      	ldr	r2, [pc, #176]	; (80041c4 <UART_SetConfig+0x2ec>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d124      	bne.n	8004160 <UART_SetConfig+0x288>
 8004116:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <UART_SetConfig+0x2f4>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004124:	d012      	beq.n	800414c <UART_SetConfig+0x274>
 8004126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412a:	d802      	bhi.n	8004132 <UART_SetConfig+0x25a>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <UART_SetConfig+0x268>
 8004130:	e012      	b.n	8004158 <UART_SetConfig+0x280>
 8004132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004136:	d006      	beq.n	8004146 <UART_SetConfig+0x26e>
 8004138:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800413c:	d009      	beq.n	8004152 <UART_SetConfig+0x27a>
 800413e:	e00b      	b.n	8004158 <UART_SetConfig+0x280>
 8004140:	2300      	movs	r3, #0
 8004142:	76fb      	strb	r3, [r7, #27]
 8004144:	e00e      	b.n	8004164 <UART_SetConfig+0x28c>
 8004146:	2302      	movs	r3, #2
 8004148:	76fb      	strb	r3, [r7, #27]
 800414a:	e00b      	b.n	8004164 <UART_SetConfig+0x28c>
 800414c:	2304      	movs	r3, #4
 800414e:	76fb      	strb	r3, [r7, #27]
 8004150:	e008      	b.n	8004164 <UART_SetConfig+0x28c>
 8004152:	2308      	movs	r3, #8
 8004154:	76fb      	strb	r3, [r7, #27]
 8004156:	e005      	b.n	8004164 <UART_SetConfig+0x28c>
 8004158:	2310      	movs	r3, #16
 800415a:	76fb      	strb	r3, [r7, #27]
 800415c:	bf00      	nop
 800415e:	e001      	b.n	8004164 <UART_SetConfig+0x28c>
 8004160:	2310      	movs	r3, #16
 8004162:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <UART_SetConfig+0x2ec>)
 800416a:	4293      	cmp	r3, r2
 800416c:	f040 80fa 	bne.w	8004364 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004170:	7efb      	ldrb	r3, [r7, #27]
 8004172:	2b08      	cmp	r3, #8
 8004174:	d836      	bhi.n	80041e4 <UART_SetConfig+0x30c>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <UART_SetConfig+0x2a4>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	080041a1 	.word	0x080041a1
 8004180:	080041e5 	.word	0x080041e5
 8004184:	080041a9 	.word	0x080041a9
 8004188:	080041e5 	.word	0x080041e5
 800418c:	080041af 	.word	0x080041af
 8004190:	080041e5 	.word	0x080041e5
 8004194:	080041e5 	.word	0x080041e5
 8004198:	080041e5 	.word	0x080041e5
 800419c:	080041b7 	.word	0x080041b7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80041a0:	f7fd fff4 	bl	800218c <HAL_RCC_GetPCLK1Freq>
 80041a4:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041a6:	e020      	b.n	80041ea <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80041a8:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <UART_SetConfig+0x308>)
 80041aa:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041ac:	e01d      	b.n	80041ea <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80041ae:	f7fd ff57 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 80041b2:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041b4:	e019      	b.n	80041ea <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80041b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ba:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041bc:	e015      	b.n	80041ea <UART_SetConfig+0x312>
 80041be:	bf00      	nop
 80041c0:	efff69f3 	.word	0xefff69f3
 80041c4:	40008000 	.word	0x40008000
 80041c8:	40013800 	.word	0x40013800
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40004400 	.word	0x40004400
 80041d4:	40004800 	.word	0x40004800
 80041d8:	40004c00 	.word	0x40004c00
 80041dc:	40005000 	.word	0x40005000
 80041e0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	74fb      	strb	r3, [r7, #19]
        break;
 80041e8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 81ac 	beq.w	800454a <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4413      	add	r3, r2
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d305      	bcc.n	800420e <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	429a      	cmp	r2, r3
 800420c:	d902      	bls.n	8004214 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	74fb      	strb	r3, [r7, #19]
 8004212:	e19a      	b.n	800454a <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8004214:	7efb      	ldrb	r3, [r7, #27]
 8004216:	2b08      	cmp	r3, #8
 8004218:	f200 8091 	bhi.w	800433e <UART_SetConfig+0x466>
 800421c:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <UART_SetConfig+0x34c>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004249 	.word	0x08004249
 8004228:	0800433f 	.word	0x0800433f
 800422c:	08004295 	.word	0x08004295
 8004230:	0800433f 	.word	0x0800433f
 8004234:	080042c9 	.word	0x080042c9
 8004238:	0800433f 	.word	0x0800433f
 800423c:	0800433f 	.word	0x0800433f
 8004240:	0800433f 	.word	0x0800433f
 8004244:	08004315 	.word	0x08004315
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004248:	f7fd ffa0 	bl	800218c <HAL_RCC_GetPCLK1Freq>
 800424c:	4603      	mov	r3, r0
 800424e:	4619      	mov	r1, r3
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	f04f 0400 	mov.w	r4, #0
 800425c:	0214      	lsls	r4, r2, #8
 800425e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004262:	020b      	lsls	r3, r1, #8
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6852      	ldr	r2, [r2, #4]
 8004268:	0852      	lsrs	r2, r2, #1
 800426a:	4611      	mov	r1, r2
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	eb13 0b01 	adds.w	fp, r3, r1
 8004274:	eb44 0c02 	adc.w	ip, r4, r2
 8004278:	4658      	mov	r0, fp
 800427a:	4661      	mov	r1, ip
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f04f 0400 	mov.w	r4, #0
 8004284:	461a      	mov	r2, r3
 8004286:	4623      	mov	r3, r4
 8004288:	f7fc fcde 	bl	8000c48 <__aeabi_uldivmod>
 800428c:	4603      	mov	r3, r0
 800428e:	460c      	mov	r4, r1
 8004290:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004292:	e057      	b.n	8004344 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	f04f 0400 	mov.w	r4, #0
 800429e:	49b1      	ldr	r1, [pc, #708]	; (8004564 <UART_SetConfig+0x68c>)
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	eb13 0b01 	adds.w	fp, r3, r1
 80042a8:	eb44 0c02 	adc.w	ip, r4, r2
 80042ac:	4658      	mov	r0, fp
 80042ae:	4661      	mov	r1, ip
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f04f 0400 	mov.w	r4, #0
 80042b8:	461a      	mov	r2, r3
 80042ba:	4623      	mov	r3, r4
 80042bc:	f7fc fcc4 	bl	8000c48 <__aeabi_uldivmod>
 80042c0:	4603      	mov	r3, r0
 80042c2:	460c      	mov	r4, r1
 80042c4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80042c6:	e03d      	b.n	8004344 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80042c8:	f7fd feca 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 80042cc:	4603      	mov	r3, r0
 80042ce:	4619      	mov	r1, r3
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	f04f 0400 	mov.w	r4, #0
 80042dc:	0214      	lsls	r4, r2, #8
 80042de:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80042e2:	020b      	lsls	r3, r1, #8
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6852      	ldr	r2, [r2, #4]
 80042e8:	0852      	lsrs	r2, r2, #1
 80042ea:	4611      	mov	r1, r2
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	eb13 0b01 	adds.w	fp, r3, r1
 80042f4:	eb44 0c02 	adc.w	ip, r4, r2
 80042f8:	4658      	mov	r0, fp
 80042fa:	4661      	mov	r1, ip
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f04f 0400 	mov.w	r4, #0
 8004304:	461a      	mov	r2, r3
 8004306:	4623      	mov	r3, r4
 8004308:	f7fc fc9e 	bl	8000c48 <__aeabi_uldivmod>
 800430c:	4603      	mov	r3, r0
 800430e:	460c      	mov	r4, r1
 8004310:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004312:	e017      	b.n	8004344 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	f04f 0400 	mov.w	r4, #0
 800431e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004322:	f144 0100 	adc.w	r1, r4, #0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f04f 0400 	mov.w	r4, #0
 800432e:	461a      	mov	r2, r3
 8004330:	4623      	mov	r3, r4
 8004332:	f7fc fc89 	bl	8000c48 <__aeabi_uldivmod>
 8004336:	4603      	mov	r3, r0
 8004338:	460c      	mov	r4, r1
 800433a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800433c:	e002      	b.n	8004344 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	74fb      	strb	r3, [r7, #19]
            break;
 8004342:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800434a:	d308      	bcc.n	800435e <UART_SetConfig+0x486>
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004352:	d204      	bcs.n	800435e <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	60da      	str	r2, [r3, #12]
 800435c:	e0f5      	b.n	800454a <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	74fb      	strb	r3, [r7, #19]
 8004362:	e0f2      	b.n	800454a <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800436c:	d17f      	bne.n	800446e <UART_SetConfig+0x596>
  {
    switch (clocksource)
 800436e:	7efb      	ldrb	r3, [r7, #27]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d85c      	bhi.n	800442e <UART_SetConfig+0x556>
 8004374:	a201      	add	r2, pc, #4	; (adr r2, 800437c <UART_SetConfig+0x4a4>)
 8004376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437a:	bf00      	nop
 800437c:	080043a1 	.word	0x080043a1
 8004380:	080043bf 	.word	0x080043bf
 8004384:	080043dd 	.word	0x080043dd
 8004388:	0800442f 	.word	0x0800442f
 800438c:	080043f9 	.word	0x080043f9
 8004390:	0800442f 	.word	0x0800442f
 8004394:	0800442f 	.word	0x0800442f
 8004398:	0800442f 	.word	0x0800442f
 800439c:	08004417 	.word	0x08004417
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80043a0:	f7fd fef4 	bl	800218c <HAL_RCC_GetPCLK1Freq>
 80043a4:	4603      	mov	r3, r0
 80043a6:	005a      	lsls	r2, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	441a      	add	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043bc:	e03a      	b.n	8004434 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80043be:	f7fd fefb 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 80043c2:	4603      	mov	r3, r0
 80043c4:	005a      	lsls	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	441a      	add	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043da:	e02b      	b.n	8004434 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80043e6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6852      	ldr	r2, [r2, #4]
 80043ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043f6:	e01d      	b.n	8004434 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043f8:	f7fd fe32 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 80043fc:	4603      	mov	r3, r0
 80043fe:	005a      	lsls	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	085b      	lsrs	r3, r3, #1
 8004406:	441a      	add	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	b29b      	uxth	r3, r3
 8004412:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004414:	e00e      	b.n	8004434 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	085b      	lsrs	r3, r3, #1
 800441c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	fbb2 f3f3 	udiv	r3, r2, r3
 8004428:	b29b      	uxth	r3, r3
 800442a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800442c:	e002      	b.n	8004434 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	74fb      	strb	r3, [r7, #19]
        break;
 8004432:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2b0f      	cmp	r3, #15
 8004438:	d916      	bls.n	8004468 <UART_SetConfig+0x590>
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004440:	d212      	bcs.n	8004468 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	b29b      	uxth	r3, r3
 8004446:	f023 030f 	bic.w	r3, r3, #15
 800444a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	085b      	lsrs	r3, r3, #1
 8004450:	b29b      	uxth	r3, r3
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	b29a      	uxth	r2, r3
 8004458:	897b      	ldrh	r3, [r7, #10]
 800445a:	4313      	orrs	r3, r2
 800445c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	897a      	ldrh	r2, [r7, #10]
 8004464:	60da      	str	r2, [r3, #12]
 8004466:	e070      	b.n	800454a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	74fb      	strb	r3, [r7, #19]
 800446c:	e06d      	b.n	800454a <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800446e:	7efb      	ldrb	r3, [r7, #27]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d859      	bhi.n	8004528 <UART_SetConfig+0x650>
 8004474:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0x5a4>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	080044a1 	.word	0x080044a1
 8004480:	080044bd 	.word	0x080044bd
 8004484:	080044d9 	.word	0x080044d9
 8004488:	08004529 	.word	0x08004529
 800448c:	080044f5 	.word	0x080044f5
 8004490:	08004529 	.word	0x08004529
 8004494:	08004529 	.word	0x08004529
 8004498:	08004529 	.word	0x08004529
 800449c:	08004511 	.word	0x08004511
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80044a0:	f7fd fe74 	bl	800218c <HAL_RCC_GetPCLK1Freq>
 80044a4:	4602      	mov	r2, r0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	085b      	lsrs	r3, r3, #1
 80044ac:	441a      	add	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044ba:	e038      	b.n	800452e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80044bc:	f7fd fe7c 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	441a      	add	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044d6:	e02a      	b.n	800452e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	085b      	lsrs	r3, r3, #1
 80044de:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80044e2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6852      	ldr	r2, [r2, #4]
 80044ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044f2:	e01c      	b.n	800452e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80044f4:	f7fd fdb4 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	441a      	add	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	fbb2 f3f3 	udiv	r3, r2, r3
 800450a:	b29b      	uxth	r3, r3
 800450c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800450e:	e00e      	b.n	800452e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	085b      	lsrs	r3, r3, #1
 8004516:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004522:	b29b      	uxth	r3, r3
 8004524:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004526:	e002      	b.n	800452e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	74fb      	strb	r3, [r7, #19]
        break;
 800452c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b0f      	cmp	r3, #15
 8004532:	d908      	bls.n	8004546 <UART_SetConfig+0x66e>
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453a:	d204      	bcs.n	8004546 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	60da      	str	r2, [r3, #12]
 8004544:	e001      	b.n	800454a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004556:	7cfb      	ldrb	r3, [r7, #19]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3720      	adds	r7, #32
 800455c:	46bd      	mov	sp, r7
 800455e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004562:	bf00      	nop
 8004564:	f4240000 	.word	0xf4240000

08004568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01a      	beq.n	800467e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004666:	d10a      	bne.n	800467e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	605a      	str	r2, [r3, #4]
  }
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80046ba:	f7fc fcdb 	bl	8001074 <HAL_GetTick>
 80046be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d10e      	bne.n	80046ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f82a 	bl	8004736 <UART_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e020      	b.n	800472e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d10e      	bne.n	8004718 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f814 	bl	8004736 <UART_WaitOnFlagUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e00a      	b.n	800472e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	603b      	str	r3, [r7, #0]
 8004742:	4613      	mov	r3, r2
 8004744:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004746:	e02a      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474e:	d026      	beq.n	800479e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004750:	f7fc fc90 	bl	8001074 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	429a      	cmp	r2, r3
 800475e:	d302      	bcc.n	8004766 <UART_WaitOnFlagUntilTimeout+0x30>
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d11b      	bne.n	800479e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004774:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e00f      	b.n	80047be <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69da      	ldr	r2, [r3, #28]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4013      	ands	r3, r2
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	bf0c      	ite	eq
 80047ae:	2301      	moveq	r3, #1
 80047b0:	2300      	movne	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d0c5      	beq.n	8004748 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80047cc:	b0c6      	sub	sp, #280	; 0x118
 80047ce:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047d0:	f7fc fbe4 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047d4:	f000 f8b8 	bl	8004948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047d8:	f000 fafe 	bl	8004dd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80047dc:	f000 facc 	bl	8004d78 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80047e0:	f000 f928 	bl	8004a34 <MX_SPI2_Init>
  MX_TIM2_Init();
 80047e4:	f000 f9be 	bl	8004b64 <MX_TIM2_Init>
  MX_TIM4_Init();
 80047e8:	f000 fa6e 	bl	8004cc8 <MX_TIM4_Init>
  MX_TIM1_Init();
 80047ec:	f000 f95c 	bl	8004aa8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80047f0:	f000 fa10 	bl	8004c14 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	motor_Context motorG, motorD;

	motorG.timer	 		= htim2;
 80047f4:	4b4a      	ldr	r3, [pc, #296]	; (8004920 <main+0x158>)
 80047f6:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 80047fa:	461d      	mov	r5, r3
 80047fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004808:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800480c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	motorG.channel	 	= TIM_CHANNEL_2;
 8004810:	2304      	movs	r3, #4
 8004812:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	motorG.motDir_Port	= MotA_Dir_GPIO_Port;
 8004816:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800481a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	motorG.motDir_Pin	 	= MotA_Dir_Pin;
 800481e:	2320      	movs	r3, #32
 8004820:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	motorG.motBrake_Port	= MotA_Brake_GPIO_Port;
 8004824:	4b3f      	ldr	r3, [pc, #252]	; (8004924 <main+0x15c>)
 8004826:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	motorG.motBrake_Pin	= MotA_Brake_Pin;
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
	motorG.reverseDir	 	= true;
 8004830:	2301      	movs	r3, #1
 8004832:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

	motorD.timer	 		= htim3;
 8004836:	4b3c      	ldr	r3, [pc, #240]	; (8004928 <main+0x160>)
 8004838:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800483c:	461d      	mov	r5, r3
 800483e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800484a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800484e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	motorD.channel	 	= TIM_CHANNEL_2;
 8004852:	2304      	movs	r3, #4
 8004854:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	motorD.motDir_Port	= MotB_Dir_GPIO_Port;
 8004858:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800485c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	motorD.motDir_Pin	 	= MotB_Dir_Pin;
 8004860:	2340      	movs	r3, #64	; 0x40
 8004862:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
	motorD.motBrake_Port	= MotB_Brake_GPIO_Port;
 8004866:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800486a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	motorD.motBrake_Pin	= MotB_Brake_Pin;
 800486e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004872:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	motorD.reverseDir	 	= false;
 8004876:	2300      	movs	r3, #0
 8004878:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2

	motor_init(&motorG);
 800487c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fb1e 	bl	8004ec2 <motor_init>
	motor_init(&motorD);
 8004886:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fb19 	bl	8004ec2 <motor_init>

	odometry_Context odometry;
	odometry.rightTicks = (int*)&TIM4->CNT;
 8004890:	4b26      	ldr	r3, [pc, #152]	; (800492c <main+0x164>)
 8004892:	65bb      	str	r3, [r7, #88]	; 0x58
	odometry.leftTicks = (int*)&TIM1->CNT;
 8004894:	4b26      	ldr	r3, [pc, #152]	; (8004930 <main+0x168>)
 8004896:	65fb      	str	r3, [r7, #92]	; 0x5c
	odometry.encoderRes = 				480; // tick/rad
 8004898:	4b26      	ldr	r3, [pc, #152]	; (8004934 <main+0x16c>)
 800489a:	637b      	str	r3, [r7, #52]	; 0x34
	odometry.wheelRadiusR = 			65./2.;
 800489c:	4b26      	ldr	r3, [pc, #152]	; (8004938 <main+0x170>)
 800489e:	63bb      	str	r3, [r7, #56]	; 0x38
	odometry.wheelRadiusL = 			65./2.;
 80048a0:	4b25      	ldr	r3, [pc, #148]	; (8004938 <main+0x170>)
 80048a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	odometry.distanceBetweenWheels = 	210.;
 80048a4:	4b25      	ldr	r3, [pc, #148]	; (800493c <main+0x174>)
 80048a6:	643b      	str	r3, [r7, #64]	; 0x40

	odometry_init(&odometry);
 80048a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fb69 	bl	8004f84 <odometry_init>

	odometry.position.x = 0.;
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	647b      	str	r3, [r7, #68]	; 0x44
	odometry.position.y = 0.;
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	64bb      	str	r3, [r7, #72]	; 0x48
	odometry.position.theta = 0.;
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	64fb      	str	r3, [r7, #76]	; 0x4c
//	int32_t t0, t;
//	t0 = HAL_GetTick();
	char buffer[50];
	while (1)
	{
		HAL_Delay(500);
 80048c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048c8:	f7fc fbe0 	bl	800108c <HAL_Delay>
		// mise à jour de l'odométrie
		odometry_update(&odometry);
 80048cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fb69 	bl	8004fa8 <odometry_update>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "x: %f y: %f theta: %f\r\n", odometry.position.x, odometry.position.y, odometry.position.theta), 5000); //s/ @suppress("Float formatting support")
 80048d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fb fe35 	bl	8000548 <__aeabi_f2d>
 80048de:	4680      	mov	r8, r0
 80048e0:	4689      	mov	r9, r1
 80048e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fb fe2f 	bl	8000548 <__aeabi_f2d>
 80048ea:	4604      	mov	r4, r0
 80048ec:	460d      	mov	r5, r1
 80048ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fb fe29 	bl	8000548 <__aeabi_f2d>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4638      	mov	r0, r7
 80048fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004900:	e9cd 4500 	strd	r4, r5, [sp]
 8004904:	4642      	mov	r2, r8
 8004906:	464b      	mov	r3, r9
 8004908:	490d      	ldr	r1, [pc, #52]	; (8004940 <main+0x178>)
 800490a:	f001 fb39 	bl	8005f80 <siprintf>
 800490e:	4603      	mov	r3, r0
 8004910:	b29a      	uxth	r2, r3
 8004912:	4639      	mov	r1, r7
 8004914:	f241 3388 	movw	r3, #5000	; 0x1388
 8004918:	480a      	ldr	r0, [pc, #40]	; (8004944 <main+0x17c>)
 800491a:	f7ff fa49 	bl	8003db0 <HAL_UART_Transmit>
		HAL_Delay(500);
 800491e:	e7d1      	b.n	80048c4 <main+0xfc>
 8004920:	2000032c 	.word	0x2000032c
 8004924:	48000800 	.word	0x48000800
 8004928:	200002ac 	.word	0x200002ac
 800492c:	40000824 	.word	0x40000824
 8004930:	40012c24 	.word	0x40012c24
 8004934:	43f00000 	.word	0x43f00000
 8004938:	42020000 	.word	0x42020000
 800493c:	43520000 	.word	0x43520000
 8004940:	08008820 	.word	0x08008820
 8004944:	2000036c 	.word	0x2000036c

08004948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b0b8      	sub	sp, #224	; 0xe0
 800494c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800494e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004952:	2244      	movs	r2, #68	; 0x44
 8004954:	2100      	movs	r1, #0
 8004956:	4618      	mov	r0, r3
 8004958:	f000 feae 	bl	80056b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800495c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800496c:	463b      	mov	r3, r7
 800496e:	2288      	movs	r2, #136	; 0x88
 8004970:	2100      	movs	r1, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fea0 	bl	80056b8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004978:	2302      	movs	r3, #2
 800497a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800497e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004982:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004986:	2310      	movs	r3, #16
 8004988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800498c:	2302      	movs	r3, #2
 800498e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004992:	2302      	movs	r3, #2
 8004994:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004998:	2301      	movs	r3, #1
 800499a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800499e:	230a      	movs	r3, #10
 80049a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80049a4:	2307      	movs	r3, #7
 80049a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80049aa:	2302      	movs	r3, #2
 80049ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80049b0:	2302      	movs	r3, #2
 80049b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fc febe 	bl	800173c <HAL_RCC_OscConfig>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80049c6:	f000 fa75 	bl	8004eb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049ca:	230f      	movs	r3, #15
 80049cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049d0:	2303      	movs	r3, #3
 80049d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049d6:	2300      	movs	r3, #0
 80049d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049dc:	2300      	movs	r3, #0
 80049de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049e2:	2300      	movs	r3, #0
 80049e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80049e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80049ec:	2104      	movs	r1, #4
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fd fa54 	bl	8001e9c <HAL_RCC_ClockConfig>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80049fa:	f000 fa5b 	bl	8004eb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80049fe:	2302      	movs	r3, #2
 8004a00:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004a02:	2300      	movs	r3, #0
 8004a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a06:	463b      	mov	r3, r7
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fd fc4b 	bl	80022a4 <HAL_RCCEx_PeriphCLKConfig>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8004a14:	f000 fa4e 	bl	8004eb4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004a18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a1c:	f7fc fe38 	bl	8001690 <HAL_PWREx_ControlVoltageScaling>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8004a26:	f000 fa45 	bl	8004eb4 <Error_Handler>
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	37e0      	adds	r7, #224	; 0xe0
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004a38:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <MX_SPI2_Init+0x6c>)
 8004a3a:	4a1a      	ldr	r2, [pc, #104]	; (8004aa4 <MX_SPI2_Init+0x70>)
 8004a3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8004a3e:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <MX_SPI2_Init+0x6c>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004a44:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <MX_SPI2_Init+0x6c>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8004a4a:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <MX_SPI2_Init+0x6c>)
 8004a4c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004a50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a52:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <MX_SPI2_Init+0x6c>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a58:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <MX_SPI2_Init+0x6c>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004a5e:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <MX_SPI2_Init+0x6c>)
 8004a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a64:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a66:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <MX_SPI2_Init+0x6c>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <MX_SPI2_Init+0x6c>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a72:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <MX_SPI2_Init+0x6c>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004a78:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <MX_SPI2_Init+0x6c>)
 8004a7a:	2207      	movs	r2, #7
 8004a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004a7e:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <MX_SPI2_Init+0x6c>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <MX_SPI2_Init+0x6c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004a8a:	4805      	ldr	r0, [pc, #20]	; (8004aa0 <MX_SPI2_Init+0x6c>)
 8004a8c:	f7fe f8ba 	bl	8002c04 <HAL_SPI_Init>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8004a96:	f000 fa0d 	bl	8004eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000208 	.word	0x20000208
 8004aa4:	40003800 	.word	0x40003800

08004aa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08c      	sub	sp, #48	; 0x30
 8004aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004aae:	f107 030c 	add.w	r3, r7, #12
 8004ab2:	2224      	movs	r2, #36	; 0x24
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fdfe 	bl	80056b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004abc:	463b      	mov	r3, r7
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	605a      	str	r2, [r3, #4]
 8004ac4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004ac6:	4b25      	ldr	r3, [pc, #148]	; (8004b5c <MX_TIM1_Init+0xb4>)
 8004ac8:	4a25      	ldr	r2, [pc, #148]	; (8004b60 <MX_TIM1_Init+0xb8>)
 8004aca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004acc:	4b23      	ldr	r3, [pc, #140]	; (8004b5c <MX_TIM1_Init+0xb4>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ad2:	4b22      	ldr	r3, [pc, #136]	; (8004b5c <MX_TIM1_Init+0xb4>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004ad8:	4b20      	ldr	r3, [pc, #128]	; (8004b5c <MX_TIM1_Init+0xb4>)
 8004ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ade:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ae0:	4b1e      	ldr	r3, [pc, #120]	; (8004b5c <MX_TIM1_Init+0xb4>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004ae6:	4b1d      	ldr	r3, [pc, #116]	; (8004b5c <MX_TIM1_Init+0xb4>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004aec:	4b1b      	ldr	r3, [pc, #108]	; (8004b5c <MX_TIM1_Init+0xb4>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004af2:	2303      	movs	r3, #3
 8004af4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004af6:	2300      	movs	r3, #0
 8004af8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004afa:	2301      	movs	r3, #1
 8004afc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8004b02:	230f      	movs	r3, #15
 8004b04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004b06:	2300      	movs	r3, #0
 8004b08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8004b12:	230f      	movs	r3, #15
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004b16:	f107 030c 	add.w	r3, r7, #12
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	480f      	ldr	r0, [pc, #60]	; (8004b5c <MX_TIM1_Init+0xb4>)
 8004b1e:	f7fe f9ed 	bl	8002efc <HAL_TIM_Encoder_Init>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8004b28:	f000 f9c4 	bl	8004eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004b30:	2300      	movs	r3, #0
 8004b32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b38:	463b      	mov	r3, r7
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4807      	ldr	r0, [pc, #28]	; (8004b5c <MX_TIM1_Init+0xb4>)
 8004b3e:	f7ff f86f 	bl	8003c20 <HAL_TIMEx_MasterConfigSynchronization>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8004b48:	f000 f9b4 	bl	8004eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->CR1 = 1;
 8004b4c:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <MX_TIM1_Init+0xb8>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 8004b52:	bf00      	nop
 8004b54:	3730      	adds	r7, #48	; 0x30
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	200002ec 	.word	0x200002ec
 8004b60:	40012c00 	.word	0x40012c00

08004b64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b6a:	f107 031c 	add.w	r3, r7, #28
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	605a      	str	r2, [r3, #4]
 8004b74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b76:	463b      	mov	r3, r7
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	611a      	str	r2, [r3, #16]
 8004b84:	615a      	str	r2, [r3, #20]
 8004b86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b88:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <MX_TIM2_Init+0xac>)
 8004b8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004b90:	4b1f      	ldr	r3, [pc, #124]	; (8004c10 <MX_TIM2_Init+0xac>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b96:	4b1e      	ldr	r3, [pc, #120]	; (8004c10 <MX_TIM2_Init+0xac>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8004b9c:	4b1c      	ldr	r3, [pc, #112]	; (8004c10 <MX_TIM2_Init+0xac>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ba2:	4b1b      	ldr	r3, [pc, #108]	; (8004c10 <MX_TIM2_Init+0xac>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ba8:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <MX_TIM2_Init+0xac>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004bae:	4818      	ldr	r0, [pc, #96]	; (8004c10 <MX_TIM2_Init+0xac>)
 8004bb0:	f7fe f8b2 	bl	8002d18 <HAL_TIM_PWM_Init>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8004bba:	f000 f97b 	bl	8004eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bc6:	f107 031c 	add.w	r3, r7, #28
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4810      	ldr	r0, [pc, #64]	; (8004c10 <MX_TIM2_Init+0xac>)
 8004bce:	f7ff f827 	bl	8003c20 <HAL_TIMEx_MasterConfigSynchronization>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8004bd8:	f000 f96c 	bl	8004eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004bdc:	2360      	movs	r3, #96	; 0x60
 8004bde:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004bec:	463b      	mov	r3, r7
 8004bee:	2204      	movs	r2, #4
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4807      	ldr	r0, [pc, #28]	; (8004c10 <MX_TIM2_Init+0xac>)
 8004bf4:	f7fe fb34 	bl	8003260 <HAL_TIM_PWM_ConfigChannel>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8004bfe:	f000 f959 	bl	8004eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004c02:	4803      	ldr	r0, [pc, #12]	; (8004c10 <MX_TIM2_Init+0xac>)
 8004c04:	f000 fc2a 	bl	800545c <HAL_TIM_MspPostInit>

}
 8004c08:	bf00      	nop
 8004c0a:	3728      	adds	r7, #40	; 0x28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	2000032c 	.word	0x2000032c

08004c14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08a      	sub	sp, #40	; 0x28
 8004c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c1a:	f107 031c 	add.w	r3, r7, #28
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	605a      	str	r2, [r3, #4]
 8004c24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c26:	463b      	mov	r3, r7
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	605a      	str	r2, [r3, #4]
 8004c2e:	609a      	str	r2, [r3, #8]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	611a      	str	r2, [r3, #16]
 8004c34:	615a      	str	r2, [r3, #20]
 8004c36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c38:	4b21      	ldr	r3, [pc, #132]	; (8004cc0 <MX_TIM3_Init+0xac>)
 8004c3a:	4a22      	ldr	r2, [pc, #136]	; (8004cc4 <MX_TIM3_Init+0xb0>)
 8004c3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004c3e:	4b20      	ldr	r3, [pc, #128]	; (8004cc0 <MX_TIM3_Init+0xac>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c44:	4b1e      	ldr	r3, [pc, #120]	; (8004cc0 <MX_TIM3_Init+0xac>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8004c4a:	4b1d      	ldr	r3, [pc, #116]	; (8004cc0 <MX_TIM3_Init+0xac>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c50:	4b1b      	ldr	r3, [pc, #108]	; (8004cc0 <MX_TIM3_Init+0xac>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c56:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <MX_TIM3_Init+0xac>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004c5c:	4818      	ldr	r0, [pc, #96]	; (8004cc0 <MX_TIM3_Init+0xac>)
 8004c5e:	f7fe f85b 	bl	8002d18 <HAL_TIM_PWM_Init>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004c68:	f000 f924 	bl	8004eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c70:	2300      	movs	r3, #0
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c74:	f107 031c 	add.w	r3, r7, #28
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4811      	ldr	r0, [pc, #68]	; (8004cc0 <MX_TIM3_Init+0xac>)
 8004c7c:	f7fe ffd0 	bl	8003c20 <HAL_TIMEx_MasterConfigSynchronization>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004c86:	f000 f915 	bl	8004eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c8a:	2360      	movs	r3, #96	; 0x60
 8004c8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c96:	2300      	movs	r3, #0
 8004c98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c9a:	463b      	mov	r3, r7
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4807      	ldr	r0, [pc, #28]	; (8004cc0 <MX_TIM3_Init+0xac>)
 8004ca2:	f7fe fadd 	bl	8003260 <HAL_TIM_PWM_ConfigChannel>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004cac:	f000 f902 	bl	8004eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004cb0:	4803      	ldr	r0, [pc, #12]	; (8004cc0 <MX_TIM3_Init+0xac>)
 8004cb2:	f000 fbd3 	bl	800545c <HAL_TIM_MspPostInit>

}
 8004cb6:	bf00      	nop
 8004cb8:	3728      	adds	r7, #40	; 0x28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	200002ac 	.word	0x200002ac
 8004cc4:	40000400 	.word	0x40000400

08004cc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08c      	sub	sp, #48	; 0x30
 8004ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004cce:	f107 030c 	add.w	r3, r7, #12
 8004cd2:	2224      	movs	r2, #36	; 0x24
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fcee 	bl	80056b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cdc:	463b      	mov	r3, r7
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	605a      	str	r2, [r3, #4]
 8004ce4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004ce6:	4b22      	ldr	r3, [pc, #136]	; (8004d70 <MX_TIM4_Init+0xa8>)
 8004ce8:	4a22      	ldr	r2, [pc, #136]	; (8004d74 <MX_TIM4_Init+0xac>)
 8004cea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004cec:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <MX_TIM4_Init+0xa8>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf2:	4b1f      	ldr	r3, [pc, #124]	; (8004d70 <MX_TIM4_Init+0xa8>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004cf8:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <MX_TIM4_Init+0xa8>)
 8004cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cfe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d00:	4b1b      	ldr	r3, [pc, #108]	; (8004d70 <MX_TIM4_Init+0xa8>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d06:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <MX_TIM4_Init+0xa8>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004d14:	2301      	movs	r3, #1
 8004d16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004d20:	2300      	movs	r3, #0
 8004d22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004d24:	2301      	movs	r3, #1
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004d30:	f107 030c 	add.w	r3, r7, #12
 8004d34:	4619      	mov	r1, r3
 8004d36:	480e      	ldr	r0, [pc, #56]	; (8004d70 <MX_TIM4_Init+0xa8>)
 8004d38:	f7fe f8e0 	bl	8002efc <HAL_TIM_Encoder_Init>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004d42:	f000 f8b7 	bl	8004eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d46:	2300      	movs	r3, #0
 8004d48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004d4e:	463b      	mov	r3, r7
 8004d50:	4619      	mov	r1, r3
 8004d52:	4807      	ldr	r0, [pc, #28]	; (8004d70 <MX_TIM4_Init+0xa8>)
 8004d54:	f7fe ff64 	bl	8003c20 <HAL_TIMEx_MasterConfigSynchronization>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8004d5e:	f000 f8a9 	bl	8004eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  TIM4->CR1 = 1;
 8004d62:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <MX_TIM4_Init+0xac>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM4_Init 2 */

}
 8004d68:	bf00      	nop
 8004d6a:	3730      	adds	r7, #48	; 0x30
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	2000026c 	.word	0x2000026c
 8004d74:	40000800 	.word	0x40000800

08004d78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d7c:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <MX_USART2_UART_Init+0x58>)
 8004d7e:	4a15      	ldr	r2, [pc, #84]	; (8004dd4 <MX_USART2_UART_Init+0x5c>)
 8004d80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004d82:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <MX_USART2_UART_Init+0x58>)
 8004d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d8a:	4b11      	ldr	r3, [pc, #68]	; (8004dd0 <MX_USART2_UART_Init+0x58>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d90:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <MX_USART2_UART_Init+0x58>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d96:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <MX_USART2_UART_Init+0x58>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <MX_USART2_UART_Init+0x58>)
 8004d9e:	220c      	movs	r2, #12
 8004da0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004da2:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <MX_USART2_UART_Init+0x58>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004da8:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <MX_USART2_UART_Init+0x58>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004dae:	4b08      	ldr	r3, [pc, #32]	; (8004dd0 <MX_USART2_UART_Init+0x58>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004db4:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <MX_USART2_UART_Init+0x58>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004dba:	4805      	ldr	r0, [pc, #20]	; (8004dd0 <MX_USART2_UART_Init+0x58>)
 8004dbc:	f7fe ffaa 	bl	8003d14 <HAL_UART_Init>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004dc6:	f000 f875 	bl	8004eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004dca:	bf00      	nop
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	2000036c 	.word	0x2000036c
 8004dd4:	40004400 	.word	0x40004400

08004dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dde:	f107 030c 	add.w	r3, r7, #12
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	605a      	str	r2, [r3, #4]
 8004de8:	609a      	str	r2, [r3, #8]
 8004dea:	60da      	str	r2, [r3, #12]
 8004dec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dee:	4b2f      	ldr	r3, [pc, #188]	; (8004eac <MX_GPIO_Init+0xd4>)
 8004df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df2:	4a2e      	ldr	r2, [pc, #184]	; (8004eac <MX_GPIO_Init+0xd4>)
 8004df4:	f043 0304 	orr.w	r3, r3, #4
 8004df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dfa:	4b2c      	ldr	r3, [pc, #176]	; (8004eac <MX_GPIO_Init+0xd4>)
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	60bb      	str	r3, [r7, #8]
 8004e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e06:	4b29      	ldr	r3, [pc, #164]	; (8004eac <MX_GPIO_Init+0xd4>)
 8004e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0a:	4a28      	ldr	r2, [pc, #160]	; (8004eac <MX_GPIO_Init+0xd4>)
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e12:	4b26      	ldr	r3, [pc, #152]	; (8004eac <MX_GPIO_Init+0xd4>)
 8004e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	607b      	str	r3, [r7, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e1e:	4b23      	ldr	r3, [pc, #140]	; (8004eac <MX_GPIO_Init+0xd4>)
 8004e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e22:	4a22      	ldr	r2, [pc, #136]	; (8004eac <MX_GPIO_Init+0xd4>)
 8004e24:	f043 0302 	orr.w	r3, r3, #2
 8004e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e2a:	4b20      	ldr	r3, [pc, #128]	; (8004eac <MX_GPIO_Init+0xd4>)
 8004e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotA_Dir_Pin|MotB_Dir_Pin|MotB_Brake_Pin, GPIO_PIN_RESET);
 8004e36:	2200      	movs	r2, #0
 8004e38:	f44f 618c 	mov.w	r1, #1120	; 0x460
 8004e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e40:	f7fc fc00 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotA_Brake_GPIO_Port, MotA_Brake_Pin, GPIO_PIN_RESET);
 8004e44:	2200      	movs	r2, #0
 8004e46:	2180      	movs	r1, #128	; 0x80
 8004e48:	4819      	ldr	r0, [pc, #100]	; (8004eb0 <MX_GPIO_Init+0xd8>)
 8004e4a:	f7fc fbfb 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotA_CurrentSense_Pin MotB_CurrentSense_Pin */
  GPIO_InitStruct.Pin = MotA_CurrentSense_Pin|MotB_CurrentSense_Pin;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e52:	2303      	movs	r3, #3
 8004e54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e5a:	f107 030c 	add.w	r3, r7, #12
 8004e5e:	4619      	mov	r1, r3
 8004e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e64:	f7fc fa46 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotA_Dir_Pin MotB_Dir_Pin MotB_Brake_Pin */
  GPIO_InitStruct.Pin = MotA_Dir_Pin|MotB_Dir_Pin|MotB_Brake_Pin;
 8004e68:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8004e6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e76:	2300      	movs	r3, #0
 8004e78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e7a:	f107 030c 	add.w	r3, r7, #12
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e84:	f7fc fa36 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MotA_Brake_Pin */
  GPIO_InitStruct.Pin = MotA_Brake_Pin;
 8004e88:	2380      	movs	r3, #128	; 0x80
 8004e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MotA_Brake_GPIO_Port, &GPIO_InitStruct);
 8004e98:	f107 030c 	add.w	r3, r7, #12
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4804      	ldr	r0, [pc, #16]	; (8004eb0 <MX_GPIO_Init+0xd8>)
 8004ea0:	f7fc fa28 	bl	80012f4 <HAL_GPIO_Init>

}
 8004ea4:	bf00      	nop
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	48000800 	.word	0x48000800

08004eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <motor_init>:
#include "motor.h"

void motor_init(motor_Context *motor){
 8004ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec4:	b093      	sub	sp, #76	; 0x4c
 8004ec6:	af10      	add	r7, sp, #64	; 0x40
 8004ec8:	6078      	str	r0, [r7, #4]
    setPWM(motor->timer, motor->channel, 255, 0); // reset PWM
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	687e      	ldr	r6, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	920e      	str	r2, [sp, #56]	; 0x38
 8004ed4:	22ff      	movs	r2, #255	; 0xff
 8004ed6:	920d      	str	r2, [sp, #52]	; 0x34
 8004ed8:	930c      	str	r3, [sp, #48]	; 0x30
 8004eda:	466d      	mov	r5, sp
 8004edc:	f106 0410 	add.w	r4, r6, #16
 8004ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ee8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004eec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004ef0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004ef4:	f000 f816 	bl	8004f24 <setPWM>
    HAL_GPIO_WritePin(motor->motDir_Port, motor->motDir_Pin, GPIO_PIN_RESET); //
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004f02:	2200      	movs	r2, #0
 8004f04:	4619      	mov	r1, r3
 8004f06:	f7fc fb9d 	bl	8001644 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->motBrake_Port, motor->motBrake_Pin, GPIO_PIN_RESET);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f14:	2200      	movs	r2, #0
 8004f16:	4619      	mov	r1, r3
 8004f18:	f7fc fb94 	bl	8001644 <HAL_GPIO_WritePin>
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f24 <setPWM>:

void motor_unbreake(motor_Context *motor){
    HAL_GPIO_WritePin(motor->motBrake_Port, motor->motBrake_Pin, GPIO_PIN_RESET);
}

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse) {
 8004f24:	b084      	sub	sp, #16
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b088      	sub	sp, #32
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8004f30:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  HAL_TIM_PWM_Stop(&timer, channel);    // stop generation of pwm
 8004f34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f36:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004f3a:	f7fd ff71 	bl	8002e20 <HAL_TIM_PWM_Stop>
	  TIM_OC_InitTypeDef sConfigOC;   timer.Init.Period = period;           // set the period duration
 8004f3e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_TIM_PWM_Init(&timer);  // reinititialise with new period value
 8004f44:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004f48:	f7fd fee6 	bl	8002d18 <HAL_TIM_PWM_Init>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f4c:	2360      	movs	r3, #96	; 0x60
 8004f4e:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = pulse;              // set the pulse duration
 8004f50:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8004f54:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]
	  HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8004f5e:	1d3b      	adds	r3, r7, #4
 8004f60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f62:	4619      	mov	r1, r3
 8004f64:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004f68:	f7fe f97a 	bl	8003260 <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_PWM_Start(&timer, channel);   // start pwm generation}
 8004f6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f6e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004f72:	f7fd fefd 	bl	8002d70 <HAL_TIM_PWM_Start>
}
 8004f76:	bf00      	nop
 8004f78:	3720      	adds	r7, #32
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f80:	b004      	add	sp, #16
 8004f82:	4770      	bx	lr

08004f84 <odometry_init>:
#include "odometry.h"

void odometry_init(odometry_Context *odometry){
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
    odometry->linearDisplacement =0.;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	61da      	str	r2, [r3, #28]
    odometry->angularDisplacement =0.;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	621a      	str	r2, [r3, #32]
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <odometry_update>:

void odometry_update(odometry_Context *odometry){
 8004fa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
    float distR =  odometry->wheelRadiusR * 2*PI/odometry->encoderRes * (float)(int16_t)*(odometry->rightTicks);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fb8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004fbc:	ee17 0a90 	vmov	r0, s15
 8004fc0:	f7fb fac2 	bl	8000548 <__aeabi_f2d>
 8004fc4:	a388      	add	r3, pc, #544	; (adr r3, 80051e8 <odometry_update+0x240>)
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	f7fb fb15 	bl	80005f8 <__aeabi_dmul>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	460c      	mov	r4, r1
 8004fd2:	4625      	mov	r5, r4
 8004fd4:	461c      	mov	r4, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fb fab4 	bl	8000548 <__aeabi_f2d>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	f7fb fc30 	bl	800084c <__aeabi_ddiv>
 8004fec:	4603      	mov	r3, r0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	4625      	mov	r5, r4
 8004ff2:	461c      	mov	r4, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ffc:	ee07 3a90 	vmov	s15, r3
 8005000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005004:	ee17 0a90 	vmov	r0, s15
 8005008:	f7fb fa9e 	bl	8000548 <__aeabi_f2d>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4620      	mov	r0, r4
 8005012:	4629      	mov	r1, r5
 8005014:	f7fb faf0 	bl	80005f8 <__aeabi_dmul>
 8005018:	4603      	mov	r3, r0
 800501a:	460c      	mov	r4, r1
 800501c:	4618      	mov	r0, r3
 800501e:	4621      	mov	r1, r4
 8005020:	f7fb fdc2 	bl	8000ba8 <__aeabi_d2f>
 8005024:	4603      	mov	r3, r0
 8005026:	60fb      	str	r3, [r7, #12]
    float distL =  odometry->wheelRadiusL * 2*PI/odometry->encoderRes * (float)(int16_t)*(odometry->leftTicks);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	edd3 7a02 	vldr	s15, [r3, #8]
 800502e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005032:	ee17 0a90 	vmov	r0, s15
 8005036:	f7fb fa87 	bl	8000548 <__aeabi_f2d>
 800503a:	a36b      	add	r3, pc, #428	; (adr r3, 80051e8 <odometry_update+0x240>)
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	f7fb fada 	bl	80005f8 <__aeabi_dmul>
 8005044:	4603      	mov	r3, r0
 8005046:	460c      	mov	r4, r1
 8005048:	4625      	mov	r5, r4
 800504a:	461c      	mov	r4, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f7fb fa79 	bl	8000548 <__aeabi_f2d>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4620      	mov	r0, r4
 800505c:	4629      	mov	r1, r5
 800505e:	f7fb fbf5 	bl	800084c <__aeabi_ddiv>
 8005062:	4603      	mov	r3, r0
 8005064:	460c      	mov	r4, r1
 8005066:	4625      	mov	r5, r4
 8005068:	461c      	mov	r4, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800507a:	ee17 0a90 	vmov	r0, s15
 800507e:	f7fb fa63 	bl	8000548 <__aeabi_f2d>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4620      	mov	r0, r4
 8005088:	4629      	mov	r1, r5
 800508a:	f7fb fab5 	bl	80005f8 <__aeabi_dmul>
 800508e:	4603      	mov	r3, r0
 8005090:	460c      	mov	r4, r1
 8005092:	4618      	mov	r0, r3
 8005094:	4621      	mov	r1, r4
 8005096:	f7fb fd87 	bl	8000ba8 <__aeabi_d2f>
 800509a:	4603      	mov	r3, r0
 800509c:	60bb      	str	r3, [r7, #8]
    *(odometry->rightTicks) = 0;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	2200      	movs	r2, #0
 80050a4:	801a      	strh	r2, [r3, #0]
	*(odometry->leftTicks) = 0;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	2200      	movs	r2, #0
 80050ac:	801a      	strh	r2, [r3, #0]

    odometry->linearDisplacement = (distR + distL)/2;
 80050ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80050b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80050b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80050be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	edc3 7a07 	vstr	s15, [r3, #28]
    odometry->angularDisplacement = (distR - distL)/odometry->distanceBetweenWheels;
 80050c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80050cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80050d0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	ed93 7a03 	vldr	s14, [r3, #12]
 80050da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	edc3 7a08 	vstr	s15, [r3, #32]

    odometry->position.x = odometry->position.x + odometry->linearDisplacement*cos(odometry->position.theta + odometry->angularDisplacement/2);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fb fa2d 	bl	8000548 <__aeabi_f2d>
 80050ee:	4604      	mov	r4, r0
 80050f0:	460d      	mov	r5, r1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fb fa26 	bl	8000548 <__aeabi_f2d>
 80050fc:	4680      	mov	r8, r0
 80050fe:	4689      	mov	r9, r1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	ed93 7a06 	vldr	s14, [r3, #24]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	edd3 6a08 	vldr	s13, [r3, #32]
 800510c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8005110:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005118:	ee17 0a90 	vmov	r0, s15
 800511c:	f7fb fa14 	bl	8000548 <__aeabi_f2d>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	ec43 2b10 	vmov	d0, r2, r3
 8005128:	f002 fb0a 	bl	8007740 <cos>
 800512c:	ec53 2b10 	vmov	r2, r3, d0
 8005130:	4640      	mov	r0, r8
 8005132:	4649      	mov	r1, r9
 8005134:	f7fb fa60 	bl	80005f8 <__aeabi_dmul>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4620      	mov	r0, r4
 800513e:	4629      	mov	r1, r5
 8005140:	f7fb f8a4 	bl	800028c <__adddf3>
 8005144:	4603      	mov	r3, r0
 8005146:	460c      	mov	r4, r1
 8005148:	4618      	mov	r0, r3
 800514a:	4621      	mov	r1, r4
 800514c:	f7fb fd2c 	bl	8000ba8 <__aeabi_d2f>
 8005150:	4602      	mov	r2, r0
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	611a      	str	r2, [r3, #16]
    odometry->position.y = odometry->position.y + odometry->linearDisplacement*sin(odometry->position.theta + odometry->angularDisplacement/2);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	4618      	mov	r0, r3
 800515c:	f7fb f9f4 	bl	8000548 <__aeabi_f2d>
 8005160:	4604      	mov	r4, r0
 8005162:	460d      	mov	r5, r1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	4618      	mov	r0, r3
 800516a:	f7fb f9ed 	bl	8000548 <__aeabi_f2d>
 800516e:	4680      	mov	r8, r0
 8005170:	4689      	mov	r9, r1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	ed93 7a06 	vldr	s14, [r3, #24]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	edd3 6a08 	vldr	s13, [r3, #32]
 800517e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8005182:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800518a:	ee17 0a90 	vmov	r0, s15
 800518e:	f7fb f9db 	bl	8000548 <__aeabi_f2d>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	ec43 2b10 	vmov	d0, r2, r3
 800519a:	f002 fb15 	bl	80077c8 <sin>
 800519e:	ec53 2b10 	vmov	r2, r3, d0
 80051a2:	4640      	mov	r0, r8
 80051a4:	4649      	mov	r1, r9
 80051a6:	f7fb fa27 	bl	80005f8 <__aeabi_dmul>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4620      	mov	r0, r4
 80051b0:	4629      	mov	r1, r5
 80051b2:	f7fb f86b 	bl	800028c <__adddf3>
 80051b6:	4603      	mov	r3, r0
 80051b8:	460c      	mov	r4, r1
 80051ba:	4618      	mov	r0, r3
 80051bc:	4621      	mov	r1, r4
 80051be:	f7fb fcf3 	bl	8000ba8 <__aeabi_d2f>
 80051c2:	4602      	mov	r2, r0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	615a      	str	r2, [r3, #20]
    odometry->position.theta = odometry->position.theta + odometry->angularDisplacement;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	ed93 7a06 	vldr	s14, [r3, #24]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	edd3 7a08 	vldr	s15, [r3, #32]
 80051d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80051de:	bf00      	nop
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80051e8:	fc8b007a 	.word	0xfc8b007a
 80051ec:	400921fa 	.word	0x400921fa

080051f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051f6:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <HAL_MspInit+0x44>)
 80051f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051fa:	4a0e      	ldr	r2, [pc, #56]	; (8005234 <HAL_MspInit+0x44>)
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	6613      	str	r3, [r2, #96]	; 0x60
 8005202:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <HAL_MspInit+0x44>)
 8005204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	607b      	str	r3, [r7, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800520e:	4b09      	ldr	r3, [pc, #36]	; (8005234 <HAL_MspInit+0x44>)
 8005210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005212:	4a08      	ldr	r2, [pc, #32]	; (8005234 <HAL_MspInit+0x44>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005218:	6593      	str	r3, [r2, #88]	; 0x58
 800521a:	4b06      	ldr	r3, [pc, #24]	; (8005234 <HAL_MspInit+0x44>)
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40021000 	.word	0x40021000

08005238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	; 0x28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005240:	f107 0314 	add.w	r3, r7, #20
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	605a      	str	r2, [r3, #4]
 800524a:	609a      	str	r2, [r3, #8]
 800524c:	60da      	str	r2, [r3, #12]
 800524e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a25      	ldr	r2, [pc, #148]	; (80052ec <HAL_SPI_MspInit+0xb4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d144      	bne.n	80052e4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800525a:	4b25      	ldr	r3, [pc, #148]	; (80052f0 <HAL_SPI_MspInit+0xb8>)
 800525c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525e:	4a24      	ldr	r2, [pc, #144]	; (80052f0 <HAL_SPI_MspInit+0xb8>)
 8005260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005264:	6593      	str	r3, [r2, #88]	; 0x58
 8005266:	4b22      	ldr	r3, [pc, #136]	; (80052f0 <HAL_SPI_MspInit+0xb8>)
 8005268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005272:	4b1f      	ldr	r3, [pc, #124]	; (80052f0 <HAL_SPI_MspInit+0xb8>)
 8005274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005276:	4a1e      	ldr	r2, [pc, #120]	; (80052f0 <HAL_SPI_MspInit+0xb8>)
 8005278:	f043 0304 	orr.w	r3, r3, #4
 800527c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800527e:	4b1c      	ldr	r3, [pc, #112]	; (80052f0 <HAL_SPI_MspInit+0xb8>)
 8005280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800528a:	4b19      	ldr	r3, [pc, #100]	; (80052f0 <HAL_SPI_MspInit+0xb8>)
 800528c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528e:	4a18      	ldr	r2, [pc, #96]	; (80052f0 <HAL_SPI_MspInit+0xb8>)
 8005290:	f043 0302 	orr.w	r3, r3, #2
 8005294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005296:	4b16      	ldr	r3, [pc, #88]	; (80052f0 <HAL_SPI_MspInit+0xb8>)
 8005298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80052a2:	230c      	movs	r3, #12
 80052a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a6:	2302      	movs	r3, #2
 80052a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ae:	2303      	movs	r3, #3
 80052b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052b2:	2305      	movs	r3, #5
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052b6:	f107 0314 	add.w	r3, r7, #20
 80052ba:	4619      	mov	r1, r3
 80052bc:	480d      	ldr	r0, [pc, #52]	; (80052f4 <HAL_SPI_MspInit+0xbc>)
 80052be:	f7fc f819 	bl	80012f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80052c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c8:	2302      	movs	r3, #2
 80052ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d0:	2303      	movs	r3, #3
 80052d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052d4:	2305      	movs	r3, #5
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052d8:	f107 0314 	add.w	r3, r7, #20
 80052dc:	4619      	mov	r1, r3
 80052de:	4806      	ldr	r0, [pc, #24]	; (80052f8 <HAL_SPI_MspInit+0xc0>)
 80052e0:	f7fc f808 	bl	80012f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80052e4:	bf00      	nop
 80052e6:	3728      	adds	r7, #40	; 0x28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40003800 	.word	0x40003800
 80052f0:	40021000 	.word	0x40021000
 80052f4:	48000800 	.word	0x48000800
 80052f8:	48000400 	.word	0x48000400

080052fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08c      	sub	sp, #48	; 0x30
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005304:	f107 031c 	add.w	r3, r7, #28
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	609a      	str	r2, [r3, #8]
 8005310:	60da      	str	r2, [r3, #12]
 8005312:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a33      	ldr	r2, [pc, #204]	; (80053e8 <HAL_TIM_Encoder_MspInit+0xec>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d12a      	bne.n	8005374 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800531e:	4b33      	ldr	r3, [pc, #204]	; (80053ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8005320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005322:	4a32      	ldr	r2, [pc, #200]	; (80053ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8005324:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005328:	6613      	str	r3, [r2, #96]	; 0x60
 800532a:	4b30      	ldr	r3, [pc, #192]	; (80053ec <HAL_TIM_Encoder_MspInit+0xf0>)
 800532c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800532e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005332:	61bb      	str	r3, [r7, #24]
 8005334:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005336:	4b2d      	ldr	r3, [pc, #180]	; (80053ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8005338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533a:	4a2c      	ldr	r2, [pc, #176]	; (80053ec <HAL_TIM_Encoder_MspInit+0xf0>)
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005342:	4b2a      	ldr	r3, [pc, #168]	; (80053ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8005344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800534e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005354:	2302      	movs	r3, #2
 8005356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005358:	2301      	movs	r3, #1
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800535c:	2300      	movs	r3, #0
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005360:	2301      	movs	r3, #1
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005364:	f107 031c 	add.w	r3, r7, #28
 8005368:	4619      	mov	r1, r3
 800536a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800536e:	f7fb ffc1 	bl	80012f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005372:	e034      	b.n	80053de <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a1d      	ldr	r2, [pc, #116]	; (80053f0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d12f      	bne.n	80053de <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800537e:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8005380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005382:	4a1a      	ldr	r2, [pc, #104]	; (80053ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8005384:	f043 0304 	orr.w	r3, r3, #4
 8005388:	6593      	str	r3, [r2, #88]	; 0x58
 800538a:	4b18      	ldr	r3, [pc, #96]	; (80053ec <HAL_TIM_Encoder_MspInit+0xf0>)
 800538c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005396:	4b15      	ldr	r3, [pc, #84]	; (80053ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8005398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539a:	4a14      	ldr	r2, [pc, #80]	; (80053ec <HAL_TIM_Encoder_MspInit+0xf0>)
 800539c:	f043 0302 	orr.w	r3, r3, #2
 80053a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <HAL_TIM_Encoder_MspInit+0xf0>)
 80053a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053ae:	23c0      	movs	r3, #192	; 0xc0
 80053b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b2:	2302      	movs	r3, #2
 80053b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053b6:	2301      	movs	r3, #1
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ba:	2300      	movs	r3, #0
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80053be:	2302      	movs	r3, #2
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053c2:	f107 031c 	add.w	r3, r7, #28
 80053c6:	4619      	mov	r1, r3
 80053c8:	480a      	ldr	r0, [pc, #40]	; (80053f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80053ca:	f7fb ff93 	bl	80012f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80053ce:	2200      	movs	r2, #0
 80053d0:	2100      	movs	r1, #0
 80053d2:	201e      	movs	r0, #30
 80053d4:	f7fb ff57 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80053d8:	201e      	movs	r0, #30
 80053da:	f7fb ff70 	bl	80012be <HAL_NVIC_EnableIRQ>
}
 80053de:	bf00      	nop
 80053e0:	3730      	adds	r7, #48	; 0x30
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40021000 	.word	0x40021000
 80053f0:	40000800 	.word	0x40000800
 80053f4:	48000400 	.word	0x48000400

080053f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005408:	d10c      	bne.n	8005424 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800540a:	4b12      	ldr	r3, [pc, #72]	; (8005454 <HAL_TIM_PWM_MspInit+0x5c>)
 800540c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540e:	4a11      	ldr	r2, [pc, #68]	; (8005454 <HAL_TIM_PWM_MspInit+0x5c>)
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	6593      	str	r3, [r2, #88]	; 0x58
 8005416:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <HAL_TIM_PWM_MspInit+0x5c>)
 8005418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005422:	e010      	b.n	8005446 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a0b      	ldr	r2, [pc, #44]	; (8005458 <HAL_TIM_PWM_MspInit+0x60>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d10b      	bne.n	8005446 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800542e:	4b09      	ldr	r3, [pc, #36]	; (8005454 <HAL_TIM_PWM_MspInit+0x5c>)
 8005430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005432:	4a08      	ldr	r2, [pc, #32]	; (8005454 <HAL_TIM_PWM_MspInit+0x5c>)
 8005434:	f043 0302 	orr.w	r3, r3, #2
 8005438:	6593      	str	r3, [r2, #88]	; 0x58
 800543a:	4b06      	ldr	r3, [pc, #24]	; (8005454 <HAL_TIM_PWM_MspInit+0x5c>)
 800543c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	68bb      	ldr	r3, [r7, #8]
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40021000 	.word	0x40021000
 8005458:	40000400 	.word	0x40000400

0800545c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	; 0x28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005464:	f107 0314 	add.w	r3, r7, #20
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	605a      	str	r2, [r3, #4]
 800546e:	609a      	str	r2, [r3, #8]
 8005470:	60da      	str	r2, [r3, #12]
 8005472:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547c:	d11c      	bne.n	80054b8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800547e:	4b21      	ldr	r3, [pc, #132]	; (8005504 <HAL_TIM_MspPostInit+0xa8>)
 8005480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005482:	4a20      	ldr	r2, [pc, #128]	; (8005504 <HAL_TIM_MspPostInit+0xa8>)
 8005484:	f043 0302 	orr.w	r3, r3, #2
 8005488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800548a:	4b1e      	ldr	r3, [pc, #120]	; (8005504 <HAL_TIM_MspPostInit+0xa8>)
 800548c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	613b      	str	r3, [r7, #16]
 8005494:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = MotA_PWM_Pin;
 8005496:	2308      	movs	r3, #8
 8005498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800549a:	2302      	movs	r3, #2
 800549c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054a2:	2300      	movs	r3, #0
 80054a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80054a6:	2301      	movs	r3, #1
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MotA_PWM_GPIO_Port, &GPIO_InitStruct);
 80054aa:	f107 0314 	add.w	r3, r7, #20
 80054ae:	4619      	mov	r1, r3
 80054b0:	4815      	ldr	r0, [pc, #84]	; (8005508 <HAL_TIM_MspPostInit+0xac>)
 80054b2:	f7fb ff1f 	bl	80012f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80054b6:	e021      	b.n	80054fc <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a13      	ldr	r2, [pc, #76]	; (800550c <HAL_TIM_MspPostInit+0xb0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d11c      	bne.n	80054fc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054c2:	4b10      	ldr	r3, [pc, #64]	; (8005504 <HAL_TIM_MspPostInit+0xa8>)
 80054c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c6:	4a0f      	ldr	r2, [pc, #60]	; (8005504 <HAL_TIM_MspPostInit+0xa8>)
 80054c8:	f043 0301 	orr.w	r3, r3, #1
 80054cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <HAL_TIM_MspPostInit+0xa8>)
 80054d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054de:	2302      	movs	r3, #2
 80054e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054e6:	2300      	movs	r3, #0
 80054e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80054ea:	2302      	movs	r3, #2
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ee:	f107 0314 	add.w	r3, r7, #20
 80054f2:	4619      	mov	r1, r3
 80054f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054f8:	f7fb fefc 	bl	80012f4 <HAL_GPIO_Init>
}
 80054fc:	bf00      	nop
 80054fe:	3728      	adds	r7, #40	; 0x28
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40021000 	.word	0x40021000
 8005508:	48000400 	.word	0x48000400
 800550c:	40000400 	.word	0x40000400

08005510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	; 0x28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005518:	f107 0314 	add.w	r3, r7, #20
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	605a      	str	r2, [r3, #4]
 8005522:	609a      	str	r2, [r3, #8]
 8005524:	60da      	str	r2, [r3, #12]
 8005526:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a17      	ldr	r2, [pc, #92]	; (800558c <HAL_UART_MspInit+0x7c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d128      	bne.n	8005584 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005532:	4b17      	ldr	r3, [pc, #92]	; (8005590 <HAL_UART_MspInit+0x80>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	4a16      	ldr	r2, [pc, #88]	; (8005590 <HAL_UART_MspInit+0x80>)
 8005538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800553c:	6593      	str	r3, [r2, #88]	; 0x58
 800553e:	4b14      	ldr	r3, [pc, #80]	; (8005590 <HAL_UART_MspInit+0x80>)
 8005540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800554a:	4b11      	ldr	r3, [pc, #68]	; (8005590 <HAL_UART_MspInit+0x80>)
 800554c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554e:	4a10      	ldr	r2, [pc, #64]	; (8005590 <HAL_UART_MspInit+0x80>)
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005556:	4b0e      	ldr	r3, [pc, #56]	; (8005590 <HAL_UART_MspInit+0x80>)
 8005558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005562:	230c      	movs	r3, #12
 8005564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005566:	2302      	movs	r3, #2
 8005568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800556e:	2303      	movs	r3, #3
 8005570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005572:	2307      	movs	r3, #7
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005576:	f107 0314 	add.w	r3, r7, #20
 800557a:	4619      	mov	r1, r3
 800557c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005580:	f7fb feb8 	bl	80012f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005584:	bf00      	nop
 8005586:	3728      	adds	r7, #40	; 0x28
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40004400 	.word	0x40004400
 8005590:	40021000 	.word	0x40021000

08005594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005598:	bf00      	nop
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055a2:	b480      	push	{r7}
 80055a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055a6:	e7fe      	b.n	80055a6 <HardFault_Handler+0x4>

080055a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055ac:	e7fe      	b.n	80055ac <MemManage_Handler+0x4>

080055ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055ae:	b480      	push	{r7}
 80055b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055b2:	e7fe      	b.n	80055b2 <BusFault_Handler+0x4>

080055b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055b8:	e7fe      	b.n	80055b8 <UsageFault_Handler+0x4>

080055ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055ba:	b480      	push	{r7}
 80055bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055be:	bf00      	nop
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055cc:	bf00      	nop
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055d6:	b480      	push	{r7}
 80055d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055da:	bf00      	nop
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055e8:	f7fb fd32 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055ec:	bf00      	nop
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80055f4:	4802      	ldr	r0, [pc, #8]	; (8005600 <TIM4_IRQHandler+0x10>)
 80055f6:	f7fd fd13 	bl	8003020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80055fa:	bf00      	nop
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	2000026c 	.word	0x2000026c

08005604 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005608:	4b17      	ldr	r3, [pc, #92]	; (8005668 <SystemInit+0x64>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	4a16      	ldr	r2, [pc, #88]	; (8005668 <SystemInit+0x64>)
 8005610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005618:	4b14      	ldr	r3, [pc, #80]	; (800566c <SystemInit+0x68>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a13      	ldr	r2, [pc, #76]	; (800566c <SystemInit+0x68>)
 800561e:	f043 0301 	orr.w	r3, r3, #1
 8005622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005624:	4b11      	ldr	r3, [pc, #68]	; (800566c <SystemInit+0x68>)
 8005626:	2200      	movs	r2, #0
 8005628:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800562a:	4b10      	ldr	r3, [pc, #64]	; (800566c <SystemInit+0x68>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a0f      	ldr	r2, [pc, #60]	; (800566c <SystemInit+0x68>)
 8005630:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005634:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005638:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800563a:	4b0c      	ldr	r3, [pc, #48]	; (800566c <SystemInit+0x68>)
 800563c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005640:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005642:	4b0a      	ldr	r3, [pc, #40]	; (800566c <SystemInit+0x68>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a09      	ldr	r2, [pc, #36]	; (800566c <SystemInit+0x68>)
 8005648:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800564c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800564e:	4b07      	ldr	r3, [pc, #28]	; (800566c <SystemInit+0x68>)
 8005650:	2200      	movs	r2, #0
 8005652:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005654:	4b04      	ldr	r3, [pc, #16]	; (8005668 <SystemInit+0x64>)
 8005656:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800565a:	609a      	str	r2, [r3, #8]
#endif
}
 800565c:	bf00      	nop
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	e000ed00 	.word	0xe000ed00
 800566c:	40021000 	.word	0x40021000

08005670 <__libc_init_array>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	4e0d      	ldr	r6, [pc, #52]	; (80056a8 <__libc_init_array+0x38>)
 8005674:	4c0d      	ldr	r4, [pc, #52]	; (80056ac <__libc_init_array+0x3c>)
 8005676:	1ba4      	subs	r4, r4, r6
 8005678:	10a4      	asrs	r4, r4, #2
 800567a:	2500      	movs	r5, #0
 800567c:	42a5      	cmp	r5, r4
 800567e:	d109      	bne.n	8005694 <__libc_init_array+0x24>
 8005680:	4e0b      	ldr	r6, [pc, #44]	; (80056b0 <__libc_init_array+0x40>)
 8005682:	4c0c      	ldr	r4, [pc, #48]	; (80056b4 <__libc_init_array+0x44>)
 8005684:	f003 f8c0 	bl	8008808 <_init>
 8005688:	1ba4      	subs	r4, r4, r6
 800568a:	10a4      	asrs	r4, r4, #2
 800568c:	2500      	movs	r5, #0
 800568e:	42a5      	cmp	r5, r4
 8005690:	d105      	bne.n	800569e <__libc_init_array+0x2e>
 8005692:	bd70      	pop	{r4, r5, r6, pc}
 8005694:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005698:	4798      	blx	r3
 800569a:	3501      	adds	r5, #1
 800569c:	e7ee      	b.n	800567c <__libc_init_array+0xc>
 800569e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056a2:	4798      	blx	r3
 80056a4:	3501      	adds	r5, #1
 80056a6:	e7f2      	b.n	800568e <__libc_init_array+0x1e>
 80056a8:	08008cc0 	.word	0x08008cc0
 80056ac:	08008cc0 	.word	0x08008cc0
 80056b0:	08008cc0 	.word	0x08008cc0
 80056b4:	08008cc4 	.word	0x08008cc4

080056b8 <memset>:
 80056b8:	4402      	add	r2, r0
 80056ba:	4603      	mov	r3, r0
 80056bc:	4293      	cmp	r3, r2
 80056be:	d100      	bne.n	80056c2 <memset+0xa>
 80056c0:	4770      	bx	lr
 80056c2:	f803 1b01 	strb.w	r1, [r3], #1
 80056c6:	e7f9      	b.n	80056bc <memset+0x4>

080056c8 <__cvt>:
 80056c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056cc:	ec55 4b10 	vmov	r4, r5, d0
 80056d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80056d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	460e      	mov	r6, r1
 80056da:	4691      	mov	r9, r2
 80056dc:	4619      	mov	r1, r3
 80056de:	bfb8      	it	lt
 80056e0:	4622      	movlt	r2, r4
 80056e2:	462b      	mov	r3, r5
 80056e4:	f027 0720 	bic.w	r7, r7, #32
 80056e8:	bfbb      	ittet	lt
 80056ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056ee:	461d      	movlt	r5, r3
 80056f0:	2300      	movge	r3, #0
 80056f2:	232d      	movlt	r3, #45	; 0x2d
 80056f4:	bfb8      	it	lt
 80056f6:	4614      	movlt	r4, r2
 80056f8:	2f46      	cmp	r7, #70	; 0x46
 80056fa:	700b      	strb	r3, [r1, #0]
 80056fc:	d004      	beq.n	8005708 <__cvt+0x40>
 80056fe:	2f45      	cmp	r7, #69	; 0x45
 8005700:	d100      	bne.n	8005704 <__cvt+0x3c>
 8005702:	3601      	adds	r6, #1
 8005704:	2102      	movs	r1, #2
 8005706:	e000      	b.n	800570a <__cvt+0x42>
 8005708:	2103      	movs	r1, #3
 800570a:	ab03      	add	r3, sp, #12
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	ab02      	add	r3, sp, #8
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	4632      	mov	r2, r6
 8005714:	4653      	mov	r3, sl
 8005716:	ec45 4b10 	vmov	d0, r4, r5
 800571a:	f000 fcdd 	bl	80060d8 <_dtoa_r>
 800571e:	2f47      	cmp	r7, #71	; 0x47
 8005720:	4680      	mov	r8, r0
 8005722:	d102      	bne.n	800572a <__cvt+0x62>
 8005724:	f019 0f01 	tst.w	r9, #1
 8005728:	d026      	beq.n	8005778 <__cvt+0xb0>
 800572a:	2f46      	cmp	r7, #70	; 0x46
 800572c:	eb08 0906 	add.w	r9, r8, r6
 8005730:	d111      	bne.n	8005756 <__cvt+0x8e>
 8005732:	f898 3000 	ldrb.w	r3, [r8]
 8005736:	2b30      	cmp	r3, #48	; 0x30
 8005738:	d10a      	bne.n	8005750 <__cvt+0x88>
 800573a:	2200      	movs	r2, #0
 800573c:	2300      	movs	r3, #0
 800573e:	4620      	mov	r0, r4
 8005740:	4629      	mov	r1, r5
 8005742:	f7fb f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005746:	b918      	cbnz	r0, 8005750 <__cvt+0x88>
 8005748:	f1c6 0601 	rsb	r6, r6, #1
 800574c:	f8ca 6000 	str.w	r6, [sl]
 8005750:	f8da 3000 	ldr.w	r3, [sl]
 8005754:	4499      	add	r9, r3
 8005756:	2200      	movs	r2, #0
 8005758:	2300      	movs	r3, #0
 800575a:	4620      	mov	r0, r4
 800575c:	4629      	mov	r1, r5
 800575e:	f7fb f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005762:	b938      	cbnz	r0, 8005774 <__cvt+0xac>
 8005764:	2230      	movs	r2, #48	; 0x30
 8005766:	9b03      	ldr	r3, [sp, #12]
 8005768:	454b      	cmp	r3, r9
 800576a:	d205      	bcs.n	8005778 <__cvt+0xb0>
 800576c:	1c59      	adds	r1, r3, #1
 800576e:	9103      	str	r1, [sp, #12]
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	e7f8      	b.n	8005766 <__cvt+0x9e>
 8005774:	f8cd 900c 	str.w	r9, [sp, #12]
 8005778:	9b03      	ldr	r3, [sp, #12]
 800577a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800577c:	eba3 0308 	sub.w	r3, r3, r8
 8005780:	4640      	mov	r0, r8
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	b004      	add	sp, #16
 8005786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800578a <__exponent>:
 800578a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800578c:	2900      	cmp	r1, #0
 800578e:	4604      	mov	r4, r0
 8005790:	bfba      	itte	lt
 8005792:	4249      	neglt	r1, r1
 8005794:	232d      	movlt	r3, #45	; 0x2d
 8005796:	232b      	movge	r3, #43	; 0x2b
 8005798:	2909      	cmp	r1, #9
 800579a:	f804 2b02 	strb.w	r2, [r4], #2
 800579e:	7043      	strb	r3, [r0, #1]
 80057a0:	dd20      	ble.n	80057e4 <__exponent+0x5a>
 80057a2:	f10d 0307 	add.w	r3, sp, #7
 80057a6:	461f      	mov	r7, r3
 80057a8:	260a      	movs	r6, #10
 80057aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80057ae:	fb06 1115 	mls	r1, r6, r5, r1
 80057b2:	3130      	adds	r1, #48	; 0x30
 80057b4:	2d09      	cmp	r5, #9
 80057b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057ba:	f103 32ff 	add.w	r2, r3, #4294967295
 80057be:	4629      	mov	r1, r5
 80057c0:	dc09      	bgt.n	80057d6 <__exponent+0x4c>
 80057c2:	3130      	adds	r1, #48	; 0x30
 80057c4:	3b02      	subs	r3, #2
 80057c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80057ca:	42bb      	cmp	r3, r7
 80057cc:	4622      	mov	r2, r4
 80057ce:	d304      	bcc.n	80057da <__exponent+0x50>
 80057d0:	1a10      	subs	r0, r2, r0
 80057d2:	b003      	add	sp, #12
 80057d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d6:	4613      	mov	r3, r2
 80057d8:	e7e7      	b.n	80057aa <__exponent+0x20>
 80057da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057de:	f804 2b01 	strb.w	r2, [r4], #1
 80057e2:	e7f2      	b.n	80057ca <__exponent+0x40>
 80057e4:	2330      	movs	r3, #48	; 0x30
 80057e6:	4419      	add	r1, r3
 80057e8:	7083      	strb	r3, [r0, #2]
 80057ea:	1d02      	adds	r2, r0, #4
 80057ec:	70c1      	strb	r1, [r0, #3]
 80057ee:	e7ef      	b.n	80057d0 <__exponent+0x46>

080057f0 <_printf_float>:
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	b08d      	sub	sp, #52	; 0x34
 80057f6:	460c      	mov	r4, r1
 80057f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80057fc:	4616      	mov	r6, r2
 80057fe:	461f      	mov	r7, r3
 8005800:	4605      	mov	r5, r0
 8005802:	f001 fa21 	bl	8006c48 <_localeconv_r>
 8005806:	6803      	ldr	r3, [r0, #0]
 8005808:	9304      	str	r3, [sp, #16]
 800580a:	4618      	mov	r0, r3
 800580c:	f7fa fce0 	bl	80001d0 <strlen>
 8005810:	2300      	movs	r3, #0
 8005812:	930a      	str	r3, [sp, #40]	; 0x28
 8005814:	f8d8 3000 	ldr.w	r3, [r8]
 8005818:	9005      	str	r0, [sp, #20]
 800581a:	3307      	adds	r3, #7
 800581c:	f023 0307 	bic.w	r3, r3, #7
 8005820:	f103 0208 	add.w	r2, r3, #8
 8005824:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005828:	f8d4 b000 	ldr.w	fp, [r4]
 800582c:	f8c8 2000 	str.w	r2, [r8]
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005838:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800583c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005840:	9307      	str	r3, [sp, #28]
 8005842:	f8cd 8018 	str.w	r8, [sp, #24]
 8005846:	f04f 32ff 	mov.w	r2, #4294967295
 800584a:	4ba7      	ldr	r3, [pc, #668]	; (8005ae8 <_printf_float+0x2f8>)
 800584c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005850:	f7fb f96c 	bl	8000b2c <__aeabi_dcmpun>
 8005854:	bb70      	cbnz	r0, 80058b4 <_printf_float+0xc4>
 8005856:	f04f 32ff 	mov.w	r2, #4294967295
 800585a:	4ba3      	ldr	r3, [pc, #652]	; (8005ae8 <_printf_float+0x2f8>)
 800585c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005860:	f7fb f946 	bl	8000af0 <__aeabi_dcmple>
 8005864:	bb30      	cbnz	r0, 80058b4 <_printf_float+0xc4>
 8005866:	2200      	movs	r2, #0
 8005868:	2300      	movs	r3, #0
 800586a:	4640      	mov	r0, r8
 800586c:	4649      	mov	r1, r9
 800586e:	f7fb f935 	bl	8000adc <__aeabi_dcmplt>
 8005872:	b110      	cbz	r0, 800587a <_printf_float+0x8a>
 8005874:	232d      	movs	r3, #45	; 0x2d
 8005876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800587a:	4a9c      	ldr	r2, [pc, #624]	; (8005aec <_printf_float+0x2fc>)
 800587c:	4b9c      	ldr	r3, [pc, #624]	; (8005af0 <_printf_float+0x300>)
 800587e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005882:	bf8c      	ite	hi
 8005884:	4690      	movhi	r8, r2
 8005886:	4698      	movls	r8, r3
 8005888:	2303      	movs	r3, #3
 800588a:	f02b 0204 	bic.w	r2, fp, #4
 800588e:	6123      	str	r3, [r4, #16]
 8005890:	6022      	str	r2, [r4, #0]
 8005892:	f04f 0900 	mov.w	r9, #0
 8005896:	9700      	str	r7, [sp, #0]
 8005898:	4633      	mov	r3, r6
 800589a:	aa0b      	add	r2, sp, #44	; 0x2c
 800589c:	4621      	mov	r1, r4
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 f9e6 	bl	8005c70 <_printf_common>
 80058a4:	3001      	adds	r0, #1
 80058a6:	f040 808d 	bne.w	80059c4 <_printf_float+0x1d4>
 80058aa:	f04f 30ff 	mov.w	r0, #4294967295
 80058ae:	b00d      	add	sp, #52	; 0x34
 80058b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b4:	4642      	mov	r2, r8
 80058b6:	464b      	mov	r3, r9
 80058b8:	4640      	mov	r0, r8
 80058ba:	4649      	mov	r1, r9
 80058bc:	f7fb f936 	bl	8000b2c <__aeabi_dcmpun>
 80058c0:	b110      	cbz	r0, 80058c8 <_printf_float+0xd8>
 80058c2:	4a8c      	ldr	r2, [pc, #560]	; (8005af4 <_printf_float+0x304>)
 80058c4:	4b8c      	ldr	r3, [pc, #560]	; (8005af8 <_printf_float+0x308>)
 80058c6:	e7da      	b.n	800587e <_printf_float+0x8e>
 80058c8:	6861      	ldr	r1, [r4, #4]
 80058ca:	1c4b      	adds	r3, r1, #1
 80058cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80058d0:	a80a      	add	r0, sp, #40	; 0x28
 80058d2:	d13e      	bne.n	8005952 <_printf_float+0x162>
 80058d4:	2306      	movs	r3, #6
 80058d6:	6063      	str	r3, [r4, #4]
 80058d8:	2300      	movs	r3, #0
 80058da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80058de:	ab09      	add	r3, sp, #36	; 0x24
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	ec49 8b10 	vmov	d0, r8, r9
 80058e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058ea:	6022      	str	r2, [r4, #0]
 80058ec:	f8cd a004 	str.w	sl, [sp, #4]
 80058f0:	6861      	ldr	r1, [r4, #4]
 80058f2:	4628      	mov	r0, r5
 80058f4:	f7ff fee8 	bl	80056c8 <__cvt>
 80058f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80058fc:	2b47      	cmp	r3, #71	; 0x47
 80058fe:	4680      	mov	r8, r0
 8005900:	d109      	bne.n	8005916 <_printf_float+0x126>
 8005902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005904:	1cd8      	adds	r0, r3, #3
 8005906:	db02      	blt.n	800590e <_printf_float+0x11e>
 8005908:	6862      	ldr	r2, [r4, #4]
 800590a:	4293      	cmp	r3, r2
 800590c:	dd47      	ble.n	800599e <_printf_float+0x1ae>
 800590e:	f1aa 0a02 	sub.w	sl, sl, #2
 8005912:	fa5f fa8a 	uxtb.w	sl, sl
 8005916:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800591a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800591c:	d824      	bhi.n	8005968 <_printf_float+0x178>
 800591e:	3901      	subs	r1, #1
 8005920:	4652      	mov	r2, sl
 8005922:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005926:	9109      	str	r1, [sp, #36]	; 0x24
 8005928:	f7ff ff2f 	bl	800578a <__exponent>
 800592c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800592e:	1813      	adds	r3, r2, r0
 8005930:	2a01      	cmp	r2, #1
 8005932:	4681      	mov	r9, r0
 8005934:	6123      	str	r3, [r4, #16]
 8005936:	dc02      	bgt.n	800593e <_printf_float+0x14e>
 8005938:	6822      	ldr	r2, [r4, #0]
 800593a:	07d1      	lsls	r1, r2, #31
 800593c:	d501      	bpl.n	8005942 <_printf_float+0x152>
 800593e:	3301      	adds	r3, #1
 8005940:	6123      	str	r3, [r4, #16]
 8005942:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0a5      	beq.n	8005896 <_printf_float+0xa6>
 800594a:	232d      	movs	r3, #45	; 0x2d
 800594c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005950:	e7a1      	b.n	8005896 <_printf_float+0xa6>
 8005952:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005956:	f000 8177 	beq.w	8005c48 <_printf_float+0x458>
 800595a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800595e:	d1bb      	bne.n	80058d8 <_printf_float+0xe8>
 8005960:	2900      	cmp	r1, #0
 8005962:	d1b9      	bne.n	80058d8 <_printf_float+0xe8>
 8005964:	2301      	movs	r3, #1
 8005966:	e7b6      	b.n	80058d6 <_printf_float+0xe6>
 8005968:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800596c:	d119      	bne.n	80059a2 <_printf_float+0x1b2>
 800596e:	2900      	cmp	r1, #0
 8005970:	6863      	ldr	r3, [r4, #4]
 8005972:	dd0c      	ble.n	800598e <_printf_float+0x19e>
 8005974:	6121      	str	r1, [r4, #16]
 8005976:	b913      	cbnz	r3, 800597e <_printf_float+0x18e>
 8005978:	6822      	ldr	r2, [r4, #0]
 800597a:	07d2      	lsls	r2, r2, #31
 800597c:	d502      	bpl.n	8005984 <_printf_float+0x194>
 800597e:	3301      	adds	r3, #1
 8005980:	440b      	add	r3, r1
 8005982:	6123      	str	r3, [r4, #16]
 8005984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005986:	65a3      	str	r3, [r4, #88]	; 0x58
 8005988:	f04f 0900 	mov.w	r9, #0
 800598c:	e7d9      	b.n	8005942 <_printf_float+0x152>
 800598e:	b913      	cbnz	r3, 8005996 <_printf_float+0x1a6>
 8005990:	6822      	ldr	r2, [r4, #0]
 8005992:	07d0      	lsls	r0, r2, #31
 8005994:	d501      	bpl.n	800599a <_printf_float+0x1aa>
 8005996:	3302      	adds	r3, #2
 8005998:	e7f3      	b.n	8005982 <_printf_float+0x192>
 800599a:	2301      	movs	r3, #1
 800599c:	e7f1      	b.n	8005982 <_printf_float+0x192>
 800599e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80059a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80059a6:	4293      	cmp	r3, r2
 80059a8:	db05      	blt.n	80059b6 <_printf_float+0x1c6>
 80059aa:	6822      	ldr	r2, [r4, #0]
 80059ac:	6123      	str	r3, [r4, #16]
 80059ae:	07d1      	lsls	r1, r2, #31
 80059b0:	d5e8      	bpl.n	8005984 <_printf_float+0x194>
 80059b2:	3301      	adds	r3, #1
 80059b4:	e7e5      	b.n	8005982 <_printf_float+0x192>
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	bfd4      	ite	le
 80059ba:	f1c3 0302 	rsble	r3, r3, #2
 80059be:	2301      	movgt	r3, #1
 80059c0:	4413      	add	r3, r2
 80059c2:	e7de      	b.n	8005982 <_printf_float+0x192>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	055a      	lsls	r2, r3, #21
 80059c8:	d407      	bmi.n	80059da <_printf_float+0x1ea>
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	4642      	mov	r2, r8
 80059ce:	4631      	mov	r1, r6
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b8      	blx	r7
 80059d4:	3001      	adds	r0, #1
 80059d6:	d12b      	bne.n	8005a30 <_printf_float+0x240>
 80059d8:	e767      	b.n	80058aa <_printf_float+0xba>
 80059da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80059de:	f240 80dc 	bls.w	8005b9a <_printf_float+0x3aa>
 80059e2:	2200      	movs	r2, #0
 80059e4:	2300      	movs	r3, #0
 80059e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059ea:	f7fb f86d 	bl	8000ac8 <__aeabi_dcmpeq>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d033      	beq.n	8005a5a <_printf_float+0x26a>
 80059f2:	2301      	movs	r3, #1
 80059f4:	4a41      	ldr	r2, [pc, #260]	; (8005afc <_printf_float+0x30c>)
 80059f6:	4631      	mov	r1, r6
 80059f8:	4628      	mov	r0, r5
 80059fa:	47b8      	blx	r7
 80059fc:	3001      	adds	r0, #1
 80059fe:	f43f af54 	beq.w	80058aa <_printf_float+0xba>
 8005a02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a06:	429a      	cmp	r2, r3
 8005a08:	db02      	blt.n	8005a10 <_printf_float+0x220>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	07d8      	lsls	r0, r3, #31
 8005a0e:	d50f      	bpl.n	8005a30 <_printf_float+0x240>
 8005a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a14:	4631      	mov	r1, r6
 8005a16:	4628      	mov	r0, r5
 8005a18:	47b8      	blx	r7
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	f43f af45 	beq.w	80058aa <_printf_float+0xba>
 8005a20:	f04f 0800 	mov.w	r8, #0
 8005a24:	f104 091a 	add.w	r9, r4, #26
 8005a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	4543      	cmp	r3, r8
 8005a2e:	dc09      	bgt.n	8005a44 <_printf_float+0x254>
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	079b      	lsls	r3, r3, #30
 8005a34:	f100 8103 	bmi.w	8005c3e <_printf_float+0x44e>
 8005a38:	68e0      	ldr	r0, [r4, #12]
 8005a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a3c:	4298      	cmp	r0, r3
 8005a3e:	bfb8      	it	lt
 8005a40:	4618      	movlt	r0, r3
 8005a42:	e734      	b.n	80058ae <_printf_float+0xbe>
 8005a44:	2301      	movs	r3, #1
 8005a46:	464a      	mov	r2, r9
 8005a48:	4631      	mov	r1, r6
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f43f af2b 	beq.w	80058aa <_printf_float+0xba>
 8005a54:	f108 0801 	add.w	r8, r8, #1
 8005a58:	e7e6      	b.n	8005a28 <_printf_float+0x238>
 8005a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dc2b      	bgt.n	8005ab8 <_printf_float+0x2c8>
 8005a60:	2301      	movs	r3, #1
 8005a62:	4a26      	ldr	r2, [pc, #152]	; (8005afc <_printf_float+0x30c>)
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	47b8      	blx	r7
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f43f af1d 	beq.w	80058aa <_printf_float+0xba>
 8005a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a72:	b923      	cbnz	r3, 8005a7e <_printf_float+0x28e>
 8005a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a76:	b913      	cbnz	r3, 8005a7e <_printf_float+0x28e>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	07d9      	lsls	r1, r3, #31
 8005a7c:	d5d8      	bpl.n	8005a30 <_printf_float+0x240>
 8005a7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a82:	4631      	mov	r1, r6
 8005a84:	4628      	mov	r0, r5
 8005a86:	47b8      	blx	r7
 8005a88:	3001      	adds	r0, #1
 8005a8a:	f43f af0e 	beq.w	80058aa <_printf_float+0xba>
 8005a8e:	f04f 0900 	mov.w	r9, #0
 8005a92:	f104 0a1a 	add.w	sl, r4, #26
 8005a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a98:	425b      	negs	r3, r3
 8005a9a:	454b      	cmp	r3, r9
 8005a9c:	dc01      	bgt.n	8005aa2 <_printf_float+0x2b2>
 8005a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aa0:	e794      	b.n	80059cc <_printf_float+0x1dc>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	4652      	mov	r2, sl
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	47b8      	blx	r7
 8005aac:	3001      	adds	r0, #1
 8005aae:	f43f aefc 	beq.w	80058aa <_printf_float+0xba>
 8005ab2:	f109 0901 	add.w	r9, r9, #1
 8005ab6:	e7ee      	b.n	8005a96 <_printf_float+0x2a6>
 8005ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005abc:	429a      	cmp	r2, r3
 8005abe:	bfa8      	it	ge
 8005ac0:	461a      	movge	r2, r3
 8005ac2:	2a00      	cmp	r2, #0
 8005ac4:	4691      	mov	r9, r2
 8005ac6:	dd07      	ble.n	8005ad8 <_printf_float+0x2e8>
 8005ac8:	4613      	mov	r3, r2
 8005aca:	4631      	mov	r1, r6
 8005acc:	4642      	mov	r2, r8
 8005ace:	4628      	mov	r0, r5
 8005ad0:	47b8      	blx	r7
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	f43f aee9 	beq.w	80058aa <_printf_float+0xba>
 8005ad8:	f104 031a 	add.w	r3, r4, #26
 8005adc:	f04f 0b00 	mov.w	fp, #0
 8005ae0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ae4:	9306      	str	r3, [sp, #24]
 8005ae6:	e015      	b.n	8005b14 <_printf_float+0x324>
 8005ae8:	7fefffff 	.word	0x7fefffff
 8005aec:	08008884 	.word	0x08008884
 8005af0:	08008880 	.word	0x08008880
 8005af4:	0800888c 	.word	0x0800888c
 8005af8:	08008888 	.word	0x08008888
 8005afc:	08008890 	.word	0x08008890
 8005b00:	2301      	movs	r3, #1
 8005b02:	9a06      	ldr	r2, [sp, #24]
 8005b04:	4631      	mov	r1, r6
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f43f aecd 	beq.w	80058aa <_printf_float+0xba>
 8005b10:	f10b 0b01 	add.w	fp, fp, #1
 8005b14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b18:	ebaa 0309 	sub.w	r3, sl, r9
 8005b1c:	455b      	cmp	r3, fp
 8005b1e:	dcef      	bgt.n	8005b00 <_printf_float+0x310>
 8005b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b24:	429a      	cmp	r2, r3
 8005b26:	44d0      	add	r8, sl
 8005b28:	db15      	blt.n	8005b56 <_printf_float+0x366>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	07da      	lsls	r2, r3, #31
 8005b2e:	d412      	bmi.n	8005b56 <_printf_float+0x366>
 8005b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b34:	eba3 020a 	sub.w	r2, r3, sl
 8005b38:	eba3 0a01 	sub.w	sl, r3, r1
 8005b3c:	4592      	cmp	sl, r2
 8005b3e:	bfa8      	it	ge
 8005b40:	4692      	movge	sl, r2
 8005b42:	f1ba 0f00 	cmp.w	sl, #0
 8005b46:	dc0e      	bgt.n	8005b66 <_printf_float+0x376>
 8005b48:	f04f 0800 	mov.w	r8, #0
 8005b4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b50:	f104 091a 	add.w	r9, r4, #26
 8005b54:	e019      	b.n	8005b8a <_printf_float+0x39a>
 8005b56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	47b8      	blx	r7
 8005b60:	3001      	adds	r0, #1
 8005b62:	d1e5      	bne.n	8005b30 <_printf_float+0x340>
 8005b64:	e6a1      	b.n	80058aa <_printf_float+0xba>
 8005b66:	4653      	mov	r3, sl
 8005b68:	4642      	mov	r2, r8
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	47b8      	blx	r7
 8005b70:	3001      	adds	r0, #1
 8005b72:	d1e9      	bne.n	8005b48 <_printf_float+0x358>
 8005b74:	e699      	b.n	80058aa <_printf_float+0xba>
 8005b76:	2301      	movs	r3, #1
 8005b78:	464a      	mov	r2, r9
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	47b8      	blx	r7
 8005b80:	3001      	adds	r0, #1
 8005b82:	f43f ae92 	beq.w	80058aa <_printf_float+0xba>
 8005b86:	f108 0801 	add.w	r8, r8, #1
 8005b8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b8e:	1a9b      	subs	r3, r3, r2
 8005b90:	eba3 030a 	sub.w	r3, r3, sl
 8005b94:	4543      	cmp	r3, r8
 8005b96:	dcee      	bgt.n	8005b76 <_printf_float+0x386>
 8005b98:	e74a      	b.n	8005a30 <_printf_float+0x240>
 8005b9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b9c:	2a01      	cmp	r2, #1
 8005b9e:	dc01      	bgt.n	8005ba4 <_printf_float+0x3b4>
 8005ba0:	07db      	lsls	r3, r3, #31
 8005ba2:	d53a      	bpl.n	8005c1a <_printf_float+0x42a>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	4642      	mov	r2, r8
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f43f ae7b 	beq.w	80058aa <_printf_float+0xba>
 8005bb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b8      	blx	r7
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f108 0801 	add.w	r8, r8, #1
 8005bc4:	f43f ae71 	beq.w	80058aa <_printf_float+0xba>
 8005bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f103 3aff 	add.w	sl, r3, #4294967295
 8005bd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f7fa ff77 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bda:	b9c8      	cbnz	r0, 8005c10 <_printf_float+0x420>
 8005bdc:	4653      	mov	r3, sl
 8005bde:	4642      	mov	r2, r8
 8005be0:	4631      	mov	r1, r6
 8005be2:	4628      	mov	r0, r5
 8005be4:	47b8      	blx	r7
 8005be6:	3001      	adds	r0, #1
 8005be8:	d10e      	bne.n	8005c08 <_printf_float+0x418>
 8005bea:	e65e      	b.n	80058aa <_printf_float+0xba>
 8005bec:	2301      	movs	r3, #1
 8005bee:	4652      	mov	r2, sl
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	47b8      	blx	r7
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	f43f ae57 	beq.w	80058aa <_printf_float+0xba>
 8005bfc:	f108 0801 	add.w	r8, r8, #1
 8005c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c02:	3b01      	subs	r3, #1
 8005c04:	4543      	cmp	r3, r8
 8005c06:	dcf1      	bgt.n	8005bec <_printf_float+0x3fc>
 8005c08:	464b      	mov	r3, r9
 8005c0a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c0e:	e6de      	b.n	80059ce <_printf_float+0x1de>
 8005c10:	f04f 0800 	mov.w	r8, #0
 8005c14:	f104 0a1a 	add.w	sl, r4, #26
 8005c18:	e7f2      	b.n	8005c00 <_printf_float+0x410>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e7df      	b.n	8005bde <_printf_float+0x3ee>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	464a      	mov	r2, r9
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b8      	blx	r7
 8005c28:	3001      	adds	r0, #1
 8005c2a:	f43f ae3e 	beq.w	80058aa <_printf_float+0xba>
 8005c2e:	f108 0801 	add.w	r8, r8, #1
 8005c32:	68e3      	ldr	r3, [r4, #12]
 8005c34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	4543      	cmp	r3, r8
 8005c3a:	dcf0      	bgt.n	8005c1e <_printf_float+0x42e>
 8005c3c:	e6fc      	b.n	8005a38 <_printf_float+0x248>
 8005c3e:	f04f 0800 	mov.w	r8, #0
 8005c42:	f104 0919 	add.w	r9, r4, #25
 8005c46:	e7f4      	b.n	8005c32 <_printf_float+0x442>
 8005c48:	2900      	cmp	r1, #0
 8005c4a:	f43f ae8b 	beq.w	8005964 <_printf_float+0x174>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005c54:	ab09      	add	r3, sp, #36	; 0x24
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	ec49 8b10 	vmov	d0, r8, r9
 8005c5c:	6022      	str	r2, [r4, #0]
 8005c5e:	f8cd a004 	str.w	sl, [sp, #4]
 8005c62:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c66:	4628      	mov	r0, r5
 8005c68:	f7ff fd2e 	bl	80056c8 <__cvt>
 8005c6c:	4680      	mov	r8, r0
 8005c6e:	e648      	b.n	8005902 <_printf_float+0x112>

08005c70 <_printf_common>:
 8005c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c74:	4691      	mov	r9, r2
 8005c76:	461f      	mov	r7, r3
 8005c78:	688a      	ldr	r2, [r1, #8]
 8005c7a:	690b      	ldr	r3, [r1, #16]
 8005c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c80:	4293      	cmp	r3, r2
 8005c82:	bfb8      	it	lt
 8005c84:	4613      	movlt	r3, r2
 8005c86:	f8c9 3000 	str.w	r3, [r9]
 8005c8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c8e:	4606      	mov	r6, r0
 8005c90:	460c      	mov	r4, r1
 8005c92:	b112      	cbz	r2, 8005c9a <_printf_common+0x2a>
 8005c94:	3301      	adds	r3, #1
 8005c96:	f8c9 3000 	str.w	r3, [r9]
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	0699      	lsls	r1, r3, #26
 8005c9e:	bf42      	ittt	mi
 8005ca0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ca4:	3302      	addmi	r3, #2
 8005ca6:	f8c9 3000 	strmi.w	r3, [r9]
 8005caa:	6825      	ldr	r5, [r4, #0]
 8005cac:	f015 0506 	ands.w	r5, r5, #6
 8005cb0:	d107      	bne.n	8005cc2 <_printf_common+0x52>
 8005cb2:	f104 0a19 	add.w	sl, r4, #25
 8005cb6:	68e3      	ldr	r3, [r4, #12]
 8005cb8:	f8d9 2000 	ldr.w	r2, [r9]
 8005cbc:	1a9b      	subs	r3, r3, r2
 8005cbe:	42ab      	cmp	r3, r5
 8005cc0:	dc28      	bgt.n	8005d14 <_printf_common+0xa4>
 8005cc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005cc6:	6822      	ldr	r2, [r4, #0]
 8005cc8:	3300      	adds	r3, #0
 8005cca:	bf18      	it	ne
 8005ccc:	2301      	movne	r3, #1
 8005cce:	0692      	lsls	r2, r2, #26
 8005cd0:	d42d      	bmi.n	8005d2e <_printf_common+0xbe>
 8005cd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cd6:	4639      	mov	r1, r7
 8005cd8:	4630      	mov	r0, r6
 8005cda:	47c0      	blx	r8
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d020      	beq.n	8005d22 <_printf_common+0xb2>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	68e5      	ldr	r5, [r4, #12]
 8005ce4:	f8d9 2000 	ldr.w	r2, [r9]
 8005ce8:	f003 0306 	and.w	r3, r3, #6
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	bf08      	it	eq
 8005cf0:	1aad      	subeq	r5, r5, r2
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	6922      	ldr	r2, [r4, #16]
 8005cf6:	bf0c      	ite	eq
 8005cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cfc:	2500      	movne	r5, #0
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	bfc4      	itt	gt
 8005d02:	1a9b      	subgt	r3, r3, r2
 8005d04:	18ed      	addgt	r5, r5, r3
 8005d06:	f04f 0900 	mov.w	r9, #0
 8005d0a:	341a      	adds	r4, #26
 8005d0c:	454d      	cmp	r5, r9
 8005d0e:	d11a      	bne.n	8005d46 <_printf_common+0xd6>
 8005d10:	2000      	movs	r0, #0
 8005d12:	e008      	b.n	8005d26 <_printf_common+0xb6>
 8005d14:	2301      	movs	r3, #1
 8005d16:	4652      	mov	r2, sl
 8005d18:	4639      	mov	r1, r7
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	47c0      	blx	r8
 8005d1e:	3001      	adds	r0, #1
 8005d20:	d103      	bne.n	8005d2a <_printf_common+0xba>
 8005d22:	f04f 30ff 	mov.w	r0, #4294967295
 8005d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2a:	3501      	adds	r5, #1
 8005d2c:	e7c3      	b.n	8005cb6 <_printf_common+0x46>
 8005d2e:	18e1      	adds	r1, r4, r3
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	2030      	movs	r0, #48	; 0x30
 8005d34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d38:	4422      	add	r2, r4
 8005d3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d42:	3302      	adds	r3, #2
 8005d44:	e7c5      	b.n	8005cd2 <_printf_common+0x62>
 8005d46:	2301      	movs	r3, #1
 8005d48:	4622      	mov	r2, r4
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	47c0      	blx	r8
 8005d50:	3001      	adds	r0, #1
 8005d52:	d0e6      	beq.n	8005d22 <_printf_common+0xb2>
 8005d54:	f109 0901 	add.w	r9, r9, #1
 8005d58:	e7d8      	b.n	8005d0c <_printf_common+0x9c>
	...

08005d5c <_printf_i>:
 8005d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005d64:	460c      	mov	r4, r1
 8005d66:	7e09      	ldrb	r1, [r1, #24]
 8005d68:	b085      	sub	sp, #20
 8005d6a:	296e      	cmp	r1, #110	; 0x6e
 8005d6c:	4617      	mov	r7, r2
 8005d6e:	4606      	mov	r6, r0
 8005d70:	4698      	mov	r8, r3
 8005d72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d74:	f000 80b3 	beq.w	8005ede <_printf_i+0x182>
 8005d78:	d822      	bhi.n	8005dc0 <_printf_i+0x64>
 8005d7a:	2963      	cmp	r1, #99	; 0x63
 8005d7c:	d036      	beq.n	8005dec <_printf_i+0x90>
 8005d7e:	d80a      	bhi.n	8005d96 <_printf_i+0x3a>
 8005d80:	2900      	cmp	r1, #0
 8005d82:	f000 80b9 	beq.w	8005ef8 <_printf_i+0x19c>
 8005d86:	2958      	cmp	r1, #88	; 0x58
 8005d88:	f000 8083 	beq.w	8005e92 <_printf_i+0x136>
 8005d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005d94:	e032      	b.n	8005dfc <_printf_i+0xa0>
 8005d96:	2964      	cmp	r1, #100	; 0x64
 8005d98:	d001      	beq.n	8005d9e <_printf_i+0x42>
 8005d9a:	2969      	cmp	r1, #105	; 0x69
 8005d9c:	d1f6      	bne.n	8005d8c <_printf_i+0x30>
 8005d9e:	6820      	ldr	r0, [r4, #0]
 8005da0:	6813      	ldr	r3, [r2, #0]
 8005da2:	0605      	lsls	r5, r0, #24
 8005da4:	f103 0104 	add.w	r1, r3, #4
 8005da8:	d52a      	bpl.n	8005e00 <_printf_i+0xa4>
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6011      	str	r1, [r2, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	da03      	bge.n	8005dba <_printf_i+0x5e>
 8005db2:	222d      	movs	r2, #45	; 0x2d
 8005db4:	425b      	negs	r3, r3
 8005db6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005dba:	486f      	ldr	r0, [pc, #444]	; (8005f78 <_printf_i+0x21c>)
 8005dbc:	220a      	movs	r2, #10
 8005dbe:	e039      	b.n	8005e34 <_printf_i+0xd8>
 8005dc0:	2973      	cmp	r1, #115	; 0x73
 8005dc2:	f000 809d 	beq.w	8005f00 <_printf_i+0x1a4>
 8005dc6:	d808      	bhi.n	8005dda <_printf_i+0x7e>
 8005dc8:	296f      	cmp	r1, #111	; 0x6f
 8005dca:	d020      	beq.n	8005e0e <_printf_i+0xb2>
 8005dcc:	2970      	cmp	r1, #112	; 0x70
 8005dce:	d1dd      	bne.n	8005d8c <_printf_i+0x30>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	f043 0320 	orr.w	r3, r3, #32
 8005dd6:	6023      	str	r3, [r4, #0]
 8005dd8:	e003      	b.n	8005de2 <_printf_i+0x86>
 8005dda:	2975      	cmp	r1, #117	; 0x75
 8005ddc:	d017      	beq.n	8005e0e <_printf_i+0xb2>
 8005dde:	2978      	cmp	r1, #120	; 0x78
 8005de0:	d1d4      	bne.n	8005d8c <_printf_i+0x30>
 8005de2:	2378      	movs	r3, #120	; 0x78
 8005de4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005de8:	4864      	ldr	r0, [pc, #400]	; (8005f7c <_printf_i+0x220>)
 8005dea:	e055      	b.n	8005e98 <_printf_i+0x13c>
 8005dec:	6813      	ldr	r3, [r2, #0]
 8005dee:	1d19      	adds	r1, r3, #4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6011      	str	r1, [r2, #0]
 8005df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e08c      	b.n	8005f1a <_printf_i+0x1be>
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6011      	str	r1, [r2, #0]
 8005e04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e08:	bf18      	it	ne
 8005e0a:	b21b      	sxthne	r3, r3
 8005e0c:	e7cf      	b.n	8005dae <_printf_i+0x52>
 8005e0e:	6813      	ldr	r3, [r2, #0]
 8005e10:	6825      	ldr	r5, [r4, #0]
 8005e12:	1d18      	adds	r0, r3, #4
 8005e14:	6010      	str	r0, [r2, #0]
 8005e16:	0628      	lsls	r0, r5, #24
 8005e18:	d501      	bpl.n	8005e1e <_printf_i+0xc2>
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	e002      	b.n	8005e24 <_printf_i+0xc8>
 8005e1e:	0668      	lsls	r0, r5, #25
 8005e20:	d5fb      	bpl.n	8005e1a <_printf_i+0xbe>
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	4854      	ldr	r0, [pc, #336]	; (8005f78 <_printf_i+0x21c>)
 8005e26:	296f      	cmp	r1, #111	; 0x6f
 8005e28:	bf14      	ite	ne
 8005e2a:	220a      	movne	r2, #10
 8005e2c:	2208      	moveq	r2, #8
 8005e2e:	2100      	movs	r1, #0
 8005e30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e34:	6865      	ldr	r5, [r4, #4]
 8005e36:	60a5      	str	r5, [r4, #8]
 8005e38:	2d00      	cmp	r5, #0
 8005e3a:	f2c0 8095 	blt.w	8005f68 <_printf_i+0x20c>
 8005e3e:	6821      	ldr	r1, [r4, #0]
 8005e40:	f021 0104 	bic.w	r1, r1, #4
 8005e44:	6021      	str	r1, [r4, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d13d      	bne.n	8005ec6 <_printf_i+0x16a>
 8005e4a:	2d00      	cmp	r5, #0
 8005e4c:	f040 808e 	bne.w	8005f6c <_printf_i+0x210>
 8005e50:	4665      	mov	r5, ip
 8005e52:	2a08      	cmp	r2, #8
 8005e54:	d10b      	bne.n	8005e6e <_printf_i+0x112>
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	07db      	lsls	r3, r3, #31
 8005e5a:	d508      	bpl.n	8005e6e <_printf_i+0x112>
 8005e5c:	6923      	ldr	r3, [r4, #16]
 8005e5e:	6862      	ldr	r2, [r4, #4]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	bfde      	ittt	le
 8005e64:	2330      	movle	r3, #48	; 0x30
 8005e66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e6e:	ebac 0305 	sub.w	r3, ip, r5
 8005e72:	6123      	str	r3, [r4, #16]
 8005e74:	f8cd 8000 	str.w	r8, [sp]
 8005e78:	463b      	mov	r3, r7
 8005e7a:	aa03      	add	r2, sp, #12
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f7ff fef6 	bl	8005c70 <_printf_common>
 8005e84:	3001      	adds	r0, #1
 8005e86:	d14d      	bne.n	8005f24 <_printf_i+0x1c8>
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8c:	b005      	add	sp, #20
 8005e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e92:	4839      	ldr	r0, [pc, #228]	; (8005f78 <_printf_i+0x21c>)
 8005e94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005e98:	6813      	ldr	r3, [r2, #0]
 8005e9a:	6821      	ldr	r1, [r4, #0]
 8005e9c:	1d1d      	adds	r5, r3, #4
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6015      	str	r5, [r2, #0]
 8005ea2:	060a      	lsls	r2, r1, #24
 8005ea4:	d50b      	bpl.n	8005ebe <_printf_i+0x162>
 8005ea6:	07ca      	lsls	r2, r1, #31
 8005ea8:	bf44      	itt	mi
 8005eaa:	f041 0120 	orrmi.w	r1, r1, #32
 8005eae:	6021      	strmi	r1, [r4, #0]
 8005eb0:	b91b      	cbnz	r3, 8005eba <_printf_i+0x15e>
 8005eb2:	6822      	ldr	r2, [r4, #0]
 8005eb4:	f022 0220 	bic.w	r2, r2, #32
 8005eb8:	6022      	str	r2, [r4, #0]
 8005eba:	2210      	movs	r2, #16
 8005ebc:	e7b7      	b.n	8005e2e <_printf_i+0xd2>
 8005ebe:	064d      	lsls	r5, r1, #25
 8005ec0:	bf48      	it	mi
 8005ec2:	b29b      	uxthmi	r3, r3
 8005ec4:	e7ef      	b.n	8005ea6 <_printf_i+0x14a>
 8005ec6:	4665      	mov	r5, ip
 8005ec8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ecc:	fb02 3311 	mls	r3, r2, r1, r3
 8005ed0:	5cc3      	ldrb	r3, [r0, r3]
 8005ed2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	2900      	cmp	r1, #0
 8005eda:	d1f5      	bne.n	8005ec8 <_printf_i+0x16c>
 8005edc:	e7b9      	b.n	8005e52 <_printf_i+0xf6>
 8005ede:	6813      	ldr	r3, [r2, #0]
 8005ee0:	6825      	ldr	r5, [r4, #0]
 8005ee2:	6961      	ldr	r1, [r4, #20]
 8005ee4:	1d18      	adds	r0, r3, #4
 8005ee6:	6010      	str	r0, [r2, #0]
 8005ee8:	0628      	lsls	r0, r5, #24
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	d501      	bpl.n	8005ef2 <_printf_i+0x196>
 8005eee:	6019      	str	r1, [r3, #0]
 8005ef0:	e002      	b.n	8005ef8 <_printf_i+0x19c>
 8005ef2:	066a      	lsls	r2, r5, #25
 8005ef4:	d5fb      	bpl.n	8005eee <_printf_i+0x192>
 8005ef6:	8019      	strh	r1, [r3, #0]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6123      	str	r3, [r4, #16]
 8005efc:	4665      	mov	r5, ip
 8005efe:	e7b9      	b.n	8005e74 <_printf_i+0x118>
 8005f00:	6813      	ldr	r3, [r2, #0]
 8005f02:	1d19      	adds	r1, r3, #4
 8005f04:	6011      	str	r1, [r2, #0]
 8005f06:	681d      	ldr	r5, [r3, #0]
 8005f08:	6862      	ldr	r2, [r4, #4]
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f7fa f967 	bl	80001e0 <memchr>
 8005f12:	b108      	cbz	r0, 8005f18 <_printf_i+0x1bc>
 8005f14:	1b40      	subs	r0, r0, r5
 8005f16:	6060      	str	r0, [r4, #4]
 8005f18:	6863      	ldr	r3, [r4, #4]
 8005f1a:	6123      	str	r3, [r4, #16]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f22:	e7a7      	b.n	8005e74 <_printf_i+0x118>
 8005f24:	6923      	ldr	r3, [r4, #16]
 8005f26:	462a      	mov	r2, r5
 8005f28:	4639      	mov	r1, r7
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	47c0      	blx	r8
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d0aa      	beq.n	8005e88 <_printf_i+0x12c>
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	079b      	lsls	r3, r3, #30
 8005f36:	d413      	bmi.n	8005f60 <_printf_i+0x204>
 8005f38:	68e0      	ldr	r0, [r4, #12]
 8005f3a:	9b03      	ldr	r3, [sp, #12]
 8005f3c:	4298      	cmp	r0, r3
 8005f3e:	bfb8      	it	lt
 8005f40:	4618      	movlt	r0, r3
 8005f42:	e7a3      	b.n	8005e8c <_printf_i+0x130>
 8005f44:	2301      	movs	r3, #1
 8005f46:	464a      	mov	r2, r9
 8005f48:	4639      	mov	r1, r7
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	47c0      	blx	r8
 8005f4e:	3001      	adds	r0, #1
 8005f50:	d09a      	beq.n	8005e88 <_printf_i+0x12c>
 8005f52:	3501      	adds	r5, #1
 8005f54:	68e3      	ldr	r3, [r4, #12]
 8005f56:	9a03      	ldr	r2, [sp, #12]
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	42ab      	cmp	r3, r5
 8005f5c:	dcf2      	bgt.n	8005f44 <_printf_i+0x1e8>
 8005f5e:	e7eb      	b.n	8005f38 <_printf_i+0x1dc>
 8005f60:	2500      	movs	r5, #0
 8005f62:	f104 0919 	add.w	r9, r4, #25
 8005f66:	e7f5      	b.n	8005f54 <_printf_i+0x1f8>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1ac      	bne.n	8005ec6 <_printf_i+0x16a>
 8005f6c:	7803      	ldrb	r3, [r0, #0]
 8005f6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f76:	e76c      	b.n	8005e52 <_printf_i+0xf6>
 8005f78:	08008892 	.word	0x08008892
 8005f7c:	080088a3 	.word	0x080088a3

08005f80 <siprintf>:
 8005f80:	b40e      	push	{r1, r2, r3}
 8005f82:	b500      	push	{lr}
 8005f84:	b09c      	sub	sp, #112	; 0x70
 8005f86:	ab1d      	add	r3, sp, #116	; 0x74
 8005f88:	9002      	str	r0, [sp, #8]
 8005f8a:	9006      	str	r0, [sp, #24]
 8005f8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f90:	4809      	ldr	r0, [pc, #36]	; (8005fb8 <siprintf+0x38>)
 8005f92:	9107      	str	r1, [sp, #28]
 8005f94:	9104      	str	r1, [sp, #16]
 8005f96:	4909      	ldr	r1, [pc, #36]	; (8005fbc <siprintf+0x3c>)
 8005f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f9c:	9105      	str	r1, [sp, #20]
 8005f9e:	6800      	ldr	r0, [r0, #0]
 8005fa0:	9301      	str	r3, [sp, #4]
 8005fa2:	a902      	add	r1, sp, #8
 8005fa4:	f001 fa5c 	bl	8007460 <_svfiprintf_r>
 8005fa8:	9b02      	ldr	r3, [sp, #8]
 8005faa:	2200      	movs	r2, #0
 8005fac:	701a      	strb	r2, [r3, #0]
 8005fae:	b01c      	add	sp, #112	; 0x70
 8005fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fb4:	b003      	add	sp, #12
 8005fb6:	4770      	bx	lr
 8005fb8:	2000000c 	.word	0x2000000c
 8005fbc:	ffff0208 	.word	0xffff0208

08005fc0 <quorem>:
 8005fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc4:	6903      	ldr	r3, [r0, #16]
 8005fc6:	690c      	ldr	r4, [r1, #16]
 8005fc8:	42a3      	cmp	r3, r4
 8005fca:	4680      	mov	r8, r0
 8005fcc:	f2c0 8082 	blt.w	80060d4 <quorem+0x114>
 8005fd0:	3c01      	subs	r4, #1
 8005fd2:	f101 0714 	add.w	r7, r1, #20
 8005fd6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005fda:	f100 0614 	add.w	r6, r0, #20
 8005fde:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005fe2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005fe6:	eb06 030c 	add.w	r3, r6, ip
 8005fea:	3501      	adds	r5, #1
 8005fec:	eb07 090c 	add.w	r9, r7, ip
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	fbb0 f5f5 	udiv	r5, r0, r5
 8005ff6:	b395      	cbz	r5, 800605e <quorem+0x9e>
 8005ff8:	f04f 0a00 	mov.w	sl, #0
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	46b6      	mov	lr, r6
 8006000:	46d3      	mov	fp, sl
 8006002:	f850 2b04 	ldr.w	r2, [r0], #4
 8006006:	b293      	uxth	r3, r2
 8006008:	fb05 a303 	mla	r3, r5, r3, sl
 800600c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006010:	b29b      	uxth	r3, r3
 8006012:	ebab 0303 	sub.w	r3, fp, r3
 8006016:	0c12      	lsrs	r2, r2, #16
 8006018:	f8de b000 	ldr.w	fp, [lr]
 800601c:	fb05 a202 	mla	r2, r5, r2, sl
 8006020:	fa13 f38b 	uxtah	r3, r3, fp
 8006024:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006028:	fa1f fb82 	uxth.w	fp, r2
 800602c:	f8de 2000 	ldr.w	r2, [lr]
 8006030:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006034:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006038:	b29b      	uxth	r3, r3
 800603a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800603e:	4581      	cmp	r9, r0
 8006040:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006044:	f84e 3b04 	str.w	r3, [lr], #4
 8006048:	d2db      	bcs.n	8006002 <quorem+0x42>
 800604a:	f856 300c 	ldr.w	r3, [r6, ip]
 800604e:	b933      	cbnz	r3, 800605e <quorem+0x9e>
 8006050:	9b01      	ldr	r3, [sp, #4]
 8006052:	3b04      	subs	r3, #4
 8006054:	429e      	cmp	r6, r3
 8006056:	461a      	mov	r2, r3
 8006058:	d330      	bcc.n	80060bc <quorem+0xfc>
 800605a:	f8c8 4010 	str.w	r4, [r8, #16]
 800605e:	4640      	mov	r0, r8
 8006060:	f001 f828 	bl	80070b4 <__mcmp>
 8006064:	2800      	cmp	r0, #0
 8006066:	db25      	blt.n	80060b4 <quorem+0xf4>
 8006068:	3501      	adds	r5, #1
 800606a:	4630      	mov	r0, r6
 800606c:	f04f 0c00 	mov.w	ip, #0
 8006070:	f857 2b04 	ldr.w	r2, [r7], #4
 8006074:	f8d0 e000 	ldr.w	lr, [r0]
 8006078:	b293      	uxth	r3, r2
 800607a:	ebac 0303 	sub.w	r3, ip, r3
 800607e:	0c12      	lsrs	r2, r2, #16
 8006080:	fa13 f38e 	uxtah	r3, r3, lr
 8006084:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006088:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800608c:	b29b      	uxth	r3, r3
 800608e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006092:	45b9      	cmp	r9, r7
 8006094:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006098:	f840 3b04 	str.w	r3, [r0], #4
 800609c:	d2e8      	bcs.n	8006070 <quorem+0xb0>
 800609e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80060a2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80060a6:	b92a      	cbnz	r2, 80060b4 <quorem+0xf4>
 80060a8:	3b04      	subs	r3, #4
 80060aa:	429e      	cmp	r6, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	d30b      	bcc.n	80060c8 <quorem+0x108>
 80060b0:	f8c8 4010 	str.w	r4, [r8, #16]
 80060b4:	4628      	mov	r0, r5
 80060b6:	b003      	add	sp, #12
 80060b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060bc:	6812      	ldr	r2, [r2, #0]
 80060be:	3b04      	subs	r3, #4
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	d1ca      	bne.n	800605a <quorem+0x9a>
 80060c4:	3c01      	subs	r4, #1
 80060c6:	e7c5      	b.n	8006054 <quorem+0x94>
 80060c8:	6812      	ldr	r2, [r2, #0]
 80060ca:	3b04      	subs	r3, #4
 80060cc:	2a00      	cmp	r2, #0
 80060ce:	d1ef      	bne.n	80060b0 <quorem+0xf0>
 80060d0:	3c01      	subs	r4, #1
 80060d2:	e7ea      	b.n	80060aa <quorem+0xea>
 80060d4:	2000      	movs	r0, #0
 80060d6:	e7ee      	b.n	80060b6 <quorem+0xf6>

080060d8 <_dtoa_r>:
 80060d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060dc:	ec57 6b10 	vmov	r6, r7, d0
 80060e0:	b097      	sub	sp, #92	; 0x5c
 80060e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060e4:	9106      	str	r1, [sp, #24]
 80060e6:	4604      	mov	r4, r0
 80060e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80060ea:	9312      	str	r3, [sp, #72]	; 0x48
 80060ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80060f0:	e9cd 6700 	strd	r6, r7, [sp]
 80060f4:	b93d      	cbnz	r5, 8006106 <_dtoa_r+0x2e>
 80060f6:	2010      	movs	r0, #16
 80060f8:	f000 fdb4 	bl	8006c64 <malloc>
 80060fc:	6260      	str	r0, [r4, #36]	; 0x24
 80060fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006102:	6005      	str	r5, [r0, #0]
 8006104:	60c5      	str	r5, [r0, #12]
 8006106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006108:	6819      	ldr	r1, [r3, #0]
 800610a:	b151      	cbz	r1, 8006122 <_dtoa_r+0x4a>
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	604a      	str	r2, [r1, #4]
 8006110:	2301      	movs	r3, #1
 8006112:	4093      	lsls	r3, r2
 8006114:	608b      	str	r3, [r1, #8]
 8006116:	4620      	mov	r0, r4
 8006118:	f000 fdeb 	bl	8006cf2 <_Bfree>
 800611c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	1e3b      	subs	r3, r7, #0
 8006124:	bfbb      	ittet	lt
 8006126:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800612a:	9301      	strlt	r3, [sp, #4]
 800612c:	2300      	movge	r3, #0
 800612e:	2201      	movlt	r2, #1
 8006130:	bfac      	ite	ge
 8006132:	f8c8 3000 	strge.w	r3, [r8]
 8006136:	f8c8 2000 	strlt.w	r2, [r8]
 800613a:	4baf      	ldr	r3, [pc, #700]	; (80063f8 <_dtoa_r+0x320>)
 800613c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006140:	ea33 0308 	bics.w	r3, r3, r8
 8006144:	d114      	bne.n	8006170 <_dtoa_r+0x98>
 8006146:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006148:	f242 730f 	movw	r3, #9999	; 0x270f
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	9b00      	ldr	r3, [sp, #0]
 8006150:	b923      	cbnz	r3, 800615c <_dtoa_r+0x84>
 8006152:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006156:	2800      	cmp	r0, #0
 8006158:	f000 8542 	beq.w	8006be0 <_dtoa_r+0xb08>
 800615c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800615e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800640c <_dtoa_r+0x334>
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 8544 	beq.w	8006bf0 <_dtoa_r+0xb18>
 8006168:	f10b 0303 	add.w	r3, fp, #3
 800616c:	f000 bd3e 	b.w	8006bec <_dtoa_r+0xb14>
 8006170:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006174:	2200      	movs	r2, #0
 8006176:	2300      	movs	r3, #0
 8006178:	4630      	mov	r0, r6
 800617a:	4639      	mov	r1, r7
 800617c:	f7fa fca4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006180:	4681      	mov	r9, r0
 8006182:	b168      	cbz	r0, 80061a0 <_dtoa_r+0xc8>
 8006184:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006186:	2301      	movs	r3, #1
 8006188:	6013      	str	r3, [r2, #0]
 800618a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 8524 	beq.w	8006bda <_dtoa_r+0xb02>
 8006192:	4b9a      	ldr	r3, [pc, #616]	; (80063fc <_dtoa_r+0x324>)
 8006194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006196:	f103 3bff 	add.w	fp, r3, #4294967295
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	f000 bd28 	b.w	8006bf0 <_dtoa_r+0xb18>
 80061a0:	aa14      	add	r2, sp, #80	; 0x50
 80061a2:	a915      	add	r1, sp, #84	; 0x54
 80061a4:	ec47 6b10 	vmov	d0, r6, r7
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 fffa 	bl	80071a2 <__d2b>
 80061ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80061b2:	9004      	str	r0, [sp, #16]
 80061b4:	2d00      	cmp	r5, #0
 80061b6:	d07c      	beq.n	80062b2 <_dtoa_r+0x1da>
 80061b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80061c0:	46b2      	mov	sl, r6
 80061c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80061c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80061ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80061ce:	2200      	movs	r2, #0
 80061d0:	4b8b      	ldr	r3, [pc, #556]	; (8006400 <_dtoa_r+0x328>)
 80061d2:	4650      	mov	r0, sl
 80061d4:	4659      	mov	r1, fp
 80061d6:	f7fa f857 	bl	8000288 <__aeabi_dsub>
 80061da:	a381      	add	r3, pc, #516	; (adr r3, 80063e0 <_dtoa_r+0x308>)
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f7fa fa0a 	bl	80005f8 <__aeabi_dmul>
 80061e4:	a380      	add	r3, pc, #512	; (adr r3, 80063e8 <_dtoa_r+0x310>)
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	f7fa f84f 	bl	800028c <__adddf3>
 80061ee:	4606      	mov	r6, r0
 80061f0:	4628      	mov	r0, r5
 80061f2:	460f      	mov	r7, r1
 80061f4:	f7fa f996 	bl	8000524 <__aeabi_i2d>
 80061f8:	a37d      	add	r3, pc, #500	; (adr r3, 80063f0 <_dtoa_r+0x318>)
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	f7fa f9fb 	bl	80005f8 <__aeabi_dmul>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4630      	mov	r0, r6
 8006208:	4639      	mov	r1, r7
 800620a:	f7fa f83f 	bl	800028c <__adddf3>
 800620e:	4606      	mov	r6, r0
 8006210:	460f      	mov	r7, r1
 8006212:	f7fa fca1 	bl	8000b58 <__aeabi_d2iz>
 8006216:	2200      	movs	r2, #0
 8006218:	4682      	mov	sl, r0
 800621a:	2300      	movs	r3, #0
 800621c:	4630      	mov	r0, r6
 800621e:	4639      	mov	r1, r7
 8006220:	f7fa fc5c 	bl	8000adc <__aeabi_dcmplt>
 8006224:	b148      	cbz	r0, 800623a <_dtoa_r+0x162>
 8006226:	4650      	mov	r0, sl
 8006228:	f7fa f97c 	bl	8000524 <__aeabi_i2d>
 800622c:	4632      	mov	r2, r6
 800622e:	463b      	mov	r3, r7
 8006230:	f7fa fc4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006234:	b908      	cbnz	r0, 800623a <_dtoa_r+0x162>
 8006236:	f10a 3aff 	add.w	sl, sl, #4294967295
 800623a:	f1ba 0f16 	cmp.w	sl, #22
 800623e:	d859      	bhi.n	80062f4 <_dtoa_r+0x21c>
 8006240:	4970      	ldr	r1, [pc, #448]	; (8006404 <_dtoa_r+0x32c>)
 8006242:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006246:	e9dd 2300 	ldrd	r2, r3, [sp]
 800624a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800624e:	f7fa fc63 	bl	8000b18 <__aeabi_dcmpgt>
 8006252:	2800      	cmp	r0, #0
 8006254:	d050      	beq.n	80062f8 <_dtoa_r+0x220>
 8006256:	f10a 3aff 	add.w	sl, sl, #4294967295
 800625a:	2300      	movs	r3, #0
 800625c:	930f      	str	r3, [sp, #60]	; 0x3c
 800625e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006260:	1b5d      	subs	r5, r3, r5
 8006262:	f1b5 0801 	subs.w	r8, r5, #1
 8006266:	bf49      	itett	mi
 8006268:	f1c5 0301 	rsbmi	r3, r5, #1
 800626c:	2300      	movpl	r3, #0
 800626e:	9305      	strmi	r3, [sp, #20]
 8006270:	f04f 0800 	movmi.w	r8, #0
 8006274:	bf58      	it	pl
 8006276:	9305      	strpl	r3, [sp, #20]
 8006278:	f1ba 0f00 	cmp.w	sl, #0
 800627c:	db3e      	blt.n	80062fc <_dtoa_r+0x224>
 800627e:	2300      	movs	r3, #0
 8006280:	44d0      	add	r8, sl
 8006282:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006286:	9307      	str	r3, [sp, #28]
 8006288:	9b06      	ldr	r3, [sp, #24]
 800628a:	2b09      	cmp	r3, #9
 800628c:	f200 8090 	bhi.w	80063b0 <_dtoa_r+0x2d8>
 8006290:	2b05      	cmp	r3, #5
 8006292:	bfc4      	itt	gt
 8006294:	3b04      	subgt	r3, #4
 8006296:	9306      	strgt	r3, [sp, #24]
 8006298:	9b06      	ldr	r3, [sp, #24]
 800629a:	f1a3 0302 	sub.w	r3, r3, #2
 800629e:	bfcc      	ite	gt
 80062a0:	2500      	movgt	r5, #0
 80062a2:	2501      	movle	r5, #1
 80062a4:	2b03      	cmp	r3, #3
 80062a6:	f200 808f 	bhi.w	80063c8 <_dtoa_r+0x2f0>
 80062aa:	e8df f003 	tbb	[pc, r3]
 80062ae:	7f7d      	.short	0x7f7d
 80062b0:	7131      	.short	0x7131
 80062b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80062b6:	441d      	add	r5, r3
 80062b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80062bc:	2820      	cmp	r0, #32
 80062be:	dd13      	ble.n	80062e8 <_dtoa_r+0x210>
 80062c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80062c4:	9b00      	ldr	r3, [sp, #0]
 80062c6:	fa08 f800 	lsl.w	r8, r8, r0
 80062ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80062ce:	fa23 f000 	lsr.w	r0, r3, r0
 80062d2:	ea48 0000 	orr.w	r0, r8, r0
 80062d6:	f7fa f915 	bl	8000504 <__aeabi_ui2d>
 80062da:	2301      	movs	r3, #1
 80062dc:	4682      	mov	sl, r0
 80062de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80062e2:	3d01      	subs	r5, #1
 80062e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80062e6:	e772      	b.n	80061ce <_dtoa_r+0xf6>
 80062e8:	9b00      	ldr	r3, [sp, #0]
 80062ea:	f1c0 0020 	rsb	r0, r0, #32
 80062ee:	fa03 f000 	lsl.w	r0, r3, r0
 80062f2:	e7f0      	b.n	80062d6 <_dtoa_r+0x1fe>
 80062f4:	2301      	movs	r3, #1
 80062f6:	e7b1      	b.n	800625c <_dtoa_r+0x184>
 80062f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80062fa:	e7b0      	b.n	800625e <_dtoa_r+0x186>
 80062fc:	9b05      	ldr	r3, [sp, #20]
 80062fe:	eba3 030a 	sub.w	r3, r3, sl
 8006302:	9305      	str	r3, [sp, #20]
 8006304:	f1ca 0300 	rsb	r3, sl, #0
 8006308:	9307      	str	r3, [sp, #28]
 800630a:	2300      	movs	r3, #0
 800630c:	930e      	str	r3, [sp, #56]	; 0x38
 800630e:	e7bb      	b.n	8006288 <_dtoa_r+0x1b0>
 8006310:	2301      	movs	r3, #1
 8006312:	930a      	str	r3, [sp, #40]	; 0x28
 8006314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006316:	2b00      	cmp	r3, #0
 8006318:	dd59      	ble.n	80063ce <_dtoa_r+0x2f6>
 800631a:	9302      	str	r3, [sp, #8]
 800631c:	4699      	mov	r9, r3
 800631e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006320:	2200      	movs	r2, #0
 8006322:	6072      	str	r2, [r6, #4]
 8006324:	2204      	movs	r2, #4
 8006326:	f102 0014 	add.w	r0, r2, #20
 800632a:	4298      	cmp	r0, r3
 800632c:	6871      	ldr	r1, [r6, #4]
 800632e:	d953      	bls.n	80063d8 <_dtoa_r+0x300>
 8006330:	4620      	mov	r0, r4
 8006332:	f000 fcaa 	bl	8006c8a <_Balloc>
 8006336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006338:	6030      	str	r0, [r6, #0]
 800633a:	f1b9 0f0e 	cmp.w	r9, #14
 800633e:	f8d3 b000 	ldr.w	fp, [r3]
 8006342:	f200 80e6 	bhi.w	8006512 <_dtoa_r+0x43a>
 8006346:	2d00      	cmp	r5, #0
 8006348:	f000 80e3 	beq.w	8006512 <_dtoa_r+0x43a>
 800634c:	ed9d 7b00 	vldr	d7, [sp]
 8006350:	f1ba 0f00 	cmp.w	sl, #0
 8006354:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006358:	dd74      	ble.n	8006444 <_dtoa_r+0x36c>
 800635a:	4a2a      	ldr	r2, [pc, #168]	; (8006404 <_dtoa_r+0x32c>)
 800635c:	f00a 030f 	and.w	r3, sl, #15
 8006360:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006364:	ed93 7b00 	vldr	d7, [r3]
 8006368:	ea4f 162a 	mov.w	r6, sl, asr #4
 800636c:	06f0      	lsls	r0, r6, #27
 800636e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006372:	d565      	bpl.n	8006440 <_dtoa_r+0x368>
 8006374:	4b24      	ldr	r3, [pc, #144]	; (8006408 <_dtoa_r+0x330>)
 8006376:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800637a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800637e:	f7fa fa65 	bl	800084c <__aeabi_ddiv>
 8006382:	e9cd 0100 	strd	r0, r1, [sp]
 8006386:	f006 060f 	and.w	r6, r6, #15
 800638a:	2503      	movs	r5, #3
 800638c:	4f1e      	ldr	r7, [pc, #120]	; (8006408 <_dtoa_r+0x330>)
 800638e:	e04c      	b.n	800642a <_dtoa_r+0x352>
 8006390:	2301      	movs	r3, #1
 8006392:	930a      	str	r3, [sp, #40]	; 0x28
 8006394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006396:	4453      	add	r3, sl
 8006398:	f103 0901 	add.w	r9, r3, #1
 800639c:	9302      	str	r3, [sp, #8]
 800639e:	464b      	mov	r3, r9
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	bfb8      	it	lt
 80063a4:	2301      	movlt	r3, #1
 80063a6:	e7ba      	b.n	800631e <_dtoa_r+0x246>
 80063a8:	2300      	movs	r3, #0
 80063aa:	e7b2      	b.n	8006312 <_dtoa_r+0x23a>
 80063ac:	2300      	movs	r3, #0
 80063ae:	e7f0      	b.n	8006392 <_dtoa_r+0x2ba>
 80063b0:	2501      	movs	r5, #1
 80063b2:	2300      	movs	r3, #0
 80063b4:	9306      	str	r3, [sp, #24]
 80063b6:	950a      	str	r5, [sp, #40]	; 0x28
 80063b8:	f04f 33ff 	mov.w	r3, #4294967295
 80063bc:	9302      	str	r3, [sp, #8]
 80063be:	4699      	mov	r9, r3
 80063c0:	2200      	movs	r2, #0
 80063c2:	2312      	movs	r3, #18
 80063c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80063c6:	e7aa      	b.n	800631e <_dtoa_r+0x246>
 80063c8:	2301      	movs	r3, #1
 80063ca:	930a      	str	r3, [sp, #40]	; 0x28
 80063cc:	e7f4      	b.n	80063b8 <_dtoa_r+0x2e0>
 80063ce:	2301      	movs	r3, #1
 80063d0:	9302      	str	r3, [sp, #8]
 80063d2:	4699      	mov	r9, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	e7f5      	b.n	80063c4 <_dtoa_r+0x2ec>
 80063d8:	3101      	adds	r1, #1
 80063da:	6071      	str	r1, [r6, #4]
 80063dc:	0052      	lsls	r2, r2, #1
 80063de:	e7a2      	b.n	8006326 <_dtoa_r+0x24e>
 80063e0:	636f4361 	.word	0x636f4361
 80063e4:	3fd287a7 	.word	0x3fd287a7
 80063e8:	8b60c8b3 	.word	0x8b60c8b3
 80063ec:	3fc68a28 	.word	0x3fc68a28
 80063f0:	509f79fb 	.word	0x509f79fb
 80063f4:	3fd34413 	.word	0x3fd34413
 80063f8:	7ff00000 	.word	0x7ff00000
 80063fc:	08008891 	.word	0x08008891
 8006400:	3ff80000 	.word	0x3ff80000
 8006404:	080088f0 	.word	0x080088f0
 8006408:	080088c8 	.word	0x080088c8
 800640c:	080088bd 	.word	0x080088bd
 8006410:	07f1      	lsls	r1, r6, #31
 8006412:	d508      	bpl.n	8006426 <_dtoa_r+0x34e>
 8006414:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800641c:	f7fa f8ec 	bl	80005f8 <__aeabi_dmul>
 8006420:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006424:	3501      	adds	r5, #1
 8006426:	1076      	asrs	r6, r6, #1
 8006428:	3708      	adds	r7, #8
 800642a:	2e00      	cmp	r6, #0
 800642c:	d1f0      	bne.n	8006410 <_dtoa_r+0x338>
 800642e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006432:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006436:	f7fa fa09 	bl	800084c <__aeabi_ddiv>
 800643a:	e9cd 0100 	strd	r0, r1, [sp]
 800643e:	e01a      	b.n	8006476 <_dtoa_r+0x39e>
 8006440:	2502      	movs	r5, #2
 8006442:	e7a3      	b.n	800638c <_dtoa_r+0x2b4>
 8006444:	f000 80a0 	beq.w	8006588 <_dtoa_r+0x4b0>
 8006448:	f1ca 0600 	rsb	r6, sl, #0
 800644c:	4b9f      	ldr	r3, [pc, #636]	; (80066cc <_dtoa_r+0x5f4>)
 800644e:	4fa0      	ldr	r7, [pc, #640]	; (80066d0 <_dtoa_r+0x5f8>)
 8006450:	f006 020f 	and.w	r2, r6, #15
 8006454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006460:	f7fa f8ca 	bl	80005f8 <__aeabi_dmul>
 8006464:	e9cd 0100 	strd	r0, r1, [sp]
 8006468:	1136      	asrs	r6, r6, #4
 800646a:	2300      	movs	r3, #0
 800646c:	2502      	movs	r5, #2
 800646e:	2e00      	cmp	r6, #0
 8006470:	d17f      	bne.n	8006572 <_dtoa_r+0x49a>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1e1      	bne.n	800643a <_dtoa_r+0x362>
 8006476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 8087 	beq.w	800658c <_dtoa_r+0x4b4>
 800647e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006482:	2200      	movs	r2, #0
 8006484:	4b93      	ldr	r3, [pc, #588]	; (80066d4 <_dtoa_r+0x5fc>)
 8006486:	4630      	mov	r0, r6
 8006488:	4639      	mov	r1, r7
 800648a:	f7fa fb27 	bl	8000adc <__aeabi_dcmplt>
 800648e:	2800      	cmp	r0, #0
 8006490:	d07c      	beq.n	800658c <_dtoa_r+0x4b4>
 8006492:	f1b9 0f00 	cmp.w	r9, #0
 8006496:	d079      	beq.n	800658c <_dtoa_r+0x4b4>
 8006498:	9b02      	ldr	r3, [sp, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	dd35      	ble.n	800650a <_dtoa_r+0x432>
 800649e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80064a2:	9308      	str	r3, [sp, #32]
 80064a4:	4639      	mov	r1, r7
 80064a6:	2200      	movs	r2, #0
 80064a8:	4b8b      	ldr	r3, [pc, #556]	; (80066d8 <_dtoa_r+0x600>)
 80064aa:	4630      	mov	r0, r6
 80064ac:	f7fa f8a4 	bl	80005f8 <__aeabi_dmul>
 80064b0:	e9cd 0100 	strd	r0, r1, [sp]
 80064b4:	9f02      	ldr	r7, [sp, #8]
 80064b6:	3501      	adds	r5, #1
 80064b8:	4628      	mov	r0, r5
 80064ba:	f7fa f833 	bl	8000524 <__aeabi_i2d>
 80064be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064c2:	f7fa f899 	bl	80005f8 <__aeabi_dmul>
 80064c6:	2200      	movs	r2, #0
 80064c8:	4b84      	ldr	r3, [pc, #528]	; (80066dc <_dtoa_r+0x604>)
 80064ca:	f7f9 fedf 	bl	800028c <__adddf3>
 80064ce:	4605      	mov	r5, r0
 80064d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80064d4:	2f00      	cmp	r7, #0
 80064d6:	d15d      	bne.n	8006594 <_dtoa_r+0x4bc>
 80064d8:	2200      	movs	r2, #0
 80064da:	4b81      	ldr	r3, [pc, #516]	; (80066e0 <_dtoa_r+0x608>)
 80064dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064e0:	f7f9 fed2 	bl	8000288 <__aeabi_dsub>
 80064e4:	462a      	mov	r2, r5
 80064e6:	4633      	mov	r3, r6
 80064e8:	e9cd 0100 	strd	r0, r1, [sp]
 80064ec:	f7fa fb14 	bl	8000b18 <__aeabi_dcmpgt>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	f040 8288 	bne.w	8006a06 <_dtoa_r+0x92e>
 80064f6:	462a      	mov	r2, r5
 80064f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80064fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006500:	f7fa faec 	bl	8000adc <__aeabi_dcmplt>
 8006504:	2800      	cmp	r0, #0
 8006506:	f040 827c 	bne.w	8006a02 <_dtoa_r+0x92a>
 800650a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800650e:	e9cd 2300 	strd	r2, r3, [sp]
 8006512:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006514:	2b00      	cmp	r3, #0
 8006516:	f2c0 8150 	blt.w	80067ba <_dtoa_r+0x6e2>
 800651a:	f1ba 0f0e 	cmp.w	sl, #14
 800651e:	f300 814c 	bgt.w	80067ba <_dtoa_r+0x6e2>
 8006522:	4b6a      	ldr	r3, [pc, #424]	; (80066cc <_dtoa_r+0x5f4>)
 8006524:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006528:	ed93 7b00 	vldr	d7, [r3]
 800652c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800652e:	2b00      	cmp	r3, #0
 8006530:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006534:	f280 80d8 	bge.w	80066e8 <_dtoa_r+0x610>
 8006538:	f1b9 0f00 	cmp.w	r9, #0
 800653c:	f300 80d4 	bgt.w	80066e8 <_dtoa_r+0x610>
 8006540:	f040 825e 	bne.w	8006a00 <_dtoa_r+0x928>
 8006544:	2200      	movs	r2, #0
 8006546:	4b66      	ldr	r3, [pc, #408]	; (80066e0 <_dtoa_r+0x608>)
 8006548:	ec51 0b17 	vmov	r0, r1, d7
 800654c:	f7fa f854 	bl	80005f8 <__aeabi_dmul>
 8006550:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006554:	f7fa fad6 	bl	8000b04 <__aeabi_dcmpge>
 8006558:	464f      	mov	r7, r9
 800655a:	464e      	mov	r6, r9
 800655c:	2800      	cmp	r0, #0
 800655e:	f040 8234 	bne.w	80069ca <_dtoa_r+0x8f2>
 8006562:	2331      	movs	r3, #49	; 0x31
 8006564:	f10b 0501 	add.w	r5, fp, #1
 8006568:	f88b 3000 	strb.w	r3, [fp]
 800656c:	f10a 0a01 	add.w	sl, sl, #1
 8006570:	e22f      	b.n	80069d2 <_dtoa_r+0x8fa>
 8006572:	07f2      	lsls	r2, r6, #31
 8006574:	d505      	bpl.n	8006582 <_dtoa_r+0x4aa>
 8006576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800657a:	f7fa f83d 	bl	80005f8 <__aeabi_dmul>
 800657e:	3501      	adds	r5, #1
 8006580:	2301      	movs	r3, #1
 8006582:	1076      	asrs	r6, r6, #1
 8006584:	3708      	adds	r7, #8
 8006586:	e772      	b.n	800646e <_dtoa_r+0x396>
 8006588:	2502      	movs	r5, #2
 800658a:	e774      	b.n	8006476 <_dtoa_r+0x39e>
 800658c:	f8cd a020 	str.w	sl, [sp, #32]
 8006590:	464f      	mov	r7, r9
 8006592:	e791      	b.n	80064b8 <_dtoa_r+0x3e0>
 8006594:	4b4d      	ldr	r3, [pc, #308]	; (80066cc <_dtoa_r+0x5f4>)
 8006596:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800659a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800659e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d047      	beq.n	8006634 <_dtoa_r+0x55c>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	2000      	movs	r0, #0
 80065aa:	494e      	ldr	r1, [pc, #312]	; (80066e4 <_dtoa_r+0x60c>)
 80065ac:	f7fa f94e 	bl	800084c <__aeabi_ddiv>
 80065b0:	462a      	mov	r2, r5
 80065b2:	4633      	mov	r3, r6
 80065b4:	f7f9 fe68 	bl	8000288 <__aeabi_dsub>
 80065b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80065bc:	465d      	mov	r5, fp
 80065be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065c2:	f7fa fac9 	bl	8000b58 <__aeabi_d2iz>
 80065c6:	4606      	mov	r6, r0
 80065c8:	f7f9 ffac 	bl	8000524 <__aeabi_i2d>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065d4:	f7f9 fe58 	bl	8000288 <__aeabi_dsub>
 80065d8:	3630      	adds	r6, #48	; 0x30
 80065da:	f805 6b01 	strb.w	r6, [r5], #1
 80065de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065e2:	e9cd 0100 	strd	r0, r1, [sp]
 80065e6:	f7fa fa79 	bl	8000adc <__aeabi_dcmplt>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d163      	bne.n	80066b6 <_dtoa_r+0x5de>
 80065ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065f2:	2000      	movs	r0, #0
 80065f4:	4937      	ldr	r1, [pc, #220]	; (80066d4 <_dtoa_r+0x5fc>)
 80065f6:	f7f9 fe47 	bl	8000288 <__aeabi_dsub>
 80065fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065fe:	f7fa fa6d 	bl	8000adc <__aeabi_dcmplt>
 8006602:	2800      	cmp	r0, #0
 8006604:	f040 80b7 	bne.w	8006776 <_dtoa_r+0x69e>
 8006608:	eba5 030b 	sub.w	r3, r5, fp
 800660c:	429f      	cmp	r7, r3
 800660e:	f77f af7c 	ble.w	800650a <_dtoa_r+0x432>
 8006612:	2200      	movs	r2, #0
 8006614:	4b30      	ldr	r3, [pc, #192]	; (80066d8 <_dtoa_r+0x600>)
 8006616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800661a:	f7f9 ffed 	bl	80005f8 <__aeabi_dmul>
 800661e:	2200      	movs	r2, #0
 8006620:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006624:	4b2c      	ldr	r3, [pc, #176]	; (80066d8 <_dtoa_r+0x600>)
 8006626:	e9dd 0100 	ldrd	r0, r1, [sp]
 800662a:	f7f9 ffe5 	bl	80005f8 <__aeabi_dmul>
 800662e:	e9cd 0100 	strd	r0, r1, [sp]
 8006632:	e7c4      	b.n	80065be <_dtoa_r+0x4e6>
 8006634:	462a      	mov	r2, r5
 8006636:	4633      	mov	r3, r6
 8006638:	f7f9 ffde 	bl	80005f8 <__aeabi_dmul>
 800663c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006640:	eb0b 0507 	add.w	r5, fp, r7
 8006644:	465e      	mov	r6, fp
 8006646:	e9dd 0100 	ldrd	r0, r1, [sp]
 800664a:	f7fa fa85 	bl	8000b58 <__aeabi_d2iz>
 800664e:	4607      	mov	r7, r0
 8006650:	f7f9 ff68 	bl	8000524 <__aeabi_i2d>
 8006654:	3730      	adds	r7, #48	; 0x30
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800665e:	f7f9 fe13 	bl	8000288 <__aeabi_dsub>
 8006662:	f806 7b01 	strb.w	r7, [r6], #1
 8006666:	42ae      	cmp	r6, r5
 8006668:	e9cd 0100 	strd	r0, r1, [sp]
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	d126      	bne.n	80066c0 <_dtoa_r+0x5e8>
 8006672:	4b1c      	ldr	r3, [pc, #112]	; (80066e4 <_dtoa_r+0x60c>)
 8006674:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006678:	f7f9 fe08 	bl	800028c <__adddf3>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006684:	f7fa fa48 	bl	8000b18 <__aeabi_dcmpgt>
 8006688:	2800      	cmp	r0, #0
 800668a:	d174      	bne.n	8006776 <_dtoa_r+0x69e>
 800668c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006690:	2000      	movs	r0, #0
 8006692:	4914      	ldr	r1, [pc, #80]	; (80066e4 <_dtoa_r+0x60c>)
 8006694:	f7f9 fdf8 	bl	8000288 <__aeabi_dsub>
 8006698:	4602      	mov	r2, r0
 800669a:	460b      	mov	r3, r1
 800669c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066a0:	f7fa fa1c 	bl	8000adc <__aeabi_dcmplt>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	f43f af30 	beq.w	800650a <_dtoa_r+0x432>
 80066aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066ae:	2b30      	cmp	r3, #48	; 0x30
 80066b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80066b4:	d002      	beq.n	80066bc <_dtoa_r+0x5e4>
 80066b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80066ba:	e04a      	b.n	8006752 <_dtoa_r+0x67a>
 80066bc:	4615      	mov	r5, r2
 80066be:	e7f4      	b.n	80066aa <_dtoa_r+0x5d2>
 80066c0:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <_dtoa_r+0x600>)
 80066c2:	f7f9 ff99 	bl	80005f8 <__aeabi_dmul>
 80066c6:	e9cd 0100 	strd	r0, r1, [sp]
 80066ca:	e7bc      	b.n	8006646 <_dtoa_r+0x56e>
 80066cc:	080088f0 	.word	0x080088f0
 80066d0:	080088c8 	.word	0x080088c8
 80066d4:	3ff00000 	.word	0x3ff00000
 80066d8:	40240000 	.word	0x40240000
 80066dc:	401c0000 	.word	0x401c0000
 80066e0:	40140000 	.word	0x40140000
 80066e4:	3fe00000 	.word	0x3fe00000
 80066e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80066ec:	465d      	mov	r5, fp
 80066ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066f2:	4630      	mov	r0, r6
 80066f4:	4639      	mov	r1, r7
 80066f6:	f7fa f8a9 	bl	800084c <__aeabi_ddiv>
 80066fa:	f7fa fa2d 	bl	8000b58 <__aeabi_d2iz>
 80066fe:	4680      	mov	r8, r0
 8006700:	f7f9 ff10 	bl	8000524 <__aeabi_i2d>
 8006704:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006708:	f7f9 ff76 	bl	80005f8 <__aeabi_dmul>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4630      	mov	r0, r6
 8006712:	4639      	mov	r1, r7
 8006714:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006718:	f7f9 fdb6 	bl	8000288 <__aeabi_dsub>
 800671c:	f805 6b01 	strb.w	r6, [r5], #1
 8006720:	eba5 060b 	sub.w	r6, r5, fp
 8006724:	45b1      	cmp	r9, r6
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	d139      	bne.n	80067a0 <_dtoa_r+0x6c8>
 800672c:	f7f9 fdae 	bl	800028c <__adddf3>
 8006730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006734:	4606      	mov	r6, r0
 8006736:	460f      	mov	r7, r1
 8006738:	f7fa f9ee 	bl	8000b18 <__aeabi_dcmpgt>
 800673c:	b9c8      	cbnz	r0, 8006772 <_dtoa_r+0x69a>
 800673e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006742:	4630      	mov	r0, r6
 8006744:	4639      	mov	r1, r7
 8006746:	f7fa f9bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800674a:	b110      	cbz	r0, 8006752 <_dtoa_r+0x67a>
 800674c:	f018 0f01 	tst.w	r8, #1
 8006750:	d10f      	bne.n	8006772 <_dtoa_r+0x69a>
 8006752:	9904      	ldr	r1, [sp, #16]
 8006754:	4620      	mov	r0, r4
 8006756:	f000 facc 	bl	8006cf2 <_Bfree>
 800675a:	2300      	movs	r3, #0
 800675c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800675e:	702b      	strb	r3, [r5, #0]
 8006760:	f10a 0301 	add.w	r3, sl, #1
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 8241 	beq.w	8006bf0 <_dtoa_r+0xb18>
 800676e:	601d      	str	r5, [r3, #0]
 8006770:	e23e      	b.n	8006bf0 <_dtoa_r+0xb18>
 8006772:	f8cd a020 	str.w	sl, [sp, #32]
 8006776:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800677a:	2a39      	cmp	r2, #57	; 0x39
 800677c:	f105 33ff 	add.w	r3, r5, #4294967295
 8006780:	d108      	bne.n	8006794 <_dtoa_r+0x6bc>
 8006782:	459b      	cmp	fp, r3
 8006784:	d10a      	bne.n	800679c <_dtoa_r+0x6c4>
 8006786:	9b08      	ldr	r3, [sp, #32]
 8006788:	3301      	adds	r3, #1
 800678a:	9308      	str	r3, [sp, #32]
 800678c:	2330      	movs	r3, #48	; 0x30
 800678e:	f88b 3000 	strb.w	r3, [fp]
 8006792:	465b      	mov	r3, fp
 8006794:	781a      	ldrb	r2, [r3, #0]
 8006796:	3201      	adds	r2, #1
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	e78c      	b.n	80066b6 <_dtoa_r+0x5de>
 800679c:	461d      	mov	r5, r3
 800679e:	e7ea      	b.n	8006776 <_dtoa_r+0x69e>
 80067a0:	2200      	movs	r2, #0
 80067a2:	4b9b      	ldr	r3, [pc, #620]	; (8006a10 <_dtoa_r+0x938>)
 80067a4:	f7f9 ff28 	bl	80005f8 <__aeabi_dmul>
 80067a8:	2200      	movs	r2, #0
 80067aa:	2300      	movs	r3, #0
 80067ac:	4606      	mov	r6, r0
 80067ae:	460f      	mov	r7, r1
 80067b0:	f7fa f98a 	bl	8000ac8 <__aeabi_dcmpeq>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d09a      	beq.n	80066ee <_dtoa_r+0x616>
 80067b8:	e7cb      	b.n	8006752 <_dtoa_r+0x67a>
 80067ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067bc:	2a00      	cmp	r2, #0
 80067be:	f000 808b 	beq.w	80068d8 <_dtoa_r+0x800>
 80067c2:	9a06      	ldr	r2, [sp, #24]
 80067c4:	2a01      	cmp	r2, #1
 80067c6:	dc6e      	bgt.n	80068a6 <_dtoa_r+0x7ce>
 80067c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067ca:	2a00      	cmp	r2, #0
 80067cc:	d067      	beq.n	800689e <_dtoa_r+0x7c6>
 80067ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067d2:	9f07      	ldr	r7, [sp, #28]
 80067d4:	9d05      	ldr	r5, [sp, #20]
 80067d6:	9a05      	ldr	r2, [sp, #20]
 80067d8:	2101      	movs	r1, #1
 80067da:	441a      	add	r2, r3
 80067dc:	4620      	mov	r0, r4
 80067de:	9205      	str	r2, [sp, #20]
 80067e0:	4498      	add	r8, r3
 80067e2:	f000 fb26 	bl	8006e32 <__i2b>
 80067e6:	4606      	mov	r6, r0
 80067e8:	2d00      	cmp	r5, #0
 80067ea:	dd0c      	ble.n	8006806 <_dtoa_r+0x72e>
 80067ec:	f1b8 0f00 	cmp.w	r8, #0
 80067f0:	dd09      	ble.n	8006806 <_dtoa_r+0x72e>
 80067f2:	4545      	cmp	r5, r8
 80067f4:	9a05      	ldr	r2, [sp, #20]
 80067f6:	462b      	mov	r3, r5
 80067f8:	bfa8      	it	ge
 80067fa:	4643      	movge	r3, r8
 80067fc:	1ad2      	subs	r2, r2, r3
 80067fe:	9205      	str	r2, [sp, #20]
 8006800:	1aed      	subs	r5, r5, r3
 8006802:	eba8 0803 	sub.w	r8, r8, r3
 8006806:	9b07      	ldr	r3, [sp, #28]
 8006808:	b1eb      	cbz	r3, 8006846 <_dtoa_r+0x76e>
 800680a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680c:	2b00      	cmp	r3, #0
 800680e:	d067      	beq.n	80068e0 <_dtoa_r+0x808>
 8006810:	b18f      	cbz	r7, 8006836 <_dtoa_r+0x75e>
 8006812:	4631      	mov	r1, r6
 8006814:	463a      	mov	r2, r7
 8006816:	4620      	mov	r0, r4
 8006818:	f000 fbaa 	bl	8006f70 <__pow5mult>
 800681c:	9a04      	ldr	r2, [sp, #16]
 800681e:	4601      	mov	r1, r0
 8006820:	4606      	mov	r6, r0
 8006822:	4620      	mov	r0, r4
 8006824:	f000 fb0e 	bl	8006e44 <__multiply>
 8006828:	9904      	ldr	r1, [sp, #16]
 800682a:	9008      	str	r0, [sp, #32]
 800682c:	4620      	mov	r0, r4
 800682e:	f000 fa60 	bl	8006cf2 <_Bfree>
 8006832:	9b08      	ldr	r3, [sp, #32]
 8006834:	9304      	str	r3, [sp, #16]
 8006836:	9b07      	ldr	r3, [sp, #28]
 8006838:	1bda      	subs	r2, r3, r7
 800683a:	d004      	beq.n	8006846 <_dtoa_r+0x76e>
 800683c:	9904      	ldr	r1, [sp, #16]
 800683e:	4620      	mov	r0, r4
 8006840:	f000 fb96 	bl	8006f70 <__pow5mult>
 8006844:	9004      	str	r0, [sp, #16]
 8006846:	2101      	movs	r1, #1
 8006848:	4620      	mov	r0, r4
 800684a:	f000 faf2 	bl	8006e32 <__i2b>
 800684e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006850:	4607      	mov	r7, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 81d0 	beq.w	8006bf8 <_dtoa_r+0xb20>
 8006858:	461a      	mov	r2, r3
 800685a:	4601      	mov	r1, r0
 800685c:	4620      	mov	r0, r4
 800685e:	f000 fb87 	bl	8006f70 <__pow5mult>
 8006862:	9b06      	ldr	r3, [sp, #24]
 8006864:	2b01      	cmp	r3, #1
 8006866:	4607      	mov	r7, r0
 8006868:	dc40      	bgt.n	80068ec <_dtoa_r+0x814>
 800686a:	9b00      	ldr	r3, [sp, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d139      	bne.n	80068e4 <_dtoa_r+0x80c>
 8006870:	9b01      	ldr	r3, [sp, #4]
 8006872:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006876:	2b00      	cmp	r3, #0
 8006878:	d136      	bne.n	80068e8 <_dtoa_r+0x810>
 800687a:	9b01      	ldr	r3, [sp, #4]
 800687c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006880:	0d1b      	lsrs	r3, r3, #20
 8006882:	051b      	lsls	r3, r3, #20
 8006884:	b12b      	cbz	r3, 8006892 <_dtoa_r+0x7ba>
 8006886:	9b05      	ldr	r3, [sp, #20]
 8006888:	3301      	adds	r3, #1
 800688a:	9305      	str	r3, [sp, #20]
 800688c:	f108 0801 	add.w	r8, r8, #1
 8006890:	2301      	movs	r3, #1
 8006892:	9307      	str	r3, [sp, #28]
 8006894:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006896:	2b00      	cmp	r3, #0
 8006898:	d12a      	bne.n	80068f0 <_dtoa_r+0x818>
 800689a:	2001      	movs	r0, #1
 800689c:	e030      	b.n	8006900 <_dtoa_r+0x828>
 800689e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068a4:	e795      	b.n	80067d2 <_dtoa_r+0x6fa>
 80068a6:	9b07      	ldr	r3, [sp, #28]
 80068a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80068ac:	42bb      	cmp	r3, r7
 80068ae:	bfbf      	itttt	lt
 80068b0:	9b07      	ldrlt	r3, [sp, #28]
 80068b2:	9707      	strlt	r7, [sp, #28]
 80068b4:	1afa      	sublt	r2, r7, r3
 80068b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80068b8:	bfbb      	ittet	lt
 80068ba:	189b      	addlt	r3, r3, r2
 80068bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80068be:	1bdf      	subge	r7, r3, r7
 80068c0:	2700      	movlt	r7, #0
 80068c2:	f1b9 0f00 	cmp.w	r9, #0
 80068c6:	bfb5      	itete	lt
 80068c8:	9b05      	ldrlt	r3, [sp, #20]
 80068ca:	9d05      	ldrge	r5, [sp, #20]
 80068cc:	eba3 0509 	sublt.w	r5, r3, r9
 80068d0:	464b      	movge	r3, r9
 80068d2:	bfb8      	it	lt
 80068d4:	2300      	movlt	r3, #0
 80068d6:	e77e      	b.n	80067d6 <_dtoa_r+0x6fe>
 80068d8:	9f07      	ldr	r7, [sp, #28]
 80068da:	9d05      	ldr	r5, [sp, #20]
 80068dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80068de:	e783      	b.n	80067e8 <_dtoa_r+0x710>
 80068e0:	9a07      	ldr	r2, [sp, #28]
 80068e2:	e7ab      	b.n	800683c <_dtoa_r+0x764>
 80068e4:	2300      	movs	r3, #0
 80068e6:	e7d4      	b.n	8006892 <_dtoa_r+0x7ba>
 80068e8:	9b00      	ldr	r3, [sp, #0]
 80068ea:	e7d2      	b.n	8006892 <_dtoa_r+0x7ba>
 80068ec:	2300      	movs	r3, #0
 80068ee:	9307      	str	r3, [sp, #28]
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80068f6:	6918      	ldr	r0, [r3, #16]
 80068f8:	f000 fa4d 	bl	8006d96 <__hi0bits>
 80068fc:	f1c0 0020 	rsb	r0, r0, #32
 8006900:	4440      	add	r0, r8
 8006902:	f010 001f 	ands.w	r0, r0, #31
 8006906:	d047      	beq.n	8006998 <_dtoa_r+0x8c0>
 8006908:	f1c0 0320 	rsb	r3, r0, #32
 800690c:	2b04      	cmp	r3, #4
 800690e:	dd3b      	ble.n	8006988 <_dtoa_r+0x8b0>
 8006910:	9b05      	ldr	r3, [sp, #20]
 8006912:	f1c0 001c 	rsb	r0, r0, #28
 8006916:	4403      	add	r3, r0
 8006918:	9305      	str	r3, [sp, #20]
 800691a:	4405      	add	r5, r0
 800691c:	4480      	add	r8, r0
 800691e:	9b05      	ldr	r3, [sp, #20]
 8006920:	2b00      	cmp	r3, #0
 8006922:	dd05      	ble.n	8006930 <_dtoa_r+0x858>
 8006924:	461a      	mov	r2, r3
 8006926:	9904      	ldr	r1, [sp, #16]
 8006928:	4620      	mov	r0, r4
 800692a:	f000 fb6f 	bl	800700c <__lshift>
 800692e:	9004      	str	r0, [sp, #16]
 8006930:	f1b8 0f00 	cmp.w	r8, #0
 8006934:	dd05      	ble.n	8006942 <_dtoa_r+0x86a>
 8006936:	4639      	mov	r1, r7
 8006938:	4642      	mov	r2, r8
 800693a:	4620      	mov	r0, r4
 800693c:	f000 fb66 	bl	800700c <__lshift>
 8006940:	4607      	mov	r7, r0
 8006942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006944:	b353      	cbz	r3, 800699c <_dtoa_r+0x8c4>
 8006946:	4639      	mov	r1, r7
 8006948:	9804      	ldr	r0, [sp, #16]
 800694a:	f000 fbb3 	bl	80070b4 <__mcmp>
 800694e:	2800      	cmp	r0, #0
 8006950:	da24      	bge.n	800699c <_dtoa_r+0x8c4>
 8006952:	2300      	movs	r3, #0
 8006954:	220a      	movs	r2, #10
 8006956:	9904      	ldr	r1, [sp, #16]
 8006958:	4620      	mov	r0, r4
 800695a:	f000 f9e1 	bl	8006d20 <__multadd>
 800695e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006960:	9004      	str	r0, [sp, #16]
 8006962:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 814d 	beq.w	8006c06 <_dtoa_r+0xb2e>
 800696c:	2300      	movs	r3, #0
 800696e:	4631      	mov	r1, r6
 8006970:	220a      	movs	r2, #10
 8006972:	4620      	mov	r0, r4
 8006974:	f000 f9d4 	bl	8006d20 <__multadd>
 8006978:	9b02      	ldr	r3, [sp, #8]
 800697a:	2b00      	cmp	r3, #0
 800697c:	4606      	mov	r6, r0
 800697e:	dc4f      	bgt.n	8006a20 <_dtoa_r+0x948>
 8006980:	9b06      	ldr	r3, [sp, #24]
 8006982:	2b02      	cmp	r3, #2
 8006984:	dd4c      	ble.n	8006a20 <_dtoa_r+0x948>
 8006986:	e011      	b.n	80069ac <_dtoa_r+0x8d4>
 8006988:	d0c9      	beq.n	800691e <_dtoa_r+0x846>
 800698a:	9a05      	ldr	r2, [sp, #20]
 800698c:	331c      	adds	r3, #28
 800698e:	441a      	add	r2, r3
 8006990:	9205      	str	r2, [sp, #20]
 8006992:	441d      	add	r5, r3
 8006994:	4498      	add	r8, r3
 8006996:	e7c2      	b.n	800691e <_dtoa_r+0x846>
 8006998:	4603      	mov	r3, r0
 800699a:	e7f6      	b.n	800698a <_dtoa_r+0x8b2>
 800699c:	f1b9 0f00 	cmp.w	r9, #0
 80069a0:	dc38      	bgt.n	8006a14 <_dtoa_r+0x93c>
 80069a2:	9b06      	ldr	r3, [sp, #24]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	dd35      	ble.n	8006a14 <_dtoa_r+0x93c>
 80069a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80069ac:	9b02      	ldr	r3, [sp, #8]
 80069ae:	b963      	cbnz	r3, 80069ca <_dtoa_r+0x8f2>
 80069b0:	4639      	mov	r1, r7
 80069b2:	2205      	movs	r2, #5
 80069b4:	4620      	mov	r0, r4
 80069b6:	f000 f9b3 	bl	8006d20 <__multadd>
 80069ba:	4601      	mov	r1, r0
 80069bc:	4607      	mov	r7, r0
 80069be:	9804      	ldr	r0, [sp, #16]
 80069c0:	f000 fb78 	bl	80070b4 <__mcmp>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	f73f adcc 	bgt.w	8006562 <_dtoa_r+0x48a>
 80069ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069cc:	465d      	mov	r5, fp
 80069ce:	ea6f 0a03 	mvn.w	sl, r3
 80069d2:	f04f 0900 	mov.w	r9, #0
 80069d6:	4639      	mov	r1, r7
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 f98a 	bl	8006cf2 <_Bfree>
 80069de:	2e00      	cmp	r6, #0
 80069e0:	f43f aeb7 	beq.w	8006752 <_dtoa_r+0x67a>
 80069e4:	f1b9 0f00 	cmp.w	r9, #0
 80069e8:	d005      	beq.n	80069f6 <_dtoa_r+0x91e>
 80069ea:	45b1      	cmp	r9, r6
 80069ec:	d003      	beq.n	80069f6 <_dtoa_r+0x91e>
 80069ee:	4649      	mov	r1, r9
 80069f0:	4620      	mov	r0, r4
 80069f2:	f000 f97e 	bl	8006cf2 <_Bfree>
 80069f6:	4631      	mov	r1, r6
 80069f8:	4620      	mov	r0, r4
 80069fa:	f000 f97a 	bl	8006cf2 <_Bfree>
 80069fe:	e6a8      	b.n	8006752 <_dtoa_r+0x67a>
 8006a00:	2700      	movs	r7, #0
 8006a02:	463e      	mov	r6, r7
 8006a04:	e7e1      	b.n	80069ca <_dtoa_r+0x8f2>
 8006a06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006a0a:	463e      	mov	r6, r7
 8006a0c:	e5a9      	b.n	8006562 <_dtoa_r+0x48a>
 8006a0e:	bf00      	nop
 8006a10:	40240000 	.word	0x40240000
 8006a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a16:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 80fa 	beq.w	8006c14 <_dtoa_r+0xb3c>
 8006a20:	2d00      	cmp	r5, #0
 8006a22:	dd05      	ble.n	8006a30 <_dtoa_r+0x958>
 8006a24:	4631      	mov	r1, r6
 8006a26:	462a      	mov	r2, r5
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 faef 	bl	800700c <__lshift>
 8006a2e:	4606      	mov	r6, r0
 8006a30:	9b07      	ldr	r3, [sp, #28]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d04c      	beq.n	8006ad0 <_dtoa_r+0x9f8>
 8006a36:	6871      	ldr	r1, [r6, #4]
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 f926 	bl	8006c8a <_Balloc>
 8006a3e:	6932      	ldr	r2, [r6, #16]
 8006a40:	3202      	adds	r2, #2
 8006a42:	4605      	mov	r5, r0
 8006a44:	0092      	lsls	r2, r2, #2
 8006a46:	f106 010c 	add.w	r1, r6, #12
 8006a4a:	300c      	adds	r0, #12
 8006a4c:	f000 f912 	bl	8006c74 <memcpy>
 8006a50:	2201      	movs	r2, #1
 8006a52:	4629      	mov	r1, r5
 8006a54:	4620      	mov	r0, r4
 8006a56:	f000 fad9 	bl	800700c <__lshift>
 8006a5a:	9b00      	ldr	r3, [sp, #0]
 8006a5c:	f8cd b014 	str.w	fp, [sp, #20]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	46b1      	mov	r9, r6
 8006a66:	9307      	str	r3, [sp, #28]
 8006a68:	4606      	mov	r6, r0
 8006a6a:	4639      	mov	r1, r7
 8006a6c:	9804      	ldr	r0, [sp, #16]
 8006a6e:	f7ff faa7 	bl	8005fc0 <quorem>
 8006a72:	4649      	mov	r1, r9
 8006a74:	4605      	mov	r5, r0
 8006a76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a7a:	9804      	ldr	r0, [sp, #16]
 8006a7c:	f000 fb1a 	bl	80070b4 <__mcmp>
 8006a80:	4632      	mov	r2, r6
 8006a82:	9000      	str	r0, [sp, #0]
 8006a84:	4639      	mov	r1, r7
 8006a86:	4620      	mov	r0, r4
 8006a88:	f000 fb2e 	bl	80070e8 <__mdiff>
 8006a8c:	68c3      	ldr	r3, [r0, #12]
 8006a8e:	4602      	mov	r2, r0
 8006a90:	bb03      	cbnz	r3, 8006ad4 <_dtoa_r+0x9fc>
 8006a92:	4601      	mov	r1, r0
 8006a94:	9008      	str	r0, [sp, #32]
 8006a96:	9804      	ldr	r0, [sp, #16]
 8006a98:	f000 fb0c 	bl	80070b4 <__mcmp>
 8006a9c:	9a08      	ldr	r2, [sp, #32]
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	9308      	str	r3, [sp, #32]
 8006aa6:	f000 f924 	bl	8006cf2 <_Bfree>
 8006aaa:	9b08      	ldr	r3, [sp, #32]
 8006aac:	b9a3      	cbnz	r3, 8006ad8 <_dtoa_r+0xa00>
 8006aae:	9a06      	ldr	r2, [sp, #24]
 8006ab0:	b992      	cbnz	r2, 8006ad8 <_dtoa_r+0xa00>
 8006ab2:	9a07      	ldr	r2, [sp, #28]
 8006ab4:	b982      	cbnz	r2, 8006ad8 <_dtoa_r+0xa00>
 8006ab6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006aba:	d029      	beq.n	8006b10 <_dtoa_r+0xa38>
 8006abc:	9b00      	ldr	r3, [sp, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	dd01      	ble.n	8006ac6 <_dtoa_r+0x9ee>
 8006ac2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006ac6:	9b05      	ldr	r3, [sp, #20]
 8006ac8:	1c5d      	adds	r5, r3, #1
 8006aca:	f883 8000 	strb.w	r8, [r3]
 8006ace:	e782      	b.n	80069d6 <_dtoa_r+0x8fe>
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	e7c2      	b.n	8006a5a <_dtoa_r+0x982>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e7e3      	b.n	8006aa0 <_dtoa_r+0x9c8>
 8006ad8:	9a00      	ldr	r2, [sp, #0]
 8006ada:	2a00      	cmp	r2, #0
 8006adc:	db04      	blt.n	8006ae8 <_dtoa_r+0xa10>
 8006ade:	d125      	bne.n	8006b2c <_dtoa_r+0xa54>
 8006ae0:	9a06      	ldr	r2, [sp, #24]
 8006ae2:	bb1a      	cbnz	r2, 8006b2c <_dtoa_r+0xa54>
 8006ae4:	9a07      	ldr	r2, [sp, #28]
 8006ae6:	bb0a      	cbnz	r2, 8006b2c <_dtoa_r+0xa54>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	ddec      	ble.n	8006ac6 <_dtoa_r+0x9ee>
 8006aec:	2201      	movs	r2, #1
 8006aee:	9904      	ldr	r1, [sp, #16]
 8006af0:	4620      	mov	r0, r4
 8006af2:	f000 fa8b 	bl	800700c <__lshift>
 8006af6:	4639      	mov	r1, r7
 8006af8:	9004      	str	r0, [sp, #16]
 8006afa:	f000 fadb 	bl	80070b4 <__mcmp>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	dc03      	bgt.n	8006b0a <_dtoa_r+0xa32>
 8006b02:	d1e0      	bne.n	8006ac6 <_dtoa_r+0x9ee>
 8006b04:	f018 0f01 	tst.w	r8, #1
 8006b08:	d0dd      	beq.n	8006ac6 <_dtoa_r+0x9ee>
 8006b0a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b0e:	d1d8      	bne.n	8006ac2 <_dtoa_r+0x9ea>
 8006b10:	9b05      	ldr	r3, [sp, #20]
 8006b12:	9a05      	ldr	r2, [sp, #20]
 8006b14:	1c5d      	adds	r5, r3, #1
 8006b16:	2339      	movs	r3, #57	; 0x39
 8006b18:	7013      	strb	r3, [r2, #0]
 8006b1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b1e:	2b39      	cmp	r3, #57	; 0x39
 8006b20:	f105 32ff 	add.w	r2, r5, #4294967295
 8006b24:	d04f      	beq.n	8006bc6 <_dtoa_r+0xaee>
 8006b26:	3301      	adds	r3, #1
 8006b28:	7013      	strb	r3, [r2, #0]
 8006b2a:	e754      	b.n	80069d6 <_dtoa_r+0x8fe>
 8006b2c:	9a05      	ldr	r2, [sp, #20]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f102 0501 	add.w	r5, r2, #1
 8006b34:	dd06      	ble.n	8006b44 <_dtoa_r+0xa6c>
 8006b36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b3a:	d0e9      	beq.n	8006b10 <_dtoa_r+0xa38>
 8006b3c:	f108 0801 	add.w	r8, r8, #1
 8006b40:	9b05      	ldr	r3, [sp, #20]
 8006b42:	e7c2      	b.n	8006aca <_dtoa_r+0x9f2>
 8006b44:	9a02      	ldr	r2, [sp, #8]
 8006b46:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006b4a:	eba5 030b 	sub.w	r3, r5, fp
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d021      	beq.n	8006b96 <_dtoa_r+0xabe>
 8006b52:	2300      	movs	r3, #0
 8006b54:	220a      	movs	r2, #10
 8006b56:	9904      	ldr	r1, [sp, #16]
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 f8e1 	bl	8006d20 <__multadd>
 8006b5e:	45b1      	cmp	r9, r6
 8006b60:	9004      	str	r0, [sp, #16]
 8006b62:	f04f 0300 	mov.w	r3, #0
 8006b66:	f04f 020a 	mov.w	r2, #10
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	d105      	bne.n	8006b7c <_dtoa_r+0xaa4>
 8006b70:	f000 f8d6 	bl	8006d20 <__multadd>
 8006b74:	4681      	mov	r9, r0
 8006b76:	4606      	mov	r6, r0
 8006b78:	9505      	str	r5, [sp, #20]
 8006b7a:	e776      	b.n	8006a6a <_dtoa_r+0x992>
 8006b7c:	f000 f8d0 	bl	8006d20 <__multadd>
 8006b80:	4631      	mov	r1, r6
 8006b82:	4681      	mov	r9, r0
 8006b84:	2300      	movs	r3, #0
 8006b86:	220a      	movs	r2, #10
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 f8c9 	bl	8006d20 <__multadd>
 8006b8e:	4606      	mov	r6, r0
 8006b90:	e7f2      	b.n	8006b78 <_dtoa_r+0xaa0>
 8006b92:	f04f 0900 	mov.w	r9, #0
 8006b96:	2201      	movs	r2, #1
 8006b98:	9904      	ldr	r1, [sp, #16]
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f000 fa36 	bl	800700c <__lshift>
 8006ba0:	4639      	mov	r1, r7
 8006ba2:	9004      	str	r0, [sp, #16]
 8006ba4:	f000 fa86 	bl	80070b4 <__mcmp>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	dcb6      	bgt.n	8006b1a <_dtoa_r+0xa42>
 8006bac:	d102      	bne.n	8006bb4 <_dtoa_r+0xadc>
 8006bae:	f018 0f01 	tst.w	r8, #1
 8006bb2:	d1b2      	bne.n	8006b1a <_dtoa_r+0xa42>
 8006bb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bb8:	2b30      	cmp	r3, #48	; 0x30
 8006bba:	f105 32ff 	add.w	r2, r5, #4294967295
 8006bbe:	f47f af0a 	bne.w	80069d6 <_dtoa_r+0x8fe>
 8006bc2:	4615      	mov	r5, r2
 8006bc4:	e7f6      	b.n	8006bb4 <_dtoa_r+0xadc>
 8006bc6:	4593      	cmp	fp, r2
 8006bc8:	d105      	bne.n	8006bd6 <_dtoa_r+0xafe>
 8006bca:	2331      	movs	r3, #49	; 0x31
 8006bcc:	f10a 0a01 	add.w	sl, sl, #1
 8006bd0:	f88b 3000 	strb.w	r3, [fp]
 8006bd4:	e6ff      	b.n	80069d6 <_dtoa_r+0x8fe>
 8006bd6:	4615      	mov	r5, r2
 8006bd8:	e79f      	b.n	8006b1a <_dtoa_r+0xa42>
 8006bda:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006c40 <_dtoa_r+0xb68>
 8006bde:	e007      	b.n	8006bf0 <_dtoa_r+0xb18>
 8006be0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006be2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006c44 <_dtoa_r+0xb6c>
 8006be6:	b11b      	cbz	r3, 8006bf0 <_dtoa_r+0xb18>
 8006be8:	f10b 0308 	add.w	r3, fp, #8
 8006bec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	4658      	mov	r0, fp
 8006bf2:	b017      	add	sp, #92	; 0x5c
 8006bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf8:	9b06      	ldr	r3, [sp, #24]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	f77f ae35 	ble.w	800686a <_dtoa_r+0x792>
 8006c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c02:	9307      	str	r3, [sp, #28]
 8006c04:	e649      	b.n	800689a <_dtoa_r+0x7c2>
 8006c06:	9b02      	ldr	r3, [sp, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	dc03      	bgt.n	8006c14 <_dtoa_r+0xb3c>
 8006c0c:	9b06      	ldr	r3, [sp, #24]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	f73f aecc 	bgt.w	80069ac <_dtoa_r+0x8d4>
 8006c14:	465d      	mov	r5, fp
 8006c16:	4639      	mov	r1, r7
 8006c18:	9804      	ldr	r0, [sp, #16]
 8006c1a:	f7ff f9d1 	bl	8005fc0 <quorem>
 8006c1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006c22:	f805 8b01 	strb.w	r8, [r5], #1
 8006c26:	9a02      	ldr	r2, [sp, #8]
 8006c28:	eba5 030b 	sub.w	r3, r5, fp
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	ddb0      	ble.n	8006b92 <_dtoa_r+0xaba>
 8006c30:	2300      	movs	r3, #0
 8006c32:	220a      	movs	r2, #10
 8006c34:	9904      	ldr	r1, [sp, #16]
 8006c36:	4620      	mov	r0, r4
 8006c38:	f000 f872 	bl	8006d20 <__multadd>
 8006c3c:	9004      	str	r0, [sp, #16]
 8006c3e:	e7ea      	b.n	8006c16 <_dtoa_r+0xb3e>
 8006c40:	08008890 	.word	0x08008890
 8006c44:	080088b4 	.word	0x080088b4

08006c48 <_localeconv_r>:
 8006c48:	4b04      	ldr	r3, [pc, #16]	; (8006c5c <_localeconv_r+0x14>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6a18      	ldr	r0, [r3, #32]
 8006c4e:	4b04      	ldr	r3, [pc, #16]	; (8006c60 <_localeconv_r+0x18>)
 8006c50:	2800      	cmp	r0, #0
 8006c52:	bf08      	it	eq
 8006c54:	4618      	moveq	r0, r3
 8006c56:	30f0      	adds	r0, #240	; 0xf0
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	2000000c 	.word	0x2000000c
 8006c60:	20000070 	.word	0x20000070

08006c64 <malloc>:
 8006c64:	4b02      	ldr	r3, [pc, #8]	; (8006c70 <malloc+0xc>)
 8006c66:	4601      	mov	r1, r0
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	f000 bb45 	b.w	80072f8 <_malloc_r>
 8006c6e:	bf00      	nop
 8006c70:	2000000c 	.word	0x2000000c

08006c74 <memcpy>:
 8006c74:	b510      	push	{r4, lr}
 8006c76:	1e43      	subs	r3, r0, #1
 8006c78:	440a      	add	r2, r1
 8006c7a:	4291      	cmp	r1, r2
 8006c7c:	d100      	bne.n	8006c80 <memcpy+0xc>
 8006c7e:	bd10      	pop	{r4, pc}
 8006c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c88:	e7f7      	b.n	8006c7a <memcpy+0x6>

08006c8a <_Balloc>:
 8006c8a:	b570      	push	{r4, r5, r6, lr}
 8006c8c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c8e:	4604      	mov	r4, r0
 8006c90:	460e      	mov	r6, r1
 8006c92:	b93d      	cbnz	r5, 8006ca4 <_Balloc+0x1a>
 8006c94:	2010      	movs	r0, #16
 8006c96:	f7ff ffe5 	bl	8006c64 <malloc>
 8006c9a:	6260      	str	r0, [r4, #36]	; 0x24
 8006c9c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ca0:	6005      	str	r5, [r0, #0]
 8006ca2:	60c5      	str	r5, [r0, #12]
 8006ca4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006ca6:	68eb      	ldr	r3, [r5, #12]
 8006ca8:	b183      	cbz	r3, 8006ccc <_Balloc+0x42>
 8006caa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006cb2:	b9b8      	cbnz	r0, 8006ce4 <_Balloc+0x5a>
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	fa01 f506 	lsl.w	r5, r1, r6
 8006cba:	1d6a      	adds	r2, r5, #5
 8006cbc:	0092      	lsls	r2, r2, #2
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f000 fabe 	bl	8007240 <_calloc_r>
 8006cc4:	b160      	cbz	r0, 8006ce0 <_Balloc+0x56>
 8006cc6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006cca:	e00e      	b.n	8006cea <_Balloc+0x60>
 8006ccc:	2221      	movs	r2, #33	; 0x21
 8006cce:	2104      	movs	r1, #4
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f000 fab5 	bl	8007240 <_calloc_r>
 8006cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cd8:	60e8      	str	r0, [r5, #12]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e4      	bne.n	8006caa <_Balloc+0x20>
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	6802      	ldr	r2, [r0, #0]
 8006ce6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006cea:	2300      	movs	r3, #0
 8006cec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cf0:	e7f7      	b.n	8006ce2 <_Balloc+0x58>

08006cf2 <_Bfree>:
 8006cf2:	b570      	push	{r4, r5, r6, lr}
 8006cf4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	460d      	mov	r5, r1
 8006cfa:	b93c      	cbnz	r4, 8006d0c <_Bfree+0x1a>
 8006cfc:	2010      	movs	r0, #16
 8006cfe:	f7ff ffb1 	bl	8006c64 <malloc>
 8006d02:	6270      	str	r0, [r6, #36]	; 0x24
 8006d04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d08:	6004      	str	r4, [r0, #0]
 8006d0a:	60c4      	str	r4, [r0, #12]
 8006d0c:	b13d      	cbz	r5, 8006d1e <_Bfree+0x2c>
 8006d0e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006d10:	686a      	ldr	r2, [r5, #4]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d18:	6029      	str	r1, [r5, #0]
 8006d1a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}

08006d20 <__multadd>:
 8006d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d24:	690d      	ldr	r5, [r1, #16]
 8006d26:	461f      	mov	r7, r3
 8006d28:	4606      	mov	r6, r0
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	f101 0c14 	add.w	ip, r1, #20
 8006d30:	2300      	movs	r3, #0
 8006d32:	f8dc 0000 	ldr.w	r0, [ip]
 8006d36:	b281      	uxth	r1, r0
 8006d38:	fb02 7101 	mla	r1, r2, r1, r7
 8006d3c:	0c0f      	lsrs	r7, r1, #16
 8006d3e:	0c00      	lsrs	r0, r0, #16
 8006d40:	fb02 7000 	mla	r0, r2, r0, r7
 8006d44:	b289      	uxth	r1, r1
 8006d46:	3301      	adds	r3, #1
 8006d48:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006d4c:	429d      	cmp	r5, r3
 8006d4e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006d52:	f84c 1b04 	str.w	r1, [ip], #4
 8006d56:	dcec      	bgt.n	8006d32 <__multadd+0x12>
 8006d58:	b1d7      	cbz	r7, 8006d90 <__multadd+0x70>
 8006d5a:	68a3      	ldr	r3, [r4, #8]
 8006d5c:	42ab      	cmp	r3, r5
 8006d5e:	dc12      	bgt.n	8006d86 <__multadd+0x66>
 8006d60:	6861      	ldr	r1, [r4, #4]
 8006d62:	4630      	mov	r0, r6
 8006d64:	3101      	adds	r1, #1
 8006d66:	f7ff ff90 	bl	8006c8a <_Balloc>
 8006d6a:	6922      	ldr	r2, [r4, #16]
 8006d6c:	3202      	adds	r2, #2
 8006d6e:	f104 010c 	add.w	r1, r4, #12
 8006d72:	4680      	mov	r8, r0
 8006d74:	0092      	lsls	r2, r2, #2
 8006d76:	300c      	adds	r0, #12
 8006d78:	f7ff ff7c 	bl	8006c74 <memcpy>
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	4630      	mov	r0, r6
 8006d80:	f7ff ffb7 	bl	8006cf2 <_Bfree>
 8006d84:	4644      	mov	r4, r8
 8006d86:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d8a:	3501      	adds	r5, #1
 8006d8c:	615f      	str	r7, [r3, #20]
 8006d8e:	6125      	str	r5, [r4, #16]
 8006d90:	4620      	mov	r0, r4
 8006d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d96 <__hi0bits>:
 8006d96:	0c02      	lsrs	r2, r0, #16
 8006d98:	0412      	lsls	r2, r2, #16
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	b9b2      	cbnz	r2, 8006dcc <__hi0bits+0x36>
 8006d9e:	0403      	lsls	r3, r0, #16
 8006da0:	2010      	movs	r0, #16
 8006da2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006da6:	bf04      	itt	eq
 8006da8:	021b      	lsleq	r3, r3, #8
 8006daa:	3008      	addeq	r0, #8
 8006dac:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006db0:	bf04      	itt	eq
 8006db2:	011b      	lsleq	r3, r3, #4
 8006db4:	3004      	addeq	r0, #4
 8006db6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006dba:	bf04      	itt	eq
 8006dbc:	009b      	lsleq	r3, r3, #2
 8006dbe:	3002      	addeq	r0, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	db06      	blt.n	8006dd2 <__hi0bits+0x3c>
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	d503      	bpl.n	8006dd0 <__hi0bits+0x3a>
 8006dc8:	3001      	adds	r0, #1
 8006dca:	4770      	bx	lr
 8006dcc:	2000      	movs	r0, #0
 8006dce:	e7e8      	b.n	8006da2 <__hi0bits+0xc>
 8006dd0:	2020      	movs	r0, #32
 8006dd2:	4770      	bx	lr

08006dd4 <__lo0bits>:
 8006dd4:	6803      	ldr	r3, [r0, #0]
 8006dd6:	f013 0207 	ands.w	r2, r3, #7
 8006dda:	4601      	mov	r1, r0
 8006ddc:	d00b      	beq.n	8006df6 <__lo0bits+0x22>
 8006dde:	07da      	lsls	r2, r3, #31
 8006de0:	d423      	bmi.n	8006e2a <__lo0bits+0x56>
 8006de2:	0798      	lsls	r0, r3, #30
 8006de4:	bf49      	itett	mi
 8006de6:	085b      	lsrmi	r3, r3, #1
 8006de8:	089b      	lsrpl	r3, r3, #2
 8006dea:	2001      	movmi	r0, #1
 8006dec:	600b      	strmi	r3, [r1, #0]
 8006dee:	bf5c      	itt	pl
 8006df0:	600b      	strpl	r3, [r1, #0]
 8006df2:	2002      	movpl	r0, #2
 8006df4:	4770      	bx	lr
 8006df6:	b298      	uxth	r0, r3
 8006df8:	b9a8      	cbnz	r0, 8006e26 <__lo0bits+0x52>
 8006dfa:	0c1b      	lsrs	r3, r3, #16
 8006dfc:	2010      	movs	r0, #16
 8006dfe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006e02:	bf04      	itt	eq
 8006e04:	0a1b      	lsreq	r3, r3, #8
 8006e06:	3008      	addeq	r0, #8
 8006e08:	071a      	lsls	r2, r3, #28
 8006e0a:	bf04      	itt	eq
 8006e0c:	091b      	lsreq	r3, r3, #4
 8006e0e:	3004      	addeq	r0, #4
 8006e10:	079a      	lsls	r2, r3, #30
 8006e12:	bf04      	itt	eq
 8006e14:	089b      	lsreq	r3, r3, #2
 8006e16:	3002      	addeq	r0, #2
 8006e18:	07da      	lsls	r2, r3, #31
 8006e1a:	d402      	bmi.n	8006e22 <__lo0bits+0x4e>
 8006e1c:	085b      	lsrs	r3, r3, #1
 8006e1e:	d006      	beq.n	8006e2e <__lo0bits+0x5a>
 8006e20:	3001      	adds	r0, #1
 8006e22:	600b      	str	r3, [r1, #0]
 8006e24:	4770      	bx	lr
 8006e26:	4610      	mov	r0, r2
 8006e28:	e7e9      	b.n	8006dfe <__lo0bits+0x2a>
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	4770      	bx	lr
 8006e2e:	2020      	movs	r0, #32
 8006e30:	4770      	bx	lr

08006e32 <__i2b>:
 8006e32:	b510      	push	{r4, lr}
 8006e34:	460c      	mov	r4, r1
 8006e36:	2101      	movs	r1, #1
 8006e38:	f7ff ff27 	bl	8006c8a <_Balloc>
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	6144      	str	r4, [r0, #20]
 8006e40:	6102      	str	r2, [r0, #16]
 8006e42:	bd10      	pop	{r4, pc}

08006e44 <__multiply>:
 8006e44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e48:	4614      	mov	r4, r2
 8006e4a:	690a      	ldr	r2, [r1, #16]
 8006e4c:	6923      	ldr	r3, [r4, #16]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	bfb8      	it	lt
 8006e52:	460b      	movlt	r3, r1
 8006e54:	4688      	mov	r8, r1
 8006e56:	bfbc      	itt	lt
 8006e58:	46a0      	movlt	r8, r4
 8006e5a:	461c      	movlt	r4, r3
 8006e5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006e64:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e6c:	eb07 0609 	add.w	r6, r7, r9
 8006e70:	42b3      	cmp	r3, r6
 8006e72:	bfb8      	it	lt
 8006e74:	3101      	addlt	r1, #1
 8006e76:	f7ff ff08 	bl	8006c8a <_Balloc>
 8006e7a:	f100 0514 	add.w	r5, r0, #20
 8006e7e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006e82:	462b      	mov	r3, r5
 8006e84:	2200      	movs	r2, #0
 8006e86:	4573      	cmp	r3, lr
 8006e88:	d316      	bcc.n	8006eb8 <__multiply+0x74>
 8006e8a:	f104 0214 	add.w	r2, r4, #20
 8006e8e:	f108 0114 	add.w	r1, r8, #20
 8006e92:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006e96:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	9b00      	ldr	r3, [sp, #0]
 8006e9e:	9201      	str	r2, [sp, #4]
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d80c      	bhi.n	8006ebe <__multiply+0x7a>
 8006ea4:	2e00      	cmp	r6, #0
 8006ea6:	dd03      	ble.n	8006eb0 <__multiply+0x6c>
 8006ea8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d05d      	beq.n	8006f6c <__multiply+0x128>
 8006eb0:	6106      	str	r6, [r0, #16]
 8006eb2:	b003      	add	sp, #12
 8006eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb8:	f843 2b04 	str.w	r2, [r3], #4
 8006ebc:	e7e3      	b.n	8006e86 <__multiply+0x42>
 8006ebe:	f8b2 b000 	ldrh.w	fp, [r2]
 8006ec2:	f1bb 0f00 	cmp.w	fp, #0
 8006ec6:	d023      	beq.n	8006f10 <__multiply+0xcc>
 8006ec8:	4689      	mov	r9, r1
 8006eca:	46ac      	mov	ip, r5
 8006ecc:	f04f 0800 	mov.w	r8, #0
 8006ed0:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ed4:	f8dc a000 	ldr.w	sl, [ip]
 8006ed8:	b2a3      	uxth	r3, r4
 8006eda:	fa1f fa8a 	uxth.w	sl, sl
 8006ede:	fb0b a303 	mla	r3, fp, r3, sl
 8006ee2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006ee6:	f8dc 4000 	ldr.w	r4, [ip]
 8006eea:	4443      	add	r3, r8
 8006eec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006ef0:	fb0b 840a 	mla	r4, fp, sl, r8
 8006ef4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006ef8:	46e2      	mov	sl, ip
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f00:	454f      	cmp	r7, r9
 8006f02:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f06:	f84a 3b04 	str.w	r3, [sl], #4
 8006f0a:	d82b      	bhi.n	8006f64 <__multiply+0x120>
 8006f0c:	f8cc 8004 	str.w	r8, [ip, #4]
 8006f10:	9b01      	ldr	r3, [sp, #4]
 8006f12:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006f16:	3204      	adds	r2, #4
 8006f18:	f1ba 0f00 	cmp.w	sl, #0
 8006f1c:	d020      	beq.n	8006f60 <__multiply+0x11c>
 8006f1e:	682b      	ldr	r3, [r5, #0]
 8006f20:	4689      	mov	r9, r1
 8006f22:	46a8      	mov	r8, r5
 8006f24:	f04f 0b00 	mov.w	fp, #0
 8006f28:	f8b9 c000 	ldrh.w	ip, [r9]
 8006f2c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006f30:	fb0a 440c 	mla	r4, sl, ip, r4
 8006f34:	445c      	add	r4, fp
 8006f36:	46c4      	mov	ip, r8
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f3e:	f84c 3b04 	str.w	r3, [ip], #4
 8006f42:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f46:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006f4a:	0c1b      	lsrs	r3, r3, #16
 8006f4c:	fb0a b303 	mla	r3, sl, r3, fp
 8006f50:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006f54:	454f      	cmp	r7, r9
 8006f56:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006f5a:	d805      	bhi.n	8006f68 <__multiply+0x124>
 8006f5c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006f60:	3504      	adds	r5, #4
 8006f62:	e79b      	b.n	8006e9c <__multiply+0x58>
 8006f64:	46d4      	mov	ip, sl
 8006f66:	e7b3      	b.n	8006ed0 <__multiply+0x8c>
 8006f68:	46e0      	mov	r8, ip
 8006f6a:	e7dd      	b.n	8006f28 <__multiply+0xe4>
 8006f6c:	3e01      	subs	r6, #1
 8006f6e:	e799      	b.n	8006ea4 <__multiply+0x60>

08006f70 <__pow5mult>:
 8006f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f74:	4615      	mov	r5, r2
 8006f76:	f012 0203 	ands.w	r2, r2, #3
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	460f      	mov	r7, r1
 8006f7e:	d007      	beq.n	8006f90 <__pow5mult+0x20>
 8006f80:	3a01      	subs	r2, #1
 8006f82:	4c21      	ldr	r4, [pc, #132]	; (8007008 <__pow5mult+0x98>)
 8006f84:	2300      	movs	r3, #0
 8006f86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f8a:	f7ff fec9 	bl	8006d20 <__multadd>
 8006f8e:	4607      	mov	r7, r0
 8006f90:	10ad      	asrs	r5, r5, #2
 8006f92:	d035      	beq.n	8007000 <__pow5mult+0x90>
 8006f94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f96:	b93c      	cbnz	r4, 8006fa8 <__pow5mult+0x38>
 8006f98:	2010      	movs	r0, #16
 8006f9a:	f7ff fe63 	bl	8006c64 <malloc>
 8006f9e:	6270      	str	r0, [r6, #36]	; 0x24
 8006fa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fa4:	6004      	str	r4, [r0, #0]
 8006fa6:	60c4      	str	r4, [r0, #12]
 8006fa8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006fac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fb0:	b94c      	cbnz	r4, 8006fc6 <__pow5mult+0x56>
 8006fb2:	f240 2171 	movw	r1, #625	; 0x271
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f7ff ff3b 	bl	8006e32 <__i2b>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	6003      	str	r3, [r0, #0]
 8006fc6:	f04f 0800 	mov.w	r8, #0
 8006fca:	07eb      	lsls	r3, r5, #31
 8006fcc:	d50a      	bpl.n	8006fe4 <__pow5mult+0x74>
 8006fce:	4639      	mov	r1, r7
 8006fd0:	4622      	mov	r2, r4
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f7ff ff36 	bl	8006e44 <__multiply>
 8006fd8:	4639      	mov	r1, r7
 8006fda:	4681      	mov	r9, r0
 8006fdc:	4630      	mov	r0, r6
 8006fde:	f7ff fe88 	bl	8006cf2 <_Bfree>
 8006fe2:	464f      	mov	r7, r9
 8006fe4:	106d      	asrs	r5, r5, #1
 8006fe6:	d00b      	beq.n	8007000 <__pow5mult+0x90>
 8006fe8:	6820      	ldr	r0, [r4, #0]
 8006fea:	b938      	cbnz	r0, 8006ffc <__pow5mult+0x8c>
 8006fec:	4622      	mov	r2, r4
 8006fee:	4621      	mov	r1, r4
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f7ff ff27 	bl	8006e44 <__multiply>
 8006ff6:	6020      	str	r0, [r4, #0]
 8006ff8:	f8c0 8000 	str.w	r8, [r0]
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	e7e4      	b.n	8006fca <__pow5mult+0x5a>
 8007000:	4638      	mov	r0, r7
 8007002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007006:	bf00      	nop
 8007008:	080089b8 	.word	0x080089b8

0800700c <__lshift>:
 800700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007010:	460c      	mov	r4, r1
 8007012:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007016:	6923      	ldr	r3, [r4, #16]
 8007018:	6849      	ldr	r1, [r1, #4]
 800701a:	eb0a 0903 	add.w	r9, sl, r3
 800701e:	68a3      	ldr	r3, [r4, #8]
 8007020:	4607      	mov	r7, r0
 8007022:	4616      	mov	r6, r2
 8007024:	f109 0501 	add.w	r5, r9, #1
 8007028:	42ab      	cmp	r3, r5
 800702a:	db32      	blt.n	8007092 <__lshift+0x86>
 800702c:	4638      	mov	r0, r7
 800702e:	f7ff fe2c 	bl	8006c8a <_Balloc>
 8007032:	2300      	movs	r3, #0
 8007034:	4680      	mov	r8, r0
 8007036:	f100 0114 	add.w	r1, r0, #20
 800703a:	461a      	mov	r2, r3
 800703c:	4553      	cmp	r3, sl
 800703e:	db2b      	blt.n	8007098 <__lshift+0x8c>
 8007040:	6920      	ldr	r0, [r4, #16]
 8007042:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007046:	f104 0314 	add.w	r3, r4, #20
 800704a:	f016 021f 	ands.w	r2, r6, #31
 800704e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007052:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007056:	d025      	beq.n	80070a4 <__lshift+0x98>
 8007058:	f1c2 0e20 	rsb	lr, r2, #32
 800705c:	2000      	movs	r0, #0
 800705e:	681e      	ldr	r6, [r3, #0]
 8007060:	468a      	mov	sl, r1
 8007062:	4096      	lsls	r6, r2
 8007064:	4330      	orrs	r0, r6
 8007066:	f84a 0b04 	str.w	r0, [sl], #4
 800706a:	f853 0b04 	ldr.w	r0, [r3], #4
 800706e:	459c      	cmp	ip, r3
 8007070:	fa20 f00e 	lsr.w	r0, r0, lr
 8007074:	d814      	bhi.n	80070a0 <__lshift+0x94>
 8007076:	6048      	str	r0, [r1, #4]
 8007078:	b108      	cbz	r0, 800707e <__lshift+0x72>
 800707a:	f109 0502 	add.w	r5, r9, #2
 800707e:	3d01      	subs	r5, #1
 8007080:	4638      	mov	r0, r7
 8007082:	f8c8 5010 	str.w	r5, [r8, #16]
 8007086:	4621      	mov	r1, r4
 8007088:	f7ff fe33 	bl	8006cf2 <_Bfree>
 800708c:	4640      	mov	r0, r8
 800708e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007092:	3101      	adds	r1, #1
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	e7c7      	b.n	8007028 <__lshift+0x1c>
 8007098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800709c:	3301      	adds	r3, #1
 800709e:	e7cd      	b.n	800703c <__lshift+0x30>
 80070a0:	4651      	mov	r1, sl
 80070a2:	e7dc      	b.n	800705e <__lshift+0x52>
 80070a4:	3904      	subs	r1, #4
 80070a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80070aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80070ae:	459c      	cmp	ip, r3
 80070b0:	d8f9      	bhi.n	80070a6 <__lshift+0x9a>
 80070b2:	e7e4      	b.n	800707e <__lshift+0x72>

080070b4 <__mcmp>:
 80070b4:	6903      	ldr	r3, [r0, #16]
 80070b6:	690a      	ldr	r2, [r1, #16]
 80070b8:	1a9b      	subs	r3, r3, r2
 80070ba:	b530      	push	{r4, r5, lr}
 80070bc:	d10c      	bne.n	80070d8 <__mcmp+0x24>
 80070be:	0092      	lsls	r2, r2, #2
 80070c0:	3014      	adds	r0, #20
 80070c2:	3114      	adds	r1, #20
 80070c4:	1884      	adds	r4, r0, r2
 80070c6:	4411      	add	r1, r2
 80070c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070d0:	4295      	cmp	r5, r2
 80070d2:	d003      	beq.n	80070dc <__mcmp+0x28>
 80070d4:	d305      	bcc.n	80070e2 <__mcmp+0x2e>
 80070d6:	2301      	movs	r3, #1
 80070d8:	4618      	mov	r0, r3
 80070da:	bd30      	pop	{r4, r5, pc}
 80070dc:	42a0      	cmp	r0, r4
 80070de:	d3f3      	bcc.n	80070c8 <__mcmp+0x14>
 80070e0:	e7fa      	b.n	80070d8 <__mcmp+0x24>
 80070e2:	f04f 33ff 	mov.w	r3, #4294967295
 80070e6:	e7f7      	b.n	80070d8 <__mcmp+0x24>

080070e8 <__mdiff>:
 80070e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ec:	460d      	mov	r5, r1
 80070ee:	4607      	mov	r7, r0
 80070f0:	4611      	mov	r1, r2
 80070f2:	4628      	mov	r0, r5
 80070f4:	4614      	mov	r4, r2
 80070f6:	f7ff ffdd 	bl	80070b4 <__mcmp>
 80070fa:	1e06      	subs	r6, r0, #0
 80070fc:	d108      	bne.n	8007110 <__mdiff+0x28>
 80070fe:	4631      	mov	r1, r6
 8007100:	4638      	mov	r0, r7
 8007102:	f7ff fdc2 	bl	8006c8a <_Balloc>
 8007106:	2301      	movs	r3, #1
 8007108:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800710c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007110:	bfa4      	itt	ge
 8007112:	4623      	movge	r3, r4
 8007114:	462c      	movge	r4, r5
 8007116:	4638      	mov	r0, r7
 8007118:	6861      	ldr	r1, [r4, #4]
 800711a:	bfa6      	itte	ge
 800711c:	461d      	movge	r5, r3
 800711e:	2600      	movge	r6, #0
 8007120:	2601      	movlt	r6, #1
 8007122:	f7ff fdb2 	bl	8006c8a <_Balloc>
 8007126:	692b      	ldr	r3, [r5, #16]
 8007128:	60c6      	str	r6, [r0, #12]
 800712a:	6926      	ldr	r6, [r4, #16]
 800712c:	f105 0914 	add.w	r9, r5, #20
 8007130:	f104 0214 	add.w	r2, r4, #20
 8007134:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007138:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800713c:	f100 0514 	add.w	r5, r0, #20
 8007140:	f04f 0e00 	mov.w	lr, #0
 8007144:	f852 ab04 	ldr.w	sl, [r2], #4
 8007148:	f859 4b04 	ldr.w	r4, [r9], #4
 800714c:	fa1e f18a 	uxtah	r1, lr, sl
 8007150:	b2a3      	uxth	r3, r4
 8007152:	1ac9      	subs	r1, r1, r3
 8007154:	0c23      	lsrs	r3, r4, #16
 8007156:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800715a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800715e:	b289      	uxth	r1, r1
 8007160:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007164:	45c8      	cmp	r8, r9
 8007166:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800716a:	4694      	mov	ip, r2
 800716c:	f845 3b04 	str.w	r3, [r5], #4
 8007170:	d8e8      	bhi.n	8007144 <__mdiff+0x5c>
 8007172:	45bc      	cmp	ip, r7
 8007174:	d304      	bcc.n	8007180 <__mdiff+0x98>
 8007176:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800717a:	b183      	cbz	r3, 800719e <__mdiff+0xb6>
 800717c:	6106      	str	r6, [r0, #16]
 800717e:	e7c5      	b.n	800710c <__mdiff+0x24>
 8007180:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007184:	fa1e f381 	uxtah	r3, lr, r1
 8007188:	141a      	asrs	r2, r3, #16
 800718a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800718e:	b29b      	uxth	r3, r3
 8007190:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007194:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007198:	f845 3b04 	str.w	r3, [r5], #4
 800719c:	e7e9      	b.n	8007172 <__mdiff+0x8a>
 800719e:	3e01      	subs	r6, #1
 80071a0:	e7e9      	b.n	8007176 <__mdiff+0x8e>

080071a2 <__d2b>:
 80071a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071a6:	460e      	mov	r6, r1
 80071a8:	2101      	movs	r1, #1
 80071aa:	ec59 8b10 	vmov	r8, r9, d0
 80071ae:	4615      	mov	r5, r2
 80071b0:	f7ff fd6b 	bl	8006c8a <_Balloc>
 80071b4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80071b8:	4607      	mov	r7, r0
 80071ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071be:	bb34      	cbnz	r4, 800720e <__d2b+0x6c>
 80071c0:	9301      	str	r3, [sp, #4]
 80071c2:	f1b8 0300 	subs.w	r3, r8, #0
 80071c6:	d027      	beq.n	8007218 <__d2b+0x76>
 80071c8:	a802      	add	r0, sp, #8
 80071ca:	f840 3d08 	str.w	r3, [r0, #-8]!
 80071ce:	f7ff fe01 	bl	8006dd4 <__lo0bits>
 80071d2:	9900      	ldr	r1, [sp, #0]
 80071d4:	b1f0      	cbz	r0, 8007214 <__d2b+0x72>
 80071d6:	9a01      	ldr	r2, [sp, #4]
 80071d8:	f1c0 0320 	rsb	r3, r0, #32
 80071dc:	fa02 f303 	lsl.w	r3, r2, r3
 80071e0:	430b      	orrs	r3, r1
 80071e2:	40c2      	lsrs	r2, r0
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	9201      	str	r2, [sp, #4]
 80071e8:	9b01      	ldr	r3, [sp, #4]
 80071ea:	61bb      	str	r3, [r7, #24]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	bf14      	ite	ne
 80071f0:	2102      	movne	r1, #2
 80071f2:	2101      	moveq	r1, #1
 80071f4:	6139      	str	r1, [r7, #16]
 80071f6:	b1c4      	cbz	r4, 800722a <__d2b+0x88>
 80071f8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80071fc:	4404      	add	r4, r0
 80071fe:	6034      	str	r4, [r6, #0]
 8007200:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007204:	6028      	str	r0, [r5, #0]
 8007206:	4638      	mov	r0, r7
 8007208:	b003      	add	sp, #12
 800720a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800720e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007212:	e7d5      	b.n	80071c0 <__d2b+0x1e>
 8007214:	6179      	str	r1, [r7, #20]
 8007216:	e7e7      	b.n	80071e8 <__d2b+0x46>
 8007218:	a801      	add	r0, sp, #4
 800721a:	f7ff fddb 	bl	8006dd4 <__lo0bits>
 800721e:	9b01      	ldr	r3, [sp, #4]
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	2101      	movs	r1, #1
 8007224:	6139      	str	r1, [r7, #16]
 8007226:	3020      	adds	r0, #32
 8007228:	e7e5      	b.n	80071f6 <__d2b+0x54>
 800722a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800722e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007232:	6030      	str	r0, [r6, #0]
 8007234:	6918      	ldr	r0, [r3, #16]
 8007236:	f7ff fdae 	bl	8006d96 <__hi0bits>
 800723a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800723e:	e7e1      	b.n	8007204 <__d2b+0x62>

08007240 <_calloc_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	fb02 f401 	mul.w	r4, r2, r1
 8007246:	4621      	mov	r1, r4
 8007248:	f000 f856 	bl	80072f8 <_malloc_r>
 800724c:	4605      	mov	r5, r0
 800724e:	b118      	cbz	r0, 8007258 <_calloc_r+0x18>
 8007250:	4622      	mov	r2, r4
 8007252:	2100      	movs	r1, #0
 8007254:	f7fe fa30 	bl	80056b8 <memset>
 8007258:	4628      	mov	r0, r5
 800725a:	bd38      	pop	{r3, r4, r5, pc}

0800725c <_free_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	4605      	mov	r5, r0
 8007260:	2900      	cmp	r1, #0
 8007262:	d045      	beq.n	80072f0 <_free_r+0x94>
 8007264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007268:	1f0c      	subs	r4, r1, #4
 800726a:	2b00      	cmp	r3, #0
 800726c:	bfb8      	it	lt
 800726e:	18e4      	addlt	r4, r4, r3
 8007270:	f000 fa29 	bl	80076c6 <__malloc_lock>
 8007274:	4a1f      	ldr	r2, [pc, #124]	; (80072f4 <_free_r+0x98>)
 8007276:	6813      	ldr	r3, [r2, #0]
 8007278:	4610      	mov	r0, r2
 800727a:	b933      	cbnz	r3, 800728a <_free_r+0x2e>
 800727c:	6063      	str	r3, [r4, #4]
 800727e:	6014      	str	r4, [r2, #0]
 8007280:	4628      	mov	r0, r5
 8007282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007286:	f000 ba1f 	b.w	80076c8 <__malloc_unlock>
 800728a:	42a3      	cmp	r3, r4
 800728c:	d90c      	bls.n	80072a8 <_free_r+0x4c>
 800728e:	6821      	ldr	r1, [r4, #0]
 8007290:	1862      	adds	r2, r4, r1
 8007292:	4293      	cmp	r3, r2
 8007294:	bf04      	itt	eq
 8007296:	681a      	ldreq	r2, [r3, #0]
 8007298:	685b      	ldreq	r3, [r3, #4]
 800729a:	6063      	str	r3, [r4, #4]
 800729c:	bf04      	itt	eq
 800729e:	1852      	addeq	r2, r2, r1
 80072a0:	6022      	streq	r2, [r4, #0]
 80072a2:	6004      	str	r4, [r0, #0]
 80072a4:	e7ec      	b.n	8007280 <_free_r+0x24>
 80072a6:	4613      	mov	r3, r2
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	b10a      	cbz	r2, 80072b0 <_free_r+0x54>
 80072ac:	42a2      	cmp	r2, r4
 80072ae:	d9fa      	bls.n	80072a6 <_free_r+0x4a>
 80072b0:	6819      	ldr	r1, [r3, #0]
 80072b2:	1858      	adds	r0, r3, r1
 80072b4:	42a0      	cmp	r0, r4
 80072b6:	d10b      	bne.n	80072d0 <_free_r+0x74>
 80072b8:	6820      	ldr	r0, [r4, #0]
 80072ba:	4401      	add	r1, r0
 80072bc:	1858      	adds	r0, r3, r1
 80072be:	4282      	cmp	r2, r0
 80072c0:	6019      	str	r1, [r3, #0]
 80072c2:	d1dd      	bne.n	8007280 <_free_r+0x24>
 80072c4:	6810      	ldr	r0, [r2, #0]
 80072c6:	6852      	ldr	r2, [r2, #4]
 80072c8:	605a      	str	r2, [r3, #4]
 80072ca:	4401      	add	r1, r0
 80072cc:	6019      	str	r1, [r3, #0]
 80072ce:	e7d7      	b.n	8007280 <_free_r+0x24>
 80072d0:	d902      	bls.n	80072d8 <_free_r+0x7c>
 80072d2:	230c      	movs	r3, #12
 80072d4:	602b      	str	r3, [r5, #0]
 80072d6:	e7d3      	b.n	8007280 <_free_r+0x24>
 80072d8:	6820      	ldr	r0, [r4, #0]
 80072da:	1821      	adds	r1, r4, r0
 80072dc:	428a      	cmp	r2, r1
 80072de:	bf04      	itt	eq
 80072e0:	6811      	ldreq	r1, [r2, #0]
 80072e2:	6852      	ldreq	r2, [r2, #4]
 80072e4:	6062      	str	r2, [r4, #4]
 80072e6:	bf04      	itt	eq
 80072e8:	1809      	addeq	r1, r1, r0
 80072ea:	6021      	streq	r1, [r4, #0]
 80072ec:	605c      	str	r4, [r3, #4]
 80072ee:	e7c7      	b.n	8007280 <_free_r+0x24>
 80072f0:	bd38      	pop	{r3, r4, r5, pc}
 80072f2:	bf00      	nop
 80072f4:	200001f8 	.word	0x200001f8

080072f8 <_malloc_r>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	1ccd      	adds	r5, r1, #3
 80072fc:	f025 0503 	bic.w	r5, r5, #3
 8007300:	3508      	adds	r5, #8
 8007302:	2d0c      	cmp	r5, #12
 8007304:	bf38      	it	cc
 8007306:	250c      	movcc	r5, #12
 8007308:	2d00      	cmp	r5, #0
 800730a:	4606      	mov	r6, r0
 800730c:	db01      	blt.n	8007312 <_malloc_r+0x1a>
 800730e:	42a9      	cmp	r1, r5
 8007310:	d903      	bls.n	800731a <_malloc_r+0x22>
 8007312:	230c      	movs	r3, #12
 8007314:	6033      	str	r3, [r6, #0]
 8007316:	2000      	movs	r0, #0
 8007318:	bd70      	pop	{r4, r5, r6, pc}
 800731a:	f000 f9d4 	bl	80076c6 <__malloc_lock>
 800731e:	4a21      	ldr	r2, [pc, #132]	; (80073a4 <_malloc_r+0xac>)
 8007320:	6814      	ldr	r4, [r2, #0]
 8007322:	4621      	mov	r1, r4
 8007324:	b991      	cbnz	r1, 800734c <_malloc_r+0x54>
 8007326:	4c20      	ldr	r4, [pc, #128]	; (80073a8 <_malloc_r+0xb0>)
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	b91b      	cbnz	r3, 8007334 <_malloc_r+0x3c>
 800732c:	4630      	mov	r0, r6
 800732e:	f000 f98f 	bl	8007650 <_sbrk_r>
 8007332:	6020      	str	r0, [r4, #0]
 8007334:	4629      	mov	r1, r5
 8007336:	4630      	mov	r0, r6
 8007338:	f000 f98a 	bl	8007650 <_sbrk_r>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d124      	bne.n	800738a <_malloc_r+0x92>
 8007340:	230c      	movs	r3, #12
 8007342:	6033      	str	r3, [r6, #0]
 8007344:	4630      	mov	r0, r6
 8007346:	f000 f9bf 	bl	80076c8 <__malloc_unlock>
 800734a:	e7e4      	b.n	8007316 <_malloc_r+0x1e>
 800734c:	680b      	ldr	r3, [r1, #0]
 800734e:	1b5b      	subs	r3, r3, r5
 8007350:	d418      	bmi.n	8007384 <_malloc_r+0x8c>
 8007352:	2b0b      	cmp	r3, #11
 8007354:	d90f      	bls.n	8007376 <_malloc_r+0x7e>
 8007356:	600b      	str	r3, [r1, #0]
 8007358:	50cd      	str	r5, [r1, r3]
 800735a:	18cc      	adds	r4, r1, r3
 800735c:	4630      	mov	r0, r6
 800735e:	f000 f9b3 	bl	80076c8 <__malloc_unlock>
 8007362:	f104 000b 	add.w	r0, r4, #11
 8007366:	1d23      	adds	r3, r4, #4
 8007368:	f020 0007 	bic.w	r0, r0, #7
 800736c:	1ac3      	subs	r3, r0, r3
 800736e:	d0d3      	beq.n	8007318 <_malloc_r+0x20>
 8007370:	425a      	negs	r2, r3
 8007372:	50e2      	str	r2, [r4, r3]
 8007374:	e7d0      	b.n	8007318 <_malloc_r+0x20>
 8007376:	428c      	cmp	r4, r1
 8007378:	684b      	ldr	r3, [r1, #4]
 800737a:	bf16      	itet	ne
 800737c:	6063      	strne	r3, [r4, #4]
 800737e:	6013      	streq	r3, [r2, #0]
 8007380:	460c      	movne	r4, r1
 8007382:	e7eb      	b.n	800735c <_malloc_r+0x64>
 8007384:	460c      	mov	r4, r1
 8007386:	6849      	ldr	r1, [r1, #4]
 8007388:	e7cc      	b.n	8007324 <_malloc_r+0x2c>
 800738a:	1cc4      	adds	r4, r0, #3
 800738c:	f024 0403 	bic.w	r4, r4, #3
 8007390:	42a0      	cmp	r0, r4
 8007392:	d005      	beq.n	80073a0 <_malloc_r+0xa8>
 8007394:	1a21      	subs	r1, r4, r0
 8007396:	4630      	mov	r0, r6
 8007398:	f000 f95a 	bl	8007650 <_sbrk_r>
 800739c:	3001      	adds	r0, #1
 800739e:	d0cf      	beq.n	8007340 <_malloc_r+0x48>
 80073a0:	6025      	str	r5, [r4, #0]
 80073a2:	e7db      	b.n	800735c <_malloc_r+0x64>
 80073a4:	200001f8 	.word	0x200001f8
 80073a8:	200001fc 	.word	0x200001fc

080073ac <__ssputs_r>:
 80073ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073b0:	688e      	ldr	r6, [r1, #8]
 80073b2:	429e      	cmp	r6, r3
 80073b4:	4682      	mov	sl, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	4690      	mov	r8, r2
 80073ba:	4699      	mov	r9, r3
 80073bc:	d837      	bhi.n	800742e <__ssputs_r+0x82>
 80073be:	898a      	ldrh	r2, [r1, #12]
 80073c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073c4:	d031      	beq.n	800742a <__ssputs_r+0x7e>
 80073c6:	6825      	ldr	r5, [r4, #0]
 80073c8:	6909      	ldr	r1, [r1, #16]
 80073ca:	1a6f      	subs	r7, r5, r1
 80073cc:	6965      	ldr	r5, [r4, #20]
 80073ce:	2302      	movs	r3, #2
 80073d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80073d8:	f109 0301 	add.w	r3, r9, #1
 80073dc:	443b      	add	r3, r7
 80073de:	429d      	cmp	r5, r3
 80073e0:	bf38      	it	cc
 80073e2:	461d      	movcc	r5, r3
 80073e4:	0553      	lsls	r3, r2, #21
 80073e6:	d530      	bpl.n	800744a <__ssputs_r+0x9e>
 80073e8:	4629      	mov	r1, r5
 80073ea:	f7ff ff85 	bl	80072f8 <_malloc_r>
 80073ee:	4606      	mov	r6, r0
 80073f0:	b950      	cbnz	r0, 8007408 <__ssputs_r+0x5c>
 80073f2:	230c      	movs	r3, #12
 80073f4:	f8ca 3000 	str.w	r3, [sl]
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fe:	81a3      	strh	r3, [r4, #12]
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007408:	463a      	mov	r2, r7
 800740a:	6921      	ldr	r1, [r4, #16]
 800740c:	f7ff fc32 	bl	8006c74 <memcpy>
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800741a:	81a3      	strh	r3, [r4, #12]
 800741c:	6126      	str	r6, [r4, #16]
 800741e:	6165      	str	r5, [r4, #20]
 8007420:	443e      	add	r6, r7
 8007422:	1bed      	subs	r5, r5, r7
 8007424:	6026      	str	r6, [r4, #0]
 8007426:	60a5      	str	r5, [r4, #8]
 8007428:	464e      	mov	r6, r9
 800742a:	454e      	cmp	r6, r9
 800742c:	d900      	bls.n	8007430 <__ssputs_r+0x84>
 800742e:	464e      	mov	r6, r9
 8007430:	4632      	mov	r2, r6
 8007432:	4641      	mov	r1, r8
 8007434:	6820      	ldr	r0, [r4, #0]
 8007436:	f000 f92d 	bl	8007694 <memmove>
 800743a:	68a3      	ldr	r3, [r4, #8]
 800743c:	1b9b      	subs	r3, r3, r6
 800743e:	60a3      	str	r3, [r4, #8]
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	441e      	add	r6, r3
 8007444:	6026      	str	r6, [r4, #0]
 8007446:	2000      	movs	r0, #0
 8007448:	e7dc      	b.n	8007404 <__ssputs_r+0x58>
 800744a:	462a      	mov	r2, r5
 800744c:	f000 f93d 	bl	80076ca <_realloc_r>
 8007450:	4606      	mov	r6, r0
 8007452:	2800      	cmp	r0, #0
 8007454:	d1e2      	bne.n	800741c <__ssputs_r+0x70>
 8007456:	6921      	ldr	r1, [r4, #16]
 8007458:	4650      	mov	r0, sl
 800745a:	f7ff feff 	bl	800725c <_free_r>
 800745e:	e7c8      	b.n	80073f2 <__ssputs_r+0x46>

08007460 <_svfiprintf_r>:
 8007460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	461d      	mov	r5, r3
 8007466:	898b      	ldrh	r3, [r1, #12]
 8007468:	061f      	lsls	r7, r3, #24
 800746a:	b09d      	sub	sp, #116	; 0x74
 800746c:	4680      	mov	r8, r0
 800746e:	460c      	mov	r4, r1
 8007470:	4616      	mov	r6, r2
 8007472:	d50f      	bpl.n	8007494 <_svfiprintf_r+0x34>
 8007474:	690b      	ldr	r3, [r1, #16]
 8007476:	b96b      	cbnz	r3, 8007494 <_svfiprintf_r+0x34>
 8007478:	2140      	movs	r1, #64	; 0x40
 800747a:	f7ff ff3d 	bl	80072f8 <_malloc_r>
 800747e:	6020      	str	r0, [r4, #0]
 8007480:	6120      	str	r0, [r4, #16]
 8007482:	b928      	cbnz	r0, 8007490 <_svfiprintf_r+0x30>
 8007484:	230c      	movs	r3, #12
 8007486:	f8c8 3000 	str.w	r3, [r8]
 800748a:	f04f 30ff 	mov.w	r0, #4294967295
 800748e:	e0c8      	b.n	8007622 <_svfiprintf_r+0x1c2>
 8007490:	2340      	movs	r3, #64	; 0x40
 8007492:	6163      	str	r3, [r4, #20]
 8007494:	2300      	movs	r3, #0
 8007496:	9309      	str	r3, [sp, #36]	; 0x24
 8007498:	2320      	movs	r3, #32
 800749a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800749e:	2330      	movs	r3, #48	; 0x30
 80074a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074a4:	9503      	str	r5, [sp, #12]
 80074a6:	f04f 0b01 	mov.w	fp, #1
 80074aa:	4637      	mov	r7, r6
 80074ac:	463d      	mov	r5, r7
 80074ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80074b2:	b10b      	cbz	r3, 80074b8 <_svfiprintf_r+0x58>
 80074b4:	2b25      	cmp	r3, #37	; 0x25
 80074b6:	d13e      	bne.n	8007536 <_svfiprintf_r+0xd6>
 80074b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80074bc:	d00b      	beq.n	80074d6 <_svfiprintf_r+0x76>
 80074be:	4653      	mov	r3, sl
 80074c0:	4632      	mov	r2, r6
 80074c2:	4621      	mov	r1, r4
 80074c4:	4640      	mov	r0, r8
 80074c6:	f7ff ff71 	bl	80073ac <__ssputs_r>
 80074ca:	3001      	adds	r0, #1
 80074cc:	f000 80a4 	beq.w	8007618 <_svfiprintf_r+0x1b8>
 80074d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d2:	4453      	add	r3, sl
 80074d4:	9309      	str	r3, [sp, #36]	; 0x24
 80074d6:	783b      	ldrb	r3, [r7, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 809d 	beq.w	8007618 <_svfiprintf_r+0x1b8>
 80074de:	2300      	movs	r3, #0
 80074e0:	f04f 32ff 	mov.w	r2, #4294967295
 80074e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074e8:	9304      	str	r3, [sp, #16]
 80074ea:	9307      	str	r3, [sp, #28]
 80074ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074f0:	931a      	str	r3, [sp, #104]	; 0x68
 80074f2:	462f      	mov	r7, r5
 80074f4:	2205      	movs	r2, #5
 80074f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80074fa:	4850      	ldr	r0, [pc, #320]	; (800763c <_svfiprintf_r+0x1dc>)
 80074fc:	f7f8 fe70 	bl	80001e0 <memchr>
 8007500:	9b04      	ldr	r3, [sp, #16]
 8007502:	b9d0      	cbnz	r0, 800753a <_svfiprintf_r+0xda>
 8007504:	06d9      	lsls	r1, r3, #27
 8007506:	bf44      	itt	mi
 8007508:	2220      	movmi	r2, #32
 800750a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800750e:	071a      	lsls	r2, r3, #28
 8007510:	bf44      	itt	mi
 8007512:	222b      	movmi	r2, #43	; 0x2b
 8007514:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007518:	782a      	ldrb	r2, [r5, #0]
 800751a:	2a2a      	cmp	r2, #42	; 0x2a
 800751c:	d015      	beq.n	800754a <_svfiprintf_r+0xea>
 800751e:	9a07      	ldr	r2, [sp, #28]
 8007520:	462f      	mov	r7, r5
 8007522:	2000      	movs	r0, #0
 8007524:	250a      	movs	r5, #10
 8007526:	4639      	mov	r1, r7
 8007528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800752c:	3b30      	subs	r3, #48	; 0x30
 800752e:	2b09      	cmp	r3, #9
 8007530:	d94d      	bls.n	80075ce <_svfiprintf_r+0x16e>
 8007532:	b1b8      	cbz	r0, 8007564 <_svfiprintf_r+0x104>
 8007534:	e00f      	b.n	8007556 <_svfiprintf_r+0xf6>
 8007536:	462f      	mov	r7, r5
 8007538:	e7b8      	b.n	80074ac <_svfiprintf_r+0x4c>
 800753a:	4a40      	ldr	r2, [pc, #256]	; (800763c <_svfiprintf_r+0x1dc>)
 800753c:	1a80      	subs	r0, r0, r2
 800753e:	fa0b f000 	lsl.w	r0, fp, r0
 8007542:	4318      	orrs	r0, r3
 8007544:	9004      	str	r0, [sp, #16]
 8007546:	463d      	mov	r5, r7
 8007548:	e7d3      	b.n	80074f2 <_svfiprintf_r+0x92>
 800754a:	9a03      	ldr	r2, [sp, #12]
 800754c:	1d11      	adds	r1, r2, #4
 800754e:	6812      	ldr	r2, [r2, #0]
 8007550:	9103      	str	r1, [sp, #12]
 8007552:	2a00      	cmp	r2, #0
 8007554:	db01      	blt.n	800755a <_svfiprintf_r+0xfa>
 8007556:	9207      	str	r2, [sp, #28]
 8007558:	e004      	b.n	8007564 <_svfiprintf_r+0x104>
 800755a:	4252      	negs	r2, r2
 800755c:	f043 0302 	orr.w	r3, r3, #2
 8007560:	9207      	str	r2, [sp, #28]
 8007562:	9304      	str	r3, [sp, #16]
 8007564:	783b      	ldrb	r3, [r7, #0]
 8007566:	2b2e      	cmp	r3, #46	; 0x2e
 8007568:	d10c      	bne.n	8007584 <_svfiprintf_r+0x124>
 800756a:	787b      	ldrb	r3, [r7, #1]
 800756c:	2b2a      	cmp	r3, #42	; 0x2a
 800756e:	d133      	bne.n	80075d8 <_svfiprintf_r+0x178>
 8007570:	9b03      	ldr	r3, [sp, #12]
 8007572:	1d1a      	adds	r2, r3, #4
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	9203      	str	r2, [sp, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	bfb8      	it	lt
 800757c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007580:	3702      	adds	r7, #2
 8007582:	9305      	str	r3, [sp, #20]
 8007584:	4d2e      	ldr	r5, [pc, #184]	; (8007640 <_svfiprintf_r+0x1e0>)
 8007586:	7839      	ldrb	r1, [r7, #0]
 8007588:	2203      	movs	r2, #3
 800758a:	4628      	mov	r0, r5
 800758c:	f7f8 fe28 	bl	80001e0 <memchr>
 8007590:	b138      	cbz	r0, 80075a2 <_svfiprintf_r+0x142>
 8007592:	2340      	movs	r3, #64	; 0x40
 8007594:	1b40      	subs	r0, r0, r5
 8007596:	fa03 f000 	lsl.w	r0, r3, r0
 800759a:	9b04      	ldr	r3, [sp, #16]
 800759c:	4303      	orrs	r3, r0
 800759e:	3701      	adds	r7, #1
 80075a0:	9304      	str	r3, [sp, #16]
 80075a2:	7839      	ldrb	r1, [r7, #0]
 80075a4:	4827      	ldr	r0, [pc, #156]	; (8007644 <_svfiprintf_r+0x1e4>)
 80075a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075aa:	2206      	movs	r2, #6
 80075ac:	1c7e      	adds	r6, r7, #1
 80075ae:	f7f8 fe17 	bl	80001e0 <memchr>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d038      	beq.n	8007628 <_svfiprintf_r+0x1c8>
 80075b6:	4b24      	ldr	r3, [pc, #144]	; (8007648 <_svfiprintf_r+0x1e8>)
 80075b8:	bb13      	cbnz	r3, 8007600 <_svfiprintf_r+0x1a0>
 80075ba:	9b03      	ldr	r3, [sp, #12]
 80075bc:	3307      	adds	r3, #7
 80075be:	f023 0307 	bic.w	r3, r3, #7
 80075c2:	3308      	adds	r3, #8
 80075c4:	9303      	str	r3, [sp, #12]
 80075c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c8:	444b      	add	r3, r9
 80075ca:	9309      	str	r3, [sp, #36]	; 0x24
 80075cc:	e76d      	b.n	80074aa <_svfiprintf_r+0x4a>
 80075ce:	fb05 3202 	mla	r2, r5, r2, r3
 80075d2:	2001      	movs	r0, #1
 80075d4:	460f      	mov	r7, r1
 80075d6:	e7a6      	b.n	8007526 <_svfiprintf_r+0xc6>
 80075d8:	2300      	movs	r3, #0
 80075da:	3701      	adds	r7, #1
 80075dc:	9305      	str	r3, [sp, #20]
 80075de:	4619      	mov	r1, r3
 80075e0:	250a      	movs	r5, #10
 80075e2:	4638      	mov	r0, r7
 80075e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075e8:	3a30      	subs	r2, #48	; 0x30
 80075ea:	2a09      	cmp	r2, #9
 80075ec:	d903      	bls.n	80075f6 <_svfiprintf_r+0x196>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0c8      	beq.n	8007584 <_svfiprintf_r+0x124>
 80075f2:	9105      	str	r1, [sp, #20]
 80075f4:	e7c6      	b.n	8007584 <_svfiprintf_r+0x124>
 80075f6:	fb05 2101 	mla	r1, r5, r1, r2
 80075fa:	2301      	movs	r3, #1
 80075fc:	4607      	mov	r7, r0
 80075fe:	e7f0      	b.n	80075e2 <_svfiprintf_r+0x182>
 8007600:	ab03      	add	r3, sp, #12
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	4622      	mov	r2, r4
 8007606:	4b11      	ldr	r3, [pc, #68]	; (800764c <_svfiprintf_r+0x1ec>)
 8007608:	a904      	add	r1, sp, #16
 800760a:	4640      	mov	r0, r8
 800760c:	f7fe f8f0 	bl	80057f0 <_printf_float>
 8007610:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007614:	4681      	mov	r9, r0
 8007616:	d1d6      	bne.n	80075c6 <_svfiprintf_r+0x166>
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	065b      	lsls	r3, r3, #25
 800761c:	f53f af35 	bmi.w	800748a <_svfiprintf_r+0x2a>
 8007620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007622:	b01d      	add	sp, #116	; 0x74
 8007624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007628:	ab03      	add	r3, sp, #12
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	4622      	mov	r2, r4
 800762e:	4b07      	ldr	r3, [pc, #28]	; (800764c <_svfiprintf_r+0x1ec>)
 8007630:	a904      	add	r1, sp, #16
 8007632:	4640      	mov	r0, r8
 8007634:	f7fe fb92 	bl	8005d5c <_printf_i>
 8007638:	e7ea      	b.n	8007610 <_svfiprintf_r+0x1b0>
 800763a:	bf00      	nop
 800763c:	080089c4 	.word	0x080089c4
 8007640:	080089ca 	.word	0x080089ca
 8007644:	080089ce 	.word	0x080089ce
 8007648:	080057f1 	.word	0x080057f1
 800764c:	080073ad 	.word	0x080073ad

08007650 <_sbrk_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4c06      	ldr	r4, [pc, #24]	; (800766c <_sbrk_r+0x1c>)
 8007654:	2300      	movs	r3, #0
 8007656:	4605      	mov	r5, r0
 8007658:	4608      	mov	r0, r1
 800765a:	6023      	str	r3, [r4, #0]
 800765c:	f001 f8c6 	bl	80087ec <_sbrk>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d102      	bne.n	800766a <_sbrk_r+0x1a>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	b103      	cbz	r3, 800766a <_sbrk_r+0x1a>
 8007668:	602b      	str	r3, [r5, #0]
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	200003ec 	.word	0x200003ec

08007670 <__ascii_mbtowc>:
 8007670:	b082      	sub	sp, #8
 8007672:	b901      	cbnz	r1, 8007676 <__ascii_mbtowc+0x6>
 8007674:	a901      	add	r1, sp, #4
 8007676:	b142      	cbz	r2, 800768a <__ascii_mbtowc+0x1a>
 8007678:	b14b      	cbz	r3, 800768e <__ascii_mbtowc+0x1e>
 800767a:	7813      	ldrb	r3, [r2, #0]
 800767c:	600b      	str	r3, [r1, #0]
 800767e:	7812      	ldrb	r2, [r2, #0]
 8007680:	1c10      	adds	r0, r2, #0
 8007682:	bf18      	it	ne
 8007684:	2001      	movne	r0, #1
 8007686:	b002      	add	sp, #8
 8007688:	4770      	bx	lr
 800768a:	4610      	mov	r0, r2
 800768c:	e7fb      	b.n	8007686 <__ascii_mbtowc+0x16>
 800768e:	f06f 0001 	mvn.w	r0, #1
 8007692:	e7f8      	b.n	8007686 <__ascii_mbtowc+0x16>

08007694 <memmove>:
 8007694:	4288      	cmp	r0, r1
 8007696:	b510      	push	{r4, lr}
 8007698:	eb01 0302 	add.w	r3, r1, r2
 800769c:	d807      	bhi.n	80076ae <memmove+0x1a>
 800769e:	1e42      	subs	r2, r0, #1
 80076a0:	4299      	cmp	r1, r3
 80076a2:	d00a      	beq.n	80076ba <memmove+0x26>
 80076a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80076ac:	e7f8      	b.n	80076a0 <memmove+0xc>
 80076ae:	4283      	cmp	r3, r0
 80076b0:	d9f5      	bls.n	800769e <memmove+0xa>
 80076b2:	1881      	adds	r1, r0, r2
 80076b4:	1ad2      	subs	r2, r2, r3
 80076b6:	42d3      	cmn	r3, r2
 80076b8:	d100      	bne.n	80076bc <memmove+0x28>
 80076ba:	bd10      	pop	{r4, pc}
 80076bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80076c4:	e7f7      	b.n	80076b6 <memmove+0x22>

080076c6 <__malloc_lock>:
 80076c6:	4770      	bx	lr

080076c8 <__malloc_unlock>:
 80076c8:	4770      	bx	lr

080076ca <_realloc_r>:
 80076ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076cc:	4607      	mov	r7, r0
 80076ce:	4614      	mov	r4, r2
 80076d0:	460e      	mov	r6, r1
 80076d2:	b921      	cbnz	r1, 80076de <_realloc_r+0x14>
 80076d4:	4611      	mov	r1, r2
 80076d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076da:	f7ff be0d 	b.w	80072f8 <_malloc_r>
 80076de:	b922      	cbnz	r2, 80076ea <_realloc_r+0x20>
 80076e0:	f7ff fdbc 	bl	800725c <_free_r>
 80076e4:	4625      	mov	r5, r4
 80076e6:	4628      	mov	r0, r5
 80076e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076ea:	f000 f821 	bl	8007730 <_malloc_usable_size_r>
 80076ee:	42a0      	cmp	r0, r4
 80076f0:	d20f      	bcs.n	8007712 <_realloc_r+0x48>
 80076f2:	4621      	mov	r1, r4
 80076f4:	4638      	mov	r0, r7
 80076f6:	f7ff fdff 	bl	80072f8 <_malloc_r>
 80076fa:	4605      	mov	r5, r0
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d0f2      	beq.n	80076e6 <_realloc_r+0x1c>
 8007700:	4631      	mov	r1, r6
 8007702:	4622      	mov	r2, r4
 8007704:	f7ff fab6 	bl	8006c74 <memcpy>
 8007708:	4631      	mov	r1, r6
 800770a:	4638      	mov	r0, r7
 800770c:	f7ff fda6 	bl	800725c <_free_r>
 8007710:	e7e9      	b.n	80076e6 <_realloc_r+0x1c>
 8007712:	4635      	mov	r5, r6
 8007714:	e7e7      	b.n	80076e6 <_realloc_r+0x1c>

08007716 <__ascii_wctomb>:
 8007716:	b149      	cbz	r1, 800772c <__ascii_wctomb+0x16>
 8007718:	2aff      	cmp	r2, #255	; 0xff
 800771a:	bf85      	ittet	hi
 800771c:	238a      	movhi	r3, #138	; 0x8a
 800771e:	6003      	strhi	r3, [r0, #0]
 8007720:	700a      	strbls	r2, [r1, #0]
 8007722:	f04f 30ff 	movhi.w	r0, #4294967295
 8007726:	bf98      	it	ls
 8007728:	2001      	movls	r0, #1
 800772a:	4770      	bx	lr
 800772c:	4608      	mov	r0, r1
 800772e:	4770      	bx	lr

08007730 <_malloc_usable_size_r>:
 8007730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007734:	1f18      	subs	r0, r3, #4
 8007736:	2b00      	cmp	r3, #0
 8007738:	bfbc      	itt	lt
 800773a:	580b      	ldrlt	r3, [r1, r0]
 800773c:	18c0      	addlt	r0, r0, r3
 800773e:	4770      	bx	lr

08007740 <cos>:
 8007740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007742:	ec51 0b10 	vmov	r0, r1, d0
 8007746:	4a1e      	ldr	r2, [pc, #120]	; (80077c0 <cos+0x80>)
 8007748:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800774c:	4293      	cmp	r3, r2
 800774e:	dc06      	bgt.n	800775e <cos+0x1e>
 8007750:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80077b8 <cos+0x78>
 8007754:	f000 fa74 	bl	8007c40 <__kernel_cos>
 8007758:	ec51 0b10 	vmov	r0, r1, d0
 800775c:	e007      	b.n	800776e <cos+0x2e>
 800775e:	4a19      	ldr	r2, [pc, #100]	; (80077c4 <cos+0x84>)
 8007760:	4293      	cmp	r3, r2
 8007762:	dd09      	ble.n	8007778 <cos+0x38>
 8007764:	ee10 2a10 	vmov	r2, s0
 8007768:	460b      	mov	r3, r1
 800776a:	f7f8 fd8d 	bl	8000288 <__aeabi_dsub>
 800776e:	ec41 0b10 	vmov	d0, r0, r1
 8007772:	b005      	add	sp, #20
 8007774:	f85d fb04 	ldr.w	pc, [sp], #4
 8007778:	4668      	mov	r0, sp
 800777a:	f000 f86d 	bl	8007858 <__ieee754_rem_pio2>
 800777e:	f000 0003 	and.w	r0, r0, #3
 8007782:	2801      	cmp	r0, #1
 8007784:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007788:	ed9d 0b00 	vldr	d0, [sp]
 800778c:	d007      	beq.n	800779e <cos+0x5e>
 800778e:	2802      	cmp	r0, #2
 8007790:	d00e      	beq.n	80077b0 <cos+0x70>
 8007792:	2800      	cmp	r0, #0
 8007794:	d0de      	beq.n	8007754 <cos+0x14>
 8007796:	2001      	movs	r0, #1
 8007798:	f000 fe5a 	bl	8008450 <__kernel_sin>
 800779c:	e7dc      	b.n	8007758 <cos+0x18>
 800779e:	f000 fe57 	bl	8008450 <__kernel_sin>
 80077a2:	ec53 2b10 	vmov	r2, r3, d0
 80077a6:	ee10 0a10 	vmov	r0, s0
 80077aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80077ae:	e7de      	b.n	800776e <cos+0x2e>
 80077b0:	f000 fa46 	bl	8007c40 <__kernel_cos>
 80077b4:	e7f5      	b.n	80077a2 <cos+0x62>
 80077b6:	bf00      	nop
	...
 80077c0:	3fe921fb 	.word	0x3fe921fb
 80077c4:	7fefffff 	.word	0x7fefffff

080077c8 <sin>:
 80077c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077ca:	ec51 0b10 	vmov	r0, r1, d0
 80077ce:	4a20      	ldr	r2, [pc, #128]	; (8007850 <sin+0x88>)
 80077d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80077d4:	4293      	cmp	r3, r2
 80077d6:	dc07      	bgt.n	80077e8 <sin+0x20>
 80077d8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8007848 <sin+0x80>
 80077dc:	2000      	movs	r0, #0
 80077de:	f000 fe37 	bl	8008450 <__kernel_sin>
 80077e2:	ec51 0b10 	vmov	r0, r1, d0
 80077e6:	e007      	b.n	80077f8 <sin+0x30>
 80077e8:	4a1a      	ldr	r2, [pc, #104]	; (8007854 <sin+0x8c>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	dd09      	ble.n	8007802 <sin+0x3a>
 80077ee:	ee10 2a10 	vmov	r2, s0
 80077f2:	460b      	mov	r3, r1
 80077f4:	f7f8 fd48 	bl	8000288 <__aeabi_dsub>
 80077f8:	ec41 0b10 	vmov	d0, r0, r1
 80077fc:	b005      	add	sp, #20
 80077fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007802:	4668      	mov	r0, sp
 8007804:	f000 f828 	bl	8007858 <__ieee754_rem_pio2>
 8007808:	f000 0003 	and.w	r0, r0, #3
 800780c:	2801      	cmp	r0, #1
 800780e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007812:	ed9d 0b00 	vldr	d0, [sp]
 8007816:	d004      	beq.n	8007822 <sin+0x5a>
 8007818:	2802      	cmp	r0, #2
 800781a:	d005      	beq.n	8007828 <sin+0x60>
 800781c:	b970      	cbnz	r0, 800783c <sin+0x74>
 800781e:	2001      	movs	r0, #1
 8007820:	e7dd      	b.n	80077de <sin+0x16>
 8007822:	f000 fa0d 	bl	8007c40 <__kernel_cos>
 8007826:	e7dc      	b.n	80077e2 <sin+0x1a>
 8007828:	2001      	movs	r0, #1
 800782a:	f000 fe11 	bl	8008450 <__kernel_sin>
 800782e:	ec53 2b10 	vmov	r2, r3, d0
 8007832:	ee10 0a10 	vmov	r0, s0
 8007836:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800783a:	e7dd      	b.n	80077f8 <sin+0x30>
 800783c:	f000 fa00 	bl	8007c40 <__kernel_cos>
 8007840:	e7f5      	b.n	800782e <sin+0x66>
 8007842:	bf00      	nop
 8007844:	f3af 8000 	nop.w
	...
 8007850:	3fe921fb 	.word	0x3fe921fb
 8007854:	7fefffff 	.word	0x7fefffff

08007858 <__ieee754_rem_pio2>:
 8007858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	ec57 6b10 	vmov	r6, r7, d0
 8007860:	4bc3      	ldr	r3, [pc, #780]	; (8007b70 <__ieee754_rem_pio2+0x318>)
 8007862:	b08d      	sub	sp, #52	; 0x34
 8007864:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007868:	4598      	cmp	r8, r3
 800786a:	4604      	mov	r4, r0
 800786c:	9704      	str	r7, [sp, #16]
 800786e:	dc07      	bgt.n	8007880 <__ieee754_rem_pio2+0x28>
 8007870:	2200      	movs	r2, #0
 8007872:	2300      	movs	r3, #0
 8007874:	ed84 0b00 	vstr	d0, [r4]
 8007878:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800787c:	2500      	movs	r5, #0
 800787e:	e027      	b.n	80078d0 <__ieee754_rem_pio2+0x78>
 8007880:	4bbc      	ldr	r3, [pc, #752]	; (8007b74 <__ieee754_rem_pio2+0x31c>)
 8007882:	4598      	cmp	r8, r3
 8007884:	dc75      	bgt.n	8007972 <__ieee754_rem_pio2+0x11a>
 8007886:	9b04      	ldr	r3, [sp, #16]
 8007888:	4dbb      	ldr	r5, [pc, #748]	; (8007b78 <__ieee754_rem_pio2+0x320>)
 800788a:	2b00      	cmp	r3, #0
 800788c:	ee10 0a10 	vmov	r0, s0
 8007890:	a3a9      	add	r3, pc, #676	; (adr r3, 8007b38 <__ieee754_rem_pio2+0x2e0>)
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	4639      	mov	r1, r7
 8007898:	dd36      	ble.n	8007908 <__ieee754_rem_pio2+0xb0>
 800789a:	f7f8 fcf5 	bl	8000288 <__aeabi_dsub>
 800789e:	45a8      	cmp	r8, r5
 80078a0:	4606      	mov	r6, r0
 80078a2:	460f      	mov	r7, r1
 80078a4:	d018      	beq.n	80078d8 <__ieee754_rem_pio2+0x80>
 80078a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8007b40 <__ieee754_rem_pio2+0x2e8>)
 80078a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ac:	f7f8 fcec 	bl	8000288 <__aeabi_dsub>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	e9c4 2300 	strd	r2, r3, [r4]
 80078b8:	4630      	mov	r0, r6
 80078ba:	4639      	mov	r1, r7
 80078bc:	f7f8 fce4 	bl	8000288 <__aeabi_dsub>
 80078c0:	a39f      	add	r3, pc, #636	; (adr r3, 8007b40 <__ieee754_rem_pio2+0x2e8>)
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	f7f8 fcdf 	bl	8000288 <__aeabi_dsub>
 80078ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80078ce:	2501      	movs	r5, #1
 80078d0:	4628      	mov	r0, r5
 80078d2:	b00d      	add	sp, #52	; 0x34
 80078d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d8:	a39b      	add	r3, pc, #620	; (adr r3, 8007b48 <__ieee754_rem_pio2+0x2f0>)
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	f7f8 fcd3 	bl	8000288 <__aeabi_dsub>
 80078e2:	a39b      	add	r3, pc, #620	; (adr r3, 8007b50 <__ieee754_rem_pio2+0x2f8>)
 80078e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e8:	4606      	mov	r6, r0
 80078ea:	460f      	mov	r7, r1
 80078ec:	f7f8 fccc 	bl	8000288 <__aeabi_dsub>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	e9c4 2300 	strd	r2, r3, [r4]
 80078f8:	4630      	mov	r0, r6
 80078fa:	4639      	mov	r1, r7
 80078fc:	f7f8 fcc4 	bl	8000288 <__aeabi_dsub>
 8007900:	a393      	add	r3, pc, #588	; (adr r3, 8007b50 <__ieee754_rem_pio2+0x2f8>)
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	e7de      	b.n	80078c6 <__ieee754_rem_pio2+0x6e>
 8007908:	f7f8 fcc0 	bl	800028c <__adddf3>
 800790c:	45a8      	cmp	r8, r5
 800790e:	4606      	mov	r6, r0
 8007910:	460f      	mov	r7, r1
 8007912:	d016      	beq.n	8007942 <__ieee754_rem_pio2+0xea>
 8007914:	a38a      	add	r3, pc, #552	; (adr r3, 8007b40 <__ieee754_rem_pio2+0x2e8>)
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	f7f8 fcb7 	bl	800028c <__adddf3>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	e9c4 2300 	strd	r2, r3, [r4]
 8007926:	4630      	mov	r0, r6
 8007928:	4639      	mov	r1, r7
 800792a:	f7f8 fcad 	bl	8000288 <__aeabi_dsub>
 800792e:	a384      	add	r3, pc, #528	; (adr r3, 8007b40 <__ieee754_rem_pio2+0x2e8>)
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	f7f8 fcaa 	bl	800028c <__adddf3>
 8007938:	f04f 35ff 	mov.w	r5, #4294967295
 800793c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007940:	e7c6      	b.n	80078d0 <__ieee754_rem_pio2+0x78>
 8007942:	a381      	add	r3, pc, #516	; (adr r3, 8007b48 <__ieee754_rem_pio2+0x2f0>)
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	f7f8 fca0 	bl	800028c <__adddf3>
 800794c:	a380      	add	r3, pc, #512	; (adr r3, 8007b50 <__ieee754_rem_pio2+0x2f8>)
 800794e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007952:	4606      	mov	r6, r0
 8007954:	460f      	mov	r7, r1
 8007956:	f7f8 fc99 	bl	800028c <__adddf3>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	e9c4 2300 	strd	r2, r3, [r4]
 8007962:	4630      	mov	r0, r6
 8007964:	4639      	mov	r1, r7
 8007966:	f7f8 fc8f 	bl	8000288 <__aeabi_dsub>
 800796a:	a379      	add	r3, pc, #484	; (adr r3, 8007b50 <__ieee754_rem_pio2+0x2f8>)
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	e7e0      	b.n	8007934 <__ieee754_rem_pio2+0xdc>
 8007972:	4b82      	ldr	r3, [pc, #520]	; (8007b7c <__ieee754_rem_pio2+0x324>)
 8007974:	4598      	cmp	r8, r3
 8007976:	f300 80d0 	bgt.w	8007b1a <__ieee754_rem_pio2+0x2c2>
 800797a:	f000 fe23 	bl	80085c4 <fabs>
 800797e:	ec57 6b10 	vmov	r6, r7, d0
 8007982:	ee10 0a10 	vmov	r0, s0
 8007986:	a374      	add	r3, pc, #464	; (adr r3, 8007b58 <__ieee754_rem_pio2+0x300>)
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	4639      	mov	r1, r7
 800798e:	f7f8 fe33 	bl	80005f8 <__aeabi_dmul>
 8007992:	2200      	movs	r2, #0
 8007994:	4b7a      	ldr	r3, [pc, #488]	; (8007b80 <__ieee754_rem_pio2+0x328>)
 8007996:	f7f8 fc79 	bl	800028c <__adddf3>
 800799a:	f7f9 f8dd 	bl	8000b58 <__aeabi_d2iz>
 800799e:	4605      	mov	r5, r0
 80079a0:	f7f8 fdc0 	bl	8000524 <__aeabi_i2d>
 80079a4:	a364      	add	r3, pc, #400	; (adr r3, 8007b38 <__ieee754_rem_pio2+0x2e0>)
 80079a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079ae:	f7f8 fe23 	bl	80005f8 <__aeabi_dmul>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	4630      	mov	r0, r6
 80079b8:	4639      	mov	r1, r7
 80079ba:	f7f8 fc65 	bl	8000288 <__aeabi_dsub>
 80079be:	a360      	add	r3, pc, #384	; (adr r3, 8007b40 <__ieee754_rem_pio2+0x2e8>)
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	4682      	mov	sl, r0
 80079c6:	468b      	mov	fp, r1
 80079c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079cc:	f7f8 fe14 	bl	80005f8 <__aeabi_dmul>
 80079d0:	2d1f      	cmp	r5, #31
 80079d2:	4606      	mov	r6, r0
 80079d4:	460f      	mov	r7, r1
 80079d6:	dc0c      	bgt.n	80079f2 <__ieee754_rem_pio2+0x19a>
 80079d8:	1e6a      	subs	r2, r5, #1
 80079da:	4b6a      	ldr	r3, [pc, #424]	; (8007b84 <__ieee754_rem_pio2+0x32c>)
 80079dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e0:	4543      	cmp	r3, r8
 80079e2:	d006      	beq.n	80079f2 <__ieee754_rem_pio2+0x19a>
 80079e4:	4632      	mov	r2, r6
 80079e6:	463b      	mov	r3, r7
 80079e8:	4650      	mov	r0, sl
 80079ea:	4659      	mov	r1, fp
 80079ec:	f7f8 fc4c 	bl	8000288 <__aeabi_dsub>
 80079f0:	e00e      	b.n	8007a10 <__ieee754_rem_pio2+0x1b8>
 80079f2:	4632      	mov	r2, r6
 80079f4:	463b      	mov	r3, r7
 80079f6:	4650      	mov	r0, sl
 80079f8:	4659      	mov	r1, fp
 80079fa:	f7f8 fc45 	bl	8000288 <__aeabi_dsub>
 80079fe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007a02:	9305      	str	r3, [sp, #20]
 8007a04:	9a05      	ldr	r2, [sp, #20]
 8007a06:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	2b10      	cmp	r3, #16
 8007a0e:	dc02      	bgt.n	8007a16 <__ieee754_rem_pio2+0x1be>
 8007a10:	e9c4 0100 	strd	r0, r1, [r4]
 8007a14:	e039      	b.n	8007a8a <__ieee754_rem_pio2+0x232>
 8007a16:	a34c      	add	r3, pc, #304	; (adr r3, 8007b48 <__ieee754_rem_pio2+0x2f0>)
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a20:	f7f8 fdea 	bl	80005f8 <__aeabi_dmul>
 8007a24:	4606      	mov	r6, r0
 8007a26:	460f      	mov	r7, r1
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4650      	mov	r0, sl
 8007a2e:	4659      	mov	r1, fp
 8007a30:	f7f8 fc2a 	bl	8000288 <__aeabi_dsub>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	4680      	mov	r8, r0
 8007a3a:	4689      	mov	r9, r1
 8007a3c:	4650      	mov	r0, sl
 8007a3e:	4659      	mov	r1, fp
 8007a40:	f7f8 fc22 	bl	8000288 <__aeabi_dsub>
 8007a44:	4632      	mov	r2, r6
 8007a46:	463b      	mov	r3, r7
 8007a48:	f7f8 fc1e 	bl	8000288 <__aeabi_dsub>
 8007a4c:	a340      	add	r3, pc, #256	; (adr r3, 8007b50 <__ieee754_rem_pio2+0x2f8>)
 8007a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a52:	4606      	mov	r6, r0
 8007a54:	460f      	mov	r7, r1
 8007a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a5a:	f7f8 fdcd 	bl	80005f8 <__aeabi_dmul>
 8007a5e:	4632      	mov	r2, r6
 8007a60:	463b      	mov	r3, r7
 8007a62:	f7f8 fc11 	bl	8000288 <__aeabi_dsub>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	460f      	mov	r7, r1
 8007a6e:	4640      	mov	r0, r8
 8007a70:	4649      	mov	r1, r9
 8007a72:	f7f8 fc09 	bl	8000288 <__aeabi_dsub>
 8007a76:	9a05      	ldr	r2, [sp, #20]
 8007a78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	2b31      	cmp	r3, #49	; 0x31
 8007a80:	dc20      	bgt.n	8007ac4 <__ieee754_rem_pio2+0x26c>
 8007a82:	e9c4 0100 	strd	r0, r1, [r4]
 8007a86:	46c2      	mov	sl, r8
 8007a88:	46cb      	mov	fp, r9
 8007a8a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007a8e:	4650      	mov	r0, sl
 8007a90:	4642      	mov	r2, r8
 8007a92:	464b      	mov	r3, r9
 8007a94:	4659      	mov	r1, fp
 8007a96:	f7f8 fbf7 	bl	8000288 <__aeabi_dsub>
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	4632      	mov	r2, r6
 8007a9e:	f7f8 fbf3 	bl	8000288 <__aeabi_dsub>
 8007aa2:	9b04      	ldr	r3, [sp, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007aaa:	f6bf af11 	bge.w	80078d0 <__ieee754_rem_pio2+0x78>
 8007aae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007ab2:	6063      	str	r3, [r4, #4]
 8007ab4:	f8c4 8000 	str.w	r8, [r4]
 8007ab8:	60a0      	str	r0, [r4, #8]
 8007aba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007abe:	60e3      	str	r3, [r4, #12]
 8007ac0:	426d      	negs	r5, r5
 8007ac2:	e705      	b.n	80078d0 <__ieee754_rem_pio2+0x78>
 8007ac4:	a326      	add	r3, pc, #152	; (adr r3, 8007b60 <__ieee754_rem_pio2+0x308>)
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ace:	f7f8 fd93 	bl	80005f8 <__aeabi_dmul>
 8007ad2:	4606      	mov	r6, r0
 8007ad4:	460f      	mov	r7, r1
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4640      	mov	r0, r8
 8007adc:	4649      	mov	r1, r9
 8007ade:	f7f8 fbd3 	bl	8000288 <__aeabi_dsub>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4682      	mov	sl, r0
 8007ae8:	468b      	mov	fp, r1
 8007aea:	4640      	mov	r0, r8
 8007aec:	4649      	mov	r1, r9
 8007aee:	f7f8 fbcb 	bl	8000288 <__aeabi_dsub>
 8007af2:	4632      	mov	r2, r6
 8007af4:	463b      	mov	r3, r7
 8007af6:	f7f8 fbc7 	bl	8000288 <__aeabi_dsub>
 8007afa:	a31b      	add	r3, pc, #108	; (adr r3, 8007b68 <__ieee754_rem_pio2+0x310>)
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	4606      	mov	r6, r0
 8007b02:	460f      	mov	r7, r1
 8007b04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b08:	f7f8 fd76 	bl	80005f8 <__aeabi_dmul>
 8007b0c:	4632      	mov	r2, r6
 8007b0e:	463b      	mov	r3, r7
 8007b10:	f7f8 fbba 	bl	8000288 <__aeabi_dsub>
 8007b14:	4606      	mov	r6, r0
 8007b16:	460f      	mov	r7, r1
 8007b18:	e764      	b.n	80079e4 <__ieee754_rem_pio2+0x18c>
 8007b1a:	4b1b      	ldr	r3, [pc, #108]	; (8007b88 <__ieee754_rem_pio2+0x330>)
 8007b1c:	4598      	cmp	r8, r3
 8007b1e:	dd35      	ble.n	8007b8c <__ieee754_rem_pio2+0x334>
 8007b20:	ee10 2a10 	vmov	r2, s0
 8007b24:	463b      	mov	r3, r7
 8007b26:	4630      	mov	r0, r6
 8007b28:	4639      	mov	r1, r7
 8007b2a:	f7f8 fbad 	bl	8000288 <__aeabi_dsub>
 8007b2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007b32:	e9c4 0100 	strd	r0, r1, [r4]
 8007b36:	e6a1      	b.n	800787c <__ieee754_rem_pio2+0x24>
 8007b38:	54400000 	.word	0x54400000
 8007b3c:	3ff921fb 	.word	0x3ff921fb
 8007b40:	1a626331 	.word	0x1a626331
 8007b44:	3dd0b461 	.word	0x3dd0b461
 8007b48:	1a600000 	.word	0x1a600000
 8007b4c:	3dd0b461 	.word	0x3dd0b461
 8007b50:	2e037073 	.word	0x2e037073
 8007b54:	3ba3198a 	.word	0x3ba3198a
 8007b58:	6dc9c883 	.word	0x6dc9c883
 8007b5c:	3fe45f30 	.word	0x3fe45f30
 8007b60:	2e000000 	.word	0x2e000000
 8007b64:	3ba3198a 	.word	0x3ba3198a
 8007b68:	252049c1 	.word	0x252049c1
 8007b6c:	397b839a 	.word	0x397b839a
 8007b70:	3fe921fb 	.word	0x3fe921fb
 8007b74:	4002d97b 	.word	0x4002d97b
 8007b78:	3ff921fb 	.word	0x3ff921fb
 8007b7c:	413921fb 	.word	0x413921fb
 8007b80:	3fe00000 	.word	0x3fe00000
 8007b84:	08008ae0 	.word	0x08008ae0
 8007b88:	7fefffff 	.word	0x7fefffff
 8007b8c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007b90:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8007b94:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007b98:	4630      	mov	r0, r6
 8007b9a:	460f      	mov	r7, r1
 8007b9c:	f7f8 ffdc 	bl	8000b58 <__aeabi_d2iz>
 8007ba0:	f7f8 fcc0 	bl	8000524 <__aeabi_i2d>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4630      	mov	r0, r6
 8007baa:	4639      	mov	r1, r7
 8007bac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bb0:	f7f8 fb6a 	bl	8000288 <__aeabi_dsub>
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	4b1f      	ldr	r3, [pc, #124]	; (8007c34 <__ieee754_rem_pio2+0x3dc>)
 8007bb8:	f7f8 fd1e 	bl	80005f8 <__aeabi_dmul>
 8007bbc:	460f      	mov	r7, r1
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	f7f8 ffca 	bl	8000b58 <__aeabi_d2iz>
 8007bc4:	f7f8 fcae 	bl	8000524 <__aeabi_i2d>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4630      	mov	r0, r6
 8007bce:	4639      	mov	r1, r7
 8007bd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007bd4:	f7f8 fb58 	bl	8000288 <__aeabi_dsub>
 8007bd8:	2200      	movs	r2, #0
 8007bda:	4b16      	ldr	r3, [pc, #88]	; (8007c34 <__ieee754_rem_pio2+0x3dc>)
 8007bdc:	f7f8 fd0c 	bl	80005f8 <__aeabi_dmul>
 8007be0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007be4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007be8:	f04f 0803 	mov.w	r8, #3
 8007bec:	2600      	movs	r6, #0
 8007bee:	2700      	movs	r7, #0
 8007bf0:	4632      	mov	r2, r6
 8007bf2:	463b      	mov	r3, r7
 8007bf4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007bf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8007bfc:	f7f8 ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c00:	b9b0      	cbnz	r0, 8007c30 <__ieee754_rem_pio2+0x3d8>
 8007c02:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <__ieee754_rem_pio2+0x3e0>)
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	2302      	movs	r3, #2
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	462a      	mov	r2, r5
 8007c0c:	4643      	mov	r3, r8
 8007c0e:	4621      	mov	r1, r4
 8007c10:	a806      	add	r0, sp, #24
 8007c12:	f000 f8dd 	bl	8007dd0 <__kernel_rem_pio2>
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	4605      	mov	r5, r0
 8007c1c:	f6bf ae58 	bge.w	80078d0 <__ieee754_rem_pio2+0x78>
 8007c20:	6863      	ldr	r3, [r4, #4]
 8007c22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007c26:	6063      	str	r3, [r4, #4]
 8007c28:	68e3      	ldr	r3, [r4, #12]
 8007c2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007c2e:	e746      	b.n	8007abe <__ieee754_rem_pio2+0x266>
 8007c30:	46d0      	mov	r8, sl
 8007c32:	e7dd      	b.n	8007bf0 <__ieee754_rem_pio2+0x398>
 8007c34:	41700000 	.word	0x41700000
 8007c38:	08008b60 	.word	0x08008b60
 8007c3c:	00000000 	.word	0x00000000

08007c40 <__kernel_cos>:
 8007c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c44:	ec59 8b10 	vmov	r8, r9, d0
 8007c48:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8007c4c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007c50:	ed2d 8b02 	vpush	{d8}
 8007c54:	eeb0 8a41 	vmov.f32	s16, s2
 8007c58:	eef0 8a61 	vmov.f32	s17, s3
 8007c5c:	da07      	bge.n	8007c6e <__kernel_cos+0x2e>
 8007c5e:	ee10 0a10 	vmov	r0, s0
 8007c62:	4649      	mov	r1, r9
 8007c64:	f7f8 ff78 	bl	8000b58 <__aeabi_d2iz>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	f000 8089 	beq.w	8007d80 <__kernel_cos+0x140>
 8007c6e:	4642      	mov	r2, r8
 8007c70:	464b      	mov	r3, r9
 8007c72:	4640      	mov	r0, r8
 8007c74:	4649      	mov	r1, r9
 8007c76:	f7f8 fcbf 	bl	80005f8 <__aeabi_dmul>
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	4b4e      	ldr	r3, [pc, #312]	; (8007db8 <__kernel_cos+0x178>)
 8007c7e:	4604      	mov	r4, r0
 8007c80:	460d      	mov	r5, r1
 8007c82:	f7f8 fcb9 	bl	80005f8 <__aeabi_dmul>
 8007c86:	a340      	add	r3, pc, #256	; (adr r3, 8007d88 <__kernel_cos+0x148>)
 8007c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8c:	4682      	mov	sl, r0
 8007c8e:	468b      	mov	fp, r1
 8007c90:	4620      	mov	r0, r4
 8007c92:	4629      	mov	r1, r5
 8007c94:	f7f8 fcb0 	bl	80005f8 <__aeabi_dmul>
 8007c98:	a33d      	add	r3, pc, #244	; (adr r3, 8007d90 <__kernel_cos+0x150>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	f7f8 faf5 	bl	800028c <__adddf3>
 8007ca2:	4622      	mov	r2, r4
 8007ca4:	462b      	mov	r3, r5
 8007ca6:	f7f8 fca7 	bl	80005f8 <__aeabi_dmul>
 8007caa:	a33b      	add	r3, pc, #236	; (adr r3, 8007d98 <__kernel_cos+0x158>)
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb0:	f7f8 faea 	bl	8000288 <__aeabi_dsub>
 8007cb4:	4622      	mov	r2, r4
 8007cb6:	462b      	mov	r3, r5
 8007cb8:	f7f8 fc9e 	bl	80005f8 <__aeabi_dmul>
 8007cbc:	a338      	add	r3, pc, #224	; (adr r3, 8007da0 <__kernel_cos+0x160>)
 8007cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc2:	f7f8 fae3 	bl	800028c <__adddf3>
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	462b      	mov	r3, r5
 8007cca:	f7f8 fc95 	bl	80005f8 <__aeabi_dmul>
 8007cce:	a336      	add	r3, pc, #216	; (adr r3, 8007da8 <__kernel_cos+0x168>)
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	f7f8 fad8 	bl	8000288 <__aeabi_dsub>
 8007cd8:	4622      	mov	r2, r4
 8007cda:	462b      	mov	r3, r5
 8007cdc:	f7f8 fc8c 	bl	80005f8 <__aeabi_dmul>
 8007ce0:	a333      	add	r3, pc, #204	; (adr r3, 8007db0 <__kernel_cos+0x170>)
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	f7f8 fad1 	bl	800028c <__adddf3>
 8007cea:	4622      	mov	r2, r4
 8007cec:	462b      	mov	r3, r5
 8007cee:	f7f8 fc83 	bl	80005f8 <__aeabi_dmul>
 8007cf2:	4622      	mov	r2, r4
 8007cf4:	462b      	mov	r3, r5
 8007cf6:	f7f8 fc7f 	bl	80005f8 <__aeabi_dmul>
 8007cfa:	ec53 2b18 	vmov	r2, r3, d8
 8007cfe:	4604      	mov	r4, r0
 8007d00:	460d      	mov	r5, r1
 8007d02:	4640      	mov	r0, r8
 8007d04:	4649      	mov	r1, r9
 8007d06:	f7f8 fc77 	bl	80005f8 <__aeabi_dmul>
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	4629      	mov	r1, r5
 8007d10:	4620      	mov	r0, r4
 8007d12:	f7f8 fab9 	bl	8000288 <__aeabi_dsub>
 8007d16:	4b29      	ldr	r3, [pc, #164]	; (8007dbc <__kernel_cos+0x17c>)
 8007d18:	429e      	cmp	r6, r3
 8007d1a:	4680      	mov	r8, r0
 8007d1c:	4689      	mov	r9, r1
 8007d1e:	dc11      	bgt.n	8007d44 <__kernel_cos+0x104>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4650      	mov	r0, sl
 8007d26:	4659      	mov	r1, fp
 8007d28:	f7f8 faae 	bl	8000288 <__aeabi_dsub>
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4924      	ldr	r1, [pc, #144]	; (8007dc0 <__kernel_cos+0x180>)
 8007d30:	4602      	mov	r2, r0
 8007d32:	2000      	movs	r0, #0
 8007d34:	f7f8 faa8 	bl	8000288 <__aeabi_dsub>
 8007d38:	ecbd 8b02 	vpop	{d8}
 8007d3c:	ec41 0b10 	vmov	d0, r0, r1
 8007d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d44:	4b1f      	ldr	r3, [pc, #124]	; (8007dc4 <__kernel_cos+0x184>)
 8007d46:	491e      	ldr	r1, [pc, #120]	; (8007dc0 <__kernel_cos+0x180>)
 8007d48:	429e      	cmp	r6, r3
 8007d4a:	bfcc      	ite	gt
 8007d4c:	4d1e      	ldrgt	r5, [pc, #120]	; (8007dc8 <__kernel_cos+0x188>)
 8007d4e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8007d52:	2400      	movs	r4, #0
 8007d54:	4622      	mov	r2, r4
 8007d56:	462b      	mov	r3, r5
 8007d58:	2000      	movs	r0, #0
 8007d5a:	f7f8 fa95 	bl	8000288 <__aeabi_dsub>
 8007d5e:	4622      	mov	r2, r4
 8007d60:	4606      	mov	r6, r0
 8007d62:	460f      	mov	r7, r1
 8007d64:	462b      	mov	r3, r5
 8007d66:	4650      	mov	r0, sl
 8007d68:	4659      	mov	r1, fp
 8007d6a:	f7f8 fa8d 	bl	8000288 <__aeabi_dsub>
 8007d6e:	4642      	mov	r2, r8
 8007d70:	464b      	mov	r3, r9
 8007d72:	f7f8 fa89 	bl	8000288 <__aeabi_dsub>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	e7d9      	b.n	8007d34 <__kernel_cos+0xf4>
 8007d80:	2000      	movs	r0, #0
 8007d82:	490f      	ldr	r1, [pc, #60]	; (8007dc0 <__kernel_cos+0x180>)
 8007d84:	e7d8      	b.n	8007d38 <__kernel_cos+0xf8>
 8007d86:	bf00      	nop
 8007d88:	be8838d4 	.word	0xbe8838d4
 8007d8c:	bda8fae9 	.word	0xbda8fae9
 8007d90:	bdb4b1c4 	.word	0xbdb4b1c4
 8007d94:	3e21ee9e 	.word	0x3e21ee9e
 8007d98:	809c52ad 	.word	0x809c52ad
 8007d9c:	3e927e4f 	.word	0x3e927e4f
 8007da0:	19cb1590 	.word	0x19cb1590
 8007da4:	3efa01a0 	.word	0x3efa01a0
 8007da8:	16c15177 	.word	0x16c15177
 8007dac:	3f56c16c 	.word	0x3f56c16c
 8007db0:	5555554c 	.word	0x5555554c
 8007db4:	3fa55555 	.word	0x3fa55555
 8007db8:	3fe00000 	.word	0x3fe00000
 8007dbc:	3fd33332 	.word	0x3fd33332
 8007dc0:	3ff00000 	.word	0x3ff00000
 8007dc4:	3fe90000 	.word	0x3fe90000
 8007dc8:	3fd20000 	.word	0x3fd20000
 8007dcc:	00000000 	.word	0x00000000

08007dd0 <__kernel_rem_pio2>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	ed2d 8b02 	vpush	{d8}
 8007dd8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007ddc:	1ed4      	subs	r4, r2, #3
 8007dde:	9308      	str	r3, [sp, #32]
 8007de0:	9101      	str	r1, [sp, #4]
 8007de2:	4bc5      	ldr	r3, [pc, #788]	; (80080f8 <__kernel_rem_pio2+0x328>)
 8007de4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007de6:	9009      	str	r0, [sp, #36]	; 0x24
 8007de8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007dec:	9304      	str	r3, [sp, #16]
 8007dee:	9b08      	ldr	r3, [sp, #32]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	9307      	str	r3, [sp, #28]
 8007df4:	2318      	movs	r3, #24
 8007df6:	fb94 f4f3 	sdiv	r4, r4, r3
 8007dfa:	f06f 0317 	mvn.w	r3, #23
 8007dfe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8007e02:	fb04 3303 	mla	r3, r4, r3, r3
 8007e06:	eb03 0a02 	add.w	sl, r3, r2
 8007e0a:	9b04      	ldr	r3, [sp, #16]
 8007e0c:	9a07      	ldr	r2, [sp, #28]
 8007e0e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80080e8 <__kernel_rem_pio2+0x318>
 8007e12:	eb03 0802 	add.w	r8, r3, r2
 8007e16:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007e18:	1aa7      	subs	r7, r4, r2
 8007e1a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007e1e:	ae22      	add	r6, sp, #136	; 0x88
 8007e20:	2500      	movs	r5, #0
 8007e22:	4545      	cmp	r5, r8
 8007e24:	dd13      	ble.n	8007e4e <__kernel_rem_pio2+0x7e>
 8007e26:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80080e8 <__kernel_rem_pio2+0x318>
 8007e2a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007e2e:	2600      	movs	r6, #0
 8007e30:	9b04      	ldr	r3, [sp, #16]
 8007e32:	429e      	cmp	r6, r3
 8007e34:	dc32      	bgt.n	8007e9c <__kernel_rem_pio2+0xcc>
 8007e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e38:	9302      	str	r3, [sp, #8]
 8007e3a:	9b08      	ldr	r3, [sp, #32]
 8007e3c:	199d      	adds	r5, r3, r6
 8007e3e:	ab22      	add	r3, sp, #136	; 0x88
 8007e40:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007e44:	9306      	str	r3, [sp, #24]
 8007e46:	ec59 8b18 	vmov	r8, r9, d8
 8007e4a:	2700      	movs	r7, #0
 8007e4c:	e01f      	b.n	8007e8e <__kernel_rem_pio2+0xbe>
 8007e4e:	42ef      	cmn	r7, r5
 8007e50:	d407      	bmi.n	8007e62 <__kernel_rem_pio2+0x92>
 8007e52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007e56:	f7f8 fb65 	bl	8000524 <__aeabi_i2d>
 8007e5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007e5e:	3501      	adds	r5, #1
 8007e60:	e7df      	b.n	8007e22 <__kernel_rem_pio2+0x52>
 8007e62:	ec51 0b18 	vmov	r0, r1, d8
 8007e66:	e7f8      	b.n	8007e5a <__kernel_rem_pio2+0x8a>
 8007e68:	9906      	ldr	r1, [sp, #24]
 8007e6a:	9d02      	ldr	r5, [sp, #8]
 8007e6c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007e70:	9106      	str	r1, [sp, #24]
 8007e72:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8007e76:	9502      	str	r5, [sp, #8]
 8007e78:	f7f8 fbbe 	bl	80005f8 <__aeabi_dmul>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4640      	mov	r0, r8
 8007e82:	4649      	mov	r1, r9
 8007e84:	f7f8 fa02 	bl	800028c <__adddf3>
 8007e88:	3701      	adds	r7, #1
 8007e8a:	4680      	mov	r8, r0
 8007e8c:	4689      	mov	r9, r1
 8007e8e:	9b07      	ldr	r3, [sp, #28]
 8007e90:	429f      	cmp	r7, r3
 8007e92:	dde9      	ble.n	8007e68 <__kernel_rem_pio2+0x98>
 8007e94:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007e98:	3601      	adds	r6, #1
 8007e9a:	e7c9      	b.n	8007e30 <__kernel_rem_pio2+0x60>
 8007e9c:	9b04      	ldr	r3, [sp, #16]
 8007e9e:	aa0e      	add	r2, sp, #56	; 0x38
 8007ea0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ea4:	930c      	str	r3, [sp, #48]	; 0x30
 8007ea6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007ea8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007eac:	9c04      	ldr	r4, [sp, #16]
 8007eae:	930b      	str	r3, [sp, #44]	; 0x2c
 8007eb0:	ab9a      	add	r3, sp, #616	; 0x268
 8007eb2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8007eb6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007eba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ebe:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8007ec2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8007ec6:	ab9a      	add	r3, sp, #616	; 0x268
 8007ec8:	445b      	add	r3, fp
 8007eca:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8007ece:	2500      	movs	r5, #0
 8007ed0:	1b63      	subs	r3, r4, r5
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	dc78      	bgt.n	8007fc8 <__kernel_rem_pio2+0x1f8>
 8007ed6:	4650      	mov	r0, sl
 8007ed8:	ec49 8b10 	vmov	d0, r8, r9
 8007edc:	f000 fc00 	bl	80086e0 <scalbn>
 8007ee0:	ec57 6b10 	vmov	r6, r7, d0
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007eea:	ee10 0a10 	vmov	r0, s0
 8007eee:	4639      	mov	r1, r7
 8007ef0:	f7f8 fb82 	bl	80005f8 <__aeabi_dmul>
 8007ef4:	ec41 0b10 	vmov	d0, r0, r1
 8007ef8:	f000 fb6e 	bl	80085d8 <floor>
 8007efc:	2200      	movs	r2, #0
 8007efe:	ec51 0b10 	vmov	r0, r1, d0
 8007f02:	4b7e      	ldr	r3, [pc, #504]	; (80080fc <__kernel_rem_pio2+0x32c>)
 8007f04:	f7f8 fb78 	bl	80005f8 <__aeabi_dmul>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	4639      	mov	r1, r7
 8007f10:	f7f8 f9ba 	bl	8000288 <__aeabi_dsub>
 8007f14:	460f      	mov	r7, r1
 8007f16:	4606      	mov	r6, r0
 8007f18:	f7f8 fe1e 	bl	8000b58 <__aeabi_d2iz>
 8007f1c:	9006      	str	r0, [sp, #24]
 8007f1e:	f7f8 fb01 	bl	8000524 <__aeabi_i2d>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	4630      	mov	r0, r6
 8007f28:	4639      	mov	r1, r7
 8007f2a:	f7f8 f9ad 	bl	8000288 <__aeabi_dsub>
 8007f2e:	f1ba 0f00 	cmp.w	sl, #0
 8007f32:	4606      	mov	r6, r0
 8007f34:	460f      	mov	r7, r1
 8007f36:	dd6c      	ble.n	8008012 <__kernel_rem_pio2+0x242>
 8007f38:	1e62      	subs	r2, r4, #1
 8007f3a:	ab0e      	add	r3, sp, #56	; 0x38
 8007f3c:	f1ca 0118 	rsb	r1, sl, #24
 8007f40:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007f44:	9d06      	ldr	r5, [sp, #24]
 8007f46:	fa40 f301 	asr.w	r3, r0, r1
 8007f4a:	441d      	add	r5, r3
 8007f4c:	408b      	lsls	r3, r1
 8007f4e:	1ac0      	subs	r0, r0, r3
 8007f50:	ab0e      	add	r3, sp, #56	; 0x38
 8007f52:	9506      	str	r5, [sp, #24]
 8007f54:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007f58:	f1ca 0317 	rsb	r3, sl, #23
 8007f5c:	fa40 f303 	asr.w	r3, r0, r3
 8007f60:	9302      	str	r3, [sp, #8]
 8007f62:	9b02      	ldr	r3, [sp, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	dd62      	ble.n	800802e <__kernel_rem_pio2+0x25e>
 8007f68:	9b06      	ldr	r3, [sp, #24]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	9306      	str	r3, [sp, #24]
 8007f70:	4615      	mov	r5, r2
 8007f72:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007f76:	4294      	cmp	r4, r2
 8007f78:	f300 8095 	bgt.w	80080a6 <__kernel_rem_pio2+0x2d6>
 8007f7c:	f1ba 0f00 	cmp.w	sl, #0
 8007f80:	dd07      	ble.n	8007f92 <__kernel_rem_pio2+0x1c2>
 8007f82:	f1ba 0f01 	cmp.w	sl, #1
 8007f86:	f000 80a2 	beq.w	80080ce <__kernel_rem_pio2+0x2fe>
 8007f8a:	f1ba 0f02 	cmp.w	sl, #2
 8007f8e:	f000 80c1 	beq.w	8008114 <__kernel_rem_pio2+0x344>
 8007f92:	9b02      	ldr	r3, [sp, #8]
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d14a      	bne.n	800802e <__kernel_rem_pio2+0x25e>
 8007f98:	4632      	mov	r2, r6
 8007f9a:	463b      	mov	r3, r7
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	4958      	ldr	r1, [pc, #352]	; (8008100 <__kernel_rem_pio2+0x330>)
 8007fa0:	f7f8 f972 	bl	8000288 <__aeabi_dsub>
 8007fa4:	4606      	mov	r6, r0
 8007fa6:	460f      	mov	r7, r1
 8007fa8:	2d00      	cmp	r5, #0
 8007faa:	d040      	beq.n	800802e <__kernel_rem_pio2+0x25e>
 8007fac:	4650      	mov	r0, sl
 8007fae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80080f0 <__kernel_rem_pio2+0x320>
 8007fb2:	f000 fb95 	bl	80086e0 <scalbn>
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	4639      	mov	r1, r7
 8007fba:	ec53 2b10 	vmov	r2, r3, d0
 8007fbe:	f7f8 f963 	bl	8000288 <__aeabi_dsub>
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	460f      	mov	r7, r1
 8007fc6:	e032      	b.n	800802e <__kernel_rem_pio2+0x25e>
 8007fc8:	2200      	movs	r2, #0
 8007fca:	4b4e      	ldr	r3, [pc, #312]	; (8008104 <__kernel_rem_pio2+0x334>)
 8007fcc:	4640      	mov	r0, r8
 8007fce:	4649      	mov	r1, r9
 8007fd0:	f7f8 fb12 	bl	80005f8 <__aeabi_dmul>
 8007fd4:	f7f8 fdc0 	bl	8000b58 <__aeabi_d2iz>
 8007fd8:	f7f8 faa4 	bl	8000524 <__aeabi_i2d>
 8007fdc:	2200      	movs	r2, #0
 8007fde:	4b4a      	ldr	r3, [pc, #296]	; (8008108 <__kernel_rem_pio2+0x338>)
 8007fe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fe4:	f7f8 fb08 	bl	80005f8 <__aeabi_dmul>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4640      	mov	r0, r8
 8007fee:	4649      	mov	r1, r9
 8007ff0:	f7f8 f94a 	bl	8000288 <__aeabi_dsub>
 8007ff4:	f7f8 fdb0 	bl	8000b58 <__aeabi_d2iz>
 8007ff8:	ab0e      	add	r3, sp, #56	; 0x38
 8007ffa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8007ffe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008006:	f7f8 f941 	bl	800028c <__adddf3>
 800800a:	3501      	adds	r5, #1
 800800c:	4680      	mov	r8, r0
 800800e:	4689      	mov	r9, r1
 8008010:	e75e      	b.n	8007ed0 <__kernel_rem_pio2+0x100>
 8008012:	d105      	bne.n	8008020 <__kernel_rem_pio2+0x250>
 8008014:	1e63      	subs	r3, r4, #1
 8008016:	aa0e      	add	r2, sp, #56	; 0x38
 8008018:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800801c:	15c3      	asrs	r3, r0, #23
 800801e:	e79f      	b.n	8007f60 <__kernel_rem_pio2+0x190>
 8008020:	2200      	movs	r2, #0
 8008022:	4b3a      	ldr	r3, [pc, #232]	; (800810c <__kernel_rem_pio2+0x33c>)
 8008024:	f7f8 fd6e 	bl	8000b04 <__aeabi_dcmpge>
 8008028:	2800      	cmp	r0, #0
 800802a:	d139      	bne.n	80080a0 <__kernel_rem_pio2+0x2d0>
 800802c:	9002      	str	r0, [sp, #8]
 800802e:	2200      	movs	r2, #0
 8008030:	2300      	movs	r3, #0
 8008032:	4630      	mov	r0, r6
 8008034:	4639      	mov	r1, r7
 8008036:	f7f8 fd47 	bl	8000ac8 <__aeabi_dcmpeq>
 800803a:	2800      	cmp	r0, #0
 800803c:	f000 80c7 	beq.w	80081ce <__kernel_rem_pio2+0x3fe>
 8008040:	1e65      	subs	r5, r4, #1
 8008042:	462b      	mov	r3, r5
 8008044:	2200      	movs	r2, #0
 8008046:	9904      	ldr	r1, [sp, #16]
 8008048:	428b      	cmp	r3, r1
 800804a:	da6a      	bge.n	8008122 <__kernel_rem_pio2+0x352>
 800804c:	2a00      	cmp	r2, #0
 800804e:	f000 8088 	beq.w	8008162 <__kernel_rem_pio2+0x392>
 8008052:	ab0e      	add	r3, sp, #56	; 0x38
 8008054:	f1aa 0a18 	sub.w	sl, sl, #24
 8008058:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 80b4 	beq.w	80081ca <__kernel_rem_pio2+0x3fa>
 8008062:	4650      	mov	r0, sl
 8008064:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80080f0 <__kernel_rem_pio2+0x320>
 8008068:	f000 fb3a 	bl	80086e0 <scalbn>
 800806c:	00ec      	lsls	r4, r5, #3
 800806e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008070:	191e      	adds	r6, r3, r4
 8008072:	ec59 8b10 	vmov	r8, r9, d0
 8008076:	f106 0a08 	add.w	sl, r6, #8
 800807a:	462f      	mov	r7, r5
 800807c:	2f00      	cmp	r7, #0
 800807e:	f280 80df 	bge.w	8008240 <__kernel_rem_pio2+0x470>
 8008082:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80080e8 <__kernel_rem_pio2+0x318>
 8008086:	f04f 0a00 	mov.w	sl, #0
 800808a:	eba5 030a 	sub.w	r3, r5, sl
 800808e:	2b00      	cmp	r3, #0
 8008090:	f2c0 810a 	blt.w	80082a8 <__kernel_rem_pio2+0x4d8>
 8008094:	f8df b078 	ldr.w	fp, [pc, #120]	; 8008110 <__kernel_rem_pio2+0x340>
 8008098:	ec59 8b18 	vmov	r8, r9, d8
 800809c:	2700      	movs	r7, #0
 800809e:	e0f5      	b.n	800828c <__kernel_rem_pio2+0x4bc>
 80080a0:	2302      	movs	r3, #2
 80080a2:	9302      	str	r3, [sp, #8]
 80080a4:	e760      	b.n	8007f68 <__kernel_rem_pio2+0x198>
 80080a6:	ab0e      	add	r3, sp, #56	; 0x38
 80080a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ac:	b94d      	cbnz	r5, 80080c2 <__kernel_rem_pio2+0x2f2>
 80080ae:	b12b      	cbz	r3, 80080bc <__kernel_rem_pio2+0x2ec>
 80080b0:	a80e      	add	r0, sp, #56	; 0x38
 80080b2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80080b6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80080ba:	2301      	movs	r3, #1
 80080bc:	3201      	adds	r2, #1
 80080be:	461d      	mov	r5, r3
 80080c0:	e759      	b.n	8007f76 <__kernel_rem_pio2+0x1a6>
 80080c2:	a80e      	add	r0, sp, #56	; 0x38
 80080c4:	1acb      	subs	r3, r1, r3
 80080c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80080ca:	462b      	mov	r3, r5
 80080cc:	e7f6      	b.n	80080bc <__kernel_rem_pio2+0x2ec>
 80080ce:	1e62      	subs	r2, r4, #1
 80080d0:	ab0e      	add	r3, sp, #56	; 0x38
 80080d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80080da:	a90e      	add	r1, sp, #56	; 0x38
 80080dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80080e0:	e757      	b.n	8007f92 <__kernel_rem_pio2+0x1c2>
 80080e2:	bf00      	nop
 80080e4:	f3af 8000 	nop.w
	...
 80080f4:	3ff00000 	.word	0x3ff00000
 80080f8:	08008ca8 	.word	0x08008ca8
 80080fc:	40200000 	.word	0x40200000
 8008100:	3ff00000 	.word	0x3ff00000
 8008104:	3e700000 	.word	0x3e700000
 8008108:	41700000 	.word	0x41700000
 800810c:	3fe00000 	.word	0x3fe00000
 8008110:	08008c68 	.word	0x08008c68
 8008114:	1e62      	subs	r2, r4, #1
 8008116:	ab0e      	add	r3, sp, #56	; 0x38
 8008118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008120:	e7db      	b.n	80080da <__kernel_rem_pio2+0x30a>
 8008122:	a90e      	add	r1, sp, #56	; 0x38
 8008124:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008128:	3b01      	subs	r3, #1
 800812a:	430a      	orrs	r2, r1
 800812c:	e78b      	b.n	8008046 <__kernel_rem_pio2+0x276>
 800812e:	3301      	adds	r3, #1
 8008130:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008134:	2900      	cmp	r1, #0
 8008136:	d0fa      	beq.n	800812e <__kernel_rem_pio2+0x35e>
 8008138:	9a08      	ldr	r2, [sp, #32]
 800813a:	4422      	add	r2, r4
 800813c:	00d2      	lsls	r2, r2, #3
 800813e:	a922      	add	r1, sp, #136	; 0x88
 8008140:	18e3      	adds	r3, r4, r3
 8008142:	9206      	str	r2, [sp, #24]
 8008144:	440a      	add	r2, r1
 8008146:	9302      	str	r3, [sp, #8]
 8008148:	f10b 0108 	add.w	r1, fp, #8
 800814c:	f102 0308 	add.w	r3, r2, #8
 8008150:	1c66      	adds	r6, r4, #1
 8008152:	910a      	str	r1, [sp, #40]	; 0x28
 8008154:	2500      	movs	r5, #0
 8008156:	930d      	str	r3, [sp, #52]	; 0x34
 8008158:	9b02      	ldr	r3, [sp, #8]
 800815a:	42b3      	cmp	r3, r6
 800815c:	da04      	bge.n	8008168 <__kernel_rem_pio2+0x398>
 800815e:	461c      	mov	r4, r3
 8008160:	e6a6      	b.n	8007eb0 <__kernel_rem_pio2+0xe0>
 8008162:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008164:	2301      	movs	r3, #1
 8008166:	e7e3      	b.n	8008130 <__kernel_rem_pio2+0x360>
 8008168:	9b06      	ldr	r3, [sp, #24]
 800816a:	18ef      	adds	r7, r5, r3
 800816c:	ab22      	add	r3, sp, #136	; 0x88
 800816e:	441f      	add	r7, r3
 8008170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008172:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008176:	f7f8 f9d5 	bl	8000524 <__aeabi_i2d>
 800817a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800817c:	461c      	mov	r4, r3
 800817e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008180:	e9c7 0100 	strd	r0, r1, [r7]
 8008184:	eb03 0b05 	add.w	fp, r3, r5
 8008188:	2700      	movs	r7, #0
 800818a:	f04f 0800 	mov.w	r8, #0
 800818e:	f04f 0900 	mov.w	r9, #0
 8008192:	9b07      	ldr	r3, [sp, #28]
 8008194:	429f      	cmp	r7, r3
 8008196:	dd08      	ble.n	80081aa <__kernel_rem_pio2+0x3da>
 8008198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800819a:	aa72      	add	r2, sp, #456	; 0x1c8
 800819c:	18eb      	adds	r3, r5, r3
 800819e:	4413      	add	r3, r2
 80081a0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80081a4:	3601      	adds	r6, #1
 80081a6:	3508      	adds	r5, #8
 80081a8:	e7d6      	b.n	8008158 <__kernel_rem_pio2+0x388>
 80081aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80081ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80081b2:	f7f8 fa21 	bl	80005f8 <__aeabi_dmul>
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	4640      	mov	r0, r8
 80081bc:	4649      	mov	r1, r9
 80081be:	f7f8 f865 	bl	800028c <__adddf3>
 80081c2:	3701      	adds	r7, #1
 80081c4:	4680      	mov	r8, r0
 80081c6:	4689      	mov	r9, r1
 80081c8:	e7e3      	b.n	8008192 <__kernel_rem_pio2+0x3c2>
 80081ca:	3d01      	subs	r5, #1
 80081cc:	e741      	b.n	8008052 <__kernel_rem_pio2+0x282>
 80081ce:	f1ca 0000 	rsb	r0, sl, #0
 80081d2:	ec47 6b10 	vmov	d0, r6, r7
 80081d6:	f000 fa83 	bl	80086e0 <scalbn>
 80081da:	ec57 6b10 	vmov	r6, r7, d0
 80081de:	2200      	movs	r2, #0
 80081e0:	4b99      	ldr	r3, [pc, #612]	; (8008448 <__kernel_rem_pio2+0x678>)
 80081e2:	ee10 0a10 	vmov	r0, s0
 80081e6:	4639      	mov	r1, r7
 80081e8:	f7f8 fc8c 	bl	8000b04 <__aeabi_dcmpge>
 80081ec:	b1f8      	cbz	r0, 800822e <__kernel_rem_pio2+0x45e>
 80081ee:	2200      	movs	r2, #0
 80081f0:	4b96      	ldr	r3, [pc, #600]	; (800844c <__kernel_rem_pio2+0x67c>)
 80081f2:	4630      	mov	r0, r6
 80081f4:	4639      	mov	r1, r7
 80081f6:	f7f8 f9ff 	bl	80005f8 <__aeabi_dmul>
 80081fa:	f7f8 fcad 	bl	8000b58 <__aeabi_d2iz>
 80081fe:	4680      	mov	r8, r0
 8008200:	f7f8 f990 	bl	8000524 <__aeabi_i2d>
 8008204:	2200      	movs	r2, #0
 8008206:	4b90      	ldr	r3, [pc, #576]	; (8008448 <__kernel_rem_pio2+0x678>)
 8008208:	f7f8 f9f6 	bl	80005f8 <__aeabi_dmul>
 800820c:	460b      	mov	r3, r1
 800820e:	4602      	mov	r2, r0
 8008210:	4639      	mov	r1, r7
 8008212:	4630      	mov	r0, r6
 8008214:	f7f8 f838 	bl	8000288 <__aeabi_dsub>
 8008218:	f7f8 fc9e 	bl	8000b58 <__aeabi_d2iz>
 800821c:	1c65      	adds	r5, r4, #1
 800821e:	ab0e      	add	r3, sp, #56	; 0x38
 8008220:	f10a 0a18 	add.w	sl, sl, #24
 8008224:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008228:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800822c:	e719      	b.n	8008062 <__kernel_rem_pio2+0x292>
 800822e:	4630      	mov	r0, r6
 8008230:	4639      	mov	r1, r7
 8008232:	f7f8 fc91 	bl	8000b58 <__aeabi_d2iz>
 8008236:	ab0e      	add	r3, sp, #56	; 0x38
 8008238:	4625      	mov	r5, r4
 800823a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800823e:	e710      	b.n	8008062 <__kernel_rem_pio2+0x292>
 8008240:	ab0e      	add	r3, sp, #56	; 0x38
 8008242:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8008246:	f7f8 f96d 	bl	8000524 <__aeabi_i2d>
 800824a:	4642      	mov	r2, r8
 800824c:	464b      	mov	r3, r9
 800824e:	f7f8 f9d3 	bl	80005f8 <__aeabi_dmul>
 8008252:	2200      	movs	r2, #0
 8008254:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008258:	4b7c      	ldr	r3, [pc, #496]	; (800844c <__kernel_rem_pio2+0x67c>)
 800825a:	4640      	mov	r0, r8
 800825c:	4649      	mov	r1, r9
 800825e:	f7f8 f9cb 	bl	80005f8 <__aeabi_dmul>
 8008262:	3f01      	subs	r7, #1
 8008264:	4680      	mov	r8, r0
 8008266:	4689      	mov	r9, r1
 8008268:	e708      	b.n	800807c <__kernel_rem_pio2+0x2ac>
 800826a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8008276:	f7f8 f9bf 	bl	80005f8 <__aeabi_dmul>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4640      	mov	r0, r8
 8008280:	4649      	mov	r1, r9
 8008282:	f7f8 f803 	bl	800028c <__adddf3>
 8008286:	3701      	adds	r7, #1
 8008288:	4680      	mov	r8, r0
 800828a:	4689      	mov	r9, r1
 800828c:	9b04      	ldr	r3, [sp, #16]
 800828e:	429f      	cmp	r7, r3
 8008290:	dc01      	bgt.n	8008296 <__kernel_rem_pio2+0x4c6>
 8008292:	45ba      	cmp	sl, r7
 8008294:	dae9      	bge.n	800826a <__kernel_rem_pio2+0x49a>
 8008296:	ab4a      	add	r3, sp, #296	; 0x128
 8008298:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800829c:	e9c3 8900 	strd	r8, r9, [r3]
 80082a0:	f10a 0a01 	add.w	sl, sl, #1
 80082a4:	3e08      	subs	r6, #8
 80082a6:	e6f0      	b.n	800808a <__kernel_rem_pio2+0x2ba>
 80082a8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d85b      	bhi.n	8008366 <__kernel_rem_pio2+0x596>
 80082ae:	e8df f003 	tbb	[pc, r3]
 80082b2:	264a      	.short	0x264a
 80082b4:	0226      	.short	0x0226
 80082b6:	ab9a      	add	r3, sp, #616	; 0x268
 80082b8:	441c      	add	r4, r3
 80082ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80082be:	46a2      	mov	sl, r4
 80082c0:	46ab      	mov	fp, r5
 80082c2:	f1bb 0f00 	cmp.w	fp, #0
 80082c6:	dc6c      	bgt.n	80083a2 <__kernel_rem_pio2+0x5d2>
 80082c8:	46a2      	mov	sl, r4
 80082ca:	46ab      	mov	fp, r5
 80082cc:	f1bb 0f01 	cmp.w	fp, #1
 80082d0:	f300 8086 	bgt.w	80083e0 <__kernel_rem_pio2+0x610>
 80082d4:	2000      	movs	r0, #0
 80082d6:	2100      	movs	r1, #0
 80082d8:	2d01      	cmp	r5, #1
 80082da:	f300 80a0 	bgt.w	800841e <__kernel_rem_pio2+0x64e>
 80082de:	9b02      	ldr	r3, [sp, #8]
 80082e0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80082e4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f040 809e 	bne.w	800842a <__kernel_rem_pio2+0x65a>
 80082ee:	9b01      	ldr	r3, [sp, #4]
 80082f0:	e9c3 7800 	strd	r7, r8, [r3]
 80082f4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80082f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80082fc:	e033      	b.n	8008366 <__kernel_rem_pio2+0x596>
 80082fe:	3408      	adds	r4, #8
 8008300:	ab4a      	add	r3, sp, #296	; 0x128
 8008302:	441c      	add	r4, r3
 8008304:	462e      	mov	r6, r5
 8008306:	2000      	movs	r0, #0
 8008308:	2100      	movs	r1, #0
 800830a:	2e00      	cmp	r6, #0
 800830c:	da3a      	bge.n	8008384 <__kernel_rem_pio2+0x5b4>
 800830e:	9b02      	ldr	r3, [sp, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d03d      	beq.n	8008390 <__kernel_rem_pio2+0x5c0>
 8008314:	4602      	mov	r2, r0
 8008316:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800831a:	9c01      	ldr	r4, [sp, #4]
 800831c:	e9c4 2300 	strd	r2, r3, [r4]
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008328:	f7f7 ffae 	bl	8000288 <__aeabi_dsub>
 800832c:	ae4c      	add	r6, sp, #304	; 0x130
 800832e:	2401      	movs	r4, #1
 8008330:	42a5      	cmp	r5, r4
 8008332:	da30      	bge.n	8008396 <__kernel_rem_pio2+0x5c6>
 8008334:	9b02      	ldr	r3, [sp, #8]
 8008336:	b113      	cbz	r3, 800833e <__kernel_rem_pio2+0x56e>
 8008338:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800833c:	4619      	mov	r1, r3
 800833e:	9b01      	ldr	r3, [sp, #4]
 8008340:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008344:	e00f      	b.n	8008366 <__kernel_rem_pio2+0x596>
 8008346:	ab9a      	add	r3, sp, #616	; 0x268
 8008348:	441c      	add	r4, r3
 800834a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800834e:	2000      	movs	r0, #0
 8008350:	2100      	movs	r1, #0
 8008352:	2d00      	cmp	r5, #0
 8008354:	da10      	bge.n	8008378 <__kernel_rem_pio2+0x5a8>
 8008356:	9b02      	ldr	r3, [sp, #8]
 8008358:	b113      	cbz	r3, 8008360 <__kernel_rem_pio2+0x590>
 800835a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800835e:	4619      	mov	r1, r3
 8008360:	9b01      	ldr	r3, [sp, #4]
 8008362:	e9c3 0100 	strd	r0, r1, [r3]
 8008366:	9b06      	ldr	r3, [sp, #24]
 8008368:	f003 0007 	and.w	r0, r3, #7
 800836c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008370:	ecbd 8b02 	vpop	{d8}
 8008374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008378:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800837c:	f7f7 ff86 	bl	800028c <__adddf3>
 8008380:	3d01      	subs	r5, #1
 8008382:	e7e6      	b.n	8008352 <__kernel_rem_pio2+0x582>
 8008384:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008388:	f7f7 ff80 	bl	800028c <__adddf3>
 800838c:	3e01      	subs	r6, #1
 800838e:	e7bc      	b.n	800830a <__kernel_rem_pio2+0x53a>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	e7c1      	b.n	800831a <__kernel_rem_pio2+0x54a>
 8008396:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800839a:	f7f7 ff77 	bl	800028c <__adddf3>
 800839e:	3401      	adds	r4, #1
 80083a0:	e7c6      	b.n	8008330 <__kernel_rem_pio2+0x560>
 80083a2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80083a6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80083aa:	4640      	mov	r0, r8
 80083ac:	ec53 2b17 	vmov	r2, r3, d7
 80083b0:	4649      	mov	r1, r9
 80083b2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80083b6:	f7f7 ff69 	bl	800028c <__adddf3>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4606      	mov	r6, r0
 80083c0:	460f      	mov	r7, r1
 80083c2:	4640      	mov	r0, r8
 80083c4:	4649      	mov	r1, r9
 80083c6:	f7f7 ff5f 	bl	8000288 <__aeabi_dsub>
 80083ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ce:	f7f7 ff5d 	bl	800028c <__adddf3>
 80083d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083d6:	e9ca 0100 	strd	r0, r1, [sl]
 80083da:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80083de:	e770      	b.n	80082c2 <__kernel_rem_pio2+0x4f2>
 80083e0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80083e4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80083e8:	4630      	mov	r0, r6
 80083ea:	ec53 2b17 	vmov	r2, r3, d7
 80083ee:	4639      	mov	r1, r7
 80083f0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80083f4:	f7f7 ff4a 	bl	800028c <__adddf3>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4680      	mov	r8, r0
 80083fe:	4689      	mov	r9, r1
 8008400:	4630      	mov	r0, r6
 8008402:	4639      	mov	r1, r7
 8008404:	f7f7 ff40 	bl	8000288 <__aeabi_dsub>
 8008408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800840c:	f7f7 ff3e 	bl	800028c <__adddf3>
 8008410:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008414:	e9ca 0100 	strd	r0, r1, [sl]
 8008418:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800841c:	e756      	b.n	80082cc <__kernel_rem_pio2+0x4fc>
 800841e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008422:	f7f7 ff33 	bl	800028c <__adddf3>
 8008426:	3d01      	subs	r5, #1
 8008428:	e756      	b.n	80082d8 <__kernel_rem_pio2+0x508>
 800842a:	9b01      	ldr	r3, [sp, #4]
 800842c:	9a01      	ldr	r2, [sp, #4]
 800842e:	601f      	str	r7, [r3, #0]
 8008430:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008434:	605c      	str	r4, [r3, #4]
 8008436:	609d      	str	r5, [r3, #8]
 8008438:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800843c:	60d3      	str	r3, [r2, #12]
 800843e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008442:	6110      	str	r0, [r2, #16]
 8008444:	6153      	str	r3, [r2, #20]
 8008446:	e78e      	b.n	8008366 <__kernel_rem_pio2+0x596>
 8008448:	41700000 	.word	0x41700000
 800844c:	3e700000 	.word	0x3e700000

08008450 <__kernel_sin>:
 8008450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008454:	ec55 4b10 	vmov	r4, r5, d0
 8008458:	b085      	sub	sp, #20
 800845a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800845e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008462:	ed8d 1b00 	vstr	d1, [sp]
 8008466:	9002      	str	r0, [sp, #8]
 8008468:	da06      	bge.n	8008478 <__kernel_sin+0x28>
 800846a:	ee10 0a10 	vmov	r0, s0
 800846e:	4629      	mov	r1, r5
 8008470:	f7f8 fb72 	bl	8000b58 <__aeabi_d2iz>
 8008474:	2800      	cmp	r0, #0
 8008476:	d051      	beq.n	800851c <__kernel_sin+0xcc>
 8008478:	4622      	mov	r2, r4
 800847a:	462b      	mov	r3, r5
 800847c:	4620      	mov	r0, r4
 800847e:	4629      	mov	r1, r5
 8008480:	f7f8 f8ba 	bl	80005f8 <__aeabi_dmul>
 8008484:	4682      	mov	sl, r0
 8008486:	468b      	mov	fp, r1
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4620      	mov	r0, r4
 800848e:	4629      	mov	r1, r5
 8008490:	f7f8 f8b2 	bl	80005f8 <__aeabi_dmul>
 8008494:	a341      	add	r3, pc, #260	; (adr r3, 800859c <__kernel_sin+0x14c>)
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	4680      	mov	r8, r0
 800849c:	4689      	mov	r9, r1
 800849e:	4650      	mov	r0, sl
 80084a0:	4659      	mov	r1, fp
 80084a2:	f7f8 f8a9 	bl	80005f8 <__aeabi_dmul>
 80084a6:	a33f      	add	r3, pc, #252	; (adr r3, 80085a4 <__kernel_sin+0x154>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	f7f7 feec 	bl	8000288 <__aeabi_dsub>
 80084b0:	4652      	mov	r2, sl
 80084b2:	465b      	mov	r3, fp
 80084b4:	f7f8 f8a0 	bl	80005f8 <__aeabi_dmul>
 80084b8:	a33c      	add	r3, pc, #240	; (adr r3, 80085ac <__kernel_sin+0x15c>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	f7f7 fee5 	bl	800028c <__adddf3>
 80084c2:	4652      	mov	r2, sl
 80084c4:	465b      	mov	r3, fp
 80084c6:	f7f8 f897 	bl	80005f8 <__aeabi_dmul>
 80084ca:	a33a      	add	r3, pc, #232	; (adr r3, 80085b4 <__kernel_sin+0x164>)
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	f7f7 feda 	bl	8000288 <__aeabi_dsub>
 80084d4:	4652      	mov	r2, sl
 80084d6:	465b      	mov	r3, fp
 80084d8:	f7f8 f88e 	bl	80005f8 <__aeabi_dmul>
 80084dc:	a337      	add	r3, pc, #220	; (adr r3, 80085bc <__kernel_sin+0x16c>)
 80084de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e2:	f7f7 fed3 	bl	800028c <__adddf3>
 80084e6:	9b02      	ldr	r3, [sp, #8]
 80084e8:	4606      	mov	r6, r0
 80084ea:	460f      	mov	r7, r1
 80084ec:	b9db      	cbnz	r3, 8008526 <__kernel_sin+0xd6>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	4650      	mov	r0, sl
 80084f4:	4659      	mov	r1, fp
 80084f6:	f7f8 f87f 	bl	80005f8 <__aeabi_dmul>
 80084fa:	a325      	add	r3, pc, #148	; (adr r3, 8008590 <__kernel_sin+0x140>)
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	f7f7 fec2 	bl	8000288 <__aeabi_dsub>
 8008504:	4642      	mov	r2, r8
 8008506:	464b      	mov	r3, r9
 8008508:	f7f8 f876 	bl	80005f8 <__aeabi_dmul>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4620      	mov	r0, r4
 8008512:	4629      	mov	r1, r5
 8008514:	f7f7 feba 	bl	800028c <__adddf3>
 8008518:	4604      	mov	r4, r0
 800851a:	460d      	mov	r5, r1
 800851c:	ec45 4b10 	vmov	d0, r4, r5
 8008520:	b005      	add	sp, #20
 8008522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008526:	2200      	movs	r2, #0
 8008528:	4b1b      	ldr	r3, [pc, #108]	; (8008598 <__kernel_sin+0x148>)
 800852a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800852e:	f7f8 f863 	bl	80005f8 <__aeabi_dmul>
 8008532:	4632      	mov	r2, r6
 8008534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008538:	463b      	mov	r3, r7
 800853a:	4640      	mov	r0, r8
 800853c:	4649      	mov	r1, r9
 800853e:	f7f8 f85b 	bl	80005f8 <__aeabi_dmul>
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800854a:	f7f7 fe9d 	bl	8000288 <__aeabi_dsub>
 800854e:	4652      	mov	r2, sl
 8008550:	465b      	mov	r3, fp
 8008552:	f7f8 f851 	bl	80005f8 <__aeabi_dmul>
 8008556:	e9dd 2300 	ldrd	r2, r3, [sp]
 800855a:	f7f7 fe95 	bl	8000288 <__aeabi_dsub>
 800855e:	a30c      	add	r3, pc, #48	; (adr r3, 8008590 <__kernel_sin+0x140>)
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	4606      	mov	r6, r0
 8008566:	460f      	mov	r7, r1
 8008568:	4640      	mov	r0, r8
 800856a:	4649      	mov	r1, r9
 800856c:	f7f8 f844 	bl	80005f8 <__aeabi_dmul>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4630      	mov	r0, r6
 8008576:	4639      	mov	r1, r7
 8008578:	f7f7 fe88 	bl	800028c <__adddf3>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4620      	mov	r0, r4
 8008582:	4629      	mov	r1, r5
 8008584:	f7f7 fe80 	bl	8000288 <__aeabi_dsub>
 8008588:	e7c6      	b.n	8008518 <__kernel_sin+0xc8>
 800858a:	bf00      	nop
 800858c:	f3af 8000 	nop.w
 8008590:	55555549 	.word	0x55555549
 8008594:	3fc55555 	.word	0x3fc55555
 8008598:	3fe00000 	.word	0x3fe00000
 800859c:	5acfd57c 	.word	0x5acfd57c
 80085a0:	3de5d93a 	.word	0x3de5d93a
 80085a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80085a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80085ac:	57b1fe7d 	.word	0x57b1fe7d
 80085b0:	3ec71de3 	.word	0x3ec71de3
 80085b4:	19c161d5 	.word	0x19c161d5
 80085b8:	3f2a01a0 	.word	0x3f2a01a0
 80085bc:	1110f8a6 	.word	0x1110f8a6
 80085c0:	3f811111 	.word	0x3f811111

080085c4 <fabs>:
 80085c4:	ec51 0b10 	vmov	r0, r1, d0
 80085c8:	ee10 2a10 	vmov	r2, s0
 80085cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80085d0:	ec43 2b10 	vmov	d0, r2, r3
 80085d4:	4770      	bx	lr
	...

080085d8 <floor>:
 80085d8:	ec51 0b10 	vmov	r0, r1, d0
 80085dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80085e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80085e8:	2e13      	cmp	r6, #19
 80085ea:	460c      	mov	r4, r1
 80085ec:	ee10 5a10 	vmov	r5, s0
 80085f0:	4680      	mov	r8, r0
 80085f2:	dc34      	bgt.n	800865e <floor+0x86>
 80085f4:	2e00      	cmp	r6, #0
 80085f6:	da16      	bge.n	8008626 <floor+0x4e>
 80085f8:	a335      	add	r3, pc, #212	; (adr r3, 80086d0 <floor+0xf8>)
 80085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fe:	f7f7 fe45 	bl	800028c <__adddf3>
 8008602:	2200      	movs	r2, #0
 8008604:	2300      	movs	r3, #0
 8008606:	f7f8 fa87 	bl	8000b18 <__aeabi_dcmpgt>
 800860a:	b148      	cbz	r0, 8008620 <floor+0x48>
 800860c:	2c00      	cmp	r4, #0
 800860e:	da59      	bge.n	80086c4 <floor+0xec>
 8008610:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008614:	4a30      	ldr	r2, [pc, #192]	; (80086d8 <floor+0x100>)
 8008616:	432b      	orrs	r3, r5
 8008618:	2500      	movs	r5, #0
 800861a:	42ab      	cmp	r3, r5
 800861c:	bf18      	it	ne
 800861e:	4614      	movne	r4, r2
 8008620:	4621      	mov	r1, r4
 8008622:	4628      	mov	r0, r5
 8008624:	e025      	b.n	8008672 <floor+0x9a>
 8008626:	4f2d      	ldr	r7, [pc, #180]	; (80086dc <floor+0x104>)
 8008628:	4137      	asrs	r7, r6
 800862a:	ea01 0307 	and.w	r3, r1, r7
 800862e:	4303      	orrs	r3, r0
 8008630:	d01f      	beq.n	8008672 <floor+0x9a>
 8008632:	a327      	add	r3, pc, #156	; (adr r3, 80086d0 <floor+0xf8>)
 8008634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008638:	f7f7 fe28 	bl	800028c <__adddf3>
 800863c:	2200      	movs	r2, #0
 800863e:	2300      	movs	r3, #0
 8008640:	f7f8 fa6a 	bl	8000b18 <__aeabi_dcmpgt>
 8008644:	2800      	cmp	r0, #0
 8008646:	d0eb      	beq.n	8008620 <floor+0x48>
 8008648:	2c00      	cmp	r4, #0
 800864a:	bfbe      	ittt	lt
 800864c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008650:	fa43 f606 	asrlt.w	r6, r3, r6
 8008654:	19a4      	addlt	r4, r4, r6
 8008656:	ea24 0407 	bic.w	r4, r4, r7
 800865a:	2500      	movs	r5, #0
 800865c:	e7e0      	b.n	8008620 <floor+0x48>
 800865e:	2e33      	cmp	r6, #51	; 0x33
 8008660:	dd0b      	ble.n	800867a <floor+0xa2>
 8008662:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008666:	d104      	bne.n	8008672 <floor+0x9a>
 8008668:	ee10 2a10 	vmov	r2, s0
 800866c:	460b      	mov	r3, r1
 800866e:	f7f7 fe0d 	bl	800028c <__adddf3>
 8008672:	ec41 0b10 	vmov	d0, r0, r1
 8008676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800867a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800867e:	f04f 33ff 	mov.w	r3, #4294967295
 8008682:	fa23 f707 	lsr.w	r7, r3, r7
 8008686:	4207      	tst	r7, r0
 8008688:	d0f3      	beq.n	8008672 <floor+0x9a>
 800868a:	a311      	add	r3, pc, #68	; (adr r3, 80086d0 <floor+0xf8>)
 800868c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008690:	f7f7 fdfc 	bl	800028c <__adddf3>
 8008694:	2200      	movs	r2, #0
 8008696:	2300      	movs	r3, #0
 8008698:	f7f8 fa3e 	bl	8000b18 <__aeabi_dcmpgt>
 800869c:	2800      	cmp	r0, #0
 800869e:	d0bf      	beq.n	8008620 <floor+0x48>
 80086a0:	2c00      	cmp	r4, #0
 80086a2:	da02      	bge.n	80086aa <floor+0xd2>
 80086a4:	2e14      	cmp	r6, #20
 80086a6:	d103      	bne.n	80086b0 <floor+0xd8>
 80086a8:	3401      	adds	r4, #1
 80086aa:	ea25 0507 	bic.w	r5, r5, r7
 80086ae:	e7b7      	b.n	8008620 <floor+0x48>
 80086b0:	2301      	movs	r3, #1
 80086b2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80086b6:	fa03 f606 	lsl.w	r6, r3, r6
 80086ba:	4435      	add	r5, r6
 80086bc:	4545      	cmp	r5, r8
 80086be:	bf38      	it	cc
 80086c0:	18e4      	addcc	r4, r4, r3
 80086c2:	e7f2      	b.n	80086aa <floor+0xd2>
 80086c4:	2500      	movs	r5, #0
 80086c6:	462c      	mov	r4, r5
 80086c8:	e7aa      	b.n	8008620 <floor+0x48>
 80086ca:	bf00      	nop
 80086cc:	f3af 8000 	nop.w
 80086d0:	8800759c 	.word	0x8800759c
 80086d4:	7e37e43c 	.word	0x7e37e43c
 80086d8:	bff00000 	.word	0xbff00000
 80086dc:	000fffff 	.word	0x000fffff

080086e0 <scalbn>:
 80086e0:	b570      	push	{r4, r5, r6, lr}
 80086e2:	ec55 4b10 	vmov	r4, r5, d0
 80086e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80086ea:	4606      	mov	r6, r0
 80086ec:	462b      	mov	r3, r5
 80086ee:	b9aa      	cbnz	r2, 800871c <scalbn+0x3c>
 80086f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80086f4:	4323      	orrs	r3, r4
 80086f6:	d03b      	beq.n	8008770 <scalbn+0x90>
 80086f8:	4b31      	ldr	r3, [pc, #196]	; (80087c0 <scalbn+0xe0>)
 80086fa:	4629      	mov	r1, r5
 80086fc:	2200      	movs	r2, #0
 80086fe:	ee10 0a10 	vmov	r0, s0
 8008702:	f7f7 ff79 	bl	80005f8 <__aeabi_dmul>
 8008706:	4b2f      	ldr	r3, [pc, #188]	; (80087c4 <scalbn+0xe4>)
 8008708:	429e      	cmp	r6, r3
 800870a:	4604      	mov	r4, r0
 800870c:	460d      	mov	r5, r1
 800870e:	da12      	bge.n	8008736 <scalbn+0x56>
 8008710:	a327      	add	r3, pc, #156	; (adr r3, 80087b0 <scalbn+0xd0>)
 8008712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008716:	f7f7 ff6f 	bl	80005f8 <__aeabi_dmul>
 800871a:	e009      	b.n	8008730 <scalbn+0x50>
 800871c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008720:	428a      	cmp	r2, r1
 8008722:	d10c      	bne.n	800873e <scalbn+0x5e>
 8008724:	ee10 2a10 	vmov	r2, s0
 8008728:	4620      	mov	r0, r4
 800872a:	4629      	mov	r1, r5
 800872c:	f7f7 fdae 	bl	800028c <__adddf3>
 8008730:	4604      	mov	r4, r0
 8008732:	460d      	mov	r5, r1
 8008734:	e01c      	b.n	8008770 <scalbn+0x90>
 8008736:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800873a:	460b      	mov	r3, r1
 800873c:	3a36      	subs	r2, #54	; 0x36
 800873e:	4432      	add	r2, r6
 8008740:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008744:	428a      	cmp	r2, r1
 8008746:	dd0b      	ble.n	8008760 <scalbn+0x80>
 8008748:	ec45 4b11 	vmov	d1, r4, r5
 800874c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80087b8 <scalbn+0xd8>
 8008750:	f000 f83c 	bl	80087cc <copysign>
 8008754:	a318      	add	r3, pc, #96	; (adr r3, 80087b8 <scalbn+0xd8>)
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	ec51 0b10 	vmov	r0, r1, d0
 800875e:	e7da      	b.n	8008716 <scalbn+0x36>
 8008760:	2a00      	cmp	r2, #0
 8008762:	dd08      	ble.n	8008776 <scalbn+0x96>
 8008764:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008768:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800876c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008770:	ec45 4b10 	vmov	d0, r4, r5
 8008774:	bd70      	pop	{r4, r5, r6, pc}
 8008776:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800877a:	da0d      	bge.n	8008798 <scalbn+0xb8>
 800877c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008780:	429e      	cmp	r6, r3
 8008782:	ec45 4b11 	vmov	d1, r4, r5
 8008786:	dce1      	bgt.n	800874c <scalbn+0x6c>
 8008788:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80087b0 <scalbn+0xd0>
 800878c:	f000 f81e 	bl	80087cc <copysign>
 8008790:	a307      	add	r3, pc, #28	; (adr r3, 80087b0 <scalbn+0xd0>)
 8008792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008796:	e7e0      	b.n	800875a <scalbn+0x7a>
 8008798:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800879c:	3236      	adds	r2, #54	; 0x36
 800879e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80087a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80087a6:	4620      	mov	r0, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	2200      	movs	r2, #0
 80087ac:	4b06      	ldr	r3, [pc, #24]	; (80087c8 <scalbn+0xe8>)
 80087ae:	e7b2      	b.n	8008716 <scalbn+0x36>
 80087b0:	c2f8f359 	.word	0xc2f8f359
 80087b4:	01a56e1f 	.word	0x01a56e1f
 80087b8:	8800759c 	.word	0x8800759c
 80087bc:	7e37e43c 	.word	0x7e37e43c
 80087c0:	43500000 	.word	0x43500000
 80087c4:	ffff3cb0 	.word	0xffff3cb0
 80087c8:	3c900000 	.word	0x3c900000

080087cc <copysign>:
 80087cc:	ec51 0b10 	vmov	r0, r1, d0
 80087d0:	ee11 0a90 	vmov	r0, s3
 80087d4:	ee10 2a10 	vmov	r2, s0
 80087d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80087dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80087e0:	ea41 0300 	orr.w	r3, r1, r0
 80087e4:	ec43 2b10 	vmov	d0, r2, r3
 80087e8:	4770      	bx	lr
	...

080087ec <_sbrk>:
 80087ec:	4b04      	ldr	r3, [pc, #16]	; (8008800 <_sbrk+0x14>)
 80087ee:	6819      	ldr	r1, [r3, #0]
 80087f0:	4602      	mov	r2, r0
 80087f2:	b909      	cbnz	r1, 80087f8 <_sbrk+0xc>
 80087f4:	4903      	ldr	r1, [pc, #12]	; (8008804 <_sbrk+0x18>)
 80087f6:	6019      	str	r1, [r3, #0]
 80087f8:	6818      	ldr	r0, [r3, #0]
 80087fa:	4402      	add	r2, r0
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	4770      	bx	lr
 8008800:	20000200 	.word	0x20000200
 8008804:	200003f0 	.word	0x200003f0

08008808 <_init>:
 8008808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880a:	bf00      	nop
 800880c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800880e:	bc08      	pop	{r3}
 8008810:	469e      	mov	lr, r3
 8008812:	4770      	bx	lr

08008814 <_fini>:
 8008814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008816:	bf00      	nop
 8008818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881a:	bc08      	pop	{r3}
 800881c:	469e      	mov	lr, r3
 800881e:	4770      	bx	lr
