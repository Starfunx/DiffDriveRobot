
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800f280  0800f280  0001f280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f858  0800f858  000209c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f858  0800f858  0001f858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f860  0800f860  000209c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f860  0800f860  0001f860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f868  0800f868  0001f868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c4  20000000  0800f86c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  200009c4  08010230  000209c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fa4  08010230  00020fa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209c4  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001001d  00000000  00000000  000209f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000191c3  00000000  00000000  00030a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003396  00000000  00000000  00049bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000013d8  00000000  00000000  0004cf70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000f5026  00000000  00000000  0004e348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001258  00000000  00000000  00143370  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00028ffb  00000000  00000000  001445c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016d5c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006654  00000000  00000000  0016d640  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009c4 	.word	0x200009c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f268 	.word	0x0800f268

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009c8 	.word	0x200009c8
 80001cc:	0800f268 	.word	0x0800f268

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f8e:	e003      	b.n	8000f98 <LoopCopyDataInit>

08000f90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f96:	3104      	adds	r1, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fa0:	d3f6      	bcc.n	8000f90 <CopyDataInit>
	ldr	r2, =_sbss
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fa4:	e002      	b.n	8000fac <LoopFillZerobss>

08000fa6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fa6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fa8:	f842 3b04 	str.w	r3, [r2], #4

08000fac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <LoopForever+0x16>)
	cmp	r2, r3
 8000fae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fb0:	d3f9      	bcc.n	8000fa6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fb2:	f006 ff07 	bl	8007dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb6:	f006 ff87 	bl	8007ec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fba:	f005 f8f9 	bl	80061b0 <main>

08000fbe <LoopForever>:

LoopForever:
    b LoopForever
 8000fbe:	e7fe      	b.n	8000fbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fc0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000fc4:	0800f86c 	.word	0x0800f86c
	ldr	r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fcc:	200009c4 	.word	0x200009c4
	ldr	r2, =_sbss
 8000fd0:	200009c4 	.word	0x200009c4
	ldr	r3, = _ebss
 8000fd4:	20000fa4 	.word	0x20000fa4

08000fd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC1_2_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_Init+0x3c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <HAL_Init+0x3c>)
 8000fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 f93a 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 f80f 	bl	800101c <HAL_InitTick>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	e001      	b.n	800100e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800100a:	f006 fcbf 	bl	800798c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800100e:	79fb      	ldrb	r3, [r7, #7]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40022000 	.word	0x40022000

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <HAL_InitTick+0x68>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d022      	beq.n	8001076 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_InitTick+0x6c>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <HAL_InitTick+0x68>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800103c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001040:	fbb2 f3f3 	udiv	r3, r2, r3
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f946 	bl	80012d6 <HAL_SYSTICK_Config>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10f      	bne.n	8001070 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b0f      	cmp	r3, #15
 8001054:	d809      	bhi.n	800106a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001056:	2200      	movs	r2, #0
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	f04f 30ff 	mov.w	r0, #4294967295
 800105e:	f000 f910 	bl	8001282 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <HAL_InitTick+0x70>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	e007      	b.n	800107a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	e004      	b.n	800107a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e001      	b.n	800107a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000004 	.word	0x20000004
 8001088:	2000000c 	.word	0x2000000c
 800108c:	20000000 	.word	0x20000000

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_IncTick+0x1c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_IncTick+0x20>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4413      	add	r3, r2
 800109e:	4a03      	ldr	r2, [pc, #12]	; (80010ac <HAL_IncTick+0x1c>)
 80010a0:	6013      	str	r3, [r2, #0]
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	20000a1c 	.word	0x20000a1c
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000a1c 	.word	0x20000a1c

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff3e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff31 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa2 	bl	8001228 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d005      	beq.n	8001312 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2204      	movs	r2, #4
 800130a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e029      	b.n	8001366 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 020e 	bic.w	r2, r2, #14
 8001320:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f003 021c 	and.w	r2, r3, #28
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
    }
  }
  return status;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	e17f      	b.n	8001680 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2101      	movs	r1, #1
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 8171 	beq.w	800167a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x38>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b12      	cmp	r3, #18
 80013a6:	d123      	bne.n	80013f0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	6939      	ldr	r1, [r7, #16]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d00b      	beq.n	8001444 <HAL_GPIO_Init+0xd4>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d007      	beq.n	8001444 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001438:	2b11      	cmp	r3, #17
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b12      	cmp	r3, #18
 8001442:	d130      	bne.n	80014a6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800147a:	2201      	movs	r2, #1
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	f003 0201 	and.w	r2, r3, #1
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d118      	bne.n	80014e4 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014b8:	2201      	movs	r2, #1
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	f003 0201 	and.w	r2, r3, #1
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 80ac 	beq.w	800167a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	4b5e      	ldr	r3, [pc, #376]	; (800169c <HAL_GPIO_Init+0x32c>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001526:	4a5d      	ldr	r2, [pc, #372]	; (800169c <HAL_GPIO_Init+0x32c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6613      	str	r3, [r2, #96]	; 0x60
 800152e:	4b5b      	ldr	r3, [pc, #364]	; (800169c <HAL_GPIO_Init+0x32c>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800153a:	4a59      	ldr	r2, [pc, #356]	; (80016a0 <HAL_GPIO_Init+0x330>)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001564:	d025      	beq.n	80015b2 <HAL_GPIO_Init+0x242>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4e      	ldr	r2, [pc, #312]	; (80016a4 <HAL_GPIO_Init+0x334>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01f      	beq.n	80015ae <HAL_GPIO_Init+0x23e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4d      	ldr	r2, [pc, #308]	; (80016a8 <HAL_GPIO_Init+0x338>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d019      	beq.n	80015aa <HAL_GPIO_Init+0x23a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4c      	ldr	r2, [pc, #304]	; (80016ac <HAL_GPIO_Init+0x33c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0x236>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HAL_GPIO_Init+0x340>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00d      	beq.n	80015a2 <HAL_GPIO_Init+0x232>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4a      	ldr	r2, [pc, #296]	; (80016b4 <HAL_GPIO_Init+0x344>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <HAL_GPIO_Init+0x22e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a49      	ldr	r2, [pc, #292]	; (80016b8 <HAL_GPIO_Init+0x348>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d101      	bne.n	800159a <HAL_GPIO_Init+0x22a>
 8001596:	2306      	movs	r3, #6
 8001598:	e00c      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 800159a:	2307      	movs	r3, #7
 800159c:	e00a      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 800159e:	2305      	movs	r3, #5
 80015a0:	e008      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 80015b2:	2300      	movs	r3, #0
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015c4:	4936      	ldr	r1, [pc, #216]	; (80016a0 <HAL_GPIO_Init+0x330>)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015d2:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <HAL_GPIO_Init+0x34c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015f6:	4a31      	ldr	r2, [pc, #196]	; (80016bc <HAL_GPIO_Init+0x34c>)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015fc:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <HAL_GPIO_Init+0x34c>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001620:	4a26      	ldr	r2, [pc, #152]	; (80016bc <HAL_GPIO_Init+0x34c>)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001626:	4b25      	ldr	r3, [pc, #148]	; (80016bc <HAL_GPIO_Init+0x34c>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800164a:	4a1c      	ldr	r2, [pc, #112]	; (80016bc <HAL_GPIO_Init+0x34c>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_GPIO_Init+0x34c>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001674:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_GPIO_Init+0x34c>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa22 f303 	lsr.w	r3, r2, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	f47f ae78 	bne.w	8001380 <HAL_GPIO_Init+0x10>
  }
}
 8001690:	bf00      	nop
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010000 	.word	0x40010000
 80016a4:	48000400 	.word	0x48000400
 80016a8:	48000800 	.word	0x48000800
 80016ac:	48000c00 	.word	0x48000c00
 80016b0:	48001000 	.word	0x48001000
 80016b4:	48001400 	.word	0x48001400
 80016b8:	48001800 	.word	0x48001800
 80016bc:	40010400 	.word	0x40010400

080016c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
 80016cc:	4613      	mov	r3, r2
 80016ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d0:	787b      	ldrb	r3, [r7, #1]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016dc:	e002      	b.n	80016e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <HAL_PWREx_GetVoltageRange+0x18>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40007000 	.word	0x40007000

0800170c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800171a:	d130      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800171c:	4b23      	ldr	r3, [pc, #140]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001728:	d038      	beq.n	800179c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001732:	4a1e      	ldr	r2, [pc, #120]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001734:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001738:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2232      	movs	r2, #50	; 0x32
 8001740:	fb02 f303 	mul.w	r3, r2, r3
 8001744:	4a1b      	ldr	r2, [pc, #108]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	0c9b      	lsrs	r3, r3, #18
 800174c:	3301      	adds	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001750:	e002      	b.n	8001758 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3b01      	subs	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001764:	d102      	bne.n	800176c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f2      	bne.n	8001752 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001778:	d110      	bne.n	800179c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e00f      	b.n	800179e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178a:	d007      	beq.n	800179c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001794:	4a05      	ldr	r2, [pc, #20]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40007000 	.word	0x40007000
 80017b0:	2000000c 	.word	0x2000000c
 80017b4:	431bde83 	.word	0x431bde83

080017b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e39d      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ca:	4ba4      	ldr	r3, [pc, #656]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d4:	4ba1      	ldr	r3, [pc, #644]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80e1 	beq.w	80019ae <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <HAL_RCC_OscConfig+0x4a>
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	f040 8088 	bne.w	800190a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	f040 8084 	bne.w	800190a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001802:	4b96      	ldr	r3, [pc, #600]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <HAL_RCC_OscConfig+0x62>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e375      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1a      	ldr	r2, [r3, #32]
 800181e:	4b8f      	ldr	r3, [pc, #572]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <HAL_RCC_OscConfig+0x7c>
 800182a:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001832:	e005      	b.n	8001840 <HAL_RCC_OscConfig+0x88>
 8001834:	4b89      	ldr	r3, [pc, #548]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001840:	4293      	cmp	r3, r2
 8001842:	d223      	bcs.n	800188c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fd09 	bl	8002260 <RCC_SetFlashLatencyFromMSIRange>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e356      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001858:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a7f      	ldr	r2, [pc, #508]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800185e:	f043 0308 	orr.w	r3, r3, #8
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b7d      	ldr	r3, [pc, #500]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	497a      	ldr	r1, [pc, #488]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001876:	4b79      	ldr	r3, [pc, #484]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	4975      	ldr	r1, [pc, #468]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
 800188a:	e022      	b.n	80018d2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800188c:	4b73      	ldr	r3, [pc, #460]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a72      	ldr	r2, [pc, #456]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001892:	f043 0308 	orr.w	r3, r3, #8
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b70      	ldr	r3, [pc, #448]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	496d      	ldr	r1, [pc, #436]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018aa:	4b6c      	ldr	r3, [pc, #432]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	4968      	ldr	r1, [pc, #416]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fccc 	bl	8002260 <RCC_SetFlashLatencyFromMSIRange>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e319      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018d2:	f000 fc03 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 80018d6:	4601      	mov	r1, r0
 80018d8:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	4a5f      	ldr	r2, [pc, #380]	; (8001a60 <HAL_RCC_OscConfig+0x2a8>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	fa21 f303 	lsr.w	r3, r1, r3
 80018ee:	4a5d      	ldr	r2, [pc, #372]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018f2:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <HAL_RCC_OscConfig+0x2b0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fb90 	bl	800101c <HAL_InitTick>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d052      	beq.n	80019ac <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	e2fd      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d032      	beq.n	8001978 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001912:	4b52      	ldr	r3, [pc, #328]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a51      	ldr	r2, [pc, #324]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800191e:	f7ff fbc9 	bl	80010b4 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001926:	f7ff fbc5 	bl	80010b4 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e2e6      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001938:	4b48      	ldr	r3, [pc, #288]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001944:	4b45      	ldr	r3, [pc, #276]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a44      	ldr	r2, [pc, #272]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800194a:	f043 0308 	orr.w	r3, r3, #8
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	493f      	ldr	r1, [pc, #252]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001962:	4b3e      	ldr	r3, [pc, #248]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	493a      	ldr	r1, [pc, #232]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
 8001976:	e01a      	b.n	80019ae <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001978:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a37      	ldr	r2, [pc, #220]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001984:	f7ff fb96 	bl	80010b4 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800198c:	f7ff fb92 	bl	80010b4 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e2b3      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800199e:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x1d4>
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d074      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d005      	beq.n	80019cc <HAL_RCC_OscConfig+0x214>
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d10e      	bne.n	80019e4 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d10b      	bne.n	80019e4 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d064      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x2ea>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d160      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e290      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ec:	d106      	bne.n	80019fc <HAL_RCC_OscConfig+0x244>
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e01d      	b.n	8001a38 <HAL_RCC_OscConfig+0x280>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x268>
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0x280>
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fb38 	bl	80010b4 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a46:	e011      	b.n	8001a6c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fb34 	bl	80010b4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d90a      	bls.n	8001a6c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e255      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	0800f2d4 	.word	0x0800f2d4
 8001a64:	2000000c 	.word	0x2000000c
 8001a68:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6c:	4bae      	ldr	r3, [pc, #696]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0e7      	beq.n	8001a48 <HAL_RCC_OscConfig+0x290>
 8001a78:	e014      	b.n	8001aa4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fb1b 	bl	80010b4 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a82:	f7ff fb17 	bl	80010b4 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b64      	cmp	r3, #100	; 0x64
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e238      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a94:	4ba4      	ldr	r3, [pc, #656]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x2ca>
 8001aa0:	e000      	b.n	8001aa4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d060      	beq.n	8001b72 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d005      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x30a>
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	d119      	bne.n	8001af0 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d116      	bne.n	8001af0 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac2:	4b99      	ldr	r3, [pc, #612]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x322>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e215      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b93      	ldr	r3, [pc, #588]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	061b      	lsls	r3, r3, #24
 8001ae8:	498f      	ldr	r1, [pc, #572]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aee:	e040      	b.n	8001b72 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d023      	beq.n	8001b40 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af8:	4b8b      	ldr	r3, [pc, #556]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a8a      	ldr	r2, [pc, #552]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff fad6 	bl	80010b4 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fad2 	bl	80010b4 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1f3      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1e:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2a:	4b7f      	ldr	r3, [pc, #508]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	061b      	lsls	r3, r3, #24
 8001b38:	497b      	ldr	r1, [pc, #492]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
 8001b3e:	e018      	b.n	8001b72 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b40:	4b79      	ldr	r3, [pc, #484]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a78      	ldr	r2, [pc, #480]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fab2 	bl	80010b4 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b54:	f7ff faae 	bl	80010b4 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1cf      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b66:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d03c      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b86:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8c:	4a66      	ldr	r2, [pc, #408]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b96:	f7ff fa8d 	bl	80010b4 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fa89 	bl	80010b4 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e1aa      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb0:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0ef      	beq.n	8001b9e <HAL_RCC_OscConfig+0x3e6>
 8001bbe:	e01b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc0:	4b59      	ldr	r3, [pc, #356]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc6:	4a58      	ldr	r2, [pc, #352]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fa70 	bl	80010b4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fa6c 	bl	80010b4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e18d      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bea:	4b4f      	ldr	r3, [pc, #316]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ef      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a5 	beq.w	8001d50 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c0a:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10d      	bne.n	8001c32 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b44      	ldr	r3, [pc, #272]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	4a43      	ldr	r2, [pc, #268]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c20:	6593      	str	r3, [r2, #88]	; 0x58
 8001c22:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c32:	4b3e      	ldr	r3, [pc, #248]	; (8001d2c <HAL_RCC_OscConfig+0x574>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d118      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_RCC_OscConfig+0x574>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a3a      	ldr	r2, [pc, #232]	; (8001d2c <HAL_RCC_OscConfig+0x574>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fa33 	bl	80010b4 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c52:	f7ff fa2f 	bl	80010b4 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e150      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c64:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <HAL_RCC_OscConfig+0x574>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d108      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4d2>
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	4a2a      	ldr	r2, [pc, #168]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c88:	e024      	b.n	8001cd4 <HAL_RCC_OscConfig+0x51c>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d110      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4fc>
 8001c92:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a23      	ldr	r2, [pc, #140]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca8:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb2:	e00f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x51c>
 8001cb4:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d016      	beq.n	8001d0a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7ff f9ea 	bl	80010b4 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce4:	f7ff f9e6 	bl	80010b4 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e105      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0ed      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x52c>
 8001d08:	e019      	b.n	8001d3e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f9d3 	bl	80010b4 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d10:	e00e      	b.n	8001d30 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7ff f9cf 	bl	80010b4 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d905      	bls.n	8001d30 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0ee      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d30:	4b77      	ldr	r3, [pc, #476]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1e9      	bne.n	8001d12 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d3e:	7ffb      	ldrb	r3, [r7, #31]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d44:	4b72      	ldr	r3, [pc, #456]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	4a71      	ldr	r2, [pc, #452]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80d5 	beq.w	8001f04 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	2b0c      	cmp	r3, #12
 8001d5e:	f000 808e 	beq.w	8001e7e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d15b      	bne.n	8001e22 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	4b69      	ldr	r3, [pc, #420]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a68      	ldr	r2, [pc, #416]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001d70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff f99d 	bl	80010b4 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff f999 	bl	80010b4 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e0ba      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d90:	4b5f      	ldr	r3, [pc, #380]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d9c:	4b5c      	ldr	r3, [pc, #368]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	4b5c      	ldr	r3, [pc, #368]	; (8001f14 <HAL_RCC_OscConfig+0x75c>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dac:	3a01      	subs	r2, #1
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	4311      	orrs	r1, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001db6:	0212      	lsls	r2, r2, #8
 8001db8:	4311      	orrs	r1, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dbe:	0852      	lsrs	r2, r2, #1
 8001dc0:	3a01      	subs	r2, #1
 8001dc2:	0552      	lsls	r2, r2, #21
 8001dc4:	4311      	orrs	r1, r2
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dca:	0852      	lsrs	r2, r2, #1
 8001dcc:	3a01      	subs	r2, #1
 8001dce:	0652      	lsls	r2, r2, #25
 8001dd0:	4311      	orrs	r1, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dd6:	0912      	lsrs	r2, r2, #4
 8001dd8:	0452      	lsls	r2, r2, #17
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	494c      	ldr	r1, [pc, #304]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de2:	4b4b      	ldr	r3, [pc, #300]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a4a      	ldr	r2, [pc, #296]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001de8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dec:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dee:	4b48      	ldr	r3, [pc, #288]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4a47      	ldr	r2, [pc, #284]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff f95b 	bl	80010b4 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff f957 	bl	80010b4 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e078      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e14:	4b3e      	ldr	r3, [pc, #248]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x64a>
 8001e20:	e070      	b.n	8001f04 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e22:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a3a      	ldr	r2, [pc, #232]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e2c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001e2e:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d105      	bne.n	8001e46 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e3a:	4b35      	ldr	r3, [pc, #212]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	4a34      	ldr	r2, [pc, #208]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e40:	f023 0303 	bic.w	r3, r3, #3
 8001e44:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	4a31      	ldr	r2, [pc, #196]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e4c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e54:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e56:	f7ff f92d 	bl	80010b4 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5e:	f7ff f929 	bl	80010b4 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e04a      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f0      	bne.n	8001e5e <HAL_RCC_OscConfig+0x6a6>
 8001e7c:	e042      	b.n	8001f04 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e03d      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001e8a:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_RCC_OscConfig+0x758>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0203 	and.w	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d130      	bne.n	8001f00 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d127      	bne.n	8001f00 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eba:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d11f      	bne.n	8001f00 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eca:	2a07      	cmp	r2, #7
 8001ecc:	bf14      	ite	ne
 8001ece:	2201      	movne	r2, #1
 8001ed0:	2200      	moveq	r2, #0
 8001ed2:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d113      	bne.n	8001f00 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee2:	085b      	lsrs	r3, r3, #1
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d109      	bne.n	8001f00 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	085b      	lsrs	r3, r3, #1
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3720      	adds	r7, #32
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	f99d808c 	.word	0xf99d808c

08001f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0c8      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b66      	ldr	r3, [pc, #408]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d910      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b63      	ldr	r3, [pc, #396]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4961      	ldr	r1, [pc, #388]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b5f      	ldr	r3, [pc, #380]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0b0      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d04c      	beq.n	8002002 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f70:	4b56      	ldr	r3, [pc, #344]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d121      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e09e      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f88:	4b50      	ldr	r3, [pc, #320]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d115      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e092      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e086      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb0:	4b46      	ldr	r3, [pc, #280]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e07e      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fc0:	4b42      	ldr	r3, [pc, #264]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 0203 	bic.w	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	493f      	ldr	r1, [pc, #252]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd2:	f7ff f86f 	bl	80010b4 <HAL_GetTick>
 8001fd6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd8:	e00a      	b.n	8001ff0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fda:	f7ff f86b 	bl	80010b4 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e066      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff0:	4b36      	ldr	r3, [pc, #216]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 020c 	and.w	r2, r3, #12
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d1eb      	bne.n	8001fda <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d008      	beq.n	8002020 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800200e:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	492c      	ldr	r1, [pc, #176]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002020:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d210      	bcs.n	8002050 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 0207 	bic.w	r2, r3, #7
 8002036:	4924      	ldr	r1, [pc, #144]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e036      	b.n	80020be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800205c:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4918      	ldr	r1, [pc, #96]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4910      	ldr	r1, [pc, #64]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800208e:	f000 f825 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 8002092:	4601      	mov	r1, r0
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_RCC_ClockConfig+0x1b4>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	5cd3      	ldrb	r3, [r2, r3]
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	fa21 f303 	lsr.w	r3, r1, r3
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe ffb2 	bl	800101c <HAL_InitTick>
 80020b8:	4603      	mov	r3, r0
 80020ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80020bc:	7afb      	ldrb	r3, [r7, #11]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40022000 	.word	0x40022000
 80020cc:	40021000 	.word	0x40021000
 80020d0:	0800f2d4 	.word	0x0800f2d4
 80020d4:	2000000c 	.word	0x2000000c
 80020d8:	20000000 	.word	0x20000000

080020dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	; 0x24
 80020e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ea:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020f4:	4b3a      	ldr	r3, [pc, #232]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x34>
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	d121      	bne.n	800214e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d11e      	bne.n	800214e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002110:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800211c:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800211e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e005      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800212c:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002138:	4a2a      	ldr	r2, [pc, #168]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b04      	cmp	r3, #4
 8002152:	d102      	bne.n	800215a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002154:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	e004      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d101      	bne.n	8002164 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002162:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2b0c      	cmp	r3, #12
 8002168:	d133      	bne.n	80021d2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d002      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0xa4>
 800217a:	2b03      	cmp	r3, #3
 800217c:	d003      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0xaa>
 800217e:	e005      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002182:	617b      	str	r3, [r7, #20]
      break;
 8002184:	e005      	b.n	8002192 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002186:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002188:	617b      	str	r3, [r7, #20]
      break;
 800218a:	e002      	b.n	8002192 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	617b      	str	r3, [r7, #20]
      break;
 8002190:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	3301      	adds	r3, #1
 800219e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	fb02 f203 	mul.w	r2, r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0e5b      	lsrs	r3, r3, #25
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	3301      	adds	r3, #1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021d2:	69bb      	ldr	r3, [r7, #24]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3724      	adds	r7, #36	; 0x24
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40021000 	.word	0x40021000
 80021e4:	0800f2ec 	.word	0x0800f2ec
 80021e8:	00f42400 	.word	0x00f42400
 80021ec:	007a1200 	.word	0x007a1200

080021f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_RCC_GetHCLKFreq+0x14>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	2000000c 	.word	0x2000000c

08002208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800220c:	f7ff fff0 	bl	80021f0 <HAL_RCC_GetHCLKFreq>
 8002210:	4601      	mov	r1, r0
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800221e:	5cd3      	ldrb	r3, [r2, r3]
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	0800f2e4 	.word	0x0800f2e4

08002234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002238:	f7ff ffda 	bl	80021f0 <HAL_RCC_GetHCLKFreq>
 800223c:	4601      	mov	r1, r0
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	0adb      	lsrs	r3, r3, #11
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	4a04      	ldr	r2, [pc, #16]	; (800225c <HAL_RCC_GetPCLK2Freq+0x28>)
 800224a:	5cd3      	ldrb	r3, [r2, r3]
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	0800f2e4 	.word	0x0800f2e4

08002260 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800226c:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002278:	f7ff fa3a 	bl	80016f0 <HAL_PWREx_GetVoltageRange>
 800227c:	6178      	str	r0, [r7, #20]
 800227e:	e014      	b.n	80022aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002280:	4b25      	ldr	r3, [pc, #148]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002284:	4a24      	ldr	r2, [pc, #144]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228a:	6593      	str	r3, [r2, #88]	; 0x58
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002298:	f7ff fa2a 	bl	80016f0 <HAL_PWREx_GetVoltageRange>
 800229c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b0:	d10b      	bne.n	80022ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b80      	cmp	r3, #128	; 0x80
 80022b6:	d919      	bls.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2ba0      	cmp	r3, #160	; 0xa0
 80022bc:	d902      	bls.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022be:	2302      	movs	r3, #2
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	e013      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c4:	2301      	movs	r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	e010      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b80      	cmp	r3, #128	; 0x80
 80022ce:	d902      	bls.n	80022d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022d0:	2303      	movs	r3, #3
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	e00a      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d102      	bne.n	80022e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022dc:	2302      	movs	r3, #2
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	e004      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b70      	cmp	r3, #112	; 0x70
 80022e6:	d101      	bne.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022e8:	2301      	movs	r3, #1
 80022ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 0207 	bic.w	r2, r3, #7
 80022f4:	4909      	ldr	r1, [pc, #36]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022fc:	4b07      	ldr	r3, [pc, #28]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	429a      	cmp	r2, r3
 8002308:	d001      	beq.n	800230e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	40022000 	.word	0x40022000

08002320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002328:	2300      	movs	r3, #0
 800232a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800232c:	2300      	movs	r3, #0
 800232e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002338:	2b00      	cmp	r3, #0
 800233a:	d03f      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002344:	d01c      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234a:	d802      	bhi.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00e      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002350:	e01f      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002352:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002356:	d003      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002358:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800235c:	d01c      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800235e:	e018      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002360:	4b85      	ldr	r3, [pc, #532]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a84      	ldr	r2, [pc, #528]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800236c:	e015      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3304      	adds	r3, #4
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fab9 	bl	80028ec <RCCEx_PLLSAI1_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800237e:	e00c      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3320      	adds	r3, #32
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fba0 	bl	8002acc <RCCEx_PLLSAI2_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002390:	e003      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	74fb      	strb	r3, [r7, #19]
      break;
 8002396:	e000      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10b      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023a0:	4b75      	ldr	r3, [pc, #468]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ae:	4972      	ldr	r1, [pc, #456]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023b6:	e001      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d03f      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d0:	d01c      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xec>
 80023d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d6:	d802      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00e      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0xda>
 80023dc:	e01f      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80023de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023e2:	d003      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80023e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023e8:	d01c      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80023ea:	e018      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023ec:	4b62      	ldr	r3, [pc, #392]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a61      	ldr	r2, [pc, #388]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023f8:	e015      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3304      	adds	r3, #4
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fa73 	bl	80028ec <RCCEx_PLLSAI1_Config>
 8002406:	4603      	mov	r3, r0
 8002408:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800240a:	e00c      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3320      	adds	r3, #32
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fb5a 	bl	8002acc <RCCEx_PLLSAI2_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800241c:	e003      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	74fb      	strb	r3, [r7, #19]
      break;
 8002422:	e000      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10b      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800242c:	4b52      	ldr	r3, [pc, #328]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800243a:	494f      	ldr	r1, [pc, #316]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002442:	e001      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002444:	7cfb      	ldrb	r3, [r7, #19]
 8002446:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a0 	beq.w	8002596 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800245a:	4b47      	ldr	r3, [pc, #284]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800246a:	2300      	movs	r3, #0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00d      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002470:	4b41      	ldr	r3, [pc, #260]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	4a40      	ldr	r2, [pc, #256]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247a:	6593      	str	r3, [r2, #88]	; 0x58
 800247c:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002488:	2301      	movs	r3, #1
 800248a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800248c:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a3a      	ldr	r2, [pc, #232]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002496:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002498:	f7fe fe0c 	bl	80010b4 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800249e:	e009      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a0:	f7fe fe08 	bl	80010b4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d902      	bls.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	74fb      	strb	r3, [r7, #19]
        break;
 80024b2:	e005      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024b4:	4b31      	ldr	r3, [pc, #196]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ef      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d15c      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024c6:	4b2c      	ldr	r3, [pc, #176]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01f      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d019      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024e4:	4b24      	ldr	r3, [pc, #144]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f6:	4a20      	ldr	r2, [pc, #128]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002506:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002510:	4a19      	ldr	r2, [pc, #100]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7fe fdc7 	bl	80010b4 <HAL_GetTick>
 8002526:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002528:	e00b      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7fe fdc3 	bl	80010b4 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	; 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d902      	bls.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	74fb      	strb	r3, [r7, #19]
            break;
 8002540:	e006      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002542:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0ec      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10c      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002566:	4904      	ldr	r1, [pc, #16]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800256e:	e009      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	74bb      	strb	r3, [r7, #18]
 8002574:	e006      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002584:	7c7b      	ldrb	r3, [r7, #17]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258a:	4b9e      	ldr	r3, [pc, #632]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	4a9d      	ldr	r2, [pc, #628]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002594:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a2:	4b98      	ldr	r3, [pc, #608]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f023 0203 	bic.w	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	4994      	ldr	r1, [pc, #592]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025c4:	4b8f      	ldr	r3, [pc, #572]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f023 020c 	bic.w	r2, r3, #12
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d2:	498c      	ldr	r1, [pc, #560]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025e6:	4b87      	ldr	r3, [pc, #540]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	4983      	ldr	r1, [pc, #524]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002608:	4b7e      	ldr	r3, [pc, #504]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	497b      	ldr	r1, [pc, #492]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800262a:	4b76      	ldr	r3, [pc, #472]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002638:	4972      	ldr	r1, [pc, #456]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800264c:	4b6d      	ldr	r3, [pc, #436]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265a:	496a      	ldr	r1, [pc, #424]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800266e:	4b65      	ldr	r3, [pc, #404]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002674:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	4961      	ldr	r1, [pc, #388]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002690:	4b5c      	ldr	r3, [pc, #368]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269e:	4959      	ldr	r1, [pc, #356]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b2:	4b54      	ldr	r3, [pc, #336]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c0:	4950      	ldr	r1, [pc, #320]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026d4:	4b4b      	ldr	r3, [pc, #300]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	4948      	ldr	r1, [pc, #288]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026f6:	4b43      	ldr	r3, [pc, #268]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	493f      	ldr	r1, [pc, #252]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d028      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002718:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002726:	4937      	ldr	r1, [pc, #220]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002736:	d106      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002738:	4b32      	ldr	r3, [pc, #200]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a31      	ldr	r2, [pc, #196]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800273e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002742:	60d3      	str	r3, [r2, #12]
 8002744:	e011      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800274e:	d10c      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3304      	adds	r3, #4
 8002754:	2101      	movs	r1, #1
 8002756:	4618      	mov	r0, r3
 8002758:	f000 f8c8 	bl	80028ec <RCCEx_PLLSAI1_Config>
 800275c:	4603      	mov	r3, r0
 800275e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002766:	7cfb      	ldrb	r3, [r7, #19]
 8002768:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d028      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002776:	4b23      	ldr	r3, [pc, #140]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	491f      	ldr	r1, [pc, #124]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002794:	d106      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	4a1a      	ldr	r2, [pc, #104]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800279c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a0:	60d3      	str	r3, [r2, #12]
 80027a2:	e011      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3304      	adds	r3, #4
 80027b2:	2101      	movs	r1, #1
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 f899 	bl	80028ec <RCCEx_PLLSAI1_Config>
 80027ba:	4603      	mov	r3, r0
 80027bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027be:	7cfb      	ldrb	r3, [r7, #19]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02b      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e2:	4908      	ldr	r1, [pc, #32]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f2:	d109      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	4a02      	ldr	r2, [pc, #8]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027fe:	60d3      	str	r3, [r2, #12]
 8002800:	e014      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002810:	d10c      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3304      	adds	r3, #4
 8002816:	2101      	movs	r1, #1
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f867 	bl	80028ec <RCCEx_PLLSAI1_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d02f      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002846:	4928      	ldr	r1, [pc, #160]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002856:	d10d      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3304      	adds	r3, #4
 800285c:	2102      	movs	r1, #2
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f844 	bl	80028ec <RCCEx_PLLSAI1_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d014      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800286e:	7cfb      	ldrb	r3, [r7, #19]
 8002870:	74bb      	strb	r3, [r7, #18]
 8002872:	e011      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800287c:	d10c      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3320      	adds	r3, #32
 8002882:	2102      	movs	r1, #2
 8002884:	4618      	mov	r0, r3
 8002886:	f000 f921 	bl	8002acc <RCCEx_PLLSAI2_Config>
 800288a:	4603      	mov	r3, r0
 800288c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800288e:	7cfb      	ldrb	r3, [r7, #19]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002894:	7cfb      	ldrb	r3, [r7, #19]
 8002896:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028a4:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b2:	490d      	ldr	r1, [pc, #52]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028d6:	4904      	ldr	r1, [pc, #16]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028de:	7cbb      	ldrb	r3, [r7, #18]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000

080028ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028fa:	4b73      	ldr	r3, [pc, #460]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d018      	beq.n	8002938 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002906:	4b70      	ldr	r3, [pc, #448]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f003 0203 	and.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d10d      	bne.n	8002932 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
       ||
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800291e:	4b6a      	ldr	r3, [pc, #424]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
       ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d044      	beq.n	80029bc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
 8002936:	e041      	b.n	80029bc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d00c      	beq.n	800295a <RCCEx_PLLSAI1_Config+0x6e>
 8002940:	2b03      	cmp	r3, #3
 8002942:	d013      	beq.n	800296c <RCCEx_PLLSAI1_Config+0x80>
 8002944:	2b01      	cmp	r3, #1
 8002946:	d120      	bne.n	800298a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002948:	4b5f      	ldr	r3, [pc, #380]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d11d      	bne.n	8002990 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002958:	e01a      	b.n	8002990 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800295a:	4b5b      	ldr	r3, [pc, #364]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002962:	2b00      	cmp	r3, #0
 8002964:	d116      	bne.n	8002994 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800296a:	e013      	b.n	8002994 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800296c:	4b56      	ldr	r3, [pc, #344]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10f      	bne.n	8002998 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002988:	e006      	b.n	8002998 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
      break;
 800298e:	e004      	b.n	800299a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002990:	bf00      	nop
 8002992:	e002      	b.n	800299a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002994:	bf00      	nop
 8002996:	e000      	b.n	800299a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002998:	bf00      	nop
    }

    if(status == HAL_OK)
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10d      	bne.n	80029bc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029a0:	4b49      	ldr	r3, [pc, #292]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	430b      	orrs	r3, r1
 80029b6:	4944      	ldr	r1, [pc, #272]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d17d      	bne.n	8002abe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029c2:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a40      	ldr	r2, [pc, #256]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ce:	f7fe fb71 	bl	80010b4 <HAL_GetTick>
 80029d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029d4:	e009      	b.n	80029ea <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029d6:	f7fe fb6d 	bl	80010b4 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d902      	bls.n	80029ea <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	73fb      	strb	r3, [r7, #15]
        break;
 80029e8:	e005      	b.n	80029f6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1ef      	bne.n	80029d6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d160      	bne.n	8002abe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d111      	bne.n	8002a26 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a02:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6892      	ldr	r2, [r2, #8]
 8002a12:	0211      	lsls	r1, r2, #8
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68d2      	ldr	r2, [r2, #12]
 8002a18:	0912      	lsrs	r2, r2, #4
 8002a1a:	0452      	lsls	r2, r2, #17
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	492a      	ldr	r1, [pc, #168]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	610b      	str	r3, [r1, #16]
 8002a24:	e027      	b.n	8002a76 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d112      	bne.n	8002a52 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a2c:	4b26      	ldr	r3, [pc, #152]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6892      	ldr	r2, [r2, #8]
 8002a3c:	0211      	lsls	r1, r2, #8
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6912      	ldr	r2, [r2, #16]
 8002a42:	0852      	lsrs	r2, r2, #1
 8002a44:	3a01      	subs	r2, #1
 8002a46:	0552      	lsls	r2, r2, #21
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	491f      	ldr	r1, [pc, #124]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	610b      	str	r3, [r1, #16]
 8002a50:	e011      	b.n	8002a76 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6892      	ldr	r2, [r2, #8]
 8002a62:	0211      	lsls	r1, r2, #8
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6952      	ldr	r2, [r2, #20]
 8002a68:	0852      	lsrs	r2, r2, #1
 8002a6a:	3a01      	subs	r2, #1
 8002a6c:	0652      	lsls	r2, r2, #25
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	4915      	ldr	r1, [pc, #84]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a80:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a82:	f7fe fb17 	bl	80010b4 <HAL_GetTick>
 8002a86:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a88:	e009      	b.n	8002a9e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a8a:	f7fe fb13 	bl	80010b4 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d902      	bls.n	8002a9e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	73fb      	strb	r3, [r7, #15]
          break;
 8002a9c:	e005      	b.n	8002aaa <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0ef      	beq.n	8002a8a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d106      	bne.n	8002abe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	4903      	ldr	r1, [pc, #12]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40021000 	.word	0x40021000

08002acc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ada:	4b68      	ldr	r3, [pc, #416]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d018      	beq.n	8002b18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ae6:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0203 	and.w	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d10d      	bne.n	8002b12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
       ||
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002afe:	4b5f      	ldr	r3, [pc, #380]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d044      	beq.n	8002b9c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
 8002b16:	e041      	b.n	8002b9c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d00c      	beq.n	8002b3a <RCCEx_PLLSAI2_Config+0x6e>
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d013      	beq.n	8002b4c <RCCEx_PLLSAI2_Config+0x80>
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d120      	bne.n	8002b6a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b28:	4b54      	ldr	r3, [pc, #336]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d11d      	bne.n	8002b70 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b38:	e01a      	b.n	8002b70 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b3a:	4b50      	ldr	r3, [pc, #320]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d116      	bne.n	8002b74 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4a:	e013      	b.n	8002b74 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b4c:	4b4b      	ldr	r3, [pc, #300]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10f      	bne.n	8002b78 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b58:	4b48      	ldr	r3, [pc, #288]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b68:	e006      	b.n	8002b78 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b6e:	e004      	b.n	8002b7a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b70:	bf00      	nop
 8002b72:	e002      	b.n	8002b7a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b74:	bf00      	nop
 8002b76:	e000      	b.n	8002b7a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b78:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10d      	bne.n	8002b9c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b80:	4b3e      	ldr	r3, [pc, #248]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	430b      	orrs	r3, r1
 8002b96:	4939      	ldr	r1, [pc, #228]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d167      	bne.n	8002c72 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ba2:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a35      	ldr	r2, [pc, #212]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bae:	f7fe fa81 	bl	80010b4 <HAL_GetTick>
 8002bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bb4:	e009      	b.n	8002bca <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bb6:	f7fe fa7d 	bl	80010b4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d902      	bls.n	8002bca <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	73fb      	strb	r3, [r7, #15]
        break;
 8002bc8:	e005      	b.n	8002bd6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bca:	4b2c      	ldr	r3, [pc, #176]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1ef      	bne.n	8002bb6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d14a      	bne.n	8002c72 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d111      	bne.n	8002c06 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6892      	ldr	r2, [r2, #8]
 8002bf2:	0211      	lsls	r1, r2, #8
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	68d2      	ldr	r2, [r2, #12]
 8002bf8:	0912      	lsrs	r2, r2, #4
 8002bfa:	0452      	lsls	r2, r2, #17
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	491f      	ldr	r1, [pc, #124]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	614b      	str	r3, [r1, #20]
 8002c04:	e011      	b.n	8002c2a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6892      	ldr	r2, [r2, #8]
 8002c16:	0211      	lsls	r1, r2, #8
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6912      	ldr	r2, [r2, #16]
 8002c1c:	0852      	lsrs	r2, r2, #1
 8002c1e:	3a01      	subs	r2, #1
 8002c20:	0652      	lsls	r2, r2, #25
 8002c22:	430a      	orrs	r2, r1
 8002c24:	4915      	ldr	r1, [pc, #84]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c36:	f7fe fa3d 	bl	80010b4 <HAL_GetTick>
 8002c3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c3c:	e009      	b.n	8002c52 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c3e:	f7fe fa39 	bl	80010b4 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d902      	bls.n	8002c52 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	73fb      	strb	r3, [r7, #15]
          break;
 8002c50:	e005      	b.n	8002c5e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ef      	beq.n	8002c3e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d106      	bne.n	8002c72 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	4903      	ldr	r1, [pc, #12]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021000 	.word	0x40021000

08002c80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e07c      	b.n	8002d8c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d106      	bne.n	8002cb2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f004 fe91 	bl	80079d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cd2:	d902      	bls.n	8002cda <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	e002      	b.n	8002ce0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cde:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ce8:	d007      	beq.n	8002cfa <HAL_SPI_Init+0x7a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10b      	bne.n	8002d1a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d0a:	d903      	bls.n	8002d14 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
 8002d12:	e002      	b.n	8002d1a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	ea42 0103 	orr.w	r1, r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	f003 0204 	and.w	r2, r3, #4
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	ea42 0103 	orr.w	r1, r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e01d      	b.n	8002de2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f004 feea 	bl	8007b94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	f000 fbcc 	bl	8003570 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	6839      	ldr	r1, [r7, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 ff26 	bl	8003c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <HAL_TIM_PWM_Start+0x98>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <HAL_TIM_PWM_Start+0x4a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <HAL_TIM_PWM_Start+0x9c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00e      	beq.n	8002e36 <HAL_TIM_PWM_Start+0x4a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_TIM_PWM_Start+0xa0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d009      	beq.n	8002e36 <HAL_TIM_PWM_Start+0x4a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <HAL_TIM_PWM_Start+0xa4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d004      	beq.n	8002e36 <HAL_TIM_PWM_Start+0x4a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <HAL_TIM_PWM_Start+0xa8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_PWM_Start+0x4e>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_TIM_PWM_Start+0x50>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_TIM_PWM_Start+0xac>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d00b      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x8e>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e68:	d007      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0201 	orr.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	40013400 	.word	0x40013400
 8002e8c:	40014000 	.word	0x40014000
 8002e90:	40014400 	.word	0x40014400
 8002e94:	40014800 	.word	0x40014800
 8002e98:	00010007 	.word	0x00010007

08002e9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fece 	bl	8003c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a2a      	ldr	r2, [pc, #168]	; (8002f64 <HAL_TIM_PWM_Stop+0xc8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <HAL_TIM_PWM_Stop+0x4a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a29      	ldr	r2, [pc, #164]	; (8002f68 <HAL_TIM_PWM_Stop+0xcc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_TIM_PWM_Stop+0x4a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a27      	ldr	r2, [pc, #156]	; (8002f6c <HAL_TIM_PWM_Stop+0xd0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d009      	beq.n	8002ee6 <HAL_TIM_PWM_Stop+0x4a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a26      	ldr	r2, [pc, #152]	; (8002f70 <HAL_TIM_PWM_Stop+0xd4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d004      	beq.n	8002ee6 <HAL_TIM_PWM_Stop+0x4a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <HAL_TIM_PWM_Stop+0xd8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d101      	bne.n	8002eea <HAL_TIM_PWM_Stop+0x4e>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <HAL_TIM_PWM_Stop+0x50>
 8002eea:	2300      	movs	r3, #0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d017      	beq.n	8002f20 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6a1a      	ldr	r2, [r3, #32]
 8002ef6:	f241 1311 	movw	r3, #4369	; 0x1111
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10f      	bne.n	8002f20 <HAL_TIM_PWM_Stop+0x84>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	f240 4344 	movw	r3, #1092	; 0x444
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d107      	bne.n	8002f20 <HAL_TIM_PWM_Stop+0x84>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a1a      	ldr	r2, [r3, #32]
 8002f26:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10f      	bne.n	8002f50 <HAL_TIM_PWM_Stop+0xb4>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a1a      	ldr	r2, [r3, #32]
 8002f36:	f240 4344 	movw	r3, #1092	; 0x444
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_TIM_PWM_Stop+0xb4>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40013400 	.word	0x40013400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40014400 	.word	0x40014400
 8002f74:	40014800 	.word	0x40014800

08002f78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e083      	b.n	8003094 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d106      	bne.n	8002fa6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f004 fd79 	bl	8007a98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002fbc:	f023 0307 	bic.w	r3, r3, #7
 8002fc0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4610      	mov	r0, r2
 8002fce:	f000 facf 	bl	8003570 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	4313      	orrs	r3, r2
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003018:	f023 030c 	bic.w	r3, r3, #12
 800301c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003024:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	4313      	orrs	r3, r2
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	011a      	lsls	r2, r3, #4
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	031b      	lsls	r3, r3, #12
 8003048:	4313      	orrs	r3, r2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003056:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800305e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	4313      	orrs	r3, r2
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d122      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d11b      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0202 	mvn.w	r2, #2
 80030c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fa28 	bl	8003534 <HAL_TIM_IC_CaptureCallback>
 80030e4:	e005      	b.n	80030f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fa1a 	bl	8003520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fa2b 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d122      	bne.n	800314c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b04      	cmp	r3, #4
 8003112:	d11b      	bne.n	800314c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0204 	mvn.w	r2, #4
 800311c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2202      	movs	r2, #2
 8003122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f9fe 	bl	8003534 <HAL_TIM_IC_CaptureCallback>
 8003138:	e005      	b.n	8003146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f9f0 	bl	8003520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fa01 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b08      	cmp	r3, #8
 8003158:	d122      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b08      	cmp	r3, #8
 8003166:	d11b      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0208 	mvn.w	r2, #8
 8003170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2204      	movs	r2, #4
 8003176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f9d4 	bl	8003534 <HAL_TIM_IC_CaptureCallback>
 800318c:	e005      	b.n	800319a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f9c6 	bl	8003520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f9d7 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b10      	cmp	r3, #16
 80031ac:	d122      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d11b      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0210 	mvn.w	r2, #16
 80031c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2208      	movs	r2, #8
 80031ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f9aa 	bl	8003534 <HAL_TIM_IC_CaptureCallback>
 80031e0:	e005      	b.n	80031ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f99c 	bl	8003520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f9ad 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d10e      	bne.n	8003220 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d107      	bne.n	8003220 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0201 	mvn.w	r2, #1
 8003218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f976 	bl	800350c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	2b80      	cmp	r3, #128	; 0x80
 800322c:	d10e      	bne.n	800324c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003238:	2b80      	cmp	r3, #128	; 0x80
 800323a:	d107      	bne.n	800324c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fd8e 	bl	8003d68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325a:	d10e      	bne.n	800327a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	2b80      	cmp	r3, #128	; 0x80
 8003268:	d107      	bne.n	800327a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fd81 	bl	8003d7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d10e      	bne.n	80032a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003292:	2b40      	cmp	r3, #64	; 0x40
 8003294:	d107      	bne.n	80032a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800329e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f95b 	bl	800355c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d10e      	bne.n	80032d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d107      	bne.n	80032d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f06f 0220 	mvn.w	r2, #32
 80032ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fd41 	bl	8003d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e105      	b.n	8003502 <HAL_TIM_PWM_ConfigChannel+0x226>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b14      	cmp	r3, #20
 800330a:	f200 80f0 	bhi.w	80034ee <HAL_TIM_PWM_ConfigChannel+0x212>
 800330e:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003314:	08003369 	.word	0x08003369
 8003318:	080034ef 	.word	0x080034ef
 800331c:	080034ef 	.word	0x080034ef
 8003320:	080034ef 	.word	0x080034ef
 8003324:	080033a9 	.word	0x080033a9
 8003328:	080034ef 	.word	0x080034ef
 800332c:	080034ef 	.word	0x080034ef
 8003330:	080034ef 	.word	0x080034ef
 8003334:	080033eb 	.word	0x080033eb
 8003338:	080034ef 	.word	0x080034ef
 800333c:	080034ef 	.word	0x080034ef
 8003340:	080034ef 	.word	0x080034ef
 8003344:	0800342b 	.word	0x0800342b
 8003348:	080034ef 	.word	0x080034ef
 800334c:	080034ef 	.word	0x080034ef
 8003350:	080034ef 	.word	0x080034ef
 8003354:	0800346d 	.word	0x0800346d
 8003358:	080034ef 	.word	0x080034ef
 800335c:	080034ef 	.word	0x080034ef
 8003360:	080034ef 	.word	0x080034ef
 8003364:	080034ad 	.word	0x080034ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f998 	bl	80036a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0208 	orr.w	r2, r2, #8
 8003382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0204 	bic.w	r2, r2, #4
 8003392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6999      	ldr	r1, [r3, #24]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	619a      	str	r2, [r3, #24]
      break;
 80033a6:	e0a3      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fa08 	bl	80037c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6999      	ldr	r1, [r3, #24]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	021a      	lsls	r2, r3, #8
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	619a      	str	r2, [r3, #24]
      break;
 80033e8:	e082      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fa71 	bl	80038d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0208 	orr.w	r2, r2, #8
 8003404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0204 	bic.w	r2, r2, #4
 8003414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69d9      	ldr	r1, [r3, #28]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	61da      	str	r2, [r3, #28]
      break;
 8003428:	e062      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fad9 	bl	80039e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69d9      	ldr	r1, [r3, #28]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	021a      	lsls	r2, r3, #8
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	61da      	str	r2, [r3, #28]
      break;
 800346a:	e041      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fb22 	bl	8003abc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0208 	orr.w	r2, r2, #8
 8003486:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0204 	bic.w	r2, r2, #4
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034aa:	e021      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fb66 	bl	8003b84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	021a      	lsls	r2, r3, #8
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034ec:	e000      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80034ee:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop

0800350c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a40      	ldr	r2, [pc, #256]	; (8003684 <TIM_Base_SetConfig+0x114>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d013      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358e:	d00f      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a3d      	ldr	r2, [pc, #244]	; (8003688 <TIM_Base_SetConfig+0x118>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00b      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a3c      	ldr	r2, [pc, #240]	; (800368c <TIM_Base_SetConfig+0x11c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d007      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a3b      	ldr	r2, [pc, #236]	; (8003690 <TIM_Base_SetConfig+0x120>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3a      	ldr	r2, [pc, #232]	; (8003694 <TIM_Base_SetConfig+0x124>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d108      	bne.n	80035c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a2f      	ldr	r2, [pc, #188]	; (8003684 <TIM_Base_SetConfig+0x114>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d01f      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d01b      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a2c      	ldr	r2, [pc, #176]	; (8003688 <TIM_Base_SetConfig+0x118>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d017      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2b      	ldr	r2, [pc, #172]	; (800368c <TIM_Base_SetConfig+0x11c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a2a      	ldr	r2, [pc, #168]	; (8003690 <TIM_Base_SetConfig+0x120>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00f      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a29      	ldr	r2, [pc, #164]	; (8003694 <TIM_Base_SetConfig+0x124>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00b      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a28      	ldr	r2, [pc, #160]	; (8003698 <TIM_Base_SetConfig+0x128>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d007      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a27      	ldr	r2, [pc, #156]	; (800369c <TIM_Base_SetConfig+0x12c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d003      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a26      	ldr	r2, [pc, #152]	; (80036a0 <TIM_Base_SetConfig+0x130>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d108      	bne.n	800361c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a10      	ldr	r2, [pc, #64]	; (8003684 <TIM_Base_SetConfig+0x114>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00f      	beq.n	8003668 <TIM_Base_SetConfig+0xf8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a12      	ldr	r2, [pc, #72]	; (8003694 <TIM_Base_SetConfig+0x124>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00b      	beq.n	8003668 <TIM_Base_SetConfig+0xf8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a11      	ldr	r2, [pc, #68]	; (8003698 <TIM_Base_SetConfig+0x128>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d007      	beq.n	8003668 <TIM_Base_SetConfig+0xf8>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a10      	ldr	r2, [pc, #64]	; (800369c <TIM_Base_SetConfig+0x12c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d003      	beq.n	8003668 <TIM_Base_SetConfig+0xf8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a0f      	ldr	r2, [pc, #60]	; (80036a0 <TIM_Base_SetConfig+0x130>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d103      	bne.n	8003670 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	615a      	str	r2, [r3, #20]
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40012c00 	.word	0x40012c00
 8003688:	40000400 	.word	0x40000400
 800368c:	40000800 	.word	0x40000800
 8003690:	40000c00 	.word	0x40000c00
 8003694:	40013400 	.word	0x40013400
 8003698:	40014000 	.word	0x40014000
 800369c:	40014400 	.word	0x40014400
 80036a0:	40014800 	.word	0x40014800

080036a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	f023 0201 	bic.w	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f023 0302 	bic.w	r3, r3, #2
 80036f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a2c      	ldr	r2, [pc, #176]	; (80037b0 <TIM_OC1_SetConfig+0x10c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00f      	beq.n	8003724 <TIM_OC1_SetConfig+0x80>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a2b      	ldr	r2, [pc, #172]	; (80037b4 <TIM_OC1_SetConfig+0x110>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00b      	beq.n	8003724 <TIM_OC1_SetConfig+0x80>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a2a      	ldr	r2, [pc, #168]	; (80037b8 <TIM_OC1_SetConfig+0x114>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d007      	beq.n	8003724 <TIM_OC1_SetConfig+0x80>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a29      	ldr	r2, [pc, #164]	; (80037bc <TIM_OC1_SetConfig+0x118>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d003      	beq.n	8003724 <TIM_OC1_SetConfig+0x80>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a28      	ldr	r2, [pc, #160]	; (80037c0 <TIM_OC1_SetConfig+0x11c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d10c      	bne.n	800373e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f023 0308 	bic.w	r3, r3, #8
 800372a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f023 0304 	bic.w	r3, r3, #4
 800373c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a1b      	ldr	r2, [pc, #108]	; (80037b0 <TIM_OC1_SetConfig+0x10c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00f      	beq.n	8003766 <TIM_OC1_SetConfig+0xc2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a1a      	ldr	r2, [pc, #104]	; (80037b4 <TIM_OC1_SetConfig+0x110>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00b      	beq.n	8003766 <TIM_OC1_SetConfig+0xc2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <TIM_OC1_SetConfig+0x114>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d007      	beq.n	8003766 <TIM_OC1_SetConfig+0xc2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a18      	ldr	r2, [pc, #96]	; (80037bc <TIM_OC1_SetConfig+0x118>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d003      	beq.n	8003766 <TIM_OC1_SetConfig+0xc2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a17      	ldr	r2, [pc, #92]	; (80037c0 <TIM_OC1_SetConfig+0x11c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d111      	bne.n	800378a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800376c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	621a      	str	r2, [r3, #32]
}
 80037a4:	bf00      	nop
 80037a6:	371c      	adds	r7, #28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	40012c00 	.word	0x40012c00
 80037b4:	40013400 	.word	0x40013400
 80037b8:	40014000 	.word	0x40014000
 80037bc:	40014400 	.word	0x40014400
 80037c0:	40014800 	.word	0x40014800

080037c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f023 0210 	bic.w	r2, r3, #16
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0320 	bic.w	r3, r3, #32
 8003812:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a28      	ldr	r2, [pc, #160]	; (80038c4 <TIM_OC2_SetConfig+0x100>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d003      	beq.n	8003830 <TIM_OC2_SetConfig+0x6c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a27      	ldr	r2, [pc, #156]	; (80038c8 <TIM_OC2_SetConfig+0x104>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d10d      	bne.n	800384c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800384a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a1d      	ldr	r2, [pc, #116]	; (80038c4 <TIM_OC2_SetConfig+0x100>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00f      	beq.n	8003874 <TIM_OC2_SetConfig+0xb0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a1c      	ldr	r2, [pc, #112]	; (80038c8 <TIM_OC2_SetConfig+0x104>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00b      	beq.n	8003874 <TIM_OC2_SetConfig+0xb0>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a1b      	ldr	r2, [pc, #108]	; (80038cc <TIM_OC2_SetConfig+0x108>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d007      	beq.n	8003874 <TIM_OC2_SetConfig+0xb0>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a1a      	ldr	r2, [pc, #104]	; (80038d0 <TIM_OC2_SetConfig+0x10c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d003      	beq.n	8003874 <TIM_OC2_SetConfig+0xb0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a19      	ldr	r2, [pc, #100]	; (80038d4 <TIM_OC2_SetConfig+0x110>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d113      	bne.n	800389c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800387a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003882:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40013400 	.word	0x40013400
 80038cc:	40014000 	.word	0x40014000
 80038d0:	40014400 	.word	0x40014400
 80038d4:	40014800 	.word	0x40014800

080038d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0303 	bic.w	r3, r3, #3
 8003912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a27      	ldr	r2, [pc, #156]	; (80039d4 <TIM_OC3_SetConfig+0xfc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d003      	beq.n	8003942 <TIM_OC3_SetConfig+0x6a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <TIM_OC3_SetConfig+0x100>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d10d      	bne.n	800395e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800395c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <TIM_OC3_SetConfig+0xfc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00f      	beq.n	8003986 <TIM_OC3_SetConfig+0xae>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1b      	ldr	r2, [pc, #108]	; (80039d8 <TIM_OC3_SetConfig+0x100>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00b      	beq.n	8003986 <TIM_OC3_SetConfig+0xae>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1a      	ldr	r2, [pc, #104]	; (80039dc <TIM_OC3_SetConfig+0x104>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <TIM_OC3_SetConfig+0xae>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a19      	ldr	r2, [pc, #100]	; (80039e0 <TIM_OC3_SetConfig+0x108>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d003      	beq.n	8003986 <TIM_OC3_SetConfig+0xae>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a18      	ldr	r2, [pc, #96]	; (80039e4 <TIM_OC3_SetConfig+0x10c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d113      	bne.n	80039ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800398c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	621a      	str	r2, [r3, #32]
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	40013400 	.word	0x40013400
 80039dc:	40014000 	.word	0x40014000
 80039e0:	40014400 	.word	0x40014400
 80039e4:	40014800 	.word	0x40014800

080039e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	031b      	lsls	r3, r3, #12
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a18      	ldr	r2, [pc, #96]	; (8003aa8 <TIM_OC4_SetConfig+0xc0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00f      	beq.n	8003a6c <TIM_OC4_SetConfig+0x84>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a17      	ldr	r2, [pc, #92]	; (8003aac <TIM_OC4_SetConfig+0xc4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <TIM_OC4_SetConfig+0x84>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <TIM_OC4_SetConfig+0xc8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <TIM_OC4_SetConfig+0x84>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <TIM_OC4_SetConfig+0xcc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_OC4_SetConfig+0x84>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a14      	ldr	r2, [pc, #80]	; (8003ab8 <TIM_OC4_SetConfig+0xd0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d109      	bne.n	8003a80 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	019b      	lsls	r3, r3, #6
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	621a      	str	r2, [r3, #32]
}
 8003a9a:	bf00      	nop
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	40013400 	.word	0x40013400
 8003ab0:	40014000 	.word	0x40014000
 8003ab4:	40014400 	.word	0x40014400
 8003ab8:	40014800 	.word	0x40014800

08003abc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	041b      	lsls	r3, r3, #16
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a17      	ldr	r2, [pc, #92]	; (8003b70 <TIM_OC5_SetConfig+0xb4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00f      	beq.n	8003b36 <TIM_OC5_SetConfig+0x7a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a16      	ldr	r2, [pc, #88]	; (8003b74 <TIM_OC5_SetConfig+0xb8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00b      	beq.n	8003b36 <TIM_OC5_SetConfig+0x7a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a15      	ldr	r2, [pc, #84]	; (8003b78 <TIM_OC5_SetConfig+0xbc>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <TIM_OC5_SetConfig+0x7a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <TIM_OC5_SetConfig+0xc0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_OC5_SetConfig+0x7a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <TIM_OC5_SetConfig+0xc4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d109      	bne.n	8003b4a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	621a      	str	r2, [r3, #32]
}
 8003b64:	bf00      	nop
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40013400 	.word	0x40013400
 8003b78:	40014000 	.word	0x40014000
 8003b7c:	40014400 	.word	0x40014400
 8003b80:	40014800 	.word	0x40014800

08003b84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	051b      	lsls	r3, r3, #20
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a18      	ldr	r2, [pc, #96]	; (8003c3c <TIM_OC6_SetConfig+0xb8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00f      	beq.n	8003c00 <TIM_OC6_SetConfig+0x7c>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <TIM_OC6_SetConfig+0xbc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00b      	beq.n	8003c00 <TIM_OC6_SetConfig+0x7c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a16      	ldr	r2, [pc, #88]	; (8003c44 <TIM_OC6_SetConfig+0xc0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d007      	beq.n	8003c00 <TIM_OC6_SetConfig+0x7c>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <TIM_OC6_SetConfig+0xc4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <TIM_OC6_SetConfig+0x7c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <TIM_OC6_SetConfig+0xc8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d109      	bne.n	8003c14 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	029b      	lsls	r3, r3, #10
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	621a      	str	r2, [r3, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	40013400 	.word	0x40013400
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800

08003c50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f003 031f 	and.w	r3, r3, #31
 8003c62:	2201      	movs	r2, #1
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a1a      	ldr	r2, [r3, #32]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	401a      	ands	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a1a      	ldr	r2, [r3, #32]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	fa01 f303 	lsl.w	r3, r1, r3
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	621a      	str	r2, [r3, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
	...

08003c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e045      	b.n	8003d40 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d004      	beq.n	8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1b      	ldr	r2, [pc, #108]	; (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d108      	bne.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003cee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d12:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40013400 	.word	0x40013400

08003d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e040      	b.n	8003e24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f003 ff7a 	bl	8007cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2224      	movs	r2, #36	; 0x24
 8003dbc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 faa6 	bl	8004320 <UART_SetConfig>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e022      	b.n	8003e24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fde2 	bl	80049b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fe69 	bl	8004af4 <UART_CheckIdleState>
 8003e22:	4603      	mov	r3, r0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	f040 8081 	bne.w	8003f48 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_UART_Transmit+0x26>
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e079      	b.n	8003f4a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_UART_Transmit+0x38>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e072      	b.n	8003f4a <HAL_UART_Transmit+0x11e>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2221      	movs	r2, #33	; 0x21
 8003e76:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003e78:	f7fd f91c 	bl	80010b4 <HAL_GetTick>
 8003e7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	88fa      	ldrh	r2, [r7, #6]
 8003e82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	88fa      	ldrh	r2, [r7, #6]
 8003e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e96:	d108      	bne.n	8003eaa <HAL_UART_Transmit+0x7e>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d104      	bne.n	8003eaa <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	61bb      	str	r3, [r7, #24]
 8003ea8:	e003      	b.n	8003eb2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003eb2:	e02d      	b.n	8003f10 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2180      	movs	r1, #128	; 0x80
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fe5d 	bl	8004b7e <UART_WaitOnFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e03d      	b.n	8003f4a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10b      	bne.n	8003eec <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	881a      	ldrh	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee0:	b292      	uxth	r2, r2
 8003ee2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	3302      	adds	r3, #2
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	e008      	b.n	8003efe <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	781a      	ldrb	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	b292      	uxth	r2, r2
 8003ef6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	3301      	adds	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1cb      	bne.n	8003eb4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2200      	movs	r2, #0
 8003f24:	2140      	movs	r1, #64	; 0x40
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fe29 	bl	8004b7e <UART_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e009      	b.n	8003f4a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003f48:	2302      	movs	r3, #2
  }
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	f040 808a 	bne.w	8004080 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_UART_Receive_IT+0x24>
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e082      	b.n	8004082 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_UART_Receive_IT+0x36>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e07b      	b.n	8004082 <HAL_UART_Receive_IT+0x12e>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	88fa      	ldrh	r2, [r7, #6]
 8003f9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb6:	d10e      	bne.n	8003fd6 <HAL_UART_Receive_IT+0x82>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <HAL_UART_Receive_IT+0x78>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003fc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fca:	e02d      	b.n	8004028 <HAL_UART_Receive_IT+0xd4>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	22ff      	movs	r2, #255	; 0xff
 8003fd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fd4:	e028      	b.n	8004028 <HAL_UART_Receive_IT+0xd4>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10d      	bne.n	8003ffa <HAL_UART_Receive_IT+0xa6>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d104      	bne.n	8003ff0 <HAL_UART_Receive_IT+0x9c>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	22ff      	movs	r2, #255	; 0xff
 8003fea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fee:	e01b      	b.n	8004028 <HAL_UART_Receive_IT+0xd4>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	227f      	movs	r2, #127	; 0x7f
 8003ff4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ff8:	e016      	b.n	8004028 <HAL_UART_Receive_IT+0xd4>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004002:	d10d      	bne.n	8004020 <HAL_UART_Receive_IT+0xcc>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d104      	bne.n	8004016 <HAL_UART_Receive_IT+0xc2>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	227f      	movs	r2, #127	; 0x7f
 8004010:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004014:	e008      	b.n	8004028 <HAL_UART_Receive_IT+0xd4>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	223f      	movs	r2, #63	; 0x3f
 800401a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800401e:	e003      	b.n	8004028 <HAL_UART_Receive_IT+0xd4>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2222      	movs	r2, #34	; 0x22
 8004032:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404c:	d107      	bne.n	800405e <HAL_UART_Receive_IT+0x10a>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4a0d      	ldr	r2, [pc, #52]	; (8004090 <HAL_UART_Receive_IT+0x13c>)
 800405a:	661a      	str	r2, [r3, #96]	; 0x60
 800405c:	e002      	b.n	8004064 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4a0c      	ldr	r2, [pc, #48]	; (8004094 <HAL_UART_Receive_IT+0x140>)
 8004062:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800407a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004080:	2302      	movs	r3, #2
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	08004d57 	.word	0x08004d57
 8004094:	08004cad 	.word	0x08004cad

08004098 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d113      	bne.n	80040ee <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f003 0320 	and.w	r3, r3, #32
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00e      	beq.n	80040ee <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80ff 	beq.w	80042e2 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	4798      	blx	r3
      }
      return;
 80040ec:	e0f9      	b.n	80042e2 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80c1 	beq.w	8004278 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d105      	bne.n	800410c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 80b6 	beq.w	8004278 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00e      	beq.n	8004134 <HAL_UART_IRQHandler+0x9c>
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2201      	movs	r2, #1
 8004126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800412c:	f043 0201 	orr.w	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00e      	beq.n	800415c <HAL_UART_IRQHandler+0xc4>
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2202      	movs	r2, #2
 800414e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004154:	f043 0204 	orr.w	r2, r3, #4
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00e      	beq.n	8004184 <HAL_UART_IRQHandler+0xec>
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2204      	movs	r2, #4
 8004176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800417c:	f043 0202 	orr.w	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d013      	beq.n	80041b6 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d104      	bne.n	80041a2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2208      	movs	r2, #8
 80041a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ae:	f043 0208 	orr.w	r2, r3, #8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8093 	beq.w	80042e6 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00c      	beq.n	80041e4 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b40      	cmp	r3, #64	; 0x40
 80041f6:	d004      	beq.n	8004202 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d031      	beq.n	8004266 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fd03 	bl	8004c0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	2b40      	cmp	r3, #64	; 0x40
 8004214:	d123      	bne.n	800425e <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004224:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800422a:	2b00      	cmp	r3, #0
 800422c:	d013      	beq.n	8004256 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004232:	4a30      	ldr	r2, [pc, #192]	; (80042f4 <HAL_UART_IRQHandler+0x25c>)
 8004234:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800423a:	4618      	mov	r0, r3
 800423c:	f7fd f857 	bl	80012ee <HAL_DMA_Abort_IT>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d016      	beq.n	8004274 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004250:	4610      	mov	r0, r2
 8004252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004254:	e00e      	b.n	8004274 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f858 	bl	800430c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425c:	e00a      	b.n	8004274 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f854 	bl	800430c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004264:	e006      	b.n	8004274 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f850 	bl	800430c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004272:	e038      	b.n	80042e6 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004274:	bf00      	nop
    return;
 8004276:	e036      	b.n	80042e6 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00d      	beq.n	800429e <HAL_UART_IRQHandler+0x206>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004294:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fdb2 	bl	8004e00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800429c:	e026      	b.n	80042ec <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00d      	beq.n	80042c4 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d008      	beq.n	80042c4 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d017      	beq.n	80042ea <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	4798      	blx	r3
    }
    return;
 80042c2:	e012      	b.n	80042ea <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00e      	beq.n	80042ec <HAL_UART_IRQHandler+0x254>
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d009      	beq.n	80042ec <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fcce 	bl	8004c7a <UART_EndTransmit_IT>
    return;
 80042de:	bf00      	nop
 80042e0:	e004      	b.n	80042ec <HAL_UART_IRQHandler+0x254>
      return;
 80042e2:	bf00      	nop
 80042e4:	e002      	b.n	80042ec <HAL_UART_IRQHandler+0x254>
    return;
 80042e6:	bf00      	nop
 80042e8:	e000      	b.n	80042ec <HAL_UART_IRQHandler+0x254>
    return;
 80042ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80042ec:	3720      	adds	r7, #32
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	08004c4f 	.word	0x08004c4f

080042f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004320:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004324:	b088      	sub	sp, #32
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	4313      	orrs	r3, r2
 800434c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4bac      	ldr	r3, [pc, #688]	; (8004608 <UART_SetConfig+0x2e8>)
 8004356:	4013      	ands	r3, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	69f9      	ldr	r1, [r7, #28]
 800435e:	430b      	orrs	r3, r1
 8004360:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4aa2      	ldr	r2, [pc, #648]	; (800460c <UART_SetConfig+0x2ec>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	4313      	orrs	r3, r2
 8004390:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a99      	ldr	r2, [pc, #612]	; (8004610 <UART_SetConfig+0x2f0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d121      	bne.n	80043f4 <UART_SetConfig+0xd4>
 80043b0:	4b98      	ldr	r3, [pc, #608]	; (8004614 <UART_SetConfig+0x2f4>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d816      	bhi.n	80043ec <UART_SetConfig+0xcc>
 80043be:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <UART_SetConfig+0xa4>)
 80043c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c4:	080043d5 	.word	0x080043d5
 80043c8:	080043e1 	.word	0x080043e1
 80043cc:	080043db 	.word	0x080043db
 80043d0:	080043e7 	.word	0x080043e7
 80043d4:	2301      	movs	r3, #1
 80043d6:	76fb      	strb	r3, [r7, #27]
 80043d8:	e0e8      	b.n	80045ac <UART_SetConfig+0x28c>
 80043da:	2302      	movs	r3, #2
 80043dc:	76fb      	strb	r3, [r7, #27]
 80043de:	e0e5      	b.n	80045ac <UART_SetConfig+0x28c>
 80043e0:	2304      	movs	r3, #4
 80043e2:	76fb      	strb	r3, [r7, #27]
 80043e4:	e0e2      	b.n	80045ac <UART_SetConfig+0x28c>
 80043e6:	2308      	movs	r3, #8
 80043e8:	76fb      	strb	r3, [r7, #27]
 80043ea:	e0df      	b.n	80045ac <UART_SetConfig+0x28c>
 80043ec:	2310      	movs	r3, #16
 80043ee:	76fb      	strb	r3, [r7, #27]
 80043f0:	bf00      	nop
 80043f2:	e0db      	b.n	80045ac <UART_SetConfig+0x28c>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a87      	ldr	r2, [pc, #540]	; (8004618 <UART_SetConfig+0x2f8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d134      	bne.n	8004468 <UART_SetConfig+0x148>
 80043fe:	4b85      	ldr	r3, [pc, #532]	; (8004614 <UART_SetConfig+0x2f4>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f003 030c 	and.w	r3, r3, #12
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d829      	bhi.n	8004460 <UART_SetConfig+0x140>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <UART_SetConfig+0xf4>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004449 	.word	0x08004449
 8004418:	08004461 	.word	0x08004461
 800441c:	08004461 	.word	0x08004461
 8004420:	08004461 	.word	0x08004461
 8004424:	08004455 	.word	0x08004455
 8004428:	08004461 	.word	0x08004461
 800442c:	08004461 	.word	0x08004461
 8004430:	08004461 	.word	0x08004461
 8004434:	0800444f 	.word	0x0800444f
 8004438:	08004461 	.word	0x08004461
 800443c:	08004461 	.word	0x08004461
 8004440:	08004461 	.word	0x08004461
 8004444:	0800445b 	.word	0x0800445b
 8004448:	2300      	movs	r3, #0
 800444a:	76fb      	strb	r3, [r7, #27]
 800444c:	e0ae      	b.n	80045ac <UART_SetConfig+0x28c>
 800444e:	2302      	movs	r3, #2
 8004450:	76fb      	strb	r3, [r7, #27]
 8004452:	e0ab      	b.n	80045ac <UART_SetConfig+0x28c>
 8004454:	2304      	movs	r3, #4
 8004456:	76fb      	strb	r3, [r7, #27]
 8004458:	e0a8      	b.n	80045ac <UART_SetConfig+0x28c>
 800445a:	2308      	movs	r3, #8
 800445c:	76fb      	strb	r3, [r7, #27]
 800445e:	e0a5      	b.n	80045ac <UART_SetConfig+0x28c>
 8004460:	2310      	movs	r3, #16
 8004462:	76fb      	strb	r3, [r7, #27]
 8004464:	bf00      	nop
 8004466:	e0a1      	b.n	80045ac <UART_SetConfig+0x28c>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a6b      	ldr	r2, [pc, #428]	; (800461c <UART_SetConfig+0x2fc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d120      	bne.n	80044b4 <UART_SetConfig+0x194>
 8004472:	4b68      	ldr	r3, [pc, #416]	; (8004614 <UART_SetConfig+0x2f4>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004478:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800447c:	2b10      	cmp	r3, #16
 800447e:	d00f      	beq.n	80044a0 <UART_SetConfig+0x180>
 8004480:	2b10      	cmp	r3, #16
 8004482:	d802      	bhi.n	800448a <UART_SetConfig+0x16a>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <UART_SetConfig+0x174>
 8004488:	e010      	b.n	80044ac <UART_SetConfig+0x18c>
 800448a:	2b20      	cmp	r3, #32
 800448c:	d005      	beq.n	800449a <UART_SetConfig+0x17a>
 800448e:	2b30      	cmp	r3, #48	; 0x30
 8004490:	d009      	beq.n	80044a6 <UART_SetConfig+0x186>
 8004492:	e00b      	b.n	80044ac <UART_SetConfig+0x18c>
 8004494:	2300      	movs	r3, #0
 8004496:	76fb      	strb	r3, [r7, #27]
 8004498:	e088      	b.n	80045ac <UART_SetConfig+0x28c>
 800449a:	2302      	movs	r3, #2
 800449c:	76fb      	strb	r3, [r7, #27]
 800449e:	e085      	b.n	80045ac <UART_SetConfig+0x28c>
 80044a0:	2304      	movs	r3, #4
 80044a2:	76fb      	strb	r3, [r7, #27]
 80044a4:	e082      	b.n	80045ac <UART_SetConfig+0x28c>
 80044a6:	2308      	movs	r3, #8
 80044a8:	76fb      	strb	r3, [r7, #27]
 80044aa:	e07f      	b.n	80045ac <UART_SetConfig+0x28c>
 80044ac:	2310      	movs	r3, #16
 80044ae:	76fb      	strb	r3, [r7, #27]
 80044b0:	bf00      	nop
 80044b2:	e07b      	b.n	80045ac <UART_SetConfig+0x28c>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a59      	ldr	r2, [pc, #356]	; (8004620 <UART_SetConfig+0x300>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d120      	bne.n	8004500 <UART_SetConfig+0x1e0>
 80044be:	4b55      	ldr	r3, [pc, #340]	; (8004614 <UART_SetConfig+0x2f4>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044c8:	2b40      	cmp	r3, #64	; 0x40
 80044ca:	d00f      	beq.n	80044ec <UART_SetConfig+0x1cc>
 80044cc:	2b40      	cmp	r3, #64	; 0x40
 80044ce:	d802      	bhi.n	80044d6 <UART_SetConfig+0x1b6>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <UART_SetConfig+0x1c0>
 80044d4:	e010      	b.n	80044f8 <UART_SetConfig+0x1d8>
 80044d6:	2b80      	cmp	r3, #128	; 0x80
 80044d8:	d005      	beq.n	80044e6 <UART_SetConfig+0x1c6>
 80044da:	2bc0      	cmp	r3, #192	; 0xc0
 80044dc:	d009      	beq.n	80044f2 <UART_SetConfig+0x1d2>
 80044de:	e00b      	b.n	80044f8 <UART_SetConfig+0x1d8>
 80044e0:	2300      	movs	r3, #0
 80044e2:	76fb      	strb	r3, [r7, #27]
 80044e4:	e062      	b.n	80045ac <UART_SetConfig+0x28c>
 80044e6:	2302      	movs	r3, #2
 80044e8:	76fb      	strb	r3, [r7, #27]
 80044ea:	e05f      	b.n	80045ac <UART_SetConfig+0x28c>
 80044ec:	2304      	movs	r3, #4
 80044ee:	76fb      	strb	r3, [r7, #27]
 80044f0:	e05c      	b.n	80045ac <UART_SetConfig+0x28c>
 80044f2:	2308      	movs	r3, #8
 80044f4:	76fb      	strb	r3, [r7, #27]
 80044f6:	e059      	b.n	80045ac <UART_SetConfig+0x28c>
 80044f8:	2310      	movs	r3, #16
 80044fa:	76fb      	strb	r3, [r7, #27]
 80044fc:	bf00      	nop
 80044fe:	e055      	b.n	80045ac <UART_SetConfig+0x28c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a47      	ldr	r2, [pc, #284]	; (8004624 <UART_SetConfig+0x304>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d124      	bne.n	8004554 <UART_SetConfig+0x234>
 800450a:	4b42      	ldr	r3, [pc, #264]	; (8004614 <UART_SetConfig+0x2f4>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004518:	d012      	beq.n	8004540 <UART_SetConfig+0x220>
 800451a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800451e:	d802      	bhi.n	8004526 <UART_SetConfig+0x206>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <UART_SetConfig+0x214>
 8004524:	e012      	b.n	800454c <UART_SetConfig+0x22c>
 8004526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800452a:	d006      	beq.n	800453a <UART_SetConfig+0x21a>
 800452c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004530:	d009      	beq.n	8004546 <UART_SetConfig+0x226>
 8004532:	e00b      	b.n	800454c <UART_SetConfig+0x22c>
 8004534:	2300      	movs	r3, #0
 8004536:	76fb      	strb	r3, [r7, #27]
 8004538:	e038      	b.n	80045ac <UART_SetConfig+0x28c>
 800453a:	2302      	movs	r3, #2
 800453c:	76fb      	strb	r3, [r7, #27]
 800453e:	e035      	b.n	80045ac <UART_SetConfig+0x28c>
 8004540:	2304      	movs	r3, #4
 8004542:	76fb      	strb	r3, [r7, #27]
 8004544:	e032      	b.n	80045ac <UART_SetConfig+0x28c>
 8004546:	2308      	movs	r3, #8
 8004548:	76fb      	strb	r3, [r7, #27]
 800454a:	e02f      	b.n	80045ac <UART_SetConfig+0x28c>
 800454c:	2310      	movs	r3, #16
 800454e:	76fb      	strb	r3, [r7, #27]
 8004550:	bf00      	nop
 8004552:	e02b      	b.n	80045ac <UART_SetConfig+0x28c>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a2c      	ldr	r2, [pc, #176]	; (800460c <UART_SetConfig+0x2ec>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d124      	bne.n	80045a8 <UART_SetConfig+0x288>
 800455e:	4b2d      	ldr	r3, [pc, #180]	; (8004614 <UART_SetConfig+0x2f4>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800456c:	d012      	beq.n	8004594 <UART_SetConfig+0x274>
 800456e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004572:	d802      	bhi.n	800457a <UART_SetConfig+0x25a>
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <UART_SetConfig+0x268>
 8004578:	e012      	b.n	80045a0 <UART_SetConfig+0x280>
 800457a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457e:	d006      	beq.n	800458e <UART_SetConfig+0x26e>
 8004580:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004584:	d009      	beq.n	800459a <UART_SetConfig+0x27a>
 8004586:	e00b      	b.n	80045a0 <UART_SetConfig+0x280>
 8004588:	2300      	movs	r3, #0
 800458a:	76fb      	strb	r3, [r7, #27]
 800458c:	e00e      	b.n	80045ac <UART_SetConfig+0x28c>
 800458e:	2302      	movs	r3, #2
 8004590:	76fb      	strb	r3, [r7, #27]
 8004592:	e00b      	b.n	80045ac <UART_SetConfig+0x28c>
 8004594:	2304      	movs	r3, #4
 8004596:	76fb      	strb	r3, [r7, #27]
 8004598:	e008      	b.n	80045ac <UART_SetConfig+0x28c>
 800459a:	2308      	movs	r3, #8
 800459c:	76fb      	strb	r3, [r7, #27]
 800459e:	e005      	b.n	80045ac <UART_SetConfig+0x28c>
 80045a0:	2310      	movs	r3, #16
 80045a2:	76fb      	strb	r3, [r7, #27]
 80045a4:	bf00      	nop
 80045a6:	e001      	b.n	80045ac <UART_SetConfig+0x28c>
 80045a8:	2310      	movs	r3, #16
 80045aa:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a16      	ldr	r2, [pc, #88]	; (800460c <UART_SetConfig+0x2ec>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	f040 80fa 	bne.w	80047ac <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045b8:	7efb      	ldrb	r3, [r7, #27]
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d836      	bhi.n	800462c <UART_SetConfig+0x30c>
 80045be:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <UART_SetConfig+0x2a4>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080045e9 	.word	0x080045e9
 80045c8:	0800462d 	.word	0x0800462d
 80045cc:	080045f1 	.word	0x080045f1
 80045d0:	0800462d 	.word	0x0800462d
 80045d4:	080045f7 	.word	0x080045f7
 80045d8:	0800462d 	.word	0x0800462d
 80045dc:	0800462d 	.word	0x0800462d
 80045e0:	0800462d 	.word	0x0800462d
 80045e4:	080045ff 	.word	0x080045ff
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80045e8:	f7fd fe0e 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 80045ec:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045ee:	e020      	b.n	8004632 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80045f0:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <UART_SetConfig+0x308>)
 80045f2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045f4:	e01d      	b.n	8004632 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80045f6:	f7fd fd71 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 80045fa:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045fc:	e019      	b.n	8004632 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80045fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004602:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004604:	e015      	b.n	8004632 <UART_SetConfig+0x312>
 8004606:	bf00      	nop
 8004608:	efff69f3 	.word	0xefff69f3
 800460c:	40008000 	.word	0x40008000
 8004610:	40013800 	.word	0x40013800
 8004614:	40021000 	.word	0x40021000
 8004618:	40004400 	.word	0x40004400
 800461c:	40004800 	.word	0x40004800
 8004620:	40004c00 	.word	0x40004c00
 8004624:	40005000 	.word	0x40005000
 8004628:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	74fb      	strb	r3, [r7, #19]
        break;
 8004630:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 81ac 	beq.w	8004992 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	4413      	add	r3, r2
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	429a      	cmp	r2, r3
 8004648:	d305      	bcc.n	8004656 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	429a      	cmp	r2, r3
 8004654:	d902      	bls.n	800465c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	74fb      	strb	r3, [r7, #19]
 800465a:	e19a      	b.n	8004992 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 800465c:	7efb      	ldrb	r3, [r7, #27]
 800465e:	2b08      	cmp	r3, #8
 8004660:	f200 8091 	bhi.w	8004786 <UART_SetConfig+0x466>
 8004664:	a201      	add	r2, pc, #4	; (adr r2, 800466c <UART_SetConfig+0x34c>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	08004691 	.word	0x08004691
 8004670:	08004787 	.word	0x08004787
 8004674:	080046dd 	.word	0x080046dd
 8004678:	08004787 	.word	0x08004787
 800467c:	08004711 	.word	0x08004711
 8004680:	08004787 	.word	0x08004787
 8004684:	08004787 	.word	0x08004787
 8004688:	08004787 	.word	0x08004787
 800468c:	0800475d 	.word	0x0800475d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004690:	f7fd fdba 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 8004694:	4603      	mov	r3, r0
 8004696:	4619      	mov	r1, r3
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	f04f 0400 	mov.w	r4, #0
 80046a4:	0214      	lsls	r4, r2, #8
 80046a6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80046aa:	020b      	lsls	r3, r1, #8
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6852      	ldr	r2, [r2, #4]
 80046b0:	0852      	lsrs	r2, r2, #1
 80046b2:	4611      	mov	r1, r2
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	eb13 0b01 	adds.w	fp, r3, r1
 80046bc:	eb44 0c02 	adc.w	ip, r4, r2
 80046c0:	4658      	mov	r0, fp
 80046c2:	4661      	mov	r1, ip
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f04f 0400 	mov.w	r4, #0
 80046cc:	461a      	mov	r2, r3
 80046ce:	4623      	mov	r3, r4
 80046d0:	f7fc fada 	bl	8000c88 <__aeabi_uldivmod>
 80046d4:	4603      	mov	r3, r0
 80046d6:	460c      	mov	r4, r1
 80046d8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80046da:	e057      	b.n	800478c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	085b      	lsrs	r3, r3, #1
 80046e2:	f04f 0400 	mov.w	r4, #0
 80046e6:	49b1      	ldr	r1, [pc, #708]	; (80049ac <UART_SetConfig+0x68c>)
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	eb13 0b01 	adds.w	fp, r3, r1
 80046f0:	eb44 0c02 	adc.w	ip, r4, r2
 80046f4:	4658      	mov	r0, fp
 80046f6:	4661      	mov	r1, ip
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f04f 0400 	mov.w	r4, #0
 8004700:	461a      	mov	r2, r3
 8004702:	4623      	mov	r3, r4
 8004704:	f7fc fac0 	bl	8000c88 <__aeabi_uldivmod>
 8004708:	4603      	mov	r3, r0
 800470a:	460c      	mov	r4, r1
 800470c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800470e:	e03d      	b.n	800478c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004710:	f7fd fce4 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 8004714:	4603      	mov	r3, r0
 8004716:	4619      	mov	r1, r3
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	f04f 0400 	mov.w	r4, #0
 8004724:	0214      	lsls	r4, r2, #8
 8004726:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800472a:	020b      	lsls	r3, r1, #8
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6852      	ldr	r2, [r2, #4]
 8004730:	0852      	lsrs	r2, r2, #1
 8004732:	4611      	mov	r1, r2
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	eb13 0b01 	adds.w	fp, r3, r1
 800473c:	eb44 0c02 	adc.w	ip, r4, r2
 8004740:	4658      	mov	r0, fp
 8004742:	4661      	mov	r1, ip
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f04f 0400 	mov.w	r4, #0
 800474c:	461a      	mov	r2, r3
 800474e:	4623      	mov	r3, r4
 8004750:	f7fc fa9a 	bl	8000c88 <__aeabi_uldivmod>
 8004754:	4603      	mov	r3, r0
 8004756:	460c      	mov	r4, r1
 8004758:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800475a:	e017      	b.n	800478c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	085b      	lsrs	r3, r3, #1
 8004762:	f04f 0400 	mov.w	r4, #0
 8004766:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800476a:	f144 0100 	adc.w	r1, r4, #0
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f04f 0400 	mov.w	r4, #0
 8004776:	461a      	mov	r2, r3
 8004778:	4623      	mov	r3, r4
 800477a:	f7fc fa85 	bl	8000c88 <__aeabi_uldivmod>
 800477e:	4603      	mov	r3, r0
 8004780:	460c      	mov	r4, r1
 8004782:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004784:	e002      	b.n	800478c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	74fb      	strb	r3, [r7, #19]
            break;
 800478a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004792:	d308      	bcc.n	80047a6 <UART_SetConfig+0x486>
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800479a:	d204      	bcs.n	80047a6 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	60da      	str	r2, [r3, #12]
 80047a4:	e0f5      	b.n	8004992 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	74fb      	strb	r3, [r7, #19]
 80047aa:	e0f2      	b.n	8004992 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b4:	d17f      	bne.n	80048b6 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80047b6:	7efb      	ldrb	r3, [r7, #27]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d85c      	bhi.n	8004876 <UART_SetConfig+0x556>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <UART_SetConfig+0x4a4>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047e9 	.word	0x080047e9
 80047c8:	08004807 	.word	0x08004807
 80047cc:	08004825 	.word	0x08004825
 80047d0:	08004877 	.word	0x08004877
 80047d4:	08004841 	.word	0x08004841
 80047d8:	08004877 	.word	0x08004877
 80047dc:	08004877 	.word	0x08004877
 80047e0:	08004877 	.word	0x08004877
 80047e4:	0800485f 	.word	0x0800485f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80047e8:	f7fd fd0e 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 80047ec:	4603      	mov	r3, r0
 80047ee:	005a      	lsls	r2, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	085b      	lsrs	r3, r3, #1
 80047f6:	441a      	add	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	b29b      	uxth	r3, r3
 8004802:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004804:	e03a      	b.n	800487c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004806:	f7fd fd15 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 800480a:	4603      	mov	r3, r0
 800480c:	005a      	lsls	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	085b      	lsrs	r3, r3, #1
 8004814:	441a      	add	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	b29b      	uxth	r3, r3
 8004820:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004822:	e02b      	b.n	800487c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	085b      	lsrs	r3, r3, #1
 800482a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800482e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6852      	ldr	r2, [r2, #4]
 8004836:	fbb3 f3f2 	udiv	r3, r3, r2
 800483a:	b29b      	uxth	r3, r3
 800483c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800483e:	e01d      	b.n	800487c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004840:	f7fd fc4c 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 8004844:	4603      	mov	r3, r0
 8004846:	005a      	lsls	r2, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	085b      	lsrs	r3, r3, #1
 800484e:	441a      	add	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	fbb2 f3f3 	udiv	r3, r2, r3
 8004858:	b29b      	uxth	r3, r3
 800485a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800485c:	e00e      	b.n	800487c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	085b      	lsrs	r3, r3, #1
 8004864:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004870:	b29b      	uxth	r3, r3
 8004872:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004874:	e002      	b.n	800487c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	74fb      	strb	r3, [r7, #19]
        break;
 800487a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b0f      	cmp	r3, #15
 8004880:	d916      	bls.n	80048b0 <UART_SetConfig+0x590>
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004888:	d212      	bcs.n	80048b0 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f023 030f 	bic.w	r3, r3, #15
 8004892:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	b29b      	uxth	r3, r3
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	b29a      	uxth	r2, r3
 80048a0:	897b      	ldrh	r3, [r7, #10]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	897a      	ldrh	r2, [r7, #10]
 80048ac:	60da      	str	r2, [r3, #12]
 80048ae:	e070      	b.n	8004992 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	74fb      	strb	r3, [r7, #19]
 80048b4:	e06d      	b.n	8004992 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80048b6:	7efb      	ldrb	r3, [r7, #27]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d859      	bhi.n	8004970 <UART_SetConfig+0x650>
 80048bc:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <UART_SetConfig+0x5a4>)
 80048be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c2:	bf00      	nop
 80048c4:	080048e9 	.word	0x080048e9
 80048c8:	08004905 	.word	0x08004905
 80048cc:	08004921 	.word	0x08004921
 80048d0:	08004971 	.word	0x08004971
 80048d4:	0800493d 	.word	0x0800493d
 80048d8:	08004971 	.word	0x08004971
 80048dc:	08004971 	.word	0x08004971
 80048e0:	08004971 	.word	0x08004971
 80048e4:	08004959 	.word	0x08004959
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80048e8:	f7fd fc8e 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	085b      	lsrs	r3, r3, #1
 80048f4:	441a      	add	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fe:	b29b      	uxth	r3, r3
 8004900:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004902:	e038      	b.n	8004976 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004904:	f7fd fc96 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 8004908:	4602      	mov	r2, r0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	441a      	add	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	fbb2 f3f3 	udiv	r3, r2, r3
 800491a:	b29b      	uxth	r3, r3
 800491c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800491e:	e02a      	b.n	8004976 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800492a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6852      	ldr	r2, [r2, #4]
 8004932:	fbb3 f3f2 	udiv	r3, r3, r2
 8004936:	b29b      	uxth	r3, r3
 8004938:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800493a:	e01c      	b.n	8004976 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800493c:	f7fd fbce 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	441a      	add	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004952:	b29b      	uxth	r3, r3
 8004954:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004956:	e00e      	b.n	8004976 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	fbb2 f3f3 	udiv	r3, r2, r3
 800496a:	b29b      	uxth	r3, r3
 800496c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800496e:	e002      	b.n	8004976 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	74fb      	strb	r3, [r7, #19]
        break;
 8004974:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b0f      	cmp	r3, #15
 800497a:	d908      	bls.n	800498e <UART_SetConfig+0x66e>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004982:	d204      	bcs.n	800498e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	60da      	str	r2, [r3, #12]
 800498c:	e001      	b.n	8004992 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800499e:	7cfb      	ldrb	r3, [r7, #19]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3720      	adds	r7, #32
 80049a4:	46bd      	mov	sp, r7
 80049a6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80049aa:	bf00      	nop
 80049ac:	f4240000 	.word	0xf4240000

080049b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01a      	beq.n	8004ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aae:	d10a      	bne.n	8004ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	605a      	str	r2, [r3, #4]
  }
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004b02:	f7fc fad7 	bl	80010b4 <HAL_GetTick>
 8004b06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d10e      	bne.n	8004b34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f82a 	bl	8004b7e <UART_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e020      	b.n	8004b76 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d10e      	bne.n	8004b60 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f814 	bl	8004b7e <UART_WaitOnFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e00a      	b.n	8004b76 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	603b      	str	r3, [r7, #0]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8e:	e02a      	b.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b96:	d026      	beq.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b98:	f7fc fa8c 	bl	80010b4 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d302      	bcc.n	8004bae <UART_WaitOnFlagUntilTimeout+0x30>
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d11b      	bne.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bbc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0201 	bic.w	r2, r2, #1
 8004bcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e00f      	b.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	bf0c      	ite	eq
 8004bf6:	2301      	moveq	r3, #1
 8004bf8:	2300      	movne	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d0c5      	beq.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c24:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0201 	bic.w	r2, r2, #1
 8004c34:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f7ff fb4d 	bl	800430c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b082      	sub	sp, #8
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c90:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff fb2a 	bl	80042f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ca4:	bf00      	nop
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cba:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc0:	2b22      	cmp	r3, #34	; 0x22
 8004cc2:	d13a      	bne.n	8004d3a <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004cca:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ccc:	89bb      	ldrh	r3, [r7, #12]
 8004cce:	b2d9      	uxtb	r1, r3
 8004cd0:	89fb      	ldrh	r3, [r7, #14]
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	400a      	ands	r2, r1
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d123      	bne.n	8004d4e <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d14:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f001 fea6 	bl	8006a84 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d38:	e009      	b.n	8004d4e <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	8b1b      	ldrh	r3, [r3, #24]
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0208 	orr.w	r2, r2, #8
 8004d4a:	b292      	uxth	r2, r2
 8004d4c:	831a      	strh	r2, [r3, #24]
}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d64:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d6a:	2b22      	cmp	r3, #34	; 0x22
 8004d6c:	d13a      	bne.n	8004de4 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d74:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d7c:	89ba      	ldrh	r2, [r7, #12]
 8004d7e:	89fb      	ldrh	r3, [r7, #14]
 8004d80:	4013      	ands	r3, r2
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	1c9a      	adds	r2, r3, #2
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d123      	bne.n	8004df8 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dbe:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0201 	bic.w	r2, r2, #1
 8004dce:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f001 fe51 	bl	8006a84 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004de2:	e009      	b.n	8004df8 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	8b1b      	ldrh	r3, [r3, #24]
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0208 	orr.w	r2, r2, #8
 8004df4:	b292      	uxth	r2, r2
 8004df6:	831a      	strh	r2, [r3, #24]
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <peekCommand>:
#include "command.h"


void peekCommand(gcodeCommand_context* command, diffDriveRobot_Context* robot, UART_HandleTypeDef *huart){
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08e      	sub	sp, #56	; 0x38
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
    if (hasM(command)) {
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f001 f85b 	bl	8005edc <hasM>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 81d2 	beq.w	80051d2 <peekCommand+0x3be>
        float Kp,Ti,Td, d;
        switch (command->M)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	88db      	ldrh	r3, [r3, #6]
 8004e32:	f240 1241 	movw	r2, #321	; 0x141
 8004e36:	4293      	cmp	r3, r2
 8004e38:	f000 812c 	beq.w	8005094 <peekCommand+0x280>
 8004e3c:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8004e40:	da30      	bge.n	8004ea4 <peekCommand+0x90>
 8004e42:	f240 122d 	movw	r2, #301	; 0x12d
 8004e46:	4293      	cmp	r3, r2
 8004e48:	f000 8082 	beq.w	8004f50 <peekCommand+0x13c>
 8004e4c:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8004e50:	da0d      	bge.n	8004e6e <peekCommand+0x5a>
 8004e52:	2b72      	cmp	r3, #114	; 0x72
 8004e54:	d06d      	beq.n	8004f32 <peekCommand+0x11e>
 8004e56:	2b72      	cmp	r3, #114	; 0x72
 8004e58:	dc04      	bgt.n	8004e64 <peekCommand+0x50>
 8004e5a:	2b12      	cmp	r3, #18
 8004e5c:	d061      	beq.n	8004f22 <peekCommand+0x10e>
 8004e5e:	2b13      	cmp	r3, #19
 8004e60:	d063      	beq.n	8004f2a <peekCommand+0x116>
                break;
            case 667:
                printSelf(huart);
                break;
            default:
            	break;// default statements
 8004e62:	e1d3      	b.n	800520c <peekCommand+0x3f8>
        switch (command->M)
 8004e64:	2b73      	cmp	r3, #115	; 0x73
 8004e66:	d069      	beq.n	8004f3c <peekCommand+0x128>
 8004e68:	2b74      	cmp	r3, #116	; 0x74
 8004e6a:	d06c      	beq.n	8004f46 <peekCommand+0x132>
            	break;// default statements
 8004e6c:	e1ce      	b.n	800520c <peekCommand+0x3f8>
        switch (command->M)
 8004e6e:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8004e72:	f000 80df 	beq.w	8005034 <peekCommand+0x220>
 8004e76:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8004e7a:	dc09      	bgt.n	8004e90 <peekCommand+0x7c>
 8004e7c:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8004e80:	f000 8097 	beq.w	8004fb2 <peekCommand+0x19e>
 8004e84:	f240 1237 	movw	r2, #311	; 0x137
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	f000 80c3 	beq.w	8005014 <peekCommand+0x200>
            	break;// default statements
 8004e8e:	e1bd      	b.n	800520c <peekCommand+0x3f8>
        switch (command->M)
 8004e90:	f240 1239 	movw	r2, #313	; 0x139
 8004e94:	4293      	cmp	r3, r2
 8004e96:	f000 80dd 	beq.w	8005054 <peekCommand+0x240>
 8004e9a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8004e9e:	f000 80e9 	beq.w	8005074 <peekCommand+0x260>
            	break;// default statements
 8004ea2:	e1b3      	b.n	800520c <peekCommand+0x3f8>
        switch (command->M)
 8004ea4:	f240 124d 	movw	r2, #333	; 0x14d
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	f000 8152 	beq.w	8005152 <peekCommand+0x33e>
 8004eae:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8004eb2:	da1a      	bge.n	8004eea <peekCommand+0xd6>
 8004eb4:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8004eb8:	f000 8119 	beq.w	80050ee <peekCommand+0x2da>
 8004ebc:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8004ec0:	dc09      	bgt.n	8004ed6 <peekCommand+0xc2>
 8004ec2:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8004ec6:	f000 80f4 	beq.w	80050b2 <peekCommand+0x29e>
 8004eca:	f240 1243 	movw	r2, #323	; 0x143
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	f000 80fe 	beq.w	80050d0 <peekCommand+0x2bc>
            	break;// default statements
 8004ed4:	e19a      	b.n	800520c <peekCommand+0x3f8>
        switch (command->M)
 8004ed6:	f240 124b 	movw	r2, #331	; 0x14b
 8004eda:	4293      	cmp	r3, r2
 8004edc:	f000 8115 	beq.w	800510a <peekCommand+0x2f6>
 8004ee0:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 8004ee4:	f000 8123 	beq.w	800512e <peekCommand+0x31a>
            	break;// default statements
 8004ee8:	e190      	b.n	800520c <peekCommand+0x3f8>
        switch (command->M)
 8004eea:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8004eee:	f000 815a 	beq.w	80051a6 <peekCommand+0x392>
 8004ef2:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8004ef6:	dc09      	bgt.n	8004f0c <peekCommand+0xf8>
 8004ef8:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8004efc:	f000 8137 	beq.w	800516e <peekCommand+0x35a>
 8004f00:	f240 124f 	movw	r2, #335	; 0x14f
 8004f04:	4293      	cmp	r3, r2
 8004f06:	f000 8140 	beq.w	800518a <peekCommand+0x376>
            	break;// default statements
 8004f0a:	e17f      	b.n	800520c <peekCommand+0x3f8>
        switch (command->M)
 8004f0c:	f240 229a 	movw	r2, #666	; 0x29a
 8004f10:	4293      	cmp	r3, r2
 8004f12:	f000 8156 	beq.w	80051c2 <peekCommand+0x3ae>
 8004f16:	f240 229b 	movw	r2, #667	; 0x29b
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	f000 8155 	beq.w	80051ca <peekCommand+0x3b6>
            	break;// default statements
 8004f20:	e174      	b.n	800520c <peekCommand+0x3f8>
            	breakeMotors(robot);
 8004f22:	68b8      	ldr	r0, [r7, #8]
 8004f24:	f000 fb4d 	bl	80055c2 <breakeMotors>
              	break;
 8004f28:	e170      	b.n	800520c <peekCommand+0x3f8>
            	unBreakeMotors(robot);
 8004f2a:	68b8      	ldr	r0, [r7, #8]
 8004f2c:	f000 fb5b 	bl	80055e6 <unBreakeMotors>
              	break;
 8004f30:	e16c      	b.n	800520c <peekCommand+0x3f8>
                printPosition(robot, huart);
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	68b8      	ldr	r0, [r7, #8]
 8004f36:	f000 fb8b 	bl	8005650 <printPosition>
                break;
 8004f3a:	e167      	b.n	800520c <peekCommand+0x3f8>
                printRspeed(robot, huart);
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	68b8      	ldr	r0, [r7, #8]
 8004f40:	f000 fbca 	bl	80056d8 <printRspeed>
                break;
 8004f44:	e162      	b.n	800520c <peekCommand+0x3f8>
                printLspeed(robot, huart);
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	68b8      	ldr	r0, [r7, #8]
 8004f4a:	f000 fc05 	bl	8005758 <printLspeed>
                break;
 8004f4e:	e15d      	b.n	800520c <peekCommand+0x3f8>
                if (hasP(command)) Kp = command->P;
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f001 f822 	bl	8005f9a <hasP>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <peekCommand+0x150>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
 8004f62:	e002      	b.n	8004f6a <peekCommand+0x156>
                else Kp = 0.;
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	637b      	str	r3, [r7, #52]	; 0x34
                if (hasI(command)) Ti = command->I;
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f001 f828 	bl	8005fc0 <hasI>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <peekCommand+0x16a>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f7c:	e002      	b.n	8004f84 <peekCommand+0x170>
                else Ti = 0.;
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	633b      	str	r3, [r7, #48]	; 0x30
                if (hasD(command)) Td = command->D;
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f001 f841 	bl	800600c <hasD>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <peekCommand+0x184>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f96:	e002      	b.n	8004f9e <peekCommand+0x18a>
                else Td = 0.;
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                setPID_D(robot, Kp, Ti, Td);
 8004f9e:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8004fa2:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8004fa6:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8004faa:	68b8      	ldr	r0, [r7, #8]
 8004fac:	f000 fc4a 	bl	8005844 <setPID_D>
                break;
 8004fb0:	e12c      	b.n	800520c <peekCommand+0x3f8>
                if (hasP(command)) Kp = command->P;
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fff1 	bl	8005f9a <hasP>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <peekCommand+0x1b2>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc4:	e002      	b.n	8004fcc <peekCommand+0x1b8>
                else Kp = 0.;
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	637b      	str	r3, [r7, #52]	; 0x34
                if (hasI(command)) Ti = command->I;
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 fff7 	bl	8005fc0 <hasI>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <peekCommand+0x1cc>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8004fde:	e002      	b.n	8004fe6 <peekCommand+0x1d2>
                else Ti = 0.;
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	633b      	str	r3, [r7, #48]	; 0x30
                if (hasD(command)) Td = command->D;
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f001 f810 	bl	800600c <hasD>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <peekCommand+0x1e6>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ff8:	e002      	b.n	8005000 <peekCommand+0x1ec>
                else Td = 0.;
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
                setPID_G(robot, Kp, Ti, Td);
 8005000:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8005004:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8005008:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800500c:	68b8      	ldr	r0, [r7, #8]
 800500e:	f000 fc35 	bl	800587c <setPID_G>
                break;
 8005012:	e0fb      	b.n	800520c <peekCommand+0x3f8>
                if (hasD(command)){
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 fff9 	bl	800600c <hasD>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80da 	beq.w	80051d6 <peekCommand+0x3c2>
                     d = command->D;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	617b      	str	r3, [r7, #20]
                     setROdomWheelDia(robot, d);
 8005028:	ed97 0a05 	vldr	s0, [r7, #20]
 800502c:	68b8      	ldr	r0, [r7, #8]
 800502e:	f000 fc57 	bl	80058e0 <setROdomWheelDia>
            break;
 8005032:	e0d0      	b.n	80051d6 <peekCommand+0x3c2>
                if (hasD(command)){
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 ffe9 	bl	800600c <hasD>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 80cc 	beq.w	80051da <peekCommand+0x3c6>
                     d = command->D;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005046:	617b      	str	r3, [r7, #20]
                     setLOdomWheelDia(robot, d);
 8005048:	ed97 0a05 	vldr	s0, [r7, #20]
 800504c:	68b8      	ldr	r0, [r7, #8]
 800504e:	f000 fc31 	bl	80058b4 <setLOdomWheelDia>
            break;
 8005052:	e0c2      	b.n	80051da <peekCommand+0x3c6>
                if (hasD(command)){
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 ffd9 	bl	800600c <hasD>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80be 	beq.w	80051de <peekCommand+0x3ca>
                     d = command->D;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005066:	617b      	str	r3, [r7, #20]
                     setOdomInnerDist(robot, d);
 8005068:	ed97 0a05 	vldr	s0, [r7, #20]
 800506c:	68b8      	ldr	r0, [r7, #8]
 800506e:	f000 fc4d 	bl	800590c <setOdomInnerDist>
            break;
 8005072:	e0b4      	b.n	80051de <peekCommand+0x3ca>
                if (hasD(command)){
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 ffc9 	bl	800600c <hasD>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80b0 	beq.w	80051e2 <peekCommand+0x3ce>
                     d = command->D;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005086:	617b      	str	r3, [r7, #20]
                     setMotorInnerDist(robot, d);
 8005088:	ed97 0a05 	vldr	s0, [r7, #20]
 800508c:	68b8      	ldr	r0, [r7, #8]
 800508e:	f000 fc4d 	bl	800592c <setMotorInnerDist>
            break;
 8005092:	e0a6      	b.n	80051e2 <peekCommand+0x3ce>
                if (hasD(command)){
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 ffb9 	bl	800600c <hasD>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 80a2 	beq.w	80051e6 <peekCommand+0x3d2>
                     d = command->D;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a6:	617b      	str	r3, [r7, #20]
                     robot->motionController->Srho = d;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	615a      	str	r2, [r3, #20]
            break;
 80050b0:	e099      	b.n	80051e6 <peekCommand+0x3d2>
                if (hasD(command)){
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 ffaa 	bl	800600c <hasD>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 8095 	beq.w	80051ea <peekCommand+0x3d6>
                     d = command->D;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c4:	617b      	str	r3, [r7, #20]
                     robot->motionController->Salpha = d;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	619a      	str	r2, [r3, #24]
            break;
 80050ce:	e08c      	b.n	80051ea <peekCommand+0x3d6>
                if (hasD(command)){
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 ff9b 	bl	800600c <hasD>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8088 	beq.w	80051ee <peekCommand+0x3da>
                     d = command->D;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e2:	617b      	str	r3, [r7, #20]
                     robot->motionController->Krho = d;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	60da      	str	r2, [r3, #12]
            break;
 80050ec:	e07f      	b.n	80051ee <peekCommand+0x3da>
                if (hasD(command)){
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 ff8c 	bl	800600c <hasD>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d07b      	beq.n	80051f2 <peekCommand+0x3de>
                     d = command->D;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fe:	617b      	str	r3, [r7, #20]
                     robot->motionController->Kalpha = d;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	611a      	str	r2, [r3, #16]
            break;
 8005108:	e073      	b.n	80051f2 <peekCommand+0x3de>
                if (hasD(command)){
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 ff7e 	bl	800600c <hasD>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d06f      	beq.n	80051f6 <peekCommand+0x3e2>
                     d = command->D;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511a:	617b      	str	r3, [r7, #20]
                     robot->differential->maxLinearVelocity     = d;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	605a      	str	r2, [r3, #4]
                     robot->motionController->rampLin.vMax      = d;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 800512c:	e063      	b.n	80051f6 <peekCommand+0x3e2>
                if (hasD(command)){
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 ff6c 	bl	800600c <hasD>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d05f      	beq.n	80051fa <peekCommand+0x3e6>
                     d = command->D;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513e:	617b      	str	r3, [r7, #20]
                     robot->differential->maxAngularVelocity            = d;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	609a      	str	r2, [r3, #8]
                     robot->motionController->rampAng.vMax              = d;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 8005150:	e053      	b.n	80051fa <peekCommand+0x3e6>
                if (hasD(command)){
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 ff5a 	bl	800600c <hasD>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d04f      	beq.n	80051fe <peekCommand+0x3ea>
                     d = command->D;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005162:	617b      	str	r3, [r7, #20]
                     robot->motionController->rampLin.aMax = d;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	621a      	str	r2, [r3, #32]
            break;
 800516c:	e047      	b.n	80051fe <peekCommand+0x3ea>
                if (hasD(command)){
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 ff4c 	bl	800600c <hasD>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d043      	beq.n	8005202 <peekCommand+0x3ee>
                     d = command->D;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517e:	617b      	str	r3, [r7, #20]
                     robot->motionController->rampAng.aMax = d;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 8005188:	e03b      	b.n	8005202 <peekCommand+0x3ee>
                if (hasD(command)){
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 ff3e 	bl	800600c <hasD>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d037      	beq.n	8005206 <peekCommand+0x3f2>
                     d = command->D;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519a:	617b      	str	r3, [r7, #20]
                     robot->motionController->rampLin.aFrein = d;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	61da      	str	r2, [r3, #28]
            break;
 80051a4:	e02f      	b.n	8005206 <peekCommand+0x3f2>
                if (hasD(command)){
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 ff30 	bl	800600c <hasD>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d02b      	beq.n	800520a <peekCommand+0x3f6>
                     d = command->D;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b6:	617b      	str	r3, [r7, #20]
                     robot->motionController->rampAng.aFrein = d;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 80051c0:	e023      	b.n	800520a <peekCommand+0x3f6>
                printComTest(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fb08 	bl	80057d8 <printComTest>
                break;
 80051c8:	e020      	b.n	800520c <peekCommand+0x3f8>
                printSelf(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fb20 	bl	8005810 <printSelf>
                break;
 80051d0:	e01c      	b.n	800520c <peekCommand+0x3f8>
        }
    }
 80051d2:	bf00      	nop
 80051d4:	e01a      	b.n	800520c <peekCommand+0x3f8>
            break;
 80051d6:	bf00      	nop
 80051d8:	e018      	b.n	800520c <peekCommand+0x3f8>
            break;
 80051da:	bf00      	nop
 80051dc:	e016      	b.n	800520c <peekCommand+0x3f8>
            break;
 80051de:	bf00      	nop
 80051e0:	e014      	b.n	800520c <peekCommand+0x3f8>
            break;
 80051e2:	bf00      	nop
 80051e4:	e012      	b.n	800520c <peekCommand+0x3f8>
            break;
 80051e6:	bf00      	nop
 80051e8:	e010      	b.n	800520c <peekCommand+0x3f8>
            break;
 80051ea:	bf00      	nop
 80051ec:	e00e      	b.n	800520c <peekCommand+0x3f8>
            break;
 80051ee:	bf00      	nop
 80051f0:	e00c      	b.n	800520c <peekCommand+0x3f8>
            break;
 80051f2:	bf00      	nop
 80051f4:	e00a      	b.n	800520c <peekCommand+0x3f8>
            break;
 80051f6:	bf00      	nop
 80051f8:	e008      	b.n	800520c <peekCommand+0x3f8>
            break;
 80051fa:	bf00      	nop
 80051fc:	e006      	b.n	800520c <peekCommand+0x3f8>
            break;
 80051fe:	bf00      	nop
 8005200:	e004      	b.n	800520c <peekCommand+0x3f8>
            break;
 8005202:	bf00      	nop
 8005204:	e002      	b.n	800520c <peekCommand+0x3f8>
            break;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <peekCommand+0x3f8>
            break;
 800520a:	bf00      	nop
    if (hasN(command)) {
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 fe78 	bl	8005f02 <hasN>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
        switch (command->N)
        {
            default:
            	break;// default statements
        }
    }
 8005216:	bf00      	nop
    if (hasG(command)) {
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fe85 	bl	8005f28 <hasG>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80f5 	beq.w	8005410 <peekCommand+0x5fc>
        switch (command->G)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	891b      	ldrh	r3, [r3, #8]
 800522a:	2b0a      	cmp	r3, #10
 800522c:	f000 8086 	beq.w	800533c <peekCommand+0x528>
 8005230:	2b0a      	cmp	r3, #10
 8005232:	dc04      	bgt.n	800523e <peekCommand+0x42a>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <peekCommand+0x438>
 8005238:	2b01      	cmp	r3, #1
 800523a:	d043      	beq.n	80052c4 <peekCommand+0x4b0>
                setPosition(robot, x, y, theta);
                linearMoveTheta(robot, x, y, theta);
                break;

            default:
                break;// default statements
 800523c:	e0e9      	b.n	8005412 <peekCommand+0x5fe>
        switch (command->G)
 800523e:	2b0b      	cmp	r3, #11
 8005240:	f000 8094 	beq.w	800536c <peekCommand+0x558>
 8005244:	2b5c      	cmp	r3, #92	; 0x5c
 8005246:	f000 80a9 	beq.w	800539c <peekCommand+0x588>
                break;// default statements
 800524a:	e0e2      	b.n	8005412 <peekCommand+0x5fe>
                xc = robot->odometry->position.x;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	62bb      	str	r3, [r7, #40]	; 0x28
                yc = robot->odometry->position.y;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
                thetac = robot->odometry->position.theta; // ne pas faire ça en vrai
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	613b      	str	r3, [r7, #16]
                if (hasX(command)) xc = command->X;
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 fe72 	bl	8005f4e <hasX>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <peekCommand+0x462>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
                if (hasY(command)) yc = command->Y;
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 fe7c 	bl	8005f74 <hasY>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <peekCommand+0x474>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
                if (hasA(command)){
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 fed2 	bl	8006032 <hasA>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00c      	beq.n	80052ae <peekCommand+0x49a>
                    thetac = command->A;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	613b      	str	r3, [r7, #16]
                    fastMoveTheta(robot, xc, yc, thetac);
 800529a:	ed97 1a04 	vldr	s2, [r7, #16]
 800529e:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80052a2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80052a6:	68b8      	ldr	r0, [r7, #8]
 80052a8:	f000 f8fe 	bl	80054a8 <fastMoveTheta>
 80052ac:	e006      	b.n	80052bc <peekCommand+0x4a8>
                    fastMove(robot, xc, yc);
 80052ae:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80052b2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80052b6:	68b8      	ldr	r0, [r7, #8]
 80052b8:	f000 f8af 	bl	800541a <fastMove>
                robot->controlMode = 0;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2200      	movs	r2, #0
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40
                break;
 80052c2:	e0a6      	b.n	8005412 <peekCommand+0x5fe>
                xc = robot->odometry->position.x;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	62bb      	str	r3, [r7, #40]	; 0x28
                yc = robot->odometry->position.y;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
                thetac = robot->odometry->position.theta; // ne pas faire ça en vrai
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	613b      	str	r3, [r7, #16]
                if (hasX(command)) xc = command->X;
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 fe36 	bl	8005f4e <hasX>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <peekCommand+0x4da>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28
                if (hasY(command)) yc = command->Y;
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 fe40 	bl	8005f74 <hasY>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <peekCommand+0x4ec>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
                if (hasA(command)){
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 fe96 	bl	8006032 <hasA>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00c      	beq.n	8005326 <peekCommand+0x512>
                    thetac = command->A;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005310:	613b      	str	r3, [r7, #16]
                    linearMoveTheta(robot, xc, yc, thetac);
 8005312:	ed97 1a04 	vldr	s2, [r7, #16]
 8005316:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800531a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800531e:	68b8      	ldr	r0, [r7, #8]
 8005320:	f000 f92c 	bl	800557c <linearMoveTheta>
 8005324:	e006      	b.n	8005334 <peekCommand+0x520>
                    linearMove(robot, xc, yc);
 8005326:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800532a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800532e:	68b8      	ldr	r0, [r7, #8]
 8005330:	f000 f8dd 	bl	80054ee <linearMove>
                robot->controlMode = 0;
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2200      	movs	r2, #0
 8005338:	641a      	str	r2, [r3, #64]	; 0x40
                break;
 800533a:	e06a      	b.n	8005412 <peekCommand+0x5fe>
                if (hasI(command)) robot->linearVelocity = command->I;
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 fe3f 	bl	8005fc0 <hasI>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <peekCommand+0x53c>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	639a      	str	r2, [r3, #56]	; 0x38
                if (hasJ(command)) robot->angularVelocity = command->J;
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 fe48 	bl	8005fe6 <hasJ>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <peekCommand+0x550>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	63da      	str	r2, [r3, #60]	; 0x3c
                robot->controlMode = 1;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2201      	movs	r2, #1
 8005368:	641a      	str	r2, [r3, #64]	; 0x40
                break;
 800536a:	e052      	b.n	8005412 <peekCommand+0x5fe>
                if (hasI(command)) robot->vitG = command->I;
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 fe27 	bl	8005fc0 <hasI>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <peekCommand+0x56c>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	625a      	str	r2, [r3, #36]	; 0x24
                if (hasJ(command)) robot->vitD = command->J;
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 fe30 	bl	8005fe6 <hasJ>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <peekCommand+0x580>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	621a      	str	r2, [r3, #32]
                robot->controlMode = 2;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2202      	movs	r2, #2
 8005398:	641a      	str	r2, [r3, #64]	; 0x40
                break;
 800539a:	e03a      	b.n	8005412 <peekCommand+0x5fe>
                x = robot->odometry->position.x;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	623b      	str	r3, [r7, #32]
                y = robot->odometry->position.y;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	61fb      	str	r3, [r7, #28]
                theta = robot->odometry->position.theta; // ne pas faire ça en vrai
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	61bb      	str	r3, [r7, #24]
                if (hasX(command)) x = command->X;
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 fdca 	bl	8005f4e <hasX>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <peekCommand+0x5b2>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	623b      	str	r3, [r7, #32]
                if (hasY(command)) y = command->Y;
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 fdd4 	bl	8005f74 <hasY>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <peekCommand+0x5c4>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	61fb      	str	r3, [r7, #28]
                if (hasA(command)) theta = command->A;
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 fe2a 	bl	8006032 <hasA>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <peekCommand+0x5d6>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	61bb      	str	r3, [r7, #24]
                setPosition(robot, x, y, theta);
 80053ea:	ed97 1a06 	vldr	s2, [r7, #24]
 80053ee:	edd7 0a07 	vldr	s1, [r7, #28]
 80053f2:	ed97 0a08 	vldr	s0, [r7, #32]
 80053f6:	68b8      	ldr	r0, [r7, #8]
 80053f8:	f000 f911 	bl	800561e <setPosition>
                linearMoveTheta(robot, x, y, theta);
 80053fc:	ed97 1a06 	vldr	s2, [r7, #24]
 8005400:	edd7 0a07 	vldr	s1, [r7, #28]
 8005404:	ed97 0a08 	vldr	s0, [r7, #32]
 8005408:	68b8      	ldr	r0, [r7, #8]
 800540a:	f000 f8b7 	bl	800557c <linearMoveTheta>
                break;
 800540e:	e000      	b.n	8005412 <peekCommand+0x5fe>
        }
    }
 8005410:	bf00      	nop
}
 8005412:	bf00      	nop
 8005414:	3738      	adds	r7, #56	; 0x38
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <fastMove>:
/*
 *  deplacement functions setters
 */


void fastMove(diffDriveRobot_Context* robot, float xc, float yc){
 800541a:	b5b0      	push	{r4, r5, r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	ed87 0a02 	vstr	s0, [r7, #8]
 8005426:	edc7 0a01 	vstr	s1, [r7, #4]
	robot->controlMode = 0;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	641a      	str	r2, [r3, #64]	; 0x40
	robot->motionController->consign.x = xc;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	601a      	str	r2, [r3, #0]
    robot->motionController->consign.y = yc;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	605a      	str	r2, [r3, #4]
    robot->motionController->consign.theta = atan2(yc - robot->odometry->position.y, xc - robot->odometry->position.x);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	edd3 7a05 	vldr	s15, [r3, #20]
 8005448:	ed97 7a01 	vldr	s14, [r7, #4]
 800544c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005450:	ee17 0a90 	vmov	r0, s15
 8005454:	f7fb f878 	bl	8000548 <__aeabi_f2d>
 8005458:	4604      	mov	r4, r0
 800545a:	460d      	mov	r5, r1
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	edd3 7a04 	vldr	s15, [r3, #16]
 8005464:	ed97 7a02 	vldr	s14, [r7, #8]
 8005468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800546c:	ee17 0a90 	vmov	r0, s15
 8005470:	f7fb f86a 	bl	8000548 <__aeabi_f2d>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	ec43 2b11 	vmov	d1, r2, r3
 800547c:	ec45 4b10 	vmov	d0, r4, r5
 8005480:	f007 fafe 	bl	800ca80 <atan2>
 8005484:	ec52 1b10 	vmov	r1, r2, d0
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	699c      	ldr	r4, [r3, #24]
 800548c:	4608      	mov	r0, r1
 800548e:	4611      	mov	r1, r2
 8005490:	f7fb fbaa 	bl	8000be8 <__aeabi_d2f>
 8005494:	4603      	mov	r3, r0
 8005496:	60a3      	str	r3, [r4, #8]
    robot->motionController->movementMode = 0;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	2200      	movs	r2, #0
 800549e:	645a      	str	r2, [r3, #68]	; 0x44
}
 80054a0:	bf00      	nop
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bdb0      	pop	{r4, r5, r7, pc}

080054a8 <fastMoveTheta>:

void fastMoveTheta(diffDriveRobot_Context* robot, float xc, float yc, float thetac){
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80054b4:	edc7 0a01 	vstr	s1, [r7, #4]
 80054b8:	ed87 1a00 	vstr	s2, [r7]
	robot->controlMode = 0;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	641a      	str	r2, [r3, #64]	; 0x40
	robot->motionController->consign.x = xc;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	601a      	str	r2, [r3, #0]
    robot->motionController->consign.y = yc;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	605a      	str	r2, [r3, #4]
    robot->motionController->consign.theta = thetac;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	609a      	str	r2, [r3, #8]
    robot->motionController->movementMode = 0;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	2200      	movs	r2, #0
 80054e0:	645a      	str	r2, [r3, #68]	; 0x44
}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <linearMove>:

void linearMove(diffDriveRobot_Context* robot, float xc, float yc){
 80054ee:	b5b0      	push	{r4, r5, r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	ed87 0a02 	vstr	s0, [r7, #8]
 80054fa:	edc7 0a01 	vstr	s1, [r7, #4]
	robot->controlMode = 0;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	641a      	str	r2, [r3, #64]	; 0x40
	robot->motionController->consign.x = xc;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	601a      	str	r2, [r3, #0]
    robot->motionController->consign.y = yc;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	605a      	str	r2, [r3, #4]
    robot->motionController->consign.theta = atan2(yc - robot->odometry->position.y, xc - robot->odometry->position.x);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	edd3 7a05 	vldr	s15, [r3, #20]
 800551c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005524:	ee17 0a90 	vmov	r0, s15
 8005528:	f7fb f80e 	bl	8000548 <__aeabi_f2d>
 800552c:	4604      	mov	r4, r0
 800552e:	460d      	mov	r5, r1
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	edd3 7a04 	vldr	s15, [r3, #16]
 8005538:	ed97 7a02 	vldr	s14, [r7, #8]
 800553c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005540:	ee17 0a90 	vmov	r0, s15
 8005544:	f7fb f800 	bl	8000548 <__aeabi_f2d>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	ec43 2b11 	vmov	d1, r2, r3
 8005550:	ec45 4b10 	vmov	d0, r4, r5
 8005554:	f007 fa94 	bl	800ca80 <atan2>
 8005558:	ec52 1b10 	vmov	r1, r2, d0
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	699c      	ldr	r4, [r3, #24]
 8005560:	4608      	mov	r0, r1
 8005562:	4611      	mov	r1, r2
 8005564:	f7fb fb40 	bl	8000be8 <__aeabi_d2f>
 8005568:	4603      	mov	r3, r0
 800556a:	60a3      	str	r3, [r4, #8]
    robot->motionController->movementMode = 1;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	2201      	movs	r2, #1
 8005572:	645a      	str	r2, [r3, #68]	; 0x44
}
 8005574:	bf00      	nop
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bdb0      	pop	{r4, r5, r7, pc}

0800557c <linearMoveTheta>:

void linearMoveTheta(diffDriveRobot_Context* robot, float xc, float yc, float thetac){
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	ed87 0a02 	vstr	s0, [r7, #8]
 8005588:	edc7 0a01 	vstr	s1, [r7, #4]
 800558c:	ed87 1a00 	vstr	s2, [r7]
	robot->controlMode = 0;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	641a      	str	r2, [r3, #64]	; 0x40
    robot->motionController->consign.x = xc;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	601a      	str	r2, [r3, #0]
    robot->motionController->consign.y = yc;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	605a      	str	r2, [r3, #4]
    robot->motionController->consign.theta = thetac;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	609a      	str	r2, [r3, #8]
    robot->motionController->movementMode = 1;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	2201      	movs	r2, #1
 80055b4:	645a      	str	r2, [r3, #68]	; 0x44
}
 80055b6:	bf00      	nop
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <breakeMotors>:


void breakeMotors(diffDriveRobot_Context* robot){
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b082      	sub	sp, #8
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
    motor_breake(robot->motorD);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f001 fe45 	bl	800725e <motor_breake>
    motor_breake(robot->motorG);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 fe40 	bl	800725e <motor_breake>
}
 80055de:	bf00      	nop
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <unBreakeMotors>:

void unBreakeMotors(diffDriveRobot_Context* robot){
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
    motor_unbreake(robot->motorD);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f001 fe44 	bl	8007280 <motor_unbreake>
    motor_unbreake(robot->motorG);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f001 fe3f 	bl	8007280 <motor_unbreake>
    // reset des integrateurs des pid
    pid_init(robot->pidD);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	4618      	mov	r0, r3
 8005608:	f001 ffe2 	bl	80075d0 <pid_init>
    pid_init(robot->pidG);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	4618      	mov	r0, r3
 8005612:	f001 ffdd 	bl	80075d0 <pid_init>
}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <setPosition>:
/*
 *  Setters
 */


void setPosition(diffDriveRobot_Context* robot, float x, float y, float theta){
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	ed87 0a02 	vstr	s0, [r7, #8]
 800562a:	edc7 0a01 	vstr	s1, [r7, #4]
 800562e:	ed87 1a00 	vstr	s2, [r7]
    odometry_init(robot->odometry, x, y, theta);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	ed97 1a00 	vldr	s2, [r7]
 800563a:	edd7 0a01 	vldr	s1, [r7, #4]
 800563e:	ed97 0a02 	vldr	s0, [r7, #8]
 8005642:	4618      	mov	r0, r3
 8005644:	f001 fe5d 	bl	8007302 <odometry_init>
}
 8005648:	bf00      	nop
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <printPosition>:


// getter
void printPosition(diffDriveRobot_Context* robot, UART_HandleTypeDef *huart){
 8005650:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005654:	b0ba      	sub	sp, #232	; 0xe8
 8005656:	af04      	add	r7, sp, #16
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]
    float x,y,theta;
    x = robot->odometry->position.x;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    y = robot->odometry->position.y;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    theta = robot->odometry->position.theta;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    char buffer[190];
    HAL_UART_Transmit(huart, (uint8_t*)buffer, sprintf(buffer,"X%f Y%f A%f\n", x, y, theta), 90000);//s/ @suppress("Float formatting support")
 800567a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800567e:	f7fa ff63 	bl	8000548 <__aeabi_f2d>
 8005682:	4680      	mov	r8, r0
 8005684:	4689      	mov	r9, r1
 8005686:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800568a:	f7fa ff5d 	bl	8000548 <__aeabi_f2d>
 800568e:	4604      	mov	r4, r0
 8005690:	460d      	mov	r5, r1
 8005692:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005696:	f7fa ff57 	bl	8000548 <__aeabi_f2d>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	f107 000c 	add.w	r0, r7, #12
 80056a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056a6:	e9cd 4500 	strd	r4, r5, [sp]
 80056aa:	4642      	mov	r2, r8
 80056ac:	464b      	mov	r3, r9
 80056ae:	4908      	ldr	r1, [pc, #32]	; (80056d0 <printPosition+0x80>)
 80056b0:	f002 fe90 	bl	80083d4 <sprintf>
 80056b4:	4603      	mov	r3, r0
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	f107 010c 	add.w	r1, r7, #12
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <printPosition+0x84>)
 80056be:	6838      	ldr	r0, [r7, #0]
 80056c0:	f7fe fbb4 	bl	8003e2c <HAL_UART_Transmit>
}
 80056c4:	bf00      	nop
 80056c6:	37d8      	adds	r7, #216	; 0xd8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056ce:	bf00      	nop
 80056d0:	0800f280 	.word	0x0800f280
 80056d4:	00015f90 	.word	0x00015f90

080056d8 <printRspeed>:


void printRspeed(diffDriveRobot_Context* robot, UART_HandleTypeDef *huart){
 80056d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80056dc:	b0ba      	sub	sp, #232	; 0xe8
 80056de:	af04      	add	r7, sp, #16
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
    float consign, measure, command;
    consign = robot->vitD;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    measure = robot->mesureD;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    command = robot->commandD;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    char buffer[190];
    HAL_UART_Transmit(huart, (uint8_t*)buffer, sprintf(buffer,"consign %f measure Y%f command A%f\n", consign, measure, command), 90000);//s/ @suppress("Float formatting support")
 80056fc:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8005700:	f7fa ff22 	bl	8000548 <__aeabi_f2d>
 8005704:	4680      	mov	r8, r0
 8005706:	4689      	mov	r9, r1
 8005708:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800570c:	f7fa ff1c 	bl	8000548 <__aeabi_f2d>
 8005710:	4604      	mov	r4, r0
 8005712:	460d      	mov	r5, r1
 8005714:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005718:	f7fa ff16 	bl	8000548 <__aeabi_f2d>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	f107 000c 	add.w	r0, r7, #12
 8005724:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005728:	e9cd 4500 	strd	r4, r5, [sp]
 800572c:	4642      	mov	r2, r8
 800572e:	464b      	mov	r3, r9
 8005730:	4907      	ldr	r1, [pc, #28]	; (8005750 <printRspeed+0x78>)
 8005732:	f002 fe4f 	bl	80083d4 <sprintf>
 8005736:	4603      	mov	r3, r0
 8005738:	b29a      	uxth	r2, r3
 800573a:	f107 010c 	add.w	r1, r7, #12
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <printRspeed+0x7c>)
 8005740:	6838      	ldr	r0, [r7, #0]
 8005742:	f7fe fb73 	bl	8003e2c <HAL_UART_Transmit>
}
 8005746:	bf00      	nop
 8005748:	37d8      	adds	r7, #216	; 0xd8
 800574a:	46bd      	mov	sp, r7
 800574c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005750:	0800f290 	.word	0x0800f290
 8005754:	00015f90 	.word	0x00015f90

08005758 <printLspeed>:
void printLspeed(diffDriveRobot_Context* robot, UART_HandleTypeDef *huart){
 8005758:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800575c:	b0ba      	sub	sp, #232	; 0xe8
 800575e:	af04      	add	r7, sp, #16
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	6039      	str	r1, [r7, #0]
    float consign, measure, command;
    consign = robot->vitG;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    measure = robot->mesureG;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    command = robot->commandG;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    char buffer[190];
    HAL_UART_Transmit(huart, (uint8_t*)buffer, sprintf(buffer,"consign %f measure Y%f command A%f\n", consign, measure, command), 90000);//s/ @suppress("Float formatting support")
 800577c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8005780:	f7fa fee2 	bl	8000548 <__aeabi_f2d>
 8005784:	4680      	mov	r8, r0
 8005786:	4689      	mov	r9, r1
 8005788:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800578c:	f7fa fedc 	bl	8000548 <__aeabi_f2d>
 8005790:	4604      	mov	r4, r0
 8005792:	460d      	mov	r5, r1
 8005794:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005798:	f7fa fed6 	bl	8000548 <__aeabi_f2d>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	f107 000c 	add.w	r0, r7, #12
 80057a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057a8:	e9cd 4500 	strd	r4, r5, [sp]
 80057ac:	4642      	mov	r2, r8
 80057ae:	464b      	mov	r3, r9
 80057b0:	4907      	ldr	r1, [pc, #28]	; (80057d0 <printLspeed+0x78>)
 80057b2:	f002 fe0f 	bl	80083d4 <sprintf>
 80057b6:	4603      	mov	r3, r0
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	f107 010c 	add.w	r1, r7, #12
 80057be:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <printLspeed+0x7c>)
 80057c0:	6838      	ldr	r0, [r7, #0]
 80057c2:	f7fe fb33 	bl	8003e2c <HAL_UART_Transmit>
}
 80057c6:	bf00      	nop
 80057c8:	37d8      	adds	r7, #216	; 0xd8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80057d0:	0800f290 	.word	0x0800f290
 80057d4:	00015f90 	.word	0x00015f90

080057d8 <printComTest>:

void printComTest(UART_HandleTypeDef *huart){
 80057d8:	b580      	push	{r7, lr}
 80057da:	b0b2      	sub	sp, #200	; 0xc8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
	char buffer[190];
    HAL_UART_Transmit(huart, (uint8_t*)buffer, sprintf(buffer,"Com OK\n"), 90000);
 80057e0:	f107 0308 	add.w	r3, r7, #8
 80057e4:	4a08      	ldr	r2, [pc, #32]	; (8005808 <printComTest+0x30>)
 80057e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80057ee:	2307      	movs	r3, #7
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	f107 0108 	add.w	r1, r7, #8
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <printComTest+0x34>)
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7fe fb17 	bl	8003e2c <HAL_UART_Transmit>
}
 80057fe:	bf00      	nop
 8005800:	37c8      	adds	r7, #200	; 0xc8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	0800f2b4 	.word	0x0800f2b4
 800580c:	00015f90 	.word	0x00015f90

08005810 <printSelf>:
void printSelf(UART_HandleTypeDef *huart){
 8005810:	b580      	push	{r7, lr}
 8005812:	b0b2      	sub	sp, #200	; 0xc8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
	char buffer[190];
    HAL_UART_Transmit(huart, (uint8_t*)buffer, sprintf(buffer,"CmdBoard\n"), 90000);
 8005818:	f107 0308 	add.w	r3, r7, #8
 800581c:	4a07      	ldr	r2, [pc, #28]	; (800583c <printSelf+0x2c>)
 800581e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005820:	c303      	stmia	r3!, {r0, r1}
 8005822:	801a      	strh	r2, [r3, #0]
 8005824:	2309      	movs	r3, #9
 8005826:	b29a      	uxth	r2, r3
 8005828:	f107 0108 	add.w	r1, r7, #8
 800582c:	4b04      	ldr	r3, [pc, #16]	; (8005840 <printSelf+0x30>)
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fe fafc 	bl	8003e2c <HAL_UART_Transmit>
}
 8005834:	bf00      	nop
 8005836:	37c8      	adds	r7, #200	; 0xc8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	0800f2bc 	.word	0x0800f2bc
 8005840:	00015f90 	.word	0x00015f90

08005844 <setPID_D>:




void setPID_D(diffDriveRobot_Context* robot, float Kp, float Ti, float Td){
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005850:	edc7 0a01 	vstr	s1, [r7, #4]
 8005854:	ed87 1a00 	vstr	s2, [r7]
    robot->pidD->Kp = Kp;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	601a      	str	r2, [r3, #0]
    robot->pidD->Kp = Ti;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	601a      	str	r2, [r3, #0]
    robot->pidD->Kp = Td;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	601a      	str	r2, [r3, #0]
}
 8005870:	bf00      	nop
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <setPID_G>:

void setPID_G(diffDriveRobot_Context* robot, float Kp, float Ti, float Td){
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	ed87 0a02 	vstr	s0, [r7, #8]
 8005888:	edc7 0a01 	vstr	s1, [r7, #4]
 800588c:	ed87 1a00 	vstr	s2, [r7]
    robot->pidG->Kp = Kp;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	601a      	str	r2, [r3, #0]
    robot->pidG->Kp = Ti;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	601a      	str	r2, [r3, #0]
    robot->pidG->Kp = Td;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	601a      	str	r2, [r3, #0]
}
 80058a8:	bf00      	nop
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <setLOdomWheelDia>:

void setLOdomWheelDia(diffDriveRobot_Context* robot, float wheelDiameter) {
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	ed87 0a00 	vstr	s0, [r7]
    robot->odometry->wheelRadiusR = wheelDiameter/2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	ed97 7a00 	vldr	s14, [r7]
 80058c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80058cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058d0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <setROdomWheelDia>:

void setROdomWheelDia(diffDriveRobot_Context* robot, float wheelDiameter) {
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	ed87 0a00 	vstr	s0, [r7]
    robot->odometry->wheelRadiusR = wheelDiameter/2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	ed97 7a00 	vldr	s14, [r7]
 80058f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80058f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058fc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <setOdomInnerDist>:

void setOdomInnerDist(diffDriveRobot_Context* robot, float innerDist) {
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	ed87 0a00 	vstr	s0, [r7]
    robot->odometry->distanceBetweenWheels = innerDist;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	60da      	str	r2, [r3, #12]
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <setMotorInnerDist>:

void setMotorInnerDist(diffDriveRobot_Context* robot, float innerDist) {
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	ed87 0a00 	vstr	s0, [r7]
    robot->distBetweenMotorWheels = innerDist;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	61da      	str	r2, [r3, #28]
    robot->differential->distanceBetweenWheels = innerDist;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	601a      	str	r2, [r3, #0]
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
	...

08005954 <differential_update>:


void differential_update(differential_Context* diffDrive,
    float linearVelocity, float angularVelocity,
    float* rightWheelVelocity, float* leftWheelVelocity)
{
 8005954:	b5b0      	push	{r4, r5, r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6178      	str	r0, [r7, #20]
 800595c:	ed87 0a04 	vstr	s0, [r7, #16]
 8005960:	edc7 0a03 	vstr	s1, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
    linearVelocity = linearVelocity / diffDrive->maxLinearVelocity;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	ed93 7a01 	vldr	s14, [r3, #4]
 800596e:	edd7 6a04 	vldr	s13, [r7, #16]
 8005972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005976:	edc7 7a04 	vstr	s15, [r7, #16]
    angularVelocity = angularVelocity / diffDrive->maxAngularVelocity;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005980:	edd7 6a03 	vldr	s13, [r7, #12]
 8005984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005988:	edc7 7a03 	vstr	s15, [r7, #12]

    if ((fabs(angularVelocity)+fabs(linearVelocity)) > 1) {
 800598c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005990:	eef0 7ae7 	vabs.f32	s15, s15
 8005994:	ee17 0a90 	vmov	r0, s15
 8005998:	f7fa fdd6 	bl	8000548 <__aeabi_f2d>
 800599c:	4604      	mov	r4, r0
 800599e:	460d      	mov	r5, r1
 80059a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80059a4:	eef0 7ae7 	vabs.f32	s15, s15
 80059a8:	ee17 0a90 	vmov	r0, s15
 80059ac:	f7fa fdcc 	bl	8000548 <__aeabi_f2d>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4620      	mov	r0, r4
 80059b6:	4629      	mov	r1, r5
 80059b8:	f7fa fc68 	bl	800028c <__adddf3>
 80059bc:	4603      	mov	r3, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	4618      	mov	r0, r3
 80059c2:	4621      	mov	r1, r4
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	4b2d      	ldr	r3, [pc, #180]	; (8005a80 <differential_update+0x12c>)
 80059ca:	f7fb f8a5 	bl	8000b18 <__aeabi_dcmpgt>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01b      	beq.n	8005a0c <differential_update+0xb8>
        // set the point in the square maxvelocity maxangularVelocity.
        float m = fabs(angularVelocity)+fabs(linearVelocity);
 80059d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80059d8:	eeb0 7ae7 	vabs.f32	s14, s15
 80059dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80059e0:	eef0 7ae7 	vabs.f32	s15, s15
 80059e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059e8:	edc7 7a07 	vstr	s15, [r7, #28]
        angularVelocity = angularVelocity/m;
 80059ec:	edd7 6a03 	vldr	s13, [r7, #12]
 80059f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80059f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059f8:	edc7 7a03 	vstr	s15, [r7, #12]
        linearVelocity = linearVelocity/m;
 80059fc:	edd7 6a04 	vldr	s13, [r7, #16]
 8005a00:	ed97 7a07 	vldr	s14, [r7, #28]
 8005a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a08:	edc7 7a04 	vstr	s15, [r7, #16]
    }

    linearVelocity = linearVelocity * diffDrive->maxLinearVelocity;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a12:	ed97 7a04 	vldr	s14, [r7, #16]
 8005a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1a:	edc7 7a04 	vstr	s15, [r7, #16]
    angularVelocity = angularVelocity * diffDrive->maxAngularVelocity;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a24:	ed97 7a03 	vldr	s14, [r7, #12]
 8005a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2c:	edc7 7a03 	vstr	s15, [r7, #12]

    *rightWheelVelocity = (linearVelocity + angularVelocity*diffDrive->distanceBetweenWheels/2);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	ed93 7a00 	vldr	s14, [r3]
 8005a36:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005a42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	edc3 7a00 	vstr	s15, [r3]
    *leftWheelVelocity =  (linearVelocity - angularVelocity*diffDrive->distanceBetweenWheels/2);
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	ed93 7a00 	vldr	s14, [r3]
 8005a5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a62:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	edc3 7a00 	vstr	s15, [r3]
}
 8005a78:	bf00      	nop
 8005a7a:	3720      	adds	r7, #32
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8005a80:	3ff00000 	.word	0x3ff00000

08005a84 <gcode_parseAscii>:
#include "gcode.h"

bool gcode_parseAscii(gcodeCommand_context* gcodeCommand, char *line)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
    char *pos = line;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	60fb      	str	r3, [r7, #12]
    gcodeCommand->params = 0;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	801a      	strh	r2, [r3, #0]
    gcodeCommand->params2 = 0;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	805a      	strh	r2, [r3, #2]
	bool hasChecksum = false;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	72fb      	strb	r3, [r7, #11]
    char c;
    while ( (c = *(pos++)) )
 8005aa2:	e20d      	b.n	8005ec0 <gcode_parseAscii+0x43c>
    {
        if(c == '(' || c == '%') break; // alternative comment or program block
 8005aa4:	7abb      	ldrb	r3, [r7, #10]
 8005aa6:	2b28      	cmp	r3, #40	; 0x28
 8005aa8:	f000 8213 	beq.w	8005ed2 <gcode_parseAscii+0x44e>
 8005aac:	7abb      	ldrb	r3, [r7, #10]
 8005aae:	2b25      	cmp	r3, #37	; 0x25
 8005ab0:	f000 820f 	beq.w	8005ed2 <gcode_parseAscii+0x44e>
        switch(c)
 8005ab4:	7abb      	ldrb	r3, [r7, #10]
 8005ab6:	3b2a      	subs	r3, #42	; 0x2a
 8005ab8:	2b50      	cmp	r3, #80	; 0x50
 8005aba:	f200 8200 	bhi.w	8005ebe <gcode_parseAscii+0x43a>
 8005abe:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <gcode_parseAscii+0x40>)
 8005ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac4:	08005ec1 	.word	0x08005ec1
 8005ac8:	08005ebf 	.word	0x08005ebf
 8005acc:	08005ebf 	.word	0x08005ebf
 8005ad0:	08005ebf 	.word	0x08005ebf
 8005ad4:	08005ebf 	.word	0x08005ebf
 8005ad8:	08005ebf 	.word	0x08005ebf
 8005adc:	08005ebf 	.word	0x08005ebf
 8005ae0:	08005ebf 	.word	0x08005ebf
 8005ae4:	08005ebf 	.word	0x08005ebf
 8005ae8:	08005ebf 	.word	0x08005ebf
 8005aec:	08005ebf 	.word	0x08005ebf
 8005af0:	08005ebf 	.word	0x08005ebf
 8005af4:	08005ebf 	.word	0x08005ebf
 8005af8:	08005ebf 	.word	0x08005ebf
 8005afc:	08005ebf 	.word	0x08005ebf
 8005b00:	08005ebf 	.word	0x08005ebf
 8005b04:	08005ebf 	.word	0x08005ebf
 8005b08:	08005ebf 	.word	0x08005ebf
 8005b0c:	08005ebf 	.word	0x08005ebf
 8005b10:	08005ebf 	.word	0x08005ebf
 8005b14:	08005ebf 	.word	0x08005ebf
 8005b18:	08005ebf 	.word	0x08005ebf
 8005b1c:	08005ebf 	.word	0x08005ebf
 8005b20:	08005e1f 	.word	0x08005e1f
 8005b24:	08005e3f 	.word	0x08005e3f
 8005b28:	08005ddf 	.word	0x08005ddf
 8005b2c:	08005dbf 	.word	0x08005dbf
 8005b30:	08005cc3 	.word	0x08005cc3
 8005b34:	08005ce3 	.word	0x08005ce3
 8005b38:	08005c27 	.word	0x08005c27
 8005b3c:	08005dff 	.word	0x08005dff
 8005b40:	08005d5f 	.word	0x08005d5f
 8005b44:	08005d7f 	.word	0x08005d7f
 8005b48:	08005e5f 	.word	0x08005e5f
 8005b4c:	08005e7f 	.word	0x08005e7f
 8005b50:	08005c45 	.word	0x08005c45
 8005b54:	08005c09 	.word	0x08005c09
 8005b58:	08005e9f 	.word	0x08005e9f
 8005b5c:	08005d3f 	.word	0x08005d3f
 8005b60:	08005ebf 	.word	0x08005ebf
 8005b64:	08005d9f 	.word	0x08005d9f
 8005b68:	08005d23 	.word	0x08005d23
 8005b6c:	08005d03 	.word	0x08005d03
 8005b70:	08005ebf 	.word	0x08005ebf
 8005b74:	08005ebf 	.word	0x08005ebf
 8005b78:	08005ebf 	.word	0x08005ebf
 8005b7c:	08005c63 	.word	0x08005c63
 8005b80:	08005c83 	.word	0x08005c83
 8005b84:	08005ca3 	.word	0x08005ca3
 8005b88:	08005ebf 	.word	0x08005ebf
 8005b8c:	08005ebf 	.word	0x08005ebf
 8005b90:	08005ebf 	.word	0x08005ebf
 8005b94:	08005ebf 	.word	0x08005ebf
 8005b98:	08005ebf 	.word	0x08005ebf
 8005b9c:	08005ebf 	.word	0x08005ebf
 8005ba0:	08005e1f 	.word	0x08005e1f
 8005ba4:	08005e3f 	.word	0x08005e3f
 8005ba8:	08005ddf 	.word	0x08005ddf
 8005bac:	08005dbf 	.word	0x08005dbf
 8005bb0:	08005cc3 	.word	0x08005cc3
 8005bb4:	08005ce3 	.word	0x08005ce3
 8005bb8:	08005c27 	.word	0x08005c27
 8005bbc:	08005dff 	.word	0x08005dff
 8005bc0:	08005d5f 	.word	0x08005d5f
 8005bc4:	08005d7f 	.word	0x08005d7f
 8005bc8:	08005e5f 	.word	0x08005e5f
 8005bcc:	08005e7f 	.word	0x08005e7f
 8005bd0:	08005c45 	.word	0x08005c45
 8005bd4:	08005c09 	.word	0x08005c09
 8005bd8:	08005e9f 	.word	0x08005e9f
 8005bdc:	08005d3f 	.word	0x08005d3f
 8005be0:	08005ebf 	.word	0x08005ebf
 8005be4:	08005d9f 	.word	0x08005d9f
 8005be8:	08005d23 	.word	0x08005d23
 8005bec:	08005d03 	.word	0x08005d03
 8005bf0:	08005ebf 	.word	0x08005ebf
 8005bf4:	08005ebf 	.word	0x08005ebf
 8005bf8:	08005ebf 	.word	0x08005ebf
 8005bfc:	08005c63 	.word	0x08005c63
 8005c00:	08005c83 	.word	0x08005c83
 8005c04:	08005ca3 	.word	0x08005ca3
        {
        case 'N':
        case 'n':
        {
            gcodeCommand->N = parseLongValue(pos) & 0xffff;
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 fa4e 	bl	80060aa <parseLongValue>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	809a      	strh	r2, [r3, #4]
            gcodeCommand->params |=1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	801a      	strh	r2, [r3, #0]
            break;
 8005c24:	e14c      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'G':
        case 'g':
        {
            gcodeCommand->G = parseLongValue(pos) & 0xffff;
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 fa3f 	bl	80060aa <parseLongValue>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	811a      	strh	r2, [r3, #8]
            gcodeCommand->params |= 4;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	f043 0304 	orr.w	r3, r3, #4
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	801a      	strh	r2, [r3, #0]
            break;
 8005c42:	e13d      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'M':
        case 'm':
        {
            gcodeCommand->M = parseLongValue(pos) & 0xffff;
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 fa30 	bl	80060aa <parseLongValue>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	80da      	strh	r2, [r3, #6]
            gcodeCommand->params |= 2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	f043 0302 	orr.w	r3, r3, #2
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	801a      	strh	r2, [r3, #0]
            break;
 8005c60:	e12e      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'X':
        case 'x':
        {
            gcodeCommand->X = parseFloatValue(pos);
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f9f8 	bl	8006058 <parseFloatValue>
 8005c68:	eef0 7a40 	vmov.f32	s15, s0
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	edc3 7a03 	vstr	s15, [r3, #12]
            gcodeCommand->params |= 8;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	f043 0308 	orr.w	r3, r3, #8
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	801a      	strh	r2, [r3, #0]
            break;
 8005c80:	e11e      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'Y':
        case 'y':
        {
            gcodeCommand->Y = parseFloatValue(pos);
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f9e8 	bl	8006058 <parseFloatValue>
 8005c88:	eef0 7a40 	vmov.f32	s15, s0
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	edc3 7a04 	vstr	s15, [r3, #16]
            gcodeCommand->params |= 16;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	f043 0310 	orr.w	r3, r3, #16
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	801a      	strh	r2, [r3, #0]
            break;
 8005ca0:	e10e      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'Z':
        case 'z':
        {
            gcodeCommand->Z = parseFloatValue(pos);
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f9d8 	bl	8006058 <parseFloatValue>
 8005ca8:	eef0 7a40 	vmov.f32	s15, s0
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	edc3 7a05 	vstr	s15, [r3, #20]
            gcodeCommand->params |= 32;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	f043 0320 	orr.w	r3, r3, #32
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	801a      	strh	r2, [r3, #0]
            break;
 8005cc0:	e0fe      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'E':
        case 'e':
        {
            gcodeCommand->E = parseFloatValue(pos);
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f9c8 	bl	8006058 <parseFloatValue>
 8005cc8:	eef0 7a40 	vmov.f32	s15, s0
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	edc3 7a06 	vstr	s15, [r3, #24]
            gcodeCommand->params |= 64;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	801a      	strh	r2, [r3, #0]
            break;
 8005ce0:	e0ee      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'F':
        case 'f':
        {
            gcodeCommand->F = parseFloatValue(pos);
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 f9b8 	bl	8006058 <parseFloatValue>
 8005ce8:	eef0 7a40 	vmov.f32	s15, s0
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	edc3 7a07 	vstr	s15, [r3, #28]
            gcodeCommand->params |= 256;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	801a      	strh	r2, [r3, #0]
            break;
 8005d00:	e0de      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'T':
        case 't':
        {
            gcodeCommand->T = parseLongValue(pos) & 0xff;
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f9d1 	bl	80060aa <parseLongValue>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
            gcodeCommand->params |= 512;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	801a      	strh	r2, [r3, #0]
            break;
 8005d20:	e0ce      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'S':
        case 's':
        {
            gcodeCommand->S = parseLongValue(pos);
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 f9c1 	bl	80060aa <parseLongValue>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	621a      	str	r2, [r3, #32]
            gcodeCommand->params |= 1024;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	801a      	strh	r2, [r3, #0]
            break;
 8005d3c:	e0c0      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'P':
        case 'p':
        {
            gcodeCommand->P = parseFloatValue(pos);
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f98a 	bl	8006058 <parseFloatValue>
 8005d44:	eef0 7a40 	vmov.f32	s15, s0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
            gcodeCommand->params |= 2048;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	801a      	strh	r2, [r3, #0]
            break;
 8005d5c:	e0b0      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'I':
        case 'i':
        {
            gcodeCommand->I = parseFloatValue(pos);
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f97a 	bl	8006058 <parseFloatValue>
 8005d64:	eef0 7a40 	vmov.f32	s15, s0
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
            gcodeCommand->params2 |= 1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	885b      	ldrh	r3, [r3, #2]
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	805a      	strh	r2, [r3, #2]
            break;
 8005d7c:	e0a0      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'J':
        case 'j':
        {
            gcodeCommand->J = parseFloatValue(pos);
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f96a 	bl	8006058 <parseFloatValue>
 8005d84:	eef0 7a40 	vmov.f32	s15, s0
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
            gcodeCommand->params2 |= 2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	885b      	ldrh	r3, [r3, #2]
 8005d92:	f043 0302 	orr.w	r3, r3, #2
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	805a      	strh	r2, [r3, #2]
            break;
 8005d9c:	e090      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'R':
        case 'r':
        {
            gcodeCommand->R = parseFloatValue(pos);
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 f95a 	bl	8006058 <parseFloatValue>
 8005da4:	eef0 7a40 	vmov.f32	s15, s0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
            gcodeCommand->params2 |= 4;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	885b      	ldrh	r3, [r3, #2]
 8005db2:	f043 0304 	orr.w	r3, r3, #4
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	805a      	strh	r2, [r3, #2]
            break;
 8005dbc:	e080      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'D':
        case 'd':
        {
            gcodeCommand->D = parseFloatValue(pos);
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 f94a 	bl	8006058 <parseFloatValue>
 8005dc4:	eef0 7a40 	vmov.f32	s15, s0
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
            gcodeCommand->params2 |= 8;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	885b      	ldrh	r3, [r3, #2]
 8005dd2:	f043 0308 	orr.w	r3, r3, #8
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	805a      	strh	r2, [r3, #2]
            break;
 8005ddc:	e070      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'C':
        case 'c':
        {
	        gcodeCommand->C = parseFloatValue(pos);
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f93a 	bl	8006058 <parseFloatValue>
 8005de4:	eef0 7a40 	vmov.f32	s15, s0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	        gcodeCommand->params2 |= 16;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	885b      	ldrh	r3, [r3, #2]
 8005df2:	f043 0310 	orr.w	r3, r3, #16
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	805a      	strh	r2, [r3, #2]
	        break;
 8005dfc:	e060      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'H':
        case 'h':
        {
	        gcodeCommand->H = parseFloatValue(pos);
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f92a 	bl	8006058 <parseFloatValue>
 8005e04:	eef0 7a40 	vmov.f32	s15, s0
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	        gcodeCommand->params2 |= 32;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	885b      	ldrh	r3, [r3, #2]
 8005e12:	f043 0320 	orr.w	r3, r3, #32
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	805a      	strh	r2, [r3, #2]
	        break;
 8005e1c:	e050      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'A':
        case 'a':
        {
	        gcodeCommand->A = parseFloatValue(pos);
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 f91a 	bl	8006058 <parseFloatValue>
 8005e24:	eef0 7a40 	vmov.f32	s15, s0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	        gcodeCommand->params2 |= 64;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	885b      	ldrh	r3, [r3, #2]
 8005e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	805a      	strh	r2, [r3, #2]
	        break;
 8005e3c:	e040      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'B':
        case 'b':
        {
	        gcodeCommand->B = parseFloatValue(pos);
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 f90a 	bl	8006058 <parseFloatValue>
 8005e44:	eef0 7a40 	vmov.f32	s15, s0
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	        gcodeCommand->params2 |= 128;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	885b      	ldrh	r3, [r3, #2]
 8005e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	805a      	strh	r2, [r3, #2]
	        break;
 8005e5c:	e030      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'K':
        case 'k':
        {
	        gcodeCommand->K = parseFloatValue(pos);
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f8fa 	bl	8006058 <parseFloatValue>
 8005e64:	eef0 7a40 	vmov.f32	s15, s0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	        gcodeCommand->params2 |= 256;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	885b      	ldrh	r3, [r3, #2]
 8005e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	805a      	strh	r2, [r3, #2]
	        break;
 8005e7c:	e020      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'L':
        case 'l':
        {
	        gcodeCommand->L = parseFloatValue(pos);
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 f8ea 	bl	8006058 <parseFloatValue>
 8005e84:	eef0 7a40 	vmov.f32	s15, s0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	        gcodeCommand->params2 |= 512;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	885b      	ldrh	r3, [r3, #2]
 8005e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	805a      	strh	r2, [r3, #2]
	        break;
 8005e9c:	e010      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        }
        case 'O':
        case 'o':
        {
	        gcodeCommand->O = parseFloatValue(pos);
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 f8da 	bl	8006058 <parseFloatValue>
 8005ea4:	eef0 7a40 	vmov.f32	s15, s0
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	        gcodeCommand->params2 |= 1024;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	885b      	ldrh	r3, [r3, #2]
 8005eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	805a      	strh	r2, [r3, #2]
	        break;
 8005ebc:	e000      	b.n	8005ec0 <gcode_parseAscii+0x43c>
        case '*' : //checksum
        {
            break;
        }
        default:
            break;
 8005ebe:	bf00      	nop
    while ( (c = *(pos++)) )
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	60fa      	str	r2, [r7, #12]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	72bb      	strb	r3, [r7, #10]
 8005eca:	7abb      	ldrb	r3, [r7, #10]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f47f ade9 	bne.w	8005aa4 <gcode_parseAscii+0x20>
        }// end switch
    }// end while
    return true;
 8005ed2:	2301      	movs	r3, #1
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <hasM>:



bool hasM(gcodeCommand_context* gcodeCommand)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params & 2)!=0);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bf14      	ite	ne
 8005ef0:	2301      	movne	r3, #1
 8005ef2:	2300      	moveq	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <hasN>:
bool hasN(gcodeCommand_context* gcodeCommand)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params & 1)!=0);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	bf14      	ite	ne
 8005f16:	2301      	movne	r3, #1
 8005f18:	2300      	moveq	r3, #0
 8005f1a:	b2db      	uxtb	r3, r3
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <hasG>:
bool hasG(gcodeCommand_context* gcodeCommand)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params & 4)!=0);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	bf14      	ite	ne
 8005f3c:	2301      	movne	r3, #1
 8005f3e:	2300      	moveq	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <hasX>:
bool hasX(gcodeCommand_context* gcodeCommand)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params & 8)!=0);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	bf14      	ite	ne
 8005f62:	2301      	movne	r3, #1
 8005f64:	2300      	moveq	r3, #0
 8005f66:	b2db      	uxtb	r3, r3
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <hasY>:
bool hasY(gcodeCommand_context* gcodeCommand)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params & 16)!=0);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	bf14      	ite	ne
 8005f88:	2301      	movne	r3, #1
 8005f8a:	2300      	moveq	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <hasP>:
bool hasS(gcodeCommand_context* gcodeCommand)
{
    return ((gcodeCommand->params & 1024)!=0);
}
bool hasP(gcodeCommand_context* gcodeCommand)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params & 2048)!=0);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	bf14      	ite	ne
 8005fae:	2301      	movne	r3, #1
 8005fb0:	2300      	moveq	r3, #0
 8005fb2:	b2db      	uxtb	r3, r3
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <hasI>:
bool hasString(gcodeCommand_context* gcodeCommand)
{
    return ((gcodeCommand->params & 32768)!=0);
}
bool hasI(gcodeCommand_context* gcodeCommand)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params2 & 1)!=0);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	885b      	ldrh	r3, [r3, #2]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bf14      	ite	ne
 8005fd4:	2301      	movne	r3, #1
 8005fd6:	2300      	moveq	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <hasJ>:
bool hasJ(gcodeCommand_context* gcodeCommand)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params2 & 2)!=0);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	885b      	ldrh	r3, [r3, #2]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	bf14      	ite	ne
 8005ffa:	2301      	movne	r3, #1
 8005ffc:	2300      	moveq	r3, #0
 8005ffe:	b2db      	uxtb	r3, r3
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <hasD>:
bool hasR(gcodeCommand_context* gcodeCommand)
{
    return ((gcodeCommand->params2 & 4)!=0);
}
bool hasD(gcodeCommand_context* gcodeCommand)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params2 & 8)!=0);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	885b      	ldrh	r3, [r3, #2]
 8006018:	f003 0308 	and.w	r3, r3, #8
 800601c:	2b00      	cmp	r3, #0
 800601e:	bf14      	ite	ne
 8006020:	2301      	movne	r3, #1
 8006022:	2300      	moveq	r3, #0
 8006024:	b2db      	uxtb	r3, r3
}
 8006026:	4618      	mov	r0, r3
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <hasA>:
bool hasH(gcodeCommand_context* gcodeCommand)
{
    return ((gcodeCommand->params2 & 32)!=0);
}
bool hasA(gcodeCommand_context* gcodeCommand)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
    return ((gcodeCommand->params2 & 64)!=0);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	885b      	ldrh	r3, [r3, #2]
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	bf14      	ite	ne
 8006046:	2301      	movne	r3, #1
 8006048:	2300      	moveq	r3, #0
 800604a:	b2db      	uxtb	r3, r3
}
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <parseFloatValue>:
    gcodeCommand->params2 |= 32768;
}


float parseFloatValue(char *s)
{
 8006058:	b590      	push	{r4, r7, lr}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
    char *endPtr;
    while(*s == 32) s++; // skip spaces
 8006060:	e002      	b.n	8006068 <parseFloatValue+0x10>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3301      	adds	r3, #1
 8006066:	607b      	str	r3, [r7, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b20      	cmp	r3, #32
 800606e:	d0f8      	beq.n	8006062 <parseFloatValue+0xa>
    float f = (strtod(s, &endPtr));
 8006070:	f107 0308 	add.w	r3, r7, #8
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f002 ffde 	bl	8009038 <strtod>
 800607c:	ec54 3b10 	vmov	r3, r4, d0
 8006080:	4618      	mov	r0, r3
 8006082:	4621      	mov	r1, r4
 8006084:	f7fa fdb0 	bl	8000be8 <__aeabi_d2f>
 8006088:	4603      	mov	r3, r0
 800608a:	60fb      	str	r3, [r7, #12]
    if(s == endPtr) f=0.0; // treat empty string "x " as "x0"
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	429a      	cmp	r2, r3
 8006092:	d102      	bne.n	800609a <parseFloatValue+0x42>
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
    return f;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	ee07 3a90 	vmov	s15, r3
}
 80060a0:	eeb0 0a67 	vmov.f32	s0, s15
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd90      	pop	{r4, r7, pc}

080060aa <parseLongValue>:

long parseLongValue(char *s)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
    char *endPtr;
    while(*s == 32) s++; // skip spaces
 80060b2:	e002      	b.n	80060ba <parseLongValue+0x10>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3301      	adds	r3, #1
 80060b8:	607b      	str	r3, [r7, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b20      	cmp	r3, #32
 80060c0:	d0f8      	beq.n	80060b4 <parseLongValue+0xa>
    long l = (strtol(s, &endPtr, 10));
 80060c2:	f107 0308 	add.w	r3, r7, #8
 80060c6:	220a      	movs	r2, #10
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f003 f844 	bl	8009158 <strtol>
 80060d0:	60f8      	str	r0, [r7, #12]
    if(s == endPtr) l=0; // treat empty string argument "p " as "p0"
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d101      	bne.n	80060de <parseLongValue+0x34>
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
    return l;
 80060de:	68fb      	ldr	r3, [r7, #12]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <uart_gpio_init>:
//	    HAL_UART_Receive_IT(&huart2, &byte, 1);
//  }
//}

void uart_gpio_init()
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 80060ee:	4b10      	ldr	r3, [pc, #64]	; (8006130 <uart_gpio_init+0x48>)
 80060f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f2:	4a0f      	ldr	r2, [pc, #60]	; (8006130 <uart_gpio_init+0x48>)
 80060f4:	f043 0301 	orr.w	r3, r3, #1
 80060f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060fa:	4b0d      	ldr	r3, [pc, #52]	; (8006130 <uart_gpio_init+0x48>)
 80060fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	603b      	str	r3, [r7, #0]
 8006104:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8006106:	230c      	movs	r3, #12
 8006108:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800610a:	2302      	movs	r3, #2
 800610c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800610e:	2301      	movs	r3, #1
 8006110:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8006112:	2300      	movs	r3, #0
 8006114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006116:	2307      	movs	r3, #7
 8006118:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800611a:	1d3b      	adds	r3, r7, #4
 800611c:	4619      	mov	r1, r3
 800611e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006122:	f7fb f925 	bl	8001370 <HAL_GPIO_Init>
}
 8006126:	bf00      	nop
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	40021000 	.word	0x40021000

08006134 <uart_init>:

void uart_init()
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
  __USART2_CLK_ENABLE();
 800613a:	4b1a      	ldr	r3, [pc, #104]	; (80061a4 <uart_init+0x70>)
 800613c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613e:	4a19      	ldr	r2, [pc, #100]	; (80061a4 <uart_init+0x70>)
 8006140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006144:	6593      	str	r3, [r2, #88]	; 0x58
 8006146:	4b17      	ldr	r3, [pc, #92]	; (80061a4 <uart_init+0x70>)
 8006148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800614e:	607b      	str	r3, [r7, #4]
 8006150:	687b      	ldr	r3, [r7, #4]

  huart2.Instance = USART2;
 8006152:	4b15      	ldr	r3, [pc, #84]	; (80061a8 <uart_init+0x74>)
 8006154:	4a15      	ldr	r2, [pc, #84]	; (80061ac <uart_init+0x78>)
 8006156:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006158:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <uart_init+0x74>)
 800615a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800615e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006160:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <uart_init+0x74>)
 8006162:	2200      	movs	r2, #0
 8006164:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006166:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <uart_init+0x74>)
 8006168:	2200      	movs	r2, #0
 800616a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800616c:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <uart_init+0x74>)
 800616e:	2200      	movs	r2, #0
 8006170:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006172:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <uart_init+0x74>)
 8006174:	220c      	movs	r2, #12
 8006176:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <uart_init+0x74>)
 800617a:	2200      	movs	r2, #0
 800617c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800617e:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <uart_init+0x74>)
 8006180:	2200      	movs	r2, #0
 8006182:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 8006184:	4808      	ldr	r0, [pc, #32]	; (80061a8 <uart_init+0x74>)
 8006186:	f7fd fe03 	bl	8003d90 <HAL_UART_Init>

  /* Peripheral interrupt init*/
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800618a:	2200      	movs	r2, #0
 800618c:	2100      	movs	r1, #0
 800618e:	2026      	movs	r0, #38	; 0x26
 8006190:	f7fb f877 	bl	8001282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006194:	2026      	movs	r0, #38	; 0x26
 8006196:	f7fb f890 	bl	80012ba <HAL_NVIC_EnableIRQ>
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	40021000 	.word	0x40021000
 80061a8:	20000ed0 	.word	0x20000ed0
 80061ac:	40004400 	.word	0x40004400

080061b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint32_t dt, t, t0, tloop;
  dt = 10;
 80061b6:	230a      	movs	r3, #10
 80061b8:	60fb      	str	r3, [r7, #12]
  t0 = HAL_GetTick();
 80061ba:	f7fa ff7b 	bl	80010b4 <HAL_GetTick>
 80061be:	60b8      	str	r0, [r7, #8]
  tloop = t0 + dt;
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4413      	add	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]

  uint32_t dtAff, tAff;
  dtAff = 10;
 80061c8:	230a      	movs	r3, #10
 80061ca:	607b      	str	r3, [r7, #4]
  tAff = t0 + dtAff;
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4413      	add	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80061d4:	f7fa ff02 	bl	8000fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80061d8:	f000 f854 	bl	8006284 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  uart_gpio_init();
 80061dc:	f7ff ff84 	bl	80060e8 <uart_gpio_init>
  uart_init();
 80061e0:	f7ff ffa8 	bl	8006134 <uart_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80061e4:	f000 faca 	bl	800677c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80061e8:	f000 fa64 	bl	80066b4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80061ec:	f000 f8c0 	bl	8006370 <MX_SPI2_Init>
  MX_TIM2_Init();
 80061f0:	f000 f956 	bl	80064a0 <MX_TIM2_Init>
  MX_TIM4_Init();
 80061f4:	f000 fa06 	bl	8006604 <MX_TIM4_Init>
  MX_TIM1_Init();
 80061f8:	f000 f8f4 	bl	80063e4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80061fc:	f000 f9a8 	bl	8006550 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "UART_OK\r\n"), 90000); //s/ @suppress("Float formatting support")
 8006200:	4a1a      	ldr	r2, [pc, #104]	; (800626c <main+0xbc>)
 8006202:	4b1b      	ldr	r3, [pc, #108]	; (8006270 <main+0xc0>)
 8006204:	cb03      	ldmia	r3!, {r0, r1}
 8006206:	6010      	str	r0, [r2, #0]
 8006208:	6051      	str	r1, [r2, #4]
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	8113      	strh	r3, [r2, #8]
 800620e:	2309      	movs	r3, #9
 8006210:	b29a      	uxth	r2, r3
 8006212:	4b18      	ldr	r3, [pc, #96]	; (8006274 <main+0xc4>)
 8006214:	4915      	ldr	r1, [pc, #84]	; (800626c <main+0xbc>)
 8006216:	4818      	ldr	r0, [pc, #96]	; (8006278 <main+0xc8>)
 8006218:	f7fd fe08 	bl	8003e2c <HAL_UART_Transmit>

    setup();
 800621c:	f000 fb10 	bl	8006840 <setup>
	HAL_UART_Receive_IT(&huart2, &byte, 1);
 8006220:	2201      	movs	r2, #1
 8006222:	4916      	ldr	r1, [pc, #88]	; (800627c <main+0xcc>)
 8006224:	4814      	ldr	r0, [pc, #80]	; (8006278 <main+0xc8>)
 8006226:	f7fd fe95 	bl	8003f54 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		t = HAL_GetTick() - t0;
 800622a:	f7fa ff43 	bl	80010b4 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	603b      	str	r3, [r7, #0]
		if (t>tloop) {
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	429a      	cmp	r2, r3
 800623c:	d90d      	bls.n	800625a <main+0xaa>
			tloop = tloop + dt;
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	617b      	str	r3, [r7, #20]
			robot_update(&robot, dt);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	ee07 3a90 	vmov	s15, r3
 800624c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006250:	eeb0 0a67 	vmov.f32	s0, s15
 8006254:	480a      	ldr	r0, [pc, #40]	; (8006280 <main+0xd0>)
 8006256:	f001 fac3 	bl	80077e0 <robot_update>
		}
		if (t>tAff){
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	429a      	cmp	r2, r3
 8006260:	d9e3      	bls.n	800622a <main+0x7a>
			tAff = tAff + dtAff;
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4413      	add	r3, r2
 8006268:	613b      	str	r3, [r7, #16]
		t = HAL_GetTick() - t0;
 800626a:	e7de      	b.n	800622a <main+0x7a>
 800626c:	20000cf0 	.word	0x20000cf0
 8006270:	0800f2c8 	.word	0x0800f2c8
 8006274:	00015f90 	.word	0x00015f90
 8006278:	20000ed0 	.word	0x20000ed0
 800627c:	20000df4 	.word	0x20000df4
 8006280:	20000db0 	.word	0x20000db0

08006284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b0b8      	sub	sp, #224	; 0xe0
 8006288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800628a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800628e:	2244      	movs	r2, #68	; 0x44
 8006290:	2100      	movs	r1, #0
 8006292:	4618      	mov	r0, r3
 8006294:	f002 f87a 	bl	800838c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006298:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	605a      	str	r2, [r3, #4]
 80062a2:	609a      	str	r2, [r3, #8]
 80062a4:	60da      	str	r2, [r3, #12]
 80062a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80062a8:	463b      	mov	r3, r7
 80062aa:	2288      	movs	r2, #136	; 0x88
 80062ac:	2100      	movs	r1, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	f002 f86c 	bl	800838c <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80062b4:	2302      	movs	r3, #2
 80062b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80062ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80062c2:	2310      	movs	r3, #16
 80062c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80062c8:	2302      	movs	r3, #2
 80062ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80062ce:	2302      	movs	r3, #2
 80062d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80062d4:	2301      	movs	r3, #1
 80062d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80062da:	230a      	movs	r3, #10
 80062dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80062e0:	2307      	movs	r3, #7
 80062e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80062e6:	2302      	movs	r3, #2
 80062e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80062ec:	2302      	movs	r3, #2
 80062ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80062f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fb fa5e 	bl	80017b8 <HAL_RCC_OscConfig>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006302:	f000 fc1d 	bl	8006b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006306:	230f      	movs	r3, #15
 8006308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800630c:	2303      	movs	r3, #3
 800630e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006312:	2300      	movs	r3, #0
 8006314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006318:	2300      	movs	r3, #0
 800631a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800631e:	2300      	movs	r3, #0
 8006320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006324:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006328:	2104      	movs	r1, #4
 800632a:	4618      	mov	r0, r3
 800632c:	f7fb fdf4 	bl	8001f18 <HAL_RCC_ClockConfig>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8006336:	f000 fc03 	bl	8006b40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800633a:	2302      	movs	r3, #2
 800633c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800633e:	2300      	movs	r3, #0
 8006340:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006342:	463b      	mov	r3, r7
 8006344:	4618      	mov	r0, r3
 8006346:	f7fb ffeb 	bl	8002320 <HAL_RCCEx_PeriphCLKConfig>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8006350:	f000 fbf6 	bl	8006b40 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006354:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006358:	f7fb f9d8 	bl	800170c <HAL_PWREx_ControlVoltageScaling>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8006362:	f000 fbed 	bl	8006b40 <Error_Handler>
  }
}
 8006366:	bf00      	nop
 8006368:	37e0      	adds	r7, #224	; 0xe0
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
	...

08006370 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006374:	4b19      	ldr	r3, [pc, #100]	; (80063dc <MX_SPI2_Init+0x6c>)
 8006376:	4a1a      	ldr	r2, [pc, #104]	; (80063e0 <MX_SPI2_Init+0x70>)
 8006378:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800637a:	4b18      	ldr	r3, [pc, #96]	; (80063dc <MX_SPI2_Init+0x6c>)
 800637c:	2200      	movs	r2, #0
 800637e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006380:	4b16      	ldr	r3, [pc, #88]	; (80063dc <MX_SPI2_Init+0x6c>)
 8006382:	2200      	movs	r2, #0
 8006384:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8006386:	4b15      	ldr	r3, [pc, #84]	; (80063dc <MX_SPI2_Init+0x6c>)
 8006388:	f44f 7240 	mov.w	r2, #768	; 0x300
 800638c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800638e:	4b13      	ldr	r3, [pc, #76]	; (80063dc <MX_SPI2_Init+0x6c>)
 8006390:	2200      	movs	r2, #0
 8006392:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006394:	4b11      	ldr	r3, [pc, #68]	; (80063dc <MX_SPI2_Init+0x6c>)
 8006396:	2200      	movs	r2, #0
 8006398:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800639a:	4b10      	ldr	r3, [pc, #64]	; (80063dc <MX_SPI2_Init+0x6c>)
 800639c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80063a2:	4b0e      	ldr	r3, [pc, #56]	; (80063dc <MX_SPI2_Init+0x6c>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80063a8:	4b0c      	ldr	r3, [pc, #48]	; (80063dc <MX_SPI2_Init+0x6c>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063ae:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <MX_SPI2_Init+0x6c>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80063b4:	4b09      	ldr	r3, [pc, #36]	; (80063dc <MX_SPI2_Init+0x6c>)
 80063b6:	2207      	movs	r2, #7
 80063b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80063ba:	4b08      	ldr	r3, [pc, #32]	; (80063dc <MX_SPI2_Init+0x6c>)
 80063bc:	2200      	movs	r2, #0
 80063be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80063c0:	4b06      	ldr	r3, [pc, #24]	; (80063dc <MX_SPI2_Init+0x6c>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80063c6:	4805      	ldr	r0, [pc, #20]	; (80063dc <MX_SPI2_Init+0x6c>)
 80063c8:	f7fc fc5a 	bl	8002c80 <HAL_SPI_Init>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80063d2:	f000 fbb5 	bl	8006b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80063d6:	bf00      	nop
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20000a20 	.word	0x20000a20
 80063e0:	40003800 	.word	0x40003800

080063e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08c      	sub	sp, #48	; 0x30
 80063e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80063ea:	f107 030c 	add.w	r3, r7, #12
 80063ee:	2224      	movs	r2, #36	; 0x24
 80063f0:	2100      	movs	r1, #0
 80063f2:	4618      	mov	r0, r3
 80063f4:	f001 ffca 	bl	800838c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063f8:	463b      	mov	r3, r7
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	605a      	str	r2, [r3, #4]
 8006400:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006402:	4b25      	ldr	r3, [pc, #148]	; (8006498 <MX_TIM1_Init+0xb4>)
 8006404:	4a25      	ldr	r2, [pc, #148]	; (800649c <MX_TIM1_Init+0xb8>)
 8006406:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006408:	4b23      	ldr	r3, [pc, #140]	; (8006498 <MX_TIM1_Init+0xb4>)
 800640a:	2200      	movs	r2, #0
 800640c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800640e:	4b22      	ldr	r3, [pc, #136]	; (8006498 <MX_TIM1_Init+0xb4>)
 8006410:	2200      	movs	r2, #0
 8006412:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006414:	4b20      	ldr	r3, [pc, #128]	; (8006498 <MX_TIM1_Init+0xb4>)
 8006416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800641a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800641c:	4b1e      	ldr	r3, [pc, #120]	; (8006498 <MX_TIM1_Init+0xb4>)
 800641e:	2200      	movs	r2, #0
 8006420:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006422:	4b1d      	ldr	r3, [pc, #116]	; (8006498 <MX_TIM1_Init+0xb4>)
 8006424:	2200      	movs	r2, #0
 8006426:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006428:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <MX_TIM1_Init+0xb4>)
 800642a:	2200      	movs	r2, #0
 800642c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800642e:	2303      	movs	r3, #3
 8006430:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006432:	2300      	movs	r3, #0
 8006434:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006436:	2301      	movs	r3, #1
 8006438:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800643a:	2300      	movs	r3, #0
 800643c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800643e:	230f      	movs	r3, #15
 8006440:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006442:	2300      	movs	r3, #0
 8006444:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006446:	2301      	movs	r3, #1
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800644a:	2300      	movs	r3, #0
 800644c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800644e:	230f      	movs	r3, #15
 8006450:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006452:	f107 030c 	add.w	r3, r7, #12
 8006456:	4619      	mov	r1, r3
 8006458:	480f      	ldr	r0, [pc, #60]	; (8006498 <MX_TIM1_Init+0xb4>)
 800645a:	f7fc fd8d 	bl	8002f78 <HAL_TIM_Encoder_Init>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8006464:	f000 fb6c 	bl	8006b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006468:	2300      	movs	r3, #0
 800646a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800646c:	2300      	movs	r3, #0
 800646e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006470:	2300      	movs	r3, #0
 8006472:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006474:	463b      	mov	r3, r7
 8006476:	4619      	mov	r1, r3
 8006478:	4807      	ldr	r0, [pc, #28]	; (8006498 <MX_TIM1_Init+0xb4>)
 800647a:	f7fd fc0f 	bl	8003c9c <HAL_TIMEx_MasterConfigSynchronization>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8006484:	f000 fb5c 	bl	8006b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->CR1 = 1;
 8006488:	4b04      	ldr	r3, [pc, #16]	; (800649c <MX_TIM1_Init+0xb8>)
 800648a:	2201      	movs	r2, #1
 800648c:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 800648e:	bf00      	nop
 8006490:	3730      	adds	r7, #48	; 0x30
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000df8 	.word	0x20000df8
 800649c:	40012c00 	.word	0x40012c00

080064a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	; 0x28
 80064a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064a6:	f107 031c 	add.w	r3, r7, #28
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	605a      	str	r2, [r3, #4]
 80064b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064b2:	463b      	mov	r3, r7
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	605a      	str	r2, [r3, #4]
 80064ba:	609a      	str	r2, [r3, #8]
 80064bc:	60da      	str	r2, [r3, #12]
 80064be:	611a      	str	r2, [r3, #16]
 80064c0:	615a      	str	r2, [r3, #20]
 80064c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80064c4:	4b21      	ldr	r3, [pc, #132]	; (800654c <MX_TIM2_Init+0xac>)
 80064c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80064ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80064cc:	4b1f      	ldr	r3, [pc, #124]	; (800654c <MX_TIM2_Init+0xac>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064d2:	4b1e      	ldr	r3, [pc, #120]	; (800654c <MX_TIM2_Init+0xac>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80064d8:	4b1c      	ldr	r3, [pc, #112]	; (800654c <MX_TIM2_Init+0xac>)
 80064da:	2200      	movs	r2, #0
 80064dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064de:	4b1b      	ldr	r3, [pc, #108]	; (800654c <MX_TIM2_Init+0xac>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064e4:	4b19      	ldr	r3, [pc, #100]	; (800654c <MX_TIM2_Init+0xac>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80064ea:	4818      	ldr	r0, [pc, #96]	; (800654c <MX_TIM2_Init+0xac>)
 80064ec:	f7fc fc52 	bl	8002d94 <HAL_TIM_PWM_Init>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80064f6:	f000 fb23 	bl	8006b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064fe:	2300      	movs	r3, #0
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006502:	f107 031c 	add.w	r3, r7, #28
 8006506:	4619      	mov	r1, r3
 8006508:	4810      	ldr	r0, [pc, #64]	; (800654c <MX_TIM2_Init+0xac>)
 800650a:	f7fd fbc7 	bl	8003c9c <HAL_TIMEx_MasterConfigSynchronization>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8006514:	f000 fb14 	bl	8006b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006518:	2360      	movs	r3, #96	; 0x60
 800651a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800651c:	2300      	movs	r3, #0
 800651e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006520:	2300      	movs	r3, #0
 8006522:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006524:	2300      	movs	r3, #0
 8006526:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006528:	463b      	mov	r3, r7
 800652a:	2204      	movs	r2, #4
 800652c:	4619      	mov	r1, r3
 800652e:	4807      	ldr	r0, [pc, #28]	; (800654c <MX_TIM2_Init+0xac>)
 8006530:	f7fc fed4 	bl	80032dc <HAL_TIM_PWM_ConfigChannel>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800653a:	f000 fb01 	bl	8006b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800653e:	4803      	ldr	r0, [pc, #12]	; (800654c <MX_TIM2_Init+0xac>)
 8006540:	f001 fb5a 	bl	8007bf8 <HAL_TIM_MspPostInit>

}
 8006544:	bf00      	nop
 8006546:	3728      	adds	r7, #40	; 0x28
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20000e90 	.word	0x20000e90

08006550 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	; 0x28
 8006554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006556:	f107 031c 	add.w	r3, r7, #28
 800655a:	2200      	movs	r2, #0
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	605a      	str	r2, [r3, #4]
 8006560:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006562:	463b      	mov	r3, r7
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	605a      	str	r2, [r3, #4]
 800656a:	609a      	str	r2, [r3, #8]
 800656c:	60da      	str	r2, [r3, #12]
 800656e:	611a      	str	r2, [r3, #16]
 8006570:	615a      	str	r2, [r3, #20]
 8006572:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006574:	4b21      	ldr	r3, [pc, #132]	; (80065fc <MX_TIM3_Init+0xac>)
 8006576:	4a22      	ldr	r2, [pc, #136]	; (8006600 <MX_TIM3_Init+0xb0>)
 8006578:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800657a:	4b20      	ldr	r3, [pc, #128]	; (80065fc <MX_TIM3_Init+0xac>)
 800657c:	2200      	movs	r2, #0
 800657e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006580:	4b1e      	ldr	r3, [pc, #120]	; (80065fc <MX_TIM3_Init+0xac>)
 8006582:	2200      	movs	r2, #0
 8006584:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8006586:	4b1d      	ldr	r3, [pc, #116]	; (80065fc <MX_TIM3_Init+0xac>)
 8006588:	2200      	movs	r2, #0
 800658a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800658c:	4b1b      	ldr	r3, [pc, #108]	; (80065fc <MX_TIM3_Init+0xac>)
 800658e:	2200      	movs	r2, #0
 8006590:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006592:	4b1a      	ldr	r3, [pc, #104]	; (80065fc <MX_TIM3_Init+0xac>)
 8006594:	2200      	movs	r2, #0
 8006596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006598:	4818      	ldr	r0, [pc, #96]	; (80065fc <MX_TIM3_Init+0xac>)
 800659a:	f7fc fbfb 	bl	8002d94 <HAL_TIM_PWM_Init>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80065a4:	f000 facc 	bl	8006b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065a8:	2300      	movs	r3, #0
 80065aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065ac:	2300      	movs	r3, #0
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80065b0:	f107 031c 	add.w	r3, r7, #28
 80065b4:	4619      	mov	r1, r3
 80065b6:	4811      	ldr	r0, [pc, #68]	; (80065fc <MX_TIM3_Init+0xac>)
 80065b8:	f7fd fb70 	bl	8003c9c <HAL_TIMEx_MasterConfigSynchronization>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80065c2:	f000 fabd 	bl	8006b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065c6:	2360      	movs	r3, #96	; 0x60
 80065c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065d2:	2300      	movs	r3, #0
 80065d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80065d6:	463b      	mov	r3, r7
 80065d8:	2204      	movs	r2, #4
 80065da:	4619      	mov	r1, r3
 80065dc:	4807      	ldr	r0, [pc, #28]	; (80065fc <MX_TIM3_Init+0xac>)
 80065de:	f7fc fe7d 	bl	80032dc <HAL_TIM_PWM_ConfigChannel>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80065e8:	f000 faaa 	bl	8006b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80065ec:	4803      	ldr	r0, [pc, #12]	; (80065fc <MX_TIM3_Init+0xac>)
 80065ee:	f001 fb03 	bl	8007bf8 <HAL_TIM_MspPostInit>

}
 80065f2:	bf00      	nop
 80065f4:	3728      	adds	r7, #40	; 0x28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000c68 	.word	0x20000c68
 8006600:	40000400 	.word	0x40000400

08006604 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08c      	sub	sp, #48	; 0x30
 8006608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800660a:	f107 030c 	add.w	r3, r7, #12
 800660e:	2224      	movs	r2, #36	; 0x24
 8006610:	2100      	movs	r1, #0
 8006612:	4618      	mov	r0, r3
 8006614:	f001 feba 	bl	800838c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006618:	463b      	mov	r3, r7
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	605a      	str	r2, [r3, #4]
 8006620:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006622:	4b22      	ldr	r3, [pc, #136]	; (80066ac <MX_TIM4_Init+0xa8>)
 8006624:	4a22      	ldr	r2, [pc, #136]	; (80066b0 <MX_TIM4_Init+0xac>)
 8006626:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006628:	4b20      	ldr	r3, [pc, #128]	; (80066ac <MX_TIM4_Init+0xa8>)
 800662a:	2200      	movs	r2, #0
 800662c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800662e:	4b1f      	ldr	r3, [pc, #124]	; (80066ac <MX_TIM4_Init+0xa8>)
 8006630:	2200      	movs	r2, #0
 8006632:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006634:	4b1d      	ldr	r3, [pc, #116]	; (80066ac <MX_TIM4_Init+0xa8>)
 8006636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800663a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800663c:	4b1b      	ldr	r3, [pc, #108]	; (80066ac <MX_TIM4_Init+0xa8>)
 800663e:	2200      	movs	r2, #0
 8006640:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006642:	4b1a      	ldr	r3, [pc, #104]	; (80066ac <MX_TIM4_Init+0xa8>)
 8006644:	2200      	movs	r2, #0
 8006646:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006648:	2303      	movs	r3, #3
 800664a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800664c:	2300      	movs	r3, #0
 800664e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006650:	2301      	movs	r3, #1
 8006652:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006654:	2300      	movs	r3, #0
 8006656:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006658:	2300      	movs	r3, #0
 800665a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800665c:	2300      	movs	r3, #0
 800665e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006660:	2301      	movs	r3, #1
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006664:	2300      	movs	r3, #0
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006668:	2300      	movs	r3, #0
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800666c:	f107 030c 	add.w	r3, r7, #12
 8006670:	4619      	mov	r1, r3
 8006672:	480e      	ldr	r0, [pc, #56]	; (80066ac <MX_TIM4_Init+0xa8>)
 8006674:	f7fc fc80 	bl	8002f78 <HAL_TIM_Encoder_Init>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800667e:	f000 fa5f 	bl	8006b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006682:	2300      	movs	r3, #0
 8006684:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006686:	2300      	movs	r3, #0
 8006688:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800668a:	463b      	mov	r3, r7
 800668c:	4619      	mov	r1, r3
 800668e:	4807      	ldr	r0, [pc, #28]	; (80066ac <MX_TIM4_Init+0xa8>)
 8006690:	f7fd fb04 	bl	8003c9c <HAL_TIMEx_MasterConfigSynchronization>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800669a:	f000 fa51 	bl	8006b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  TIM4->CR1 = 1;
 800669e:	4b04      	ldr	r3, [pc, #16]	; (80066b0 <MX_TIM4_Init+0xac>)
 80066a0:	2201      	movs	r2, #1
 80066a2:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM4_Init 2 */

}
 80066a4:	bf00      	nop
 80066a6:	3730      	adds	r7, #48	; 0x30
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000a84 	.word	0x20000a84
 80066b0:	40000800 	.word	0x40000800

080066b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80066ba:	4b2d      	ldr	r3, [pc, #180]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 80066bc:	4a2d      	ldr	r2, [pc, #180]	; (8006774 <MX_USART2_UART_Init+0xc0>)
 80066be:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80066c0:	4b2b      	ldr	r3, [pc, #172]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 80066c2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80066c6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80066c8:	4b29      	ldr	r3, [pc, #164]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80066ce:	4b28      	ldr	r3, [pc, #160]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80066d4:	4b26      	ldr	r3, [pc, #152]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80066da:	4b25      	ldr	r3, [pc, #148]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 80066dc:	220c      	movs	r2, #12
 80066de:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066e0:	4b23      	ldr	r3, [pc, #140]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80066e6:	4b22      	ldr	r3, [pc, #136]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80066ec:	4b20      	ldr	r3, [pc, #128]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80066f2:	4b1f      	ldr	r3, [pc, #124]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80066f8:	481d      	ldr	r0, [pc, #116]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 80066fa:	f7fd fb49 	bl	8003d90 <HAL_UART_Init>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8006704:	f000 fa1c 	bl	8006b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
	  __USART2_CLK_ENABLE();
 8006708:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <MX_USART2_UART_Init+0xc4>)
 800670a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670c:	4a1a      	ldr	r2, [pc, #104]	; (8006778 <MX_USART2_UART_Init+0xc4>)
 800670e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006712:	6593      	str	r3, [r2, #88]	; 0x58
 8006714:	4b18      	ldr	r3, [pc, #96]	; (8006778 <MX_USART2_UART_Init+0xc4>)
 8006716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671c:	607b      	str	r3, [r7, #4]
 800671e:	687b      	ldr	r3, [r7, #4]

	  huart2.Instance = USART2;
 8006720:	4b13      	ldr	r3, [pc, #76]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 8006722:	4a14      	ldr	r2, [pc, #80]	; (8006774 <MX_USART2_UART_Init+0xc0>)
 8006724:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8006726:	4b12      	ldr	r3, [pc, #72]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 8006728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800672c:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800672e:	4b10      	ldr	r3, [pc, #64]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 8006730:	2200      	movs	r2, #0
 8006732:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8006734:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 8006736:	2200      	movs	r2, #0
 8006738:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 800673a:	4b0d      	ldr	r3, [pc, #52]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 800673c:	2200      	movs	r2, #0
 800673e:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8006740:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 8006742:	220c      	movs	r2, #12
 8006744:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006746:	4b0a      	ldr	r3, [pc, #40]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 8006748:	2200      	movs	r2, #0
 800674a:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800674c:	4b08      	ldr	r3, [pc, #32]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 800674e:	2200      	movs	r2, #0
 8006750:	61da      	str	r2, [r3, #28]
	  HAL_UART_Init(&huart2);
 8006752:	4807      	ldr	r0, [pc, #28]	; (8006770 <MX_USART2_UART_Init+0xbc>)
 8006754:	f7fd fb1c 	bl	8003d90 <HAL_UART_Init>

	  /* Peripheral interrupt init*/
	  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006758:	2200      	movs	r2, #0
 800675a:	2100      	movs	r1, #0
 800675c:	2026      	movs	r0, #38	; 0x26
 800675e:	f7fa fd90 	bl	8001282 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006762:	2026      	movs	r0, #38	; 0x26
 8006764:	f7fa fda9 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8006768:	bf00      	nop
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	20000ed0 	.word	0x20000ed0
 8006774:	40004400 	.word	0x40004400
 8006778:	40021000 	.word	0x40021000

0800677c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006782:	f107 030c 	add.w	r3, r7, #12
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	605a      	str	r2, [r3, #4]
 800678c:	609a      	str	r2, [r3, #8]
 800678e:	60da      	str	r2, [r3, #12]
 8006790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006792:	4b29      	ldr	r3, [pc, #164]	; (8006838 <MX_GPIO_Init+0xbc>)
 8006794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006796:	4a28      	ldr	r2, [pc, #160]	; (8006838 <MX_GPIO_Init+0xbc>)
 8006798:	f043 0304 	orr.w	r3, r3, #4
 800679c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800679e:	4b26      	ldr	r3, [pc, #152]	; (8006838 <MX_GPIO_Init+0xbc>)
 80067a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	60bb      	str	r3, [r7, #8]
 80067a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80067aa:	4b23      	ldr	r3, [pc, #140]	; (8006838 <MX_GPIO_Init+0xbc>)
 80067ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ae:	4a22      	ldr	r2, [pc, #136]	; (8006838 <MX_GPIO_Init+0xbc>)
 80067b0:	f043 0301 	orr.w	r3, r3, #1
 80067b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067b6:	4b20      	ldr	r3, [pc, #128]	; (8006838 <MX_GPIO_Init+0xbc>)
 80067b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	607b      	str	r3, [r7, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80067c2:	4b1d      	ldr	r3, [pc, #116]	; (8006838 <MX_GPIO_Init+0xbc>)
 80067c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c6:	4a1c      	ldr	r2, [pc, #112]	; (8006838 <MX_GPIO_Init+0xbc>)
 80067c8:	f043 0302 	orr.w	r3, r3, #2
 80067cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067ce:	4b1a      	ldr	r3, [pc, #104]	; (8006838 <MX_GPIO_Init+0xbc>)
 80067d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	603b      	str	r3, [r7, #0]
 80067d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotB_Dir_Pin|MotA_Dir_Pin|MotB_Brake_Pin, GPIO_PIN_RESET);
 80067da:	2200      	movs	r2, #0
 80067dc:	f44f 618c 	mov.w	r1, #1120	; 0x460
 80067e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067e4:	f7fa ff6c 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotA_Brake_GPIO_Port, MotA_Brake_Pin, GPIO_PIN_RESET);
 80067e8:	2200      	movs	r2, #0
 80067ea:	2180      	movs	r1, #128	; 0x80
 80067ec:	4813      	ldr	r0, [pc, #76]	; (800683c <MX_GPIO_Init+0xc0>)
 80067ee:	f7fa ff67 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotB_Dir_Pin MotA_Dir_Pin MotB_Brake_Pin */
  GPIO_InitStruct.Pin = MotB_Dir_Pin|MotA_Dir_Pin|MotB_Brake_Pin;
 80067f2:	f44f 638c 	mov.w	r3, #1120	; 0x460
 80067f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067f8:	2301      	movs	r3, #1
 80067fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067fc:	2300      	movs	r3, #0
 80067fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006800:	2300      	movs	r3, #0
 8006802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006804:	f107 030c 	add.w	r3, r7, #12
 8006808:	4619      	mov	r1, r3
 800680a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800680e:	f7fa fdaf 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : MotA_Brake_Pin */
  GPIO_InitStruct.Pin = MotA_Brake_Pin;
 8006812:	2380      	movs	r3, #128	; 0x80
 8006814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006816:	2301      	movs	r3, #1
 8006818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800681a:	2300      	movs	r3, #0
 800681c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800681e:	2300      	movs	r3, #0
 8006820:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MotA_Brake_GPIO_Port, &GPIO_InitStruct);
 8006822:	f107 030c 	add.w	r3, r7, #12
 8006826:	4619      	mov	r1, r3
 8006828:	4804      	ldr	r0, [pc, #16]	; (800683c <MX_GPIO_Init+0xc0>)
 800682a:	f7fa fda1 	bl	8001370 <HAL_GPIO_Init>

}
 800682e:	bf00      	nop
 8006830:	3720      	adds	r7, #32
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	40021000 	.word	0x40021000
 800683c:	48000800 	.word	0x48000800

08006840 <setup>:

/* USER CODE BEGIN 4 */
void setup(){
 8006840:	b5b0      	push	{r4, r5, r7, lr}
 8006842:	af00      	add	r7, sp, #0
    motorD.timer	 		= htim3;
 8006844:	4a71      	ldr	r2, [pc, #452]	; (8006a0c <setup+0x1cc>)
 8006846:	4b72      	ldr	r3, [pc, #456]	; (8006a10 <setup+0x1d0>)
 8006848:	4614      	mov	r4, r2
 800684a:	461d      	mov	r5, r3
 800684c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800684e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006858:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800685c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    motorD.channel	 	= TIM_CHANNEL_2;
 8006860:	4b6a      	ldr	r3, [pc, #424]	; (8006a0c <setup+0x1cc>)
 8006862:	2204      	movs	r2, #4
 8006864:	641a      	str	r2, [r3, #64]	; 0x40
    motorD.motDir_Port	= MotB_Dir_GPIO_Port;
 8006866:	4b69      	ldr	r3, [pc, #420]	; (8006a0c <setup+0x1cc>)
 8006868:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800686c:	645a      	str	r2, [r3, #68]	; 0x44
    motorD.motDir_Pin	 	= MotB_Dir_Pin;
 800686e:	4b67      	ldr	r3, [pc, #412]	; (8006a0c <setup+0x1cc>)
 8006870:	2220      	movs	r2, #32
 8006872:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    motorD.motBrake_Port	= MotB_Brake_GPIO_Port;
 8006876:	4b65      	ldr	r3, [pc, #404]	; (8006a0c <setup+0x1cc>)
 8006878:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800687c:	64da      	str	r2, [r3, #76]	; 0x4c
    motorD.motBrake_Pin	= MotB_Brake_Pin;
 800687e:	4b63      	ldr	r3, [pc, #396]	; (8006a0c <setup+0x1cc>)
 8006880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006884:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    motorD.reverseDir	 	= false;
 8006888:	4b60      	ldr	r3, [pc, #384]	; (8006a0c <setup+0x1cc>)
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    motorD.maxPWM = 255;
 8006890:	4b5e      	ldr	r3, [pc, #376]	; (8006a0c <setup+0x1cc>)
 8006892:	22ff      	movs	r2, #255	; 0xff
 8006894:	655a      	str	r2, [r3, #84]	; 0x54

    motorG.timer	 		= htim2;
 8006896:	4a5f      	ldr	r2, [pc, #380]	; (8006a14 <setup+0x1d4>)
 8006898:	4b5f      	ldr	r3, [pc, #380]	; (8006a18 <setup+0x1d8>)
 800689a:	4614      	mov	r4, r2
 800689c:	461d      	mov	r5, r3
 800689e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80068ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    motorG.channel	 	= TIM_CHANNEL_2;
 80068b2:	4b58      	ldr	r3, [pc, #352]	; (8006a14 <setup+0x1d4>)
 80068b4:	2204      	movs	r2, #4
 80068b6:	641a      	str	r2, [r3, #64]	; 0x40
    motorG.motDir_Port	= MotA_Dir_GPIO_Port;
 80068b8:	4b56      	ldr	r3, [pc, #344]	; (8006a14 <setup+0x1d4>)
 80068ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80068be:	645a      	str	r2, [r3, #68]	; 0x44
    motorG.motDir_Pin	 	= MotA_Dir_Pin;
 80068c0:	4b54      	ldr	r3, [pc, #336]	; (8006a14 <setup+0x1d4>)
 80068c2:	2240      	movs	r2, #64	; 0x40
 80068c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    motorG.motBrake_Port	= MotA_Brake_GPIO_Port;
 80068c8:	4b52      	ldr	r3, [pc, #328]	; (8006a14 <setup+0x1d4>)
 80068ca:	4a54      	ldr	r2, [pc, #336]	; (8006a1c <setup+0x1dc>)
 80068cc:	64da      	str	r2, [r3, #76]	; 0x4c
    motorG.motBrake_Pin	= MotA_Brake_Pin;
 80068ce:	4b51      	ldr	r3, [pc, #324]	; (8006a14 <setup+0x1d4>)
 80068d0:	2280      	movs	r2, #128	; 0x80
 80068d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    motorG.reverseDir	 	= true;
 80068d6:	4b4f      	ldr	r3, [pc, #316]	; (8006a14 <setup+0x1d4>)
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    motorG.maxPWM = 255;
 80068de:	4b4d      	ldr	r3, [pc, #308]	; (8006a14 <setup+0x1d4>)
 80068e0:	22ff      	movs	r2, #255	; 0xff
 80068e2:	655a      	str	r2, [r3, #84]	; 0x54

    odometry.rightTicks = (int16_t*)&TIM4->CNT; // cast uint vers int
 80068e4:	4b4e      	ldr	r3, [pc, #312]	; (8006a20 <setup+0x1e0>)
 80068e6:	4a4f      	ldr	r2, [pc, #316]	; (8006a24 <setup+0x1e4>)
 80068e8:	625a      	str	r2, [r3, #36]	; 0x24
    odometry.leftTicks =  (int16_t*)&TIM1->CNT;
 80068ea:	4b4d      	ldr	r3, [pc, #308]	; (8006a20 <setup+0x1e0>)
 80068ec:	4a4e      	ldr	r2, [pc, #312]	; (8006a28 <setup+0x1e8>)
 80068ee:	629a      	str	r2, [r3, #40]	; 0x28
    odometry.encoderRes = 				480; // tick/tour
 80068f0:	4b4b      	ldr	r3, [pc, #300]	; (8006a20 <setup+0x1e0>)
 80068f2:	4a4e      	ldr	r2, [pc, #312]	; (8006a2c <setup+0x1ec>)
 80068f4:	601a      	str	r2, [r3, #0]
    odometry.wheelRadiusR = 			64.8/2.;
 80068f6:	4b4a      	ldr	r3, [pc, #296]	; (8006a20 <setup+0x1e0>)
 80068f8:	4a4d      	ldr	r2, [pc, #308]	; (8006a30 <setup+0x1f0>)
 80068fa:	605a      	str	r2, [r3, #4]
    odometry.wheelRadiusL = 			64.8/2.;
 80068fc:	4b48      	ldr	r3, [pc, #288]	; (8006a20 <setup+0x1e0>)
 80068fe:	4a4c      	ldr	r2, [pc, #304]	; (8006a30 <setup+0x1f0>)
 8006900:	609a      	str	r2, [r3, #8]
    odometry.distanceBetweenWheels = 	210.;
 8006902:	4b47      	ldr	r3, [pc, #284]	; (8006a20 <setup+0x1e0>)
 8006904:	4a4b      	ldr	r2, [pc, #300]	; (8006a34 <setup+0x1f4>)
 8006906:	60da      	str	r2, [r3, #12]

    pidD.Kp			= 0.162;
 8006908:	4b4b      	ldr	r3, [pc, #300]	; (8006a38 <setup+0x1f8>)
 800690a:	4a4c      	ldr	r2, [pc, #304]	; (8006a3c <setup+0x1fc>)
 800690c:	601a      	str	r2, [r3, #0]
    pidD.Ti			= 0.024;
 800690e:	4b4a      	ldr	r3, [pc, #296]	; (8006a38 <setup+0x1f8>)
 8006910:	4a4b      	ldr	r2, [pc, #300]	; (8006a40 <setup+0x200>)
 8006912:	605a      	str	r2, [r3, #4]
    pidD.Td			= 0.006;
 8006914:	4b48      	ldr	r3, [pc, #288]	; (8006a38 <setup+0x1f8>)
 8006916:	4a4b      	ldr	r2, [pc, #300]	; (8006a44 <setup+0x204>)
 8006918:	609a      	str	r2, [r3, #8]
    pidD.minOut		= -255;
 800691a:	4b47      	ldr	r3, [pc, #284]	; (8006a38 <setup+0x1f8>)
 800691c:	4a4a      	ldr	r2, [pc, #296]	; (8006a48 <setup+0x208>)
 800691e:	60da      	str	r2, [r3, #12]
    pidD.maxOut		= 255;
 8006920:	4b45      	ldr	r3, [pc, #276]	; (8006a38 <setup+0x1f8>)
 8006922:	4a4a      	ldr	r2, [pc, #296]	; (8006a4c <setup+0x20c>)
 8006924:	611a      	str	r2, [r3, #16]

    pidG.Kp			= 0.162;
 8006926:	4b4a      	ldr	r3, [pc, #296]	; (8006a50 <setup+0x210>)
 8006928:	4a44      	ldr	r2, [pc, #272]	; (8006a3c <setup+0x1fc>)
 800692a:	601a      	str	r2, [r3, #0]
    pidG.Ti			= 0.024;
 800692c:	4b48      	ldr	r3, [pc, #288]	; (8006a50 <setup+0x210>)
 800692e:	4a44      	ldr	r2, [pc, #272]	; (8006a40 <setup+0x200>)
 8006930:	605a      	str	r2, [r3, #4]
    pidG.Td			= 0.006;
 8006932:	4b47      	ldr	r3, [pc, #284]	; (8006a50 <setup+0x210>)
 8006934:	4a43      	ldr	r2, [pc, #268]	; (8006a44 <setup+0x204>)
 8006936:	609a      	str	r2, [r3, #8]
    pidG.minOut		= -255;
 8006938:	4b45      	ldr	r3, [pc, #276]	; (8006a50 <setup+0x210>)
 800693a:	4a43      	ldr	r2, [pc, #268]	; (8006a48 <setup+0x208>)
 800693c:	60da      	str	r2, [r3, #12]
    pidG.maxOut		= 255;
 800693e:	4b44      	ldr	r3, [pc, #272]	; (8006a50 <setup+0x210>)
 8006940:	4a42      	ldr	r2, [pc, #264]	; (8006a4c <setup+0x20c>)
 8006942:	611a      	str	r2, [r3, #16]

    distBetweenMotorWheels = 180.;// mm
 8006944:	4b43      	ldr	r3, [pc, #268]	; (8006a54 <setup+0x214>)
 8006946:	4a44      	ldr	r2, [pc, #272]	; (8006a58 <setup+0x218>)
 8006948:	601a      	str	r2, [r3, #0]

    differentiel.distanceBetweenWheels	= distBetweenMotorWheels;
 800694a:	4b42      	ldr	r3, [pc, #264]	; (8006a54 <setup+0x214>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a43      	ldr	r2, [pc, #268]	; (8006a5c <setup+0x21c>)
 8006950:	6013      	str	r3, [r2, #0]
    differentiel.maxLinearVelocity	 	= 450.; // mm.s^-1
 8006952:	4b42      	ldr	r3, [pc, #264]	; (8006a5c <setup+0x21c>)
 8006954:	4a42      	ldr	r2, [pc, #264]	; (8006a60 <setup+0x220>)
 8006956:	605a      	str	r2, [r3, #4]
    differentiel.maxAngularVelocity	 	= 5.55; // rad.s^-1
 8006958:	4b40      	ldr	r3, [pc, #256]	; (8006a5c <setup+0x21c>)
 800695a:	4a42      	ldr	r2, [pc, #264]	; (8006a64 <setup+0x224>)
 800695c:	609a      	str	r2, [r3, #8]

    motionController.Krho = 					0.6;
 800695e:	4b42      	ldr	r3, [pc, #264]	; (8006a68 <setup+0x228>)
 8006960:	4a42      	ldr	r2, [pc, #264]	; (8006a6c <setup+0x22c>)
 8006962:	60da      	str	r2, [r3, #12]
    motionController.Kalpha = 					1.5;
 8006964:	4b40      	ldr	r3, [pc, #256]	; (8006a68 <setup+0x228>)
 8006966:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800696a:	611a      	str	r2, [r3, #16]

    motionController.Srho =                     0.5;//mm; cm?
 800696c:	4b3e      	ldr	r3, [pc, #248]	; (8006a68 <setup+0x228>)
 800696e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006972:	615a      	str	r2, [r3, #20]
    motionController.Salpha =                   1*PI/180;
 8006974:	4b3c      	ldr	r3, [pc, #240]	; (8006a68 <setup+0x228>)
 8006976:	4a3e      	ldr	r2, [pc, #248]	; (8006a70 <setup+0x230>)
 8006978:	619a      	str	r2, [r3, #24]

    motionController.rampLin.aFrein =           0.02;
 800697a:	4b3b      	ldr	r3, [pc, #236]	; (8006a68 <setup+0x228>)
 800697c:	4a3d      	ldr	r2, [pc, #244]	; (8006a74 <setup+0x234>)
 800697e:	61da      	str	r2, [r3, #28]
    motionController.rampLin.aMax =             0.02;
 8006980:	4b39      	ldr	r3, [pc, #228]	; (8006a68 <setup+0x228>)
 8006982:	4a3c      	ldr	r2, [pc, #240]	; (8006a74 <setup+0x234>)
 8006984:	621a      	str	r2, [r3, #32]
    motionController.rampLin.vMax =             450;
 8006986:	4b38      	ldr	r3, [pc, #224]	; (8006a68 <setup+0x228>)
 8006988:	4a35      	ldr	r2, [pc, #212]	; (8006a60 <setup+0x220>)
 800698a:	625a      	str	r2, [r3, #36]	; 0x24
    motionController.rampLin.lastPos =          0;
 800698c:	4b36      	ldr	r3, [pc, #216]	; (8006a68 <setup+0x228>)
 800698e:	f04f 0200 	mov.w	r2, #0
 8006992:	629a      	str	r2, [r3, #40]	; 0x28

    motionController.rampAng.aFrein =           0.2;
 8006994:	4b34      	ldr	r3, [pc, #208]	; (8006a68 <setup+0x228>)
 8006996:	4a38      	ldr	r2, [pc, #224]	; (8006a78 <setup+0x238>)
 8006998:	62da      	str	r2, [r3, #44]	; 0x2c
    motionController.rampAng.aMax =             0.5;
 800699a:	4b33      	ldr	r3, [pc, #204]	; (8006a68 <setup+0x228>)
 800699c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80069a0:	631a      	str	r2, [r3, #48]	; 0x30
    motionController.rampAng.vMax =             5.55;
 80069a2:	4b31      	ldr	r3, [pc, #196]	; (8006a68 <setup+0x228>)
 80069a4:	4a2f      	ldr	r2, [pc, #188]	; (8006a64 <setup+0x224>)
 80069a6:	635a      	str	r2, [r3, #52]	; 0x34
    motionController.rampAng.lastPos =          0;
 80069a8:	4b2f      	ldr	r3, [pc, #188]	; (8006a68 <setup+0x228>)
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	639a      	str	r2, [r3, #56]	; 0x38

    robot.odometry = &odometry;
 80069b0:	4b32      	ldr	r3, [pc, #200]	; (8006a7c <setup+0x23c>)
 80069b2:	4a1b      	ldr	r2, [pc, #108]	; (8006a20 <setup+0x1e0>)
 80069b4:	609a      	str	r2, [r3, #8]
    robot.differential = &differentiel;
 80069b6:	4b31      	ldr	r3, [pc, #196]	; (8006a7c <setup+0x23c>)
 80069b8:	4a28      	ldr	r2, [pc, #160]	; (8006a5c <setup+0x21c>)
 80069ba:	615a      	str	r2, [r3, #20]
    robot.motionController = &motionController;
 80069bc:	4b2f      	ldr	r3, [pc, #188]	; (8006a7c <setup+0x23c>)
 80069be:	4a2a      	ldr	r2, [pc, #168]	; (8006a68 <setup+0x228>)
 80069c0:	619a      	str	r2, [r3, #24]
    robot.motorD = &motorD;
 80069c2:	4b2e      	ldr	r3, [pc, #184]	; (8006a7c <setup+0x23c>)
 80069c4:	4a11      	ldr	r2, [pc, #68]	; (8006a0c <setup+0x1cc>)
 80069c6:	601a      	str	r2, [r3, #0]
    robot.motorG = &motorG;
 80069c8:	4b2c      	ldr	r3, [pc, #176]	; (8006a7c <setup+0x23c>)
 80069ca:	4a12      	ldr	r2, [pc, #72]	; (8006a14 <setup+0x1d4>)
 80069cc:	605a      	str	r2, [r3, #4]
    robot.pidD = &pidD;
 80069ce:	4b2b      	ldr	r3, [pc, #172]	; (8006a7c <setup+0x23c>)
 80069d0:	4a19      	ldr	r2, [pc, #100]	; (8006a38 <setup+0x1f8>)
 80069d2:	60da      	str	r2, [r3, #12]
    robot.pidG = &pidG;
 80069d4:	4b29      	ldr	r3, [pc, #164]	; (8006a7c <setup+0x23c>)
 80069d6:	4a1e      	ldr	r2, [pc, #120]	; (8006a50 <setup+0x210>)
 80069d8:	611a      	str	r2, [r3, #16]
    robot.distBetweenMotorWheels = distBetweenMotorWheels;
 80069da:	4b1e      	ldr	r3, [pc, #120]	; (8006a54 <setup+0x214>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a27      	ldr	r2, [pc, #156]	; (8006a7c <setup+0x23c>)
 80069e0:	61d3      	str	r3, [r2, #28]
    robot.controlMode = 0;
 80069e2:	4b26      	ldr	r3, [pc, #152]	; (8006a7c <setup+0x23c>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	641a      	str	r2, [r3, #64]	; 0x40


    robot_init(&robot, 0., 0., 0.);
 80069e8:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8006a80 <setup+0x240>
 80069ec:	eddf 0a24 	vldr	s1, [pc, #144]	; 8006a80 <setup+0x240>
 80069f0:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8006a80 <setup+0x240>
 80069f4:	4821      	ldr	r0, [pc, #132]	; (8006a7c <setup+0x23c>)
 80069f6:	f000 fe97 	bl	8007728 <robot_init>
    motor_breake(&motorD);
 80069fa:	4804      	ldr	r0, [pc, #16]	; (8006a0c <setup+0x1cc>)
 80069fc:	f000 fc2f 	bl	800725e <motor_breake>
    motor_breake(&motorG);
 8006a00:	4804      	ldr	r0, [pc, #16]	; (8006a14 <setup+0x1d4>)
 8006a02:	f000 fc2c 	bl	800725e <motor_breake>

}
 8006a06:	bf00      	nop
 8006a08:	bdb0      	pop	{r4, r5, r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20000e38 	.word	0x20000e38
 8006a10:	20000c68 	.word	0x20000c68
 8006a14:	20000c10 	.word	0x20000c10
 8006a18:	20000e90 	.word	0x20000e90
 8006a1c:	48000800 	.word	0x48000800
 8006a20:	20000b24 	.word	0x20000b24
 8006a24:	40000824 	.word	0x40000824
 8006a28:	40012c24 	.word	0x40012c24
 8006a2c:	43f00000 	.word	0x43f00000
 8006a30:	4201999a 	.word	0x4201999a
 8006a34:	43520000 	.word	0x43520000
 8006a38:	20000f5c 	.word	0x20000f5c
 8006a3c:	3e25e354 	.word	0x3e25e354
 8006a40:	3cc49ba6 	.word	0x3cc49ba6
 8006a44:	3bc49ba6 	.word	0x3bc49ba6
 8006a48:	c37f0000 	.word	0xc37f0000
 8006a4c:	437f0000 	.word	0x437f0000
 8006a50:	20000f78 	.word	0x20000f78
 8006a54:	20000b20 	.word	0x20000b20
 8006a58:	43340000 	.word	0x43340000
 8006a5c:	20000f50 	.word	0x20000f50
 8006a60:	43e10000 	.word	0x43e10000
 8006a64:	40b1999a 	.word	0x40b1999a
 8006a68:	20000ca8 	.word	0x20000ca8
 8006a6c:	3f19999a 	.word	0x3f19999a
 8006a70:	3c8efa33 	.word	0x3c8efa33
 8006a74:	3ca3d70a 	.word	0x3ca3d70a
 8006a78:	3e4ccccd 	.word	0x3e4ccccd
 8006a7c:	20000db0 	.word	0x20000db0
 8006a80:	00000000 	.word	0x00000000

08006a84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a23      	ldr	r2, [pc, #140]	; (8006b20 <HAL_UART_RxCpltCallback+0x9c>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d13f      	bne.n	8006b16 <HAL_UART_RxCpltCallback+0x92>
  {
	  static int pos;

	  if (!pos)
 8006a96:	4b23      	ldr	r3, [pc, #140]	; (8006b24 <HAL_UART_RxCpltCallback+0xa0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d102      	bne.n	8006aa4 <HAL_UART_RxCpltCallback+0x20>
		  pos = 1;
 8006a9e:	4b21      	ldr	r3, [pc, #132]	; (8006b24 <HAL_UART_RxCpltCallback+0xa0>)
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
	   *c = byte;
 8006aa4:	4b20      	ldr	r3, [pc, #128]	; (8006b28 <HAL_UART_RxCpltCallback+0xa4>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a20      	ldr	r2, [pc, #128]	; (8006b2c <HAL_UART_RxCpltCallback+0xa8>)
 8006aaa:	7812      	ldrb	r2, [r2, #0]
 8006aac:	701a      	strb	r2, [r3, #0]
	    c = c+1;
 8006aae:	4b1e      	ldr	r3, [pc, #120]	; (8006b28 <HAL_UART_RxCpltCallback+0xa4>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	4a1c      	ldr	r2, [pc, #112]	; (8006b28 <HAL_UART_RxCpltCallback+0xa4>)
 8006ab6:	6013      	str	r3, [r2, #0]
	    pos++;
 8006ab8:	4b1a      	ldr	r3, [pc, #104]	; (8006b24 <HAL_UART_RxCpltCallback+0xa0>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3301      	adds	r3, #1
 8006abe:	4a19      	ldr	r2, [pc, #100]	; (8006b24 <HAL_UART_RxCpltCallback+0xa0>)
 8006ac0:	6013      	str	r3, [r2, #0]

//    	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d", strlen(command)), 90000);

	    if (pos >= 190)//(int)(c-command) >= 190){
 8006ac2:	4b18      	ldr	r3, [pc, #96]	; (8006b24 <HAL_UART_RxCpltCallback+0xa0>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2bbd      	cmp	r3, #189	; 0xbd
 8006ac8:	dd06      	ble.n	8006ad8 <HAL_UART_RxCpltCallback+0x54>
	    {
	    	c = command;// error, command cannot be longer than 190 char.
 8006aca:	4b17      	ldr	r3, [pc, #92]	; (8006b28 <HAL_UART_RxCpltCallback+0xa4>)
 8006acc:	4a18      	ldr	r2, [pc, #96]	; (8006b30 <HAL_UART_RxCpltCallback+0xac>)
 8006ace:	601a      	str	r2, [r3, #0]
	    	pos = 0;
 8006ad0:	4b14      	ldr	r3, [pc, #80]	; (8006b24 <HAL_UART_RxCpltCallback+0xa0>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	e019      	b.n	8006b0c <HAL_UART_RxCpltCallback+0x88>
	    }else
	    if (byte == '\n'){ // ou fin de chaine
 8006ad8:	4b14      	ldr	r3, [pc, #80]	; (8006b2c <HAL_UART_RxCpltCallback+0xa8>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b0a      	cmp	r3, #10
 8006ade:	d115      	bne.n	8006b0c <HAL_UART_RxCpltCallback+0x88>
            *c = '\0';
 8006ae0:	4b11      	ldr	r3, [pc, #68]	; (8006b28 <HAL_UART_RxCpltCallback+0xa4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	701a      	strb	r2, [r3, #0]
	        if (gcode_parseAscii(&gcodeCommand, command)){
 8006ae8:	4911      	ldr	r1, [pc, #68]	; (8006b30 <HAL_UART_RxCpltCallback+0xac>)
 8006aea:	4812      	ldr	r0, [pc, #72]	; (8006b34 <HAL_UART_RxCpltCallback+0xb0>)
 8006aec:	f7fe ffca 	bl	8005a84 <gcode_parseAscii>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d004      	beq.n	8006b00 <HAL_UART_RxCpltCallback+0x7c>
	            peekCommand(&gcodeCommand, &robot, huart);
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	490f      	ldr	r1, [pc, #60]	; (8006b38 <HAL_UART_RxCpltCallback+0xb4>)
 8006afa:	480e      	ldr	r0, [pc, #56]	; (8006b34 <HAL_UART_RxCpltCallback+0xb0>)
 8006afc:	f7fe f98a 	bl	8004e14 <peekCommand>
	        	// HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, command), 90000);
	        }
	        else {
	            // error in command
            }
            c = command;
 8006b00:	4b09      	ldr	r3, [pc, #36]	; (8006b28 <HAL_UART_RxCpltCallback+0xa4>)
 8006b02:	4a0b      	ldr	r2, [pc, #44]	; (8006b30 <HAL_UART_RxCpltCallback+0xac>)
 8006b04:	601a      	str	r2, [r3, #0]
            pos = 0;
 8006b06:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <HAL_UART_RxCpltCallback+0xa0>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]
	    }
	    /* Receive one byte in interrupt mode */
	    HAL_UART_Receive_IT(&huart2, &byte, 1);
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	4907      	ldr	r1, [pc, #28]	; (8006b2c <HAL_UART_RxCpltCallback+0xa8>)
 8006b10:	480a      	ldr	r0, [pc, #40]	; (8006b3c <HAL_UART_RxCpltCallback+0xb8>)
 8006b12:	f7fd fa1f 	bl	8003f54 <HAL_UART_Receive_IT>
  }
}
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40004400 	.word	0x40004400
 8006b24:	200009e0 	.word	0x200009e0
 8006b28:	20000008 	.word	0x20000008
 8006b2c:	20000df4 	.word	0x20000df4
 8006b30:	20000b50 	.word	0x20000b50
 8006b34:	20000ac4 	.word	0x20000ac4
 8006b38:	20000db0 	.word	0x20000db0
 8006b3c:	20000ed0 	.word	0x20000ed0

08006b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b40:	b480      	push	{r7}
 8006b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006b44:	bf00      	nop
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <motionControl_init>:
#include "motionControl.h"

void motionControl_init(motionControl_Context *motionController, float xc, float yc, float thetac){
 8006b4e:	b480      	push	{r7}
 8006b50:	b085      	sub	sp, #20
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	ed87 0a02 	vstr	s0, [r7, #8]
 8006b5a:	edc7 0a01 	vstr	s1, [r7, #4]
 8006b5e:	ed87 1a00 	vstr	s2, [r7]
    motionController->consign.x = xc;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	601a      	str	r2, [r3, #0]
    motionController->consign.y = yc;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	605a      	str	r2, [r3, #4]
    motionController->consign.theta = thetac;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	609a      	str	r2, [r3, #8]
}
 8006b74:	bf00      	nop
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <motionControl_update>:


void motionControl_update(motionControl_Context* motionController, _position robotPos, float* linearVelocity, float* angularVelocity, float dt){
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	61f8      	str	r0, [r7, #28]
 8006b88:	eef0 6a40 	vmov.f32	s13, s0
 8006b8c:	eeb0 7a60 	vmov.f32	s14, s1
 8006b90:	eef0 7a41 	vmov.f32	s15, s2
 8006b94:	60f9      	str	r1, [r7, #12]
 8006b96:	60ba      	str	r2, [r7, #8]
 8006b98:	edc7 1a01 	vstr	s3, [r7, #4]
 8006b9c:	edc7 6a04 	vstr	s13, [r7, #16]
 8006ba0:	ed87 7a05 	vstr	s14, [r7, #20]
 8006ba4:	edc7 7a06 	vstr	s15, [r7, #24]
    alphaRho(motionController->consign, robotPos, &motionController->alpha, &motionController->rho);
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006bb4:	ed97 5a04 	vldr	s10, [r7, #16]
 8006bb8:	edd7 5a05 	vldr	s11, [r7, #20]
 8006bbc:	ed97 6a06 	vldr	s12, [r7, #24]
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	edd3 6a00 	vldr	s13, [r3]
 8006bc6:	ed93 7a01 	vldr	s14, [r3, #4]
 8006bca:	edd3 7a02 	vldr	s15, [r3, #8]
 8006bce:	4610      	mov	r0, r2
 8006bd0:	eef0 1a45 	vmov.f32	s3, s10
 8006bd4:	eeb0 2a65 	vmov.f32	s4, s11
 8006bd8:	eef0 2a46 	vmov.f32	s5, s12
 8006bdc:	eeb0 0a66 	vmov.f32	s0, s13
 8006be0:	eef0 0a47 	vmov.f32	s1, s14
 8006be4:	eeb0 1a67 	vmov.f32	s2, s15
 8006be8:	f000 f9a2 	bl	8006f30 <alphaRho>
    if (motionController->movementMode == 0){
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d133      	bne.n	8006c5c <motionControl_update+0xdc>
        motionControl_update0(motionController, linearVelocity, angularVelocity, dt);
 8006bf4:	ed97 0a01 	vldr	s0, [r7, #4]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	68f9      	ldr	r1, [r7, #12]
 8006bfc:	69f8      	ldr	r0, [r7, #28]
 8006bfe:	f000 f8a8 	bl	8006d52 <motionControl_update0>
        // critère d'arrêt
        if (motionController->alpha > -motionController->Salpha && motionController->alpha < motionController->Salpha
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	edd3 7a06 	vldr	s15, [r3, #24]
 8006c0e:	eef1 7a67 	vneg.f32	s15, s15
 8006c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c1a:	f340 8087 	ble.w	8006d2c <motionControl_update+0x1ac>
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	edd3 7a06 	vldr	s15, [r3, #24]
 8006c2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c32:	d57b      	bpl.n	8006d2c <motionControl_update+0x1ac>
            && motionController->rho < motionController->Srho){
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	edd3 7a05 	vldr	s15, [r3, #20]
 8006c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c48:	d570      	bpl.n	8006d2c <motionControl_update+0x1ac>
            *linearVelocity = 0.;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	601a      	str	r2, [r3, #0]
            *angularVelocity = 0.;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	e067      	b.n	8006d2c <motionControl_update+0x1ac>
        }
    }
    else if(motionController->movementMode == 1){
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d132      	bne.n	8006cca <motionControl_update+0x14a>
        motionControl_update1(motionController, linearVelocity, angularVelocity, dt);
 8006c64:	ed97 0a01 	vldr	s0, [r7, #4]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	68f9      	ldr	r1, [r7, #12]
 8006c6c:	69f8      	ldr	r0, [r7, #28]
 8006c6e:	f000 f8df 	bl	8006e30 <motionControl_update1>
        // critère d'arrêt
        if (motionController->alpha > -motionController->Salpha && motionController->alpha < motionController->Salpha
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	edd3 7a06 	vldr	s15, [r3, #24]
 8006c7e:	eef1 7a67 	vneg.f32	s15, s15
 8006c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8a:	dd4f      	ble.n	8006d2c <motionControl_update+0x1ac>
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	edd3 7a06 	vldr	s15, [r3, #24]
 8006c98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca0:	d544      	bpl.n	8006d2c <motionControl_update+0x1ac>
            && motionController->rho < motionController->Srho){
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	edd3 7a05 	vldr	s15, [r3, #20]
 8006cae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb6:	d539      	bpl.n	8006d2c <motionControl_update+0x1ac>
            *linearVelocity = 0.;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f04f 0200 	mov.w	r2, #0
 8006cbe:	601a      	str	r2, [r3, #0]
            *angularVelocity = 0.;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e030      	b.n	8006d2c <motionControl_update+0x1ac>
        }
    }
    else if(motionController->movementMode == 2){
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d12c      	bne.n	8006d2c <motionControl_update+0x1ac>

        // critère d'arrêt
        if ( fabs(motionController->consign.theta - robotPos.theta) < motionController->Salpha){
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	ed93 7a02 	vldr	s14, [r3, #8]
 8006cd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8006cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ce0:	eeb0 7ae7 	vabs.f32	s14, s15
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	edd3 7a06 	vldr	s15, [r3, #24]
 8006cea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf2:	d508      	bpl.n	8006d06 <motionControl_update+0x186>
            *linearVelocity = 0.;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f04f 0200 	mov.w	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]
            *angularVelocity = 0.;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	e012      	b.n	8006d2c <motionControl_update+0x1ac>
        }
        else {
            motionControl_update2(motionController, robotPos, linearVelocity, angularVelocity, dt);
 8006d06:	edd7 6a04 	vldr	s13, [r7, #16]
 8006d0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8006d0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006d12:	edd7 1a01 	vldr	s3, [r7, #4]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	68f9      	ldr	r1, [r7, #12]
 8006d1a:	eeb0 0a66 	vmov.f32	s0, s13
 8006d1e:	eef0 0a47 	vmov.f32	s1, s14
 8006d22:	eeb0 1a67 	vmov.f32	s2, s15
 8006d26:	69f8      	ldr	r0, [r7, #28]
 8006d28:	f000 f8b0 	bl	8006e8c <motionControl_update2>
        }
    }

    if (motionController->rho < motionController->Srho){
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	edd3 7a05 	vldr	s15, [r3, #20]
 8006d38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d40:	d400      	bmi.n	8006d44 <motionControl_update+0x1c4>
        motionController->movementMode = 2;
    }

}
 8006d42:	e002      	b.n	8006d4a <motionControl_update+0x1ca>
        motionController->movementMode = 2;
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	2202      	movs	r2, #2
 8006d48:	645a      	str	r2, [r3, #68]	; 0x44
}
 8006d4a:	bf00      	nop
 8006d4c:	3720      	adds	r7, #32
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <motionControl_update0>:

void motionControl_update0(motionControl_Context* motionController, float* linearVelocity, float* angularVelocity, float dt){
 8006d52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607a      	str	r2, [r7, #4]
 8006d5e:	ed87 0a00 	vstr	s0, [r7]
    // *linearVelocity = motionController->Krho * motionController->rho * cos(motionController->alpha);
    *linearVelocity = ramp_update(&motionController->rampLin, motionController->rho*cos(motionController->alpha), dt);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f103 041c 	add.w	r4, r3, #28
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7f9 fbeb 	bl	8000548 <__aeabi_f2d>
 8006d72:	4605      	mov	r5, r0
 8006d74:	460e      	mov	r6, r1
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7f9 fbe4 	bl	8000548 <__aeabi_f2d>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	ec43 2b10 	vmov	d0, r2, r3
 8006d88:	f005 fdee 	bl	800c968 <cos>
 8006d8c:	ec53 2b10 	vmov	r2, r3, d0
 8006d90:	4628      	mov	r0, r5
 8006d92:	4631      	mov	r1, r6
 8006d94:	f7f9 fc30 	bl	80005f8 <__aeabi_dmul>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4619      	mov	r1, r3
 8006da0:	f7f9 ff22 	bl	8000be8 <__aeabi_d2f>
 8006da4:	4603      	mov	r3, r0
 8006da6:	edd7 0a00 	vldr	s1, [r7]
 8006daa:	ee00 3a10 	vmov	s0, r3
 8006dae:	4620      	mov	r0, r4
 8006db0:	f000 f962 	bl	8007078 <ramp_update>
 8006db4:	eef0 7a40 	vmov.f32	s15, s0
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	edc3 7a00 	vstr	s15, [r3]
    *angularVelocity = motionController->Kalpha * sin(motionController->alpha);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7f9 fbc0 	bl	8000548 <__aeabi_f2d>
 8006dc8:	4604      	mov	r4, r0
 8006dca:	460d      	mov	r5, r1
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7f9 fbb9 	bl	8000548 <__aeabi_f2d>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	ec43 2b10 	vmov	d0, r2, r3
 8006dde:	f005 fe07 	bl	800c9f0 <sin>
 8006de2:	ec53 2b10 	vmov	r2, r3, d0
 8006de6:	4620      	mov	r0, r4
 8006de8:	4629      	mov	r1, r5
 8006dea:	f7f9 fc05 	bl	80005f8 <__aeabi_dmul>
 8006dee:	4603      	mov	r3, r0
 8006df0:	460c      	mov	r4, r1
 8006df2:	4618      	mov	r0, r3
 8006df4:	4621      	mov	r1, r4
 8006df6:	f7f9 fef7 	bl	8000be8 <__aeabi_d2f>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	601a      	str	r2, [r3, #0]
    // *angularVelocity = ramp_update(&motionController->rampAng, motionController->alpha*sin(motionController->alpha), dt);

    if (motionController->rho < motionController->Srho){
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	edd3 7a05 	vldr	s15, [r3, #20]
 8006e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e14:	d400      	bmi.n	8006e18 <motionControl_update0+0xc6>
        *linearVelocity = 0.;
        *angularVelocity = 0.;
    }
}
 8006e16:	e007      	b.n	8006e28 <motionControl_update0+0xd6>
        *linearVelocity = 0.;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	601a      	str	r2, [r3, #0]
        *angularVelocity = 0.;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f04f 0200 	mov.w	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]
}
 8006e28:	bf00      	nop
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e30 <motionControl_update1>:

// motion control with rotations firsts
void motionControl_update1(motionControl_Context* motionController, float* linearVelocity, float* angularVelocity, float dt){
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	ed87 0a00 	vstr	s0, [r7]
    if (fabs(motionController->alpha) > motionController->Salpha){
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006e46:	eeb0 7ae7 	vabs.f32	s14, s15
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006e50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e58:	dd0f      	ble.n	8006e7a <motionControl_update1+0x4a>
        *linearVelocity = 0.;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f04f 0200 	mov.w	r2, #0
 8006e60:	601a      	str	r2, [r3, #0]
        *angularVelocity = motionController->Kalpha * motionController->alpha;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	ed93 7a04 	vldr	s14, [r3, #16]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	edc3 7a00 	vstr	s15, [r3]
    }
    else {
        motionController->movementMode = 0;
    }
}
 8006e78:	e002      	b.n	8006e80 <motionControl_update1+0x50>
        motionController->movementMode = 0;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8006e80:	bf00      	nop
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <motionControl_update2>:

void motionControl_update2(motionControl_Context* motionController, _position robotPos, float* linearVelocity, float* angularVelocity, float dt){
 8006e8c:	b5b0      	push	{r4, r5, r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	61f8      	str	r0, [r7, #28]
 8006e94:	eef0 6a40 	vmov.f32	s13, s0
 8006e98:	eeb0 7a60 	vmov.f32	s14, s1
 8006e9c:	eef0 7a41 	vmov.f32	s15, s2
 8006ea0:	60f9      	str	r1, [r7, #12]
 8006ea2:	60ba      	str	r2, [r7, #8]
 8006ea4:	edc7 1a01 	vstr	s3, [r7, #4]
 8006ea8:	edc7 6a04 	vstr	s13, [r7, #16]
 8006eac:	ed87 7a05 	vstr	s14, [r7, #20]
 8006eb0:	edc7 7a06 	vstr	s15, [r7, #24]
    if (fabs(motionController->alpha) > motionController->Salpha){
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006eba:	eeb0 7ae7 	vabs.f32	s14, s15
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	edd3 7a06 	vldr	s15, [r3, #24]
 8006ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ecc:	dc00      	bgt.n	8006ed0 <motionControl_update2+0x44>
        *linearVelocity = 0.;
        *angularVelocity = motionController->Kalpha * constrainAngle(motionController->consign.theta - robotPos.theta);
    }
}
 8006ece:	e02a      	b.n	8006f26 <motionControl_update2+0x9a>
        *linearVelocity = 0.;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f04f 0200 	mov.w	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]
        *angularVelocity = motionController->Kalpha * constrainAngle(motionController->consign.theta - robotPos.theta);
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7f9 fb33 	bl	8000548 <__aeabi_f2d>
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	460d      	mov	r5, r1
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	ed93 7a02 	vldr	s14, [r3, #8]
 8006eec:	edd7 7a06 	vldr	s15, [r7, #24]
 8006ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ef4:	ee17 0a90 	vmov	r0, s15
 8006ef8:	f7f9 fb26 	bl	8000548 <__aeabi_f2d>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	ec43 2b10 	vmov	d0, r2, r3
 8006f04:	f000 ff94 	bl	8007e30 <constrainAngle>
 8006f08:	ec53 2b10 	vmov	r2, r3, d0
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	4629      	mov	r1, r5
 8006f10:	f7f9 fb72 	bl	80005f8 <__aeabi_dmul>
 8006f14:	4603      	mov	r3, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	4618      	mov	r0, r3
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	f7f9 fe64 	bl	8000be8 <__aeabi_d2f>
 8006f20:	4602      	mov	r2, r0
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	601a      	str	r2, [r3, #0]
}
 8006f26:	bf00      	nop
 8006f28:	3720      	adds	r7, #32
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006f30 <alphaRho>:
    motionController->consign.y = yc;
    motionController->consign.theta = thetac;
}


void alphaRho(_position consign, _position robotPos, float* alpha, float* rho){
 8006f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f32:	b089      	sub	sp, #36	; 0x24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	eeb0 5a40 	vmov.f32	s10, s0
 8006f3a:	eef0 5a60 	vmov.f32	s11, s1
 8006f3e:	eeb0 6a41 	vmov.f32	s12, s2
 8006f42:	eef0 6a61 	vmov.f32	s13, s3
 8006f46:	eeb0 7a42 	vmov.f32	s14, s4
 8006f4a:	eef0 7a62 	vmov.f32	s15, s5
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
 8006f52:	ed87 5a05 	vstr	s10, [r7, #20]
 8006f56:	edc7 5a06 	vstr	s11, [r7, #24]
 8006f5a:	ed87 6a07 	vstr	s12, [r7, #28]
 8006f5e:	edc7 6a02 	vstr	s13, [r7, #8]
 8006f62:	ed87 7a03 	vstr	s14, [r7, #12]
 8006f66:	edc7 7a04 	vstr	s15, [r7, #16]
   *alpha = constrainAngle( atan2(consign.y - robotPos.y,consign.x - robotPos.x) - robotPos.theta );
 8006f6a:	ed97 7a06 	vldr	s14, [r7, #24]
 8006f6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f76:	ee17 0a90 	vmov	r0, s15
 8006f7a:	f7f9 fae5 	bl	8000548 <__aeabi_f2d>
 8006f7e:	4604      	mov	r4, r0
 8006f80:	460d      	mov	r5, r1
 8006f82:	ed97 7a05 	vldr	s14, [r7, #20]
 8006f86:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f8e:	ee17 0a90 	vmov	r0, s15
 8006f92:	f7f9 fad9 	bl	8000548 <__aeabi_f2d>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	ec43 2b11 	vmov	d1, r2, r3
 8006f9e:	ec45 4b10 	vmov	d0, r4, r5
 8006fa2:	f005 fd6d 	bl	800ca80 <atan2>
 8006fa6:	ec56 5b10 	vmov	r5, r6, d0
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7f9 facb 	bl	8000548 <__aeabi_f2d>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	4623      	mov	r3, r4
 8006fba:	4628      	mov	r0, r5
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	f7f9 f963 	bl	8000288 <__aeabi_dsub>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	ec44 3b17 	vmov	d7, r3, r4
 8006fca:	eeb0 0a47 	vmov.f32	s0, s14
 8006fce:	eef0 0a67 	vmov.f32	s1, s15
 8006fd2:	f000 ff2d 	bl	8007e30 <constrainAngle>
 8006fd6:	ec54 3b10 	vmov	r3, r4, d0
 8006fda:	4618      	mov	r0, r3
 8006fdc:	4621      	mov	r1, r4
 8006fde:	f7f9 fe03 	bl	8000be8 <__aeabi_d2f>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	601a      	str	r2, [r3, #0]
   *rho  = sqrt(pow(consign.x - robotPos.x,2) + pow(consign.y - robotPos.y,2));
 8006fe8:	ed97 7a05 	vldr	s14, [r7, #20]
 8006fec:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ff4:	ee17 0a90 	vmov	r0, s15
 8006ff8:	f7f9 faa6 	bl	8000548 <__aeabi_f2d>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	460c      	mov	r4, r1
 8007000:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8007070 <alphaRho+0x140>
 8007004:	ec44 3b10 	vmov	d0, r3, r4
 8007008:	f005 fda0 	bl	800cb4c <pow>
 800700c:	ec55 4b10 	vmov	r4, r5, d0
 8007010:	ed97 7a06 	vldr	s14, [r7, #24]
 8007014:	edd7 7a03 	vldr	s15, [r7, #12]
 8007018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800701c:	ee17 0a90 	vmov	r0, s15
 8007020:	f7f9 fa92 	bl	8000548 <__aeabi_f2d>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8007070 <alphaRho+0x140>
 800702c:	ec43 2b10 	vmov	d0, r2, r3
 8007030:	f005 fd8c 	bl	800cb4c <pow>
 8007034:	ec53 2b10 	vmov	r2, r3, d0
 8007038:	4620      	mov	r0, r4
 800703a:	4629      	mov	r1, r5
 800703c:	f7f9 f926 	bl	800028c <__adddf3>
 8007040:	4603      	mov	r3, r0
 8007042:	460c      	mov	r4, r1
 8007044:	ec44 3b17 	vmov	d7, r3, r4
 8007048:	eeb0 0a47 	vmov.f32	s0, s14
 800704c:	eef0 0a67 	vmov.f32	s1, s15
 8007050:	f005 feec 	bl	800ce2c <sqrt>
 8007054:	ec54 3b10 	vmov	r3, r4, d0
 8007058:	4618      	mov	r0, r3
 800705a:	4621      	mov	r1, r4
 800705c:	f7f9 fdc4 	bl	8000be8 <__aeabi_d2f>
 8007060:	4602      	mov	r2, r0
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	601a      	str	r2, [r3, #0]
}
 8007066:	bf00      	nop
 8007068:	3724      	adds	r7, #36	; 0x24
 800706a:	46bd      	mov	sp, r7
 800706c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800706e:	bf00      	nop
 8007070:	00000000 	.word	0x00000000
 8007074:	40000000 	.word	0x40000000

08007078 <ramp_update>:

float ramp_update(ramp_Context* ramp, float pos, float dt){
 8007078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	ed87 0a02 	vstr	s0, [r7, #8]
 8007084:	edc7 0a01 	vstr	s1, [r7, #4]
   float speed = pos - ramp->lastPos;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	edd3 7a03 	vldr	s15, [r3, #12]
 800708e:	ed97 7a02 	vldr	s14, [r7, #8]
 8007092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007096:	edc7 7a05 	vstr	s15, [r7, #20]
   float dFrein = pow(speed,2)/(2*ramp->aFrein);
 800709a:	6978      	ldr	r0, [r7, #20]
 800709c:	f7f9 fa54 	bl	8000548 <__aeabi_f2d>
 80070a0:	4603      	mov	r3, r0
 80070a2:	460c      	mov	r4, r1
 80070a4:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8007160 <ramp_update+0xe8>
 80070a8:	ec44 3b10 	vmov	d0, r3, r4
 80070ac:	f005 fd4e 	bl	800cb4c <pow>
 80070b0:	ec56 5b10 	vmov	r5, r6, d0
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	edd3 7a00 	vldr	s15, [r3]
 80070ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80070be:	ee17 0a90 	vmov	r0, s15
 80070c2:	f7f9 fa41 	bl	8000548 <__aeabi_f2d>
 80070c6:	4603      	mov	r3, r0
 80070c8:	460c      	mov	r4, r1
 80070ca:	461a      	mov	r2, r3
 80070cc:	4623      	mov	r3, r4
 80070ce:	4628      	mov	r0, r5
 80070d0:	4631      	mov	r1, r6
 80070d2:	f7f9 fbbb 	bl	800084c <__aeabi_ddiv>
 80070d6:	4603      	mov	r3, r0
 80070d8:	460c      	mov	r4, r1
 80070da:	4618      	mov	r0, r3
 80070dc:	4621      	mov	r1, r4
 80070de:	f7f9 fd83 	bl	8000be8 <__aeabi_d2f>
 80070e2:	4603      	mov	r3, r0
 80070e4:	613b      	str	r3, [r7, #16]
   if (pos < dFrein){
 80070e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80070ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80070ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f6:	d50d      	bpl.n	8007114 <ramp_update+0x9c>
       speed = speed - ramp->aFrein*dt;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	ed93 7a00 	vldr	s14, [r3]
 80070fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8007102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007106:	ed97 7a05 	vldr	s14, [r7, #20]
 800710a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800710e:	edc7 7a05 	vstr	s15, [r7, #20]
 8007112:	e01a      	b.n	800714a <ramp_update+0xd2>
   }
   else {
       if (speed < ramp->vMax) {
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	edd3 7a02 	vldr	s15, [r3, #8]
 800711a:	ed97 7a05 	vldr	s14, [r7, #20]
 800711e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007126:	d50d      	bpl.n	8007144 <ramp_update+0xcc>
           speed = speed + ramp->aMax*dt;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	ed93 7a01 	vldr	s14, [r3, #4]
 800712e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007136:	ed97 7a05 	vldr	s14, [r7, #20]
 800713a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800713e:	edc7 7a05 	vstr	s15, [r7, #20]
 8007142:	e002      	b.n	800714a <ramp_update+0xd2>
       }
       else {
           speed = ramp->vMax;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	617b      	str	r3, [r7, #20]
       }
   }
   return speed;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	ee07 3a90 	vmov	s15, r3
}
 8007150:	eeb0 0a67 	vmov.f32	s0, s15
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800715a:	bf00      	nop
 800715c:	f3af 8000 	nop.w
 8007160:	00000000 	.word	0x00000000
 8007164:	40000000 	.word	0x40000000

08007168 <motor_init>:
#include "motor.h"

void motor_init(motor_Context *motor){
 8007168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800716a:	b093      	sub	sp, #76	; 0x4c
 800716c:	af10      	add	r7, sp, #64	; 0x40
 800716e:	6078      	str	r0, [r7, #4]
    setPWM(motor->timer, motor->channel, 255, 0); // reset PWM
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007174:	687e      	ldr	r6, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	920e      	str	r2, [sp, #56]	; 0x38
 800717a:	22ff      	movs	r2, #255	; 0xff
 800717c:	920d      	str	r2, [sp, #52]	; 0x34
 800717e:	930c      	str	r3, [sp, #48]	; 0x30
 8007180:	466d      	mov	r5, sp
 8007182:	f106 0410 	add.w	r4, r6, #16
 8007186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800718a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800718c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800718e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007192:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007196:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800719a:	f000 f882 	bl	80072a2 <setPWM>
    HAL_GPIO_WritePin(motor->motDir_Port, motor->motDir_Pin, GPIO_PIN_RESET); //
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80071a8:	2200      	movs	r2, #0
 80071aa:	4619      	mov	r1, r3
 80071ac:	f7fa fa88 	bl	80016c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->motBrake_Port, motor->motBrake_Pin, GPIO_PIN_RESET);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ba:	2200      	movs	r2, #0
 80071bc:	4619      	mov	r1, r3
 80071be:	f7fa fa7f 	bl	80016c0 <HAL_GPIO_WritePin>
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071ca <motor_setSpeed>:

void motor_setSpeed(motor_Context *motor, int speed){
 80071ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071cc:	b093      	sub	sp, #76	; 0x4c
 80071ce:	af10      	add	r7, sp, #64	; 0x40
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
	if (motor->reverseDir){
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <motor_setSpeed+0x1a>
        speed = -speed;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	425b      	negs	r3, r3
 80071e2:	603b      	str	r3, [r7, #0]
    }
    if (speed < 0){
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	da0c      	bge.n	8007204 <motor_setSpeed+0x3a>
        speed = -speed;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	425b      	negs	r3, r3
 80071ee:	603b      	str	r3, [r7, #0]
        HAL_GPIO_WritePin(motor->motDir_Port, motor->motDir_Pin, GPIO_PIN_SET);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80071fa:	2201      	movs	r2, #1
 80071fc:	4619      	mov	r1, r3
 80071fe:	f7fa fa5f 	bl	80016c0 <HAL_GPIO_WritePin>
 8007202:	e008      	b.n	8007216 <motor_setSpeed+0x4c>
    }
    else {
        HAL_GPIO_WritePin(motor->motDir_Port, motor->motDir_Pin, GPIO_PIN_RESET);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800720e:	2200      	movs	r2, #0
 8007210:	4619      	mov	r1, r3
 8007212:	f7fa fa55 	bl	80016c0 <HAL_GPIO_WritePin>
    }
    if (speed > motor->maxPWM){
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	429a      	cmp	r2, r3
 800721e:	dd02      	ble.n	8007226 <motor_setSpeed+0x5c>
        speed = motor->maxPWM;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007224:	603b      	str	r3, [r7, #0]
    }

    setPWM(motor->timer, motor->channel, 255, speed); // set PWM
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	b292      	uxth	r2, r2
 800722e:	687e      	ldr	r6, [r7, #4]
 8007230:	920e      	str	r2, [sp, #56]	; 0x38
 8007232:	22ff      	movs	r2, #255	; 0xff
 8007234:	920d      	str	r2, [sp, #52]	; 0x34
 8007236:	930c      	str	r3, [sp, #48]	; 0x30
 8007238:	466d      	mov	r5, sp
 800723a:	f106 0410 	add.w	r4, r6, #16
 800723e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007246:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800724a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800724e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007252:	f000 f826 	bl	80072a2 <setPWM>
}
 8007256:	bf00      	nop
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800725e <motor_breake>:

void motor_breake(motor_Context *motor){
 800725e:	b580      	push	{r7, lr}
 8007260:	b082      	sub	sp, #8
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->motBrake_Port, motor->motBrake_Pin, GPIO_PIN_SET);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007270:	2201      	movs	r2, #1
 8007272:	4619      	mov	r1, r3
 8007274:	f7fa fa24 	bl	80016c0 <HAL_GPIO_WritePin>
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <motor_unbreake>:

void motor_unbreake(motor_Context *motor){
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->motBrake_Port, motor->motBrake_Pin, GPIO_PIN_RESET);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007292:	2200      	movs	r2, #0
 8007294:	4619      	mov	r1, r3
 8007296:	f7fa fa13 	bl	80016c0 <HAL_GPIO_WritePin>
}
 800729a:	bf00      	nop
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <setPWM>:

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 80072a2:	b084      	sub	sp, #16
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b088      	sub	sp, #32
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80072ae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  HAL_TIM_PWM_Stop(&timer, channel);    // stop generation of pwm
 80072b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072b4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80072b8:	f7fb fdf0 	bl	8002e9c <HAL_TIM_PWM_Stop>
	  TIM_OC_InitTypeDef sConfigOC;   timer.Init.Period = period;           // set the period duration
 80072bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80072c0:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_TIM_PWM_Init(&timer);  // reinititialise with new period value
 80072c2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80072c6:	f7fb fd65 	bl	8002d94 <HAL_TIM_PWM_Init>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80072ca:	2360      	movs	r3, #96	; 0x60
 80072cc:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = pulse;              // set the pulse duration
 80072ce:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80072d2:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]
	  HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80072dc:	1d3b      	adds	r3, r7, #4
 80072de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072e0:	4619      	mov	r1, r3
 80072e2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80072e6:	f7fb fff9 	bl	80032dc <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_PWM_Start(&timer, channel);   // start pwm generation}
 80072ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072ec:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80072f0:	f7fb fd7c 	bl	8002dec <HAL_TIM_PWM_Start>
}
 80072f4:	bf00      	nop
 80072f6:	3720      	adds	r7, #32
 80072f8:	46bd      	mov	sp, r7
 80072fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072fe:	b004      	add	sp, #16
 8007300:	4770      	bx	lr

08007302 <odometry_init>:
#include "odometry.h"

void odometry_init(odometry_Context *odometry, float x0, float y0, float theta0){
 8007302:	b590      	push	{r4, r7, lr}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	60f8      	str	r0, [r7, #12]
 800730a:	ed87 0a02 	vstr	s0, [r7, #8]
 800730e:	edc7 0a01 	vstr	s1, [r7, #4]
 8007312:	ed87 1a00 	vstr	s2, [r7]
    odometry->linearDisplacement =0.;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f04f 0200 	mov.w	r2, #0
 800731c:	61da      	str	r2, [r3, #28]
    odometry->angularDisplacement =0.;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f04f 0200 	mov.w	r2, #0
 8007324:	621a      	str	r2, [r3, #32]

    odometry->position.x     = x0;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	611a      	str	r2, [r3, #16]
    odometry->position.y     = y0;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	615a      	str	r2, [r3, #20]
    odometry->position.theta = constrainAngle(theta0); // remise dans ]-pi pi]
 8007332:	6838      	ldr	r0, [r7, #0]
 8007334:	f7f9 f908 	bl	8000548 <__aeabi_f2d>
 8007338:	4603      	mov	r3, r0
 800733a:	460c      	mov	r4, r1
 800733c:	ec44 3b10 	vmov	d0, r3, r4
 8007340:	f000 fd76 	bl	8007e30 <constrainAngle>
 8007344:	ec54 3b10 	vmov	r3, r4, d0
 8007348:	4618      	mov	r0, r3
 800734a:	4621      	mov	r1, r4
 800734c:	f7f9 fc4c 	bl	8000be8 <__aeabi_d2f>
 8007350:	4602      	mov	r2, r0
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	619a      	str	r2, [r3, #24]
}
 8007356:	bf00      	nop
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	bd90      	pop	{r4, r7, pc}
	...

08007360 <odometry_update>:

void odometry_update(odometry_Context *odometry){
 8007360:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007364:	b084      	sub	sp, #16
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
    float distR =  odometry->wheelRadiusR * 2*PI/odometry->encoderRes * (float)(int16_t)*(odometry->rightTicks);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007370:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007374:	ee17 0a90 	vmov	r0, s15
 8007378:	f7f9 f8e6 	bl	8000548 <__aeabi_f2d>
 800737c:	a392      	add	r3, pc, #584	; (adr r3, 80075c8 <odometry_update+0x268>)
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	f7f9 f939 	bl	80005f8 <__aeabi_dmul>
 8007386:	4603      	mov	r3, r0
 8007388:	460c      	mov	r4, r1
 800738a:	4625      	mov	r5, r4
 800738c:	461c      	mov	r4, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f7f9 f8d8 	bl	8000548 <__aeabi_f2d>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4620      	mov	r0, r4
 800739e:	4629      	mov	r1, r5
 80073a0:	f7f9 fa54 	bl	800084c <__aeabi_ddiv>
 80073a4:	4603      	mov	r3, r0
 80073a6:	460c      	mov	r4, r1
 80073a8:	4625      	mov	r5, r4
 80073aa:	461c      	mov	r4, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073b4:	ee07 3a90 	vmov	s15, r3
 80073b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073bc:	ee17 0a90 	vmov	r0, s15
 80073c0:	f7f9 f8c2 	bl	8000548 <__aeabi_f2d>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4620      	mov	r0, r4
 80073ca:	4629      	mov	r1, r5
 80073cc:	f7f9 f914 	bl	80005f8 <__aeabi_dmul>
 80073d0:	4603      	mov	r3, r0
 80073d2:	460c      	mov	r4, r1
 80073d4:	4618      	mov	r0, r3
 80073d6:	4621      	mov	r1, r4
 80073d8:	f7f9 fc06 	bl	8000be8 <__aeabi_d2f>
 80073dc:	4603      	mov	r3, r0
 80073de:	60fb      	str	r3, [r7, #12]
    float distL =  odometry->wheelRadiusL * 2*PI/odometry->encoderRes * (float)(int16_t)*(odometry->leftTicks);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80073e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80073ea:	ee17 0a90 	vmov	r0, s15
 80073ee:	f7f9 f8ab 	bl	8000548 <__aeabi_f2d>
 80073f2:	a375      	add	r3, pc, #468	; (adr r3, 80075c8 <odometry_update+0x268>)
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	f7f9 f8fe 	bl	80005f8 <__aeabi_dmul>
 80073fc:	4603      	mov	r3, r0
 80073fe:	460c      	mov	r4, r1
 8007400:	4625      	mov	r5, r4
 8007402:	461c      	mov	r4, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4618      	mov	r0, r3
 800740a:	f7f9 f89d 	bl	8000548 <__aeabi_f2d>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	4620      	mov	r0, r4
 8007414:	4629      	mov	r1, r5
 8007416:	f7f9 fa19 	bl	800084c <__aeabi_ddiv>
 800741a:	4603      	mov	r3, r0
 800741c:	460c      	mov	r4, r1
 800741e:	4625      	mov	r5, r4
 8007420:	461c      	mov	r4, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007432:	ee17 0a90 	vmov	r0, s15
 8007436:	f7f9 f887 	bl	8000548 <__aeabi_f2d>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4620      	mov	r0, r4
 8007440:	4629      	mov	r1, r5
 8007442:	f7f9 f8d9 	bl	80005f8 <__aeabi_dmul>
 8007446:	4603      	mov	r3, r0
 8007448:	460c      	mov	r4, r1
 800744a:	4618      	mov	r0, r3
 800744c:	4621      	mov	r1, r4
 800744e:	f7f9 fbcb 	bl	8000be8 <__aeabi_d2f>
 8007452:	4603      	mov	r3, r0
 8007454:	60bb      	str	r3, [r7, #8]
    *(odometry->rightTicks) = 0;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	2200      	movs	r2, #0
 800745c:	801a      	strh	r2, [r3, #0]
	*(odometry->leftTicks) = 0;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007462:	2200      	movs	r2, #0
 8007464:	801a      	strh	r2, [r3, #0]

    odometry->linearDisplacement = (distR + distL)/2;
 8007466:	ed97 7a03 	vldr	s14, [r7, #12]
 800746a:	edd7 7a02 	vldr	s15, [r7, #8]
 800746e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007472:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007476:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	edc3 7a07 	vstr	s15, [r3, #28]
    odometry->angularDisplacement = (distR - distL)/odometry->distanceBetweenWheels;
 8007480:	ed97 7a03 	vldr	s14, [r7, #12]
 8007484:	edd7 7a02 	vldr	s15, [r7, #8]
 8007488:	ee77 6a67 	vsub.f32	s13, s14, s15
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	ed93 7a03 	vldr	s14, [r3, #12]
 8007492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	edc3 7a08 	vstr	s15, [r3, #32]

    odometry->position.x = odometry->position.x + odometry->linearDisplacement*cos(odometry->position.theta + odometry->angularDisplacement/2);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7f9 f851 	bl	8000548 <__aeabi_f2d>
 80074a6:	4604      	mov	r4, r0
 80074a8:	460d      	mov	r5, r1
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7f9 f84a 	bl	8000548 <__aeabi_f2d>
 80074b4:	4680      	mov	r8, r0
 80074b6:	4689      	mov	r9, r1
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	ed93 7a06 	vldr	s14, [r3, #24]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	edd3 6a08 	vldr	s13, [r3, #32]
 80074c4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80074c8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80074cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074d0:	ee17 0a90 	vmov	r0, s15
 80074d4:	f7f9 f838 	bl	8000548 <__aeabi_f2d>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	ec43 2b10 	vmov	d0, r2, r3
 80074e0:	f005 fa42 	bl	800c968 <cos>
 80074e4:	ec53 2b10 	vmov	r2, r3, d0
 80074e8:	4640      	mov	r0, r8
 80074ea:	4649      	mov	r1, r9
 80074ec:	f7f9 f884 	bl	80005f8 <__aeabi_dmul>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4620      	mov	r0, r4
 80074f6:	4629      	mov	r1, r5
 80074f8:	f7f8 fec8 	bl	800028c <__adddf3>
 80074fc:	4603      	mov	r3, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	4618      	mov	r0, r3
 8007502:	4621      	mov	r1, r4
 8007504:	f7f9 fb70 	bl	8000be8 <__aeabi_d2f>
 8007508:	4602      	mov	r2, r0
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	611a      	str	r2, [r3, #16]
    odometry->position.y = odometry->position.y + odometry->linearDisplacement*sin(odometry->position.theta + odometry->angularDisplacement/2);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	4618      	mov	r0, r3
 8007514:	f7f9 f818 	bl	8000548 <__aeabi_f2d>
 8007518:	4604      	mov	r4, r0
 800751a:	460d      	mov	r5, r1
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	4618      	mov	r0, r3
 8007522:	f7f9 f811 	bl	8000548 <__aeabi_f2d>
 8007526:	4680      	mov	r8, r0
 8007528:	4689      	mov	r9, r1
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	ed93 7a06 	vldr	s14, [r3, #24]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	edd3 6a08 	vldr	s13, [r3, #32]
 8007536:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800753a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800753e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007542:	ee17 0a90 	vmov	r0, s15
 8007546:	f7f8 ffff 	bl	8000548 <__aeabi_f2d>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	ec43 2b10 	vmov	d0, r2, r3
 8007552:	f005 fa4d 	bl	800c9f0 <sin>
 8007556:	ec53 2b10 	vmov	r2, r3, d0
 800755a:	4640      	mov	r0, r8
 800755c:	4649      	mov	r1, r9
 800755e:	f7f9 f84b 	bl	80005f8 <__aeabi_dmul>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4620      	mov	r0, r4
 8007568:	4629      	mov	r1, r5
 800756a:	f7f8 fe8f 	bl	800028c <__adddf3>
 800756e:	4603      	mov	r3, r0
 8007570:	460c      	mov	r4, r1
 8007572:	4618      	mov	r0, r3
 8007574:	4621      	mov	r1, r4
 8007576:	f7f9 fb37 	bl	8000be8 <__aeabi_d2f>
 800757a:	4602      	mov	r2, r0
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	615a      	str	r2, [r3, #20]
    odometry->position.theta = odometry->position.theta + odometry->angularDisplacement;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	ed93 7a06 	vldr	s14, [r3, #24]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	edd3 7a08 	vldr	s15, [r3, #32]
 800758c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	edc3 7a06 	vstr	s15, [r3, #24]
    odometry->position.theta = constrainAngle(odometry->position.theta);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	4618      	mov	r0, r3
 800759c:	f7f8 ffd4 	bl	8000548 <__aeabi_f2d>
 80075a0:	4603      	mov	r3, r0
 80075a2:	460c      	mov	r4, r1
 80075a4:	ec44 3b10 	vmov	d0, r3, r4
 80075a8:	f000 fc42 	bl	8007e30 <constrainAngle>
 80075ac:	ec54 3b10 	vmov	r3, r4, d0
 80075b0:	4618      	mov	r0, r3
 80075b2:	4621      	mov	r1, r4
 80075b4:	f7f9 fb18 	bl	8000be8 <__aeabi_d2f>
 80075b8:	4602      	mov	r2, r0
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	619a      	str	r2, [r3, #24]
}
 80075be:	bf00      	nop
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80075c8:	fc8b007a 	.word	0xfc8b007a
 80075cc:	400921fa 	.word	0x400921fa

080075d0 <pid_init>:
#include "pid.h"

void pid_init(pid_Context *pid){
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
   pid->integral =     0.;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f04f 0200 	mov.w	r2, #0
 80075de:	615a      	str	r2, [r3, #20]
   pid->last_error =   0.;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f04f 0200 	mov.w	r2, #0
 80075e6:	619a      	str	r2, [r3, #24]
   }
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <pid_update>:

float pid_update(pid_Context *pid, float consign, float mesure){
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8007600:	edc7 0a01 	vstr	s1, [r7, #4]
   float error = consign - mesure;
 8007604:	ed97 7a02 	vldr	s14, [r7, #8]
 8007608:	edd7 7a01 	vldr	s15, [r7, #4]
 800760c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007610:	edc7 7a07 	vstr	s15, [r7, #28]

   float proportional = pid->Kp * error;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	edd3 7a00 	vldr	s15, [r3]
 800761a:	ed97 7a07 	vldr	s14, [r7, #28]
 800761e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007622:	edc7 7a06 	vstr	s15, [r7, #24]
   pid->integral = pid->integral + pid->Ti * error; //euler integration
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	ed93 7a05 	vldr	s14, [r3, #20]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	edd3 6a01 	vldr	s13, [r3, #4]
 8007632:	edd7 7a07 	vldr	s15, [r7, #28]
 8007636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800763a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	edc3 7a05 	vstr	s15, [r3, #20]
   float derivate = pid->Td*(error - pid->last_error);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	ed93 7a02 	vldr	s14, [r3, #8]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007650:	edd7 6a07 	vldr	s13, [r7, #28]
 8007654:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765c:	edc7 7a05 	vstr	s15, [r7, #20]

   pid->last_error = error;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	69fa      	ldr	r2, [r7, #28]
 8007664:	619a      	str	r2, [r3, #24]
   pid->integral = constrain(pid->integral, pid->minOut, pid->maxOut);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	edd3 7a05 	vldr	s15, [r3, #20]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	ed93 7a03 	vldr	s14, [r3, #12]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	edd3 6a04 	vldr	s13, [r3, #16]
 8007678:	eeb0 1a66 	vmov.f32	s2, s13
 800767c:	eef0 0a47 	vmov.f32	s1, s14
 8007680:	eeb0 0a67 	vmov.f32	s0, s15
 8007684:	f000 f827 	bl	80076d6 <constrain>
 8007688:	eef0 7a40 	vmov.f32	s15, s0
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	edc3 7a05 	vstr	s15, [r3, #20]
   float retval = proportional + derivate + pid->integral;
 8007692:	ed97 7a06 	vldr	s14, [r7, #24]
 8007696:	edd7 7a05 	vldr	s15, [r7, #20]
 800769a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80076a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076a8:	edc7 7a04 	vstr	s15, [r7, #16]
   return constrain(retval, pid->minOut, pid->maxOut);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	ed93 7a04 	vldr	s14, [r3, #16]
 80076b8:	eeb0 1a47 	vmov.f32	s2, s14
 80076bc:	eef0 0a67 	vmov.f32	s1, s15
 80076c0:	ed97 0a04 	vldr	s0, [r7, #16]
 80076c4:	f000 f807 	bl	80076d6 <constrain>
 80076c8:	eef0 7a40 	vmov.f32	s15, s0
}
 80076cc:	eeb0 0a67 	vmov.f32	s0, s15
 80076d0:	3720      	adds	r7, #32
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <constrain>:

float constrain(float value,float min,float max){
 80076d6:	b480      	push	{r7}
 80076d8:	b085      	sub	sp, #20
 80076da:	af00      	add	r7, sp, #0
 80076dc:	ed87 0a03 	vstr	s0, [r7, #12]
 80076e0:	edc7 0a02 	vstr	s1, [r7, #8]
 80076e4:	ed87 1a01 	vstr	s2, [r7, #4]
   if (value < min){
 80076e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80076ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80076f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f8:	d501      	bpl.n	80076fe <constrain+0x28>
       return min;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	e00b      	b.n	8007716 <constrain+0x40>
   }
   else if (value > max){
 80076fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8007702:	edd7 7a01 	vldr	s15, [r7, #4]
 8007706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800770a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770e:	dd01      	ble.n	8007714 <constrain+0x3e>
       return max;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	e000      	b.n	8007716 <constrain+0x40>
   }
   else {
       return value;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	ee07 3a90 	vmov	s15, r3
   }
}
 800771a:	eeb0 0a67 	vmov.f32	s0, s15
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <robot_init>:
#include "robot.h"

void robot_init(diffDriveRobot_Context *robot, float x0, float y0, float theta0){
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	ed87 0a02 	vstr	s0, [r7, #8]
 8007734:	edc7 0a01 	vstr	s1, [r7, #4]
 8007738:	ed87 1a00 	vstr	s2, [r7]
    odometry_init(robot->odometry, x0, y0, theta0);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	ed97 1a00 	vldr	s2, [r7]
 8007744:	edd7 0a01 	vldr	s1, [r7, #4]
 8007748:	ed97 0a02 	vldr	s0, [r7, #8]
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff fdd8 	bl	8007302 <odometry_init>
    motionControl_init(robot->motionController, x0, y0, theta0);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	ed97 1a00 	vldr	s2, [r7]
 800775a:	edd7 0a01 	vldr	s1, [r7, #4]
 800775e:	ed97 0a02 	vldr	s0, [r7, #8]
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff f9f3 	bl	8006b4e <motionControl_init>
    pid_init(robot->pidD);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff ff2f 	bl	80075d0 <pid_init>
    pid_init(robot->pidG);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff ff2a 	bl	80075d0 <pid_init>
    motor_init(robot->motorG);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	4618      	mov	r0, r3
 8007782:	f7ff fcf1 	bl	8007168 <motor_init>
    motor_init(robot->motorD);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff fcec 	bl	8007168 <motor_init>

    robot->vitD = 0.;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f04f 0200 	mov.w	r2, #0
 8007796:	621a      	str	r2, [r3, #32]
    robot->vitG = 0.; // vitesse consigne du point de contact de la roue et du sol
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f04f 0200 	mov.w	r2, #0
 800779e:	625a      	str	r2, [r3, #36]	; 0x24
    robot->commandD = 0.;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f04f 0200 	mov.w	r2, #0
 80077a6:	629a      	str	r2, [r3, #40]	; 0x28
    robot->commandG = 0.;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f04f 0200 	mov.w	r2, #0
 80077ae:	62da      	str	r2, [r3, #44]	; 0x2c
    robot->mesureD = 0.;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f04f 0200 	mov.w	r2, #0
 80077b6:	631a      	str	r2, [r3, #48]	; 0x30
    robot->mesureG = 0.; // vitesse mesuree du point de contact de la roue et du sol
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f04f 0200 	mov.w	r2, #0
 80077be:	635a      	str	r2, [r3, #52]	; 0x34
    robot->linearVelocity = 0.;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f04f 0200 	mov.w	r2, #0
 80077c6:	639a      	str	r2, [r3, #56]	; 0x38
    robot->angularVelocity = 0.;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f04f 0200 	mov.w	r2, #0
 80077ce:	63da      	str	r2, [r3, #60]	; 0x3c

    robot->controlMode = 0;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80077d6:	bf00      	nop
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <robot_update>:

void robot_update(diffDriveRobot_Context *robot, float dt){
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	ed87 0a00 	vstr	s0, [r7]
    // odometry position and displacement update
      odometry_update(robot->odometry);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff fdb5 	bl	8007360 <odometry_update>

    // mesures vitesses des roues
      float wheelDistAng = robot->odometry->angularDisplacement * robot->distBetweenMotorWheels/2;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	edd3 7a07 	vldr	s15, [r3, #28]
 8007804:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007808:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800780c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007810:	edc7 7a03 	vstr	s15, [r7, #12]
      robot->mesureD = (robot->odometry->linearDisplacement + wheelDistAng)/dt*1000;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	ed93 7a07 	vldr	s14, [r3, #28]
 800781c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007820:	ee77 6a27 	vadd.f32	s13, s14, s15
 8007824:	ed97 7a00 	vldr	s14, [r7]
 8007828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800782c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8007988 <robot_update+0x1a8>
 8007830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
      robot->mesureG = (robot->odometry->linearDisplacement - wheelDistAng)/dt*1000;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	ed93 7a07 	vldr	s14, [r3, #28]
 8007842:	edd7 7a03 	vldr	s15, [r7, #12]
 8007846:	ee77 6a67 	vsub.f32	s13, s14, s15
 800784a:	ed97 7a00 	vldr	s14, [r7]
 800784e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007852:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8007988 <robot_update+0x1a8>
 8007856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34


      // ??? avec un swich case sans break ça marcherai aussi en dessous et ça eviterai de répeter des bouts de code.
    if (robot->controlMode == 0){
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007864:	2b00      	cmp	r3, #0
 8007866:	d133      	bne.n	80078d0 <robot_update+0xf0>
      // mise a jour de la consigne en vitesse et vitese angulaire.
        motionControl_update(robot->motionController, robot->odometry->position, &(robot->linearVelocity), &(robot->angularVelocity), dt/1000);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6998      	ldr	r0, [r3, #24]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	f102 0138 	add.w	r1, r2, #56	; 0x38
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	323c      	adds	r2, #60	; 0x3c
 800787a:	edd7 7a00 	vldr	s15, [r7]
 800787e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8007988 <robot_update+0x1a8>
 8007882:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8007886:	edd3 6a04 	vldr	s13, [r3, #16]
 800788a:	ed93 7a05 	vldr	s14, [r3, #20]
 800788e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007892:	eef0 1a46 	vmov.f32	s3, s12
 8007896:	eeb0 0a66 	vmov.f32	s0, s13
 800789a:	eef0 0a47 	vmov.f32	s1, s14
 800789e:	eeb0 1a67 	vmov.f32	s2, s15
 80078a2:	f7ff f96d 	bl	8006b80 <motionControl_update>
      // Conversion consignes vitesses et vitesses angulaires en vitesses roues gauche et droite et controle qu'on soit dans le carre des vitesses
        differential_update(robot->differential, robot->linearVelocity, robot->angularVelocity, &(robot->vitD), &(robot->vitG));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6958      	ldr	r0, [r3, #20]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f103 0120 	add.w	r1, r3, #32
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	3324      	adds	r3, #36	; 0x24
 80078c0:	461a      	mov	r2, r3
 80078c2:	eef0 0a47 	vmov.f32	s1, s14
 80078c6:	eeb0 0a67 	vmov.f32	s0, s15
 80078ca:	f7fe f843 	bl	8005954 <differential_update>
 80078ce:	e017      	b.n	8007900 <robot_update+0x120>

    }
    else if(robot->controlMode == 1){
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d113      	bne.n	8007900 <robot_update+0x120>
      // on ne met pas a jour le motion controller car on commande en vitesse et vitesse angulaire et on ne veut pas ecraser celles ci en mettant a jour le motion conteller
      // Conversion consignes vitesses et vitesses angulaires en vitesses roues gauche et droite et controle qu'on soit dans le carre des vitesses
        differential_update(robot->differential, robot->linearVelocity, robot->angularVelocity, &(robot->vitD), &(robot->vitG));
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6958      	ldr	r0, [r3, #20]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f103 0120 	add.w	r1, r3, #32
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	3324      	adds	r3, #36	; 0x24
 80078f2:	461a      	mov	r2, r3
 80078f4:	eef0 0a47 	vmov.f32	s1, s14
 80078f8:	eeb0 0a67 	vmov.f32	s0, s15
 80078fc:	f7fe f82a 	bl	8005954 <differential_update>
        // on ne met par a jour les vitesses et vitesses angulaire car on controle les vitesses moteurs
        // et que les mettre a jour ecraserai la consigne moteur
    }

    // calcul de la commande moteurs Corrigee par des pid.
      robot->commandD = pid_update(robot->pidD, robot->vitD, robot->mesureD);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	edd3 7a08 	vldr	s15, [r3, #32]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8007910:	eef0 0a47 	vmov.f32	s1, s14
 8007914:	eeb0 0a67 	vmov.f32	s0, s15
 8007918:	4610      	mov	r0, r2
 800791a:	f7ff fe6b 	bl	80075f4 <pid_update>
 800791e:	eef0 7a40 	vmov.f32	s15, s0
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
      robot->commandG = pid_update(robot->pidG, robot->vitG, robot->mesureG);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	691a      	ldr	r2, [r3, #16]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8007938:	eef0 0a47 	vmov.f32	s1, s14
 800793c:	eeb0 0a67 	vmov.f32	s0, s15
 8007940:	4610      	mov	r0, r2
 8007942:	f7ff fe57 	bl	80075f4 <pid_update>
 8007946:	eef0 7a40 	vmov.f32	s15, s0
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // envoie de la commande aux moteurs
      motor_setSpeed(robot->motorD, (int)robot->commandD);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800795a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800795e:	ee17 1a90 	vmov	r1, s15
 8007962:	4610      	mov	r0, r2
 8007964:	f7ff fc31 	bl	80071ca <motor_setSpeed>
      motor_setSpeed(robot->motorG, (int)robot->commandG);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007976:	ee17 1a90 	vmov	r1, s15
 800797a:	4610      	mov	r0, r2
 800797c:	f7ff fc25 	bl	80071ca <motor_setSpeed>
}
 8007980:	bf00      	nop
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	447a0000 	.word	0x447a0000

0800798c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007992:	4b0f      	ldr	r3, [pc, #60]	; (80079d0 <HAL_MspInit+0x44>)
 8007994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007996:	4a0e      	ldr	r2, [pc, #56]	; (80079d0 <HAL_MspInit+0x44>)
 8007998:	f043 0301 	orr.w	r3, r3, #1
 800799c:	6613      	str	r3, [r2, #96]	; 0x60
 800799e:	4b0c      	ldr	r3, [pc, #48]	; (80079d0 <HAL_MspInit+0x44>)
 80079a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	607b      	str	r3, [r7, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80079aa:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <HAL_MspInit+0x44>)
 80079ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ae:	4a08      	ldr	r2, [pc, #32]	; (80079d0 <HAL_MspInit+0x44>)
 80079b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b4:	6593      	str	r3, [r2, #88]	; 0x58
 80079b6:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <HAL_MspInit+0x44>)
 80079b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079be:	603b      	str	r3, [r7, #0]
 80079c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80079c2:	bf00      	nop
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	40021000 	.word	0x40021000

080079d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079dc:	f107 0314 	add.w	r3, r7, #20
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	605a      	str	r2, [r3, #4]
 80079e6:	609a      	str	r2, [r3, #8]
 80079e8:	60da      	str	r2, [r3, #12]
 80079ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a25      	ldr	r2, [pc, #148]	; (8007a88 <HAL_SPI_MspInit+0xb4>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d144      	bne.n	8007a80 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80079f6:	4b25      	ldr	r3, [pc, #148]	; (8007a8c <HAL_SPI_MspInit+0xb8>)
 80079f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079fa:	4a24      	ldr	r2, [pc, #144]	; (8007a8c <HAL_SPI_MspInit+0xb8>)
 80079fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a00:	6593      	str	r3, [r2, #88]	; 0x58
 8007a02:	4b22      	ldr	r3, [pc, #136]	; (8007a8c <HAL_SPI_MspInit+0xb8>)
 8007a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a0e:	4b1f      	ldr	r3, [pc, #124]	; (8007a8c <HAL_SPI_MspInit+0xb8>)
 8007a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a12:	4a1e      	ldr	r2, [pc, #120]	; (8007a8c <HAL_SPI_MspInit+0xb8>)
 8007a14:	f043 0304 	orr.w	r3, r3, #4
 8007a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a1a:	4b1c      	ldr	r3, [pc, #112]	; (8007a8c <HAL_SPI_MspInit+0xb8>)
 8007a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1e:	f003 0304 	and.w	r3, r3, #4
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a26:	4b19      	ldr	r3, [pc, #100]	; (8007a8c <HAL_SPI_MspInit+0xb8>)
 8007a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a2a:	4a18      	ldr	r2, [pc, #96]	; (8007a8c <HAL_SPI_MspInit+0xb8>)
 8007a2c:	f043 0302 	orr.w	r3, r3, #2
 8007a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a32:	4b16      	ldr	r3, [pc, #88]	; (8007a8c <HAL_SPI_MspInit+0xb8>)
 8007a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	60bb      	str	r3, [r7, #8]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007a3e:	230c      	movs	r3, #12
 8007a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a42:	2302      	movs	r3, #2
 8007a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007a4e:	2305      	movs	r3, #5
 8007a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a52:	f107 0314 	add.w	r3, r7, #20
 8007a56:	4619      	mov	r1, r3
 8007a58:	480d      	ldr	r0, [pc, #52]	; (8007a90 <HAL_SPI_MspInit+0xbc>)
 8007a5a:	f7f9 fc89 	bl	8001370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a64:	2302      	movs	r3, #2
 8007a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007a70:	2305      	movs	r3, #5
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a74:	f107 0314 	add.w	r3, r7, #20
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4806      	ldr	r0, [pc, #24]	; (8007a94 <HAL_SPI_MspInit+0xc0>)
 8007a7c:	f7f9 fc78 	bl	8001370 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007a80:	bf00      	nop
 8007a82:	3728      	adds	r7, #40	; 0x28
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	40003800 	.word	0x40003800
 8007a8c:	40021000 	.word	0x40021000
 8007a90:	48000800 	.word	0x48000800
 8007a94:	48000400 	.word	0x48000400

08007a98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08c      	sub	sp, #48	; 0x30
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aa0:	f107 031c 	add.w	r3, r7, #28
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	605a      	str	r2, [r3, #4]
 8007aaa:	609a      	str	r2, [r3, #8]
 8007aac:	60da      	str	r2, [r3, #12]
 8007aae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a33      	ldr	r2, [pc, #204]	; (8007b84 <HAL_TIM_Encoder_MspInit+0xec>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d12a      	bne.n	8007b10 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007aba:	4b33      	ldr	r3, [pc, #204]	; (8007b88 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007abe:	4a32      	ldr	r2, [pc, #200]	; (8007b88 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ac4:	6613      	str	r3, [r2, #96]	; 0x60
 8007ac6:	4b30      	ldr	r3, [pc, #192]	; (8007b88 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ace:	61bb      	str	r3, [r7, #24]
 8007ad0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ad2:	4b2d      	ldr	r3, [pc, #180]	; (8007b88 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad6:	4a2c      	ldr	r2, [pc, #176]	; (8007b88 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007ad8:	f043 0301 	orr.w	r3, r3, #1
 8007adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ade:	4b2a      	ldr	r3, [pc, #168]	; (8007b88 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007aea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007af0:	2302      	movs	r3, #2
 8007af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007af4:	2301      	movs	r3, #1
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007af8:	2300      	movs	r3, #0
 8007afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007afc:	2301      	movs	r3, #1
 8007afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b00:	f107 031c 	add.w	r3, r7, #28
 8007b04:	4619      	mov	r1, r3
 8007b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b0a:	f7f9 fc31 	bl	8001370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007b0e:	e034      	b.n	8007b7a <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a1d      	ldr	r2, [pc, #116]	; (8007b8c <HAL_TIM_Encoder_MspInit+0xf4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d12f      	bne.n	8007b7a <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007b1a:	4b1b      	ldr	r3, [pc, #108]	; (8007b88 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1e:	4a1a      	ldr	r2, [pc, #104]	; (8007b88 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007b20:	f043 0304 	orr.w	r3, r3, #4
 8007b24:	6593      	str	r3, [r2, #88]	; 0x58
 8007b26:	4b18      	ldr	r3, [pc, #96]	; (8007b88 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b2a:	f003 0304 	and.w	r3, r3, #4
 8007b2e:	613b      	str	r3, [r7, #16]
 8007b30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b32:	4b15      	ldr	r3, [pc, #84]	; (8007b88 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b36:	4a14      	ldr	r2, [pc, #80]	; (8007b88 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007b38:	f043 0302 	orr.w	r3, r3, #2
 8007b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b3e:	4b12      	ldr	r3, [pc, #72]	; (8007b88 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b42:	f003 0302 	and.w	r3, r3, #2
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007b4a:	23c0      	movs	r3, #192	; 0xc0
 8007b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b4e:	2302      	movs	r3, #2
 8007b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b52:	2301      	movs	r3, #1
 8007b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b56:	2300      	movs	r3, #0
 8007b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b5e:	f107 031c 	add.w	r3, r7, #28
 8007b62:	4619      	mov	r1, r3
 8007b64:	480a      	ldr	r0, [pc, #40]	; (8007b90 <HAL_TIM_Encoder_MspInit+0xf8>)
 8007b66:	f7f9 fc03 	bl	8001370 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	201e      	movs	r0, #30
 8007b70:	f7f9 fb87 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007b74:	201e      	movs	r0, #30
 8007b76:	f7f9 fba0 	bl	80012ba <HAL_NVIC_EnableIRQ>
}
 8007b7a:	bf00      	nop
 8007b7c:	3730      	adds	r7, #48	; 0x30
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	40012c00 	.word	0x40012c00
 8007b88:	40021000 	.word	0x40021000
 8007b8c:	40000800 	.word	0x40000800
 8007b90:	48000400 	.word	0x48000400

08007b94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba4:	d10c      	bne.n	8007bc0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007ba6:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <HAL_TIM_PWM_MspInit+0x5c>)
 8007ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007baa:	4a11      	ldr	r2, [pc, #68]	; (8007bf0 <HAL_TIM_PWM_MspInit+0x5c>)
 8007bac:	f043 0301 	orr.w	r3, r3, #1
 8007bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8007bb2:	4b0f      	ldr	r3, [pc, #60]	; (8007bf0 <HAL_TIM_PWM_MspInit+0x5c>)
 8007bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8007bbe:	e010      	b.n	8007be2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a0b      	ldr	r2, [pc, #44]	; (8007bf4 <HAL_TIM_PWM_MspInit+0x60>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d10b      	bne.n	8007be2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007bca:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <HAL_TIM_PWM_MspInit+0x5c>)
 8007bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bce:	4a08      	ldr	r2, [pc, #32]	; (8007bf0 <HAL_TIM_PWM_MspInit+0x5c>)
 8007bd0:	f043 0302 	orr.w	r3, r3, #2
 8007bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8007bd6:	4b06      	ldr	r3, [pc, #24]	; (8007bf0 <HAL_TIM_PWM_MspInit+0x5c>)
 8007bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	60bb      	str	r3, [r7, #8]
 8007be0:	68bb      	ldr	r3, [r7, #8]
}
 8007be2:	bf00      	nop
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	40021000 	.word	0x40021000
 8007bf4:	40000400 	.word	0x40000400

08007bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	; 0x28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c00:	f107 0314 	add.w	r3, r7, #20
 8007c04:	2200      	movs	r2, #0
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	605a      	str	r2, [r3, #4]
 8007c0a:	609a      	str	r2, [r3, #8]
 8007c0c:	60da      	str	r2, [r3, #12]
 8007c0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c18:	d11c      	bne.n	8007c54 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c1a:	4b21      	ldr	r3, [pc, #132]	; (8007ca0 <HAL_TIM_MspPostInit+0xa8>)
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1e:	4a20      	ldr	r2, [pc, #128]	; (8007ca0 <HAL_TIM_MspPostInit+0xa8>)
 8007c20:	f043 0302 	orr.w	r3, r3, #2
 8007c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c26:	4b1e      	ldr	r3, [pc, #120]	; (8007ca0 <HAL_TIM_MspPostInit+0xa8>)
 8007c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	613b      	str	r3, [r7, #16]
 8007c30:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = MotA_PWM_Pin;
 8007c32:	2308      	movs	r3, #8
 8007c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c36:	2302      	movs	r3, #2
 8007c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007c42:	2301      	movs	r3, #1
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MotA_PWM_GPIO_Port, &GPIO_InitStruct);
 8007c46:	f107 0314 	add.w	r3, r7, #20
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	4815      	ldr	r0, [pc, #84]	; (8007ca4 <HAL_TIM_MspPostInit+0xac>)
 8007c4e:	f7f9 fb8f 	bl	8001370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007c52:	e021      	b.n	8007c98 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a13      	ldr	r2, [pc, #76]	; (8007ca8 <HAL_TIM_MspPostInit+0xb0>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d11c      	bne.n	8007c98 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c5e:	4b10      	ldr	r3, [pc, #64]	; (8007ca0 <HAL_TIM_MspPostInit+0xa8>)
 8007c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c62:	4a0f      	ldr	r2, [pc, #60]	; (8007ca0 <HAL_TIM_MspPostInit+0xa8>)
 8007c64:	f043 0301 	orr.w	r3, r3, #1
 8007c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ca0 <HAL_TIM_MspPostInit+0xa8>)
 8007c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MotB_PWM_Pin;
 8007c76:	2380      	movs	r3, #128	; 0x80
 8007c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c82:	2300      	movs	r3, #0
 8007c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007c86:	2302      	movs	r3, #2
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MotB_PWM_GPIO_Port, &GPIO_InitStruct);
 8007c8a:	f107 0314 	add.w	r3, r7, #20
 8007c8e:	4619      	mov	r1, r3
 8007c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c94:	f7f9 fb6c 	bl	8001370 <HAL_GPIO_Init>
}
 8007c98:	bf00      	nop
 8007c9a:	3728      	adds	r7, #40	; 0x28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	40021000 	.word	0x40021000
 8007ca4:	48000400 	.word	0x48000400
 8007ca8:	40000400 	.word	0x40000400

08007cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b08a      	sub	sp, #40	; 0x28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cb4:	f107 0314 	add.w	r3, r7, #20
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	605a      	str	r2, [r3, #4]
 8007cbe:	609a      	str	r2, [r3, #8]
 8007cc0:	60da      	str	r2, [r3, #12]
 8007cc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a1b      	ldr	r2, [pc, #108]	; (8007d38 <HAL_UART_MspInit+0x8c>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d130      	bne.n	8007d30 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007cce:	4b1b      	ldr	r3, [pc, #108]	; (8007d3c <HAL_UART_MspInit+0x90>)
 8007cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd2:	4a1a      	ldr	r2, [pc, #104]	; (8007d3c <HAL_UART_MspInit+0x90>)
 8007cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cd8:	6593      	str	r3, [r2, #88]	; 0x58
 8007cda:	4b18      	ldr	r3, [pc, #96]	; (8007d3c <HAL_UART_MspInit+0x90>)
 8007cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce2:	613b      	str	r3, [r7, #16]
 8007ce4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ce6:	4b15      	ldr	r3, [pc, #84]	; (8007d3c <HAL_UART_MspInit+0x90>)
 8007ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cea:	4a14      	ldr	r2, [pc, #80]	; (8007d3c <HAL_UART_MspInit+0x90>)
 8007cec:	f043 0301 	orr.w	r3, r3, #1
 8007cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007cf2:	4b12      	ldr	r3, [pc, #72]	; (8007d3c <HAL_UART_MspInit+0x90>)
 8007cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007cfe:	230c      	movs	r3, #12
 8007d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d02:	2302      	movs	r3, #2
 8007d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007d0e:	2307      	movs	r3, #7
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d12:	f107 0314 	add.w	r3, r7, #20
 8007d16:	4619      	mov	r1, r3
 8007d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d1c:	f7f9 fb28 	bl	8001370 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007d20:	2200      	movs	r2, #0
 8007d22:	2100      	movs	r1, #0
 8007d24:	2026      	movs	r0, #38	; 0x26
 8007d26:	f7f9 faac 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007d2a:	2026      	movs	r0, #38	; 0x26
 8007d2c:	f7f9 fac5 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007d30:	bf00      	nop
 8007d32:	3728      	adds	r7, #40	; 0x28
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	40004400 	.word	0x40004400
 8007d3c:	40021000 	.word	0x40021000

08007d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007d44:	bf00      	nop
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007d52:	e7fe      	b.n	8007d52 <HardFault_Handler+0x4>

08007d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007d54:	b480      	push	{r7}
 8007d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007d58:	e7fe      	b.n	8007d58 <MemManage_Handler+0x4>

08007d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d5e:	e7fe      	b.n	8007d5e <BusFault_Handler+0x4>

08007d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d60:	b480      	push	{r7}
 8007d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d64:	e7fe      	b.n	8007d64 <UsageFault_Handler+0x4>

08007d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007d66:	b480      	push	{r7}
 8007d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007d6a:	bf00      	nop
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d74:	b480      	push	{r7}
 8007d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d78:	bf00      	nop
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007d82:	b480      	push	{r7}
 8007d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007d86:	bf00      	nop
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007d94:	f7f9 f97c 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007d98:	bf00      	nop
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007da0:	4802      	ldr	r0, [pc, #8]	; (8007dac <TIM4_IRQHandler+0x10>)
 8007da2:	f7fb f97b 	bl	800309c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007da6:	bf00      	nop
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20000a84 	.word	0x20000a84

08007db0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007db4:	4802      	ldr	r0, [pc, #8]	; (8007dc0 <USART2_IRQHandler+0x10>)
 8007db6:	f7fc f96f 	bl	8004098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007dba:	bf00      	nop
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20000ed0 	.word	0x20000ed0

08007dc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007dc8:	4b17      	ldr	r3, [pc, #92]	; (8007e28 <SystemInit+0x64>)
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dce:	4a16      	ldr	r2, [pc, #88]	; (8007e28 <SystemInit+0x64>)
 8007dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007dd8:	4b14      	ldr	r3, [pc, #80]	; (8007e2c <SystemInit+0x68>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a13      	ldr	r2, [pc, #76]	; (8007e2c <SystemInit+0x68>)
 8007dde:	f043 0301 	orr.w	r3, r3, #1
 8007de2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007de4:	4b11      	ldr	r3, [pc, #68]	; (8007e2c <SystemInit+0x68>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007dea:	4b10      	ldr	r3, [pc, #64]	; (8007e2c <SystemInit+0x68>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a0f      	ldr	r2, [pc, #60]	; (8007e2c <SystemInit+0x68>)
 8007df0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007df4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007df8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8007dfa:	4b0c      	ldr	r3, [pc, #48]	; (8007e2c <SystemInit+0x68>)
 8007dfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e00:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007e02:	4b0a      	ldr	r3, [pc, #40]	; (8007e2c <SystemInit+0x68>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a09      	ldr	r2, [pc, #36]	; (8007e2c <SystemInit+0x68>)
 8007e08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007e0e:	4b07      	ldr	r3, [pc, #28]	; (8007e2c <SystemInit+0x68>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007e14:	4b04      	ldr	r3, [pc, #16]	; (8007e28 <SystemInit+0x64>)
 8007e16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007e1a:	609a      	str	r2, [r3, #8]
#endif
}
 8007e1c:	bf00      	nop
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	e000ed00 	.word	0xe000ed00
 8007e2c:	40021000 	.word	0x40021000

08007e30 <constrainAngle>:
#include "utils.h"

double constrainAngle(double x){
 8007e30:	b590      	push	{r4, r7, lr}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	ed87 0b00 	vstr	d0, [r7]
    x = fmod(x + PI,2*PI);
 8007e3a:	a321      	add	r3, pc, #132	; (adr r3, 8007ec0 <constrainAngle+0x90>)
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e44:	f7f8 fa22 	bl	800028c <__adddf3>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	ec44 3b17 	vmov	d7, r3, r4
 8007e50:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8007eb8 <constrainAngle+0x88>
 8007e54:	eeb0 0a47 	vmov.f32	s0, s14
 8007e58:	eef0 0a67 	vmov.f32	s1, s15
 8007e5c:	f004 fe12 	bl	800ca84 <fmod>
 8007e60:	ed87 0b00 	vstr	d0, [r7]
    if (x < 0)
 8007e64:	f04f 0200 	mov.w	r2, #0
 8007e68:	f04f 0300 	mov.w	r3, #0
 8007e6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e70:	f7f8 fe34 	bl	8000adc <__aeabi_dcmplt>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <constrainAngle+0x60>
        x += 2*PI;
 8007e7a:	a30f      	add	r3, pc, #60	; (adr r3, 8007eb8 <constrainAngle+0x88>)
 8007e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e84:	f7f8 fa02 	bl	800028c <__adddf3>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	e9c7 3400 	strd	r3, r4, [r7]
    return x - PI;
 8007e90:	a30b      	add	r3, pc, #44	; (adr r3, 8007ec0 <constrainAngle+0x90>)
 8007e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e9a:	f7f8 f9f5 	bl	8000288 <__aeabi_dsub>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	460c      	mov	r4, r1
 8007ea2:	ec44 3b17 	vmov	d7, r3, r4
}
 8007ea6:	eeb0 0a47 	vmov.f32	s0, s14
 8007eaa:	eef0 0a67 	vmov.f32	s1, s15
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd90      	pop	{r4, r7, pc}
 8007eb4:	f3af 8000 	nop.w
 8007eb8:	54442d18 	.word	0x54442d18
 8007ebc:	401921fb 	.word	0x401921fb
 8007ec0:	54442d18 	.word	0x54442d18
 8007ec4:	400921fb 	.word	0x400921fb

08007ec8 <__libc_init_array>:
 8007ec8:	b570      	push	{r4, r5, r6, lr}
 8007eca:	4e0d      	ldr	r6, [pc, #52]	; (8007f00 <__libc_init_array+0x38>)
 8007ecc:	4c0d      	ldr	r4, [pc, #52]	; (8007f04 <__libc_init_array+0x3c>)
 8007ece:	1ba4      	subs	r4, r4, r6
 8007ed0:	10a4      	asrs	r4, r4, #2
 8007ed2:	2500      	movs	r5, #0
 8007ed4:	42a5      	cmp	r5, r4
 8007ed6:	d109      	bne.n	8007eec <__libc_init_array+0x24>
 8007ed8:	4e0b      	ldr	r6, [pc, #44]	; (8007f08 <__libc_init_array+0x40>)
 8007eda:	4c0c      	ldr	r4, [pc, #48]	; (8007f0c <__libc_init_array+0x44>)
 8007edc:	f007 f9c4 	bl	800f268 <_init>
 8007ee0:	1ba4      	subs	r4, r4, r6
 8007ee2:	10a4      	asrs	r4, r4, #2
 8007ee4:	2500      	movs	r5, #0
 8007ee6:	42a5      	cmp	r5, r4
 8007ee8:	d105      	bne.n	8007ef6 <__libc_init_array+0x2e>
 8007eea:	bd70      	pop	{r4, r5, r6, pc}
 8007eec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ef0:	4798      	blx	r3
 8007ef2:	3501      	adds	r5, #1
 8007ef4:	e7ee      	b.n	8007ed4 <__libc_init_array+0xc>
 8007ef6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007efa:	4798      	blx	r3
 8007efc:	3501      	adds	r5, #1
 8007efe:	e7f2      	b.n	8007ee6 <__libc_init_array+0x1e>
 8007f00:	0800f860 	.word	0x0800f860
 8007f04:	0800f860 	.word	0x0800f860
 8007f08:	0800f860 	.word	0x0800f860
 8007f0c:	0800f868 	.word	0x0800f868

08007f10 <malloc>:
 8007f10:	4b02      	ldr	r3, [pc, #8]	; (8007f1c <malloc+0xc>)
 8007f12:	4601      	mov	r1, r0
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	f000 b803 	b.w	8007f20 <_malloc_r>
 8007f1a:	bf00      	nop
 8007f1c:	20000010 	.word	0x20000010

08007f20 <_malloc_r>:
 8007f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f24:	f101 050b 	add.w	r5, r1, #11
 8007f28:	2d16      	cmp	r5, #22
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	d906      	bls.n	8007f3c <_malloc_r+0x1c>
 8007f2e:	f035 0507 	bics.w	r5, r5, #7
 8007f32:	d504      	bpl.n	8007f3e <_malloc_r+0x1e>
 8007f34:	230c      	movs	r3, #12
 8007f36:	6033      	str	r3, [r6, #0]
 8007f38:	2400      	movs	r4, #0
 8007f3a:	e1a8      	b.n	800828e <_malloc_r+0x36e>
 8007f3c:	2510      	movs	r5, #16
 8007f3e:	428d      	cmp	r5, r1
 8007f40:	d3f8      	bcc.n	8007f34 <_malloc_r+0x14>
 8007f42:	4630      	mov	r0, r6
 8007f44:	f000 fa2a 	bl	800839c <__malloc_lock>
 8007f48:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8007f4c:	4fc0      	ldr	r7, [pc, #768]	; (8008250 <_malloc_r+0x330>)
 8007f4e:	d238      	bcs.n	8007fc2 <_malloc_r+0xa2>
 8007f50:	f105 0208 	add.w	r2, r5, #8
 8007f54:	443a      	add	r2, r7
 8007f56:	f1a2 0108 	sub.w	r1, r2, #8
 8007f5a:	6854      	ldr	r4, [r2, #4]
 8007f5c:	428c      	cmp	r4, r1
 8007f5e:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8007f62:	d102      	bne.n	8007f6a <_malloc_r+0x4a>
 8007f64:	68d4      	ldr	r4, [r2, #12]
 8007f66:	42a2      	cmp	r2, r4
 8007f68:	d010      	beq.n	8007f8c <_malloc_r+0x6c>
 8007f6a:	6863      	ldr	r3, [r4, #4]
 8007f6c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007f70:	f023 0303 	bic.w	r3, r3, #3
 8007f74:	60ca      	str	r2, [r1, #12]
 8007f76:	4423      	add	r3, r4
 8007f78:	6091      	str	r1, [r2, #8]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	f042 0201 	orr.w	r2, r2, #1
 8007f80:	605a      	str	r2, [r3, #4]
 8007f82:	4630      	mov	r0, r6
 8007f84:	f000 fa10 	bl	80083a8 <__malloc_unlock>
 8007f88:	3408      	adds	r4, #8
 8007f8a:	e180      	b.n	800828e <_malloc_r+0x36e>
 8007f8c:	3302      	adds	r3, #2
 8007f8e:	4ab1      	ldr	r2, [pc, #708]	; (8008254 <_malloc_r+0x334>)
 8007f90:	693c      	ldr	r4, [r7, #16]
 8007f92:	4294      	cmp	r4, r2
 8007f94:	4611      	mov	r1, r2
 8007f96:	d075      	beq.n	8008084 <_malloc_r+0x164>
 8007f98:	6860      	ldr	r0, [r4, #4]
 8007f9a:	f020 0c03 	bic.w	ip, r0, #3
 8007f9e:	ebac 0005 	sub.w	r0, ip, r5
 8007fa2:	280f      	cmp	r0, #15
 8007fa4:	dd48      	ble.n	8008038 <_malloc_r+0x118>
 8007fa6:	1963      	adds	r3, r4, r5
 8007fa8:	f045 0501 	orr.w	r5, r5, #1
 8007fac:	6065      	str	r5, [r4, #4]
 8007fae:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8007fb2:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8007fb6:	f040 0201 	orr.w	r2, r0, #1
 8007fba:	605a      	str	r2, [r3, #4]
 8007fbc:	f844 000c 	str.w	r0, [r4, ip]
 8007fc0:	e7df      	b.n	8007f82 <_malloc_r+0x62>
 8007fc2:	0a6b      	lsrs	r3, r5, #9
 8007fc4:	d02a      	beq.n	800801c <_malloc_r+0xfc>
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	d812      	bhi.n	8007ff0 <_malloc_r+0xd0>
 8007fca:	09ab      	lsrs	r3, r5, #6
 8007fcc:	3338      	adds	r3, #56	; 0x38
 8007fce:	1c5a      	adds	r2, r3, #1
 8007fd0:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8007fd4:	f1a2 0c08 	sub.w	ip, r2, #8
 8007fd8:	6854      	ldr	r4, [r2, #4]
 8007fda:	4564      	cmp	r4, ip
 8007fdc:	d006      	beq.n	8007fec <_malloc_r+0xcc>
 8007fde:	6862      	ldr	r2, [r4, #4]
 8007fe0:	f022 0203 	bic.w	r2, r2, #3
 8007fe4:	1b50      	subs	r0, r2, r5
 8007fe6:	280f      	cmp	r0, #15
 8007fe8:	dd1c      	ble.n	8008024 <_malloc_r+0x104>
 8007fea:	3b01      	subs	r3, #1
 8007fec:	3301      	adds	r3, #1
 8007fee:	e7ce      	b.n	8007f8e <_malloc_r+0x6e>
 8007ff0:	2b14      	cmp	r3, #20
 8007ff2:	d801      	bhi.n	8007ff8 <_malloc_r+0xd8>
 8007ff4:	335b      	adds	r3, #91	; 0x5b
 8007ff6:	e7ea      	b.n	8007fce <_malloc_r+0xae>
 8007ff8:	2b54      	cmp	r3, #84	; 0x54
 8007ffa:	d802      	bhi.n	8008002 <_malloc_r+0xe2>
 8007ffc:	0b2b      	lsrs	r3, r5, #12
 8007ffe:	336e      	adds	r3, #110	; 0x6e
 8008000:	e7e5      	b.n	8007fce <_malloc_r+0xae>
 8008002:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008006:	d802      	bhi.n	800800e <_malloc_r+0xee>
 8008008:	0beb      	lsrs	r3, r5, #15
 800800a:	3377      	adds	r3, #119	; 0x77
 800800c:	e7df      	b.n	8007fce <_malloc_r+0xae>
 800800e:	f240 5254 	movw	r2, #1364	; 0x554
 8008012:	4293      	cmp	r3, r2
 8008014:	d804      	bhi.n	8008020 <_malloc_r+0x100>
 8008016:	0cab      	lsrs	r3, r5, #18
 8008018:	337c      	adds	r3, #124	; 0x7c
 800801a:	e7d8      	b.n	8007fce <_malloc_r+0xae>
 800801c:	233f      	movs	r3, #63	; 0x3f
 800801e:	e7d6      	b.n	8007fce <_malloc_r+0xae>
 8008020:	237e      	movs	r3, #126	; 0x7e
 8008022:	e7d4      	b.n	8007fce <_malloc_r+0xae>
 8008024:	2800      	cmp	r0, #0
 8008026:	68e1      	ldr	r1, [r4, #12]
 8008028:	db04      	blt.n	8008034 <_malloc_r+0x114>
 800802a:	68a3      	ldr	r3, [r4, #8]
 800802c:	60d9      	str	r1, [r3, #12]
 800802e:	608b      	str	r3, [r1, #8]
 8008030:	18a3      	adds	r3, r4, r2
 8008032:	e7a2      	b.n	8007f7a <_malloc_r+0x5a>
 8008034:	460c      	mov	r4, r1
 8008036:	e7d0      	b.n	8007fda <_malloc_r+0xba>
 8008038:	2800      	cmp	r0, #0
 800803a:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800803e:	db07      	blt.n	8008050 <_malloc_r+0x130>
 8008040:	44a4      	add	ip, r4
 8008042:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008046:	f043 0301 	orr.w	r3, r3, #1
 800804a:	f8cc 3004 	str.w	r3, [ip, #4]
 800804e:	e798      	b.n	8007f82 <_malloc_r+0x62>
 8008050:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f080 8099 	bcs.w	800818c <_malloc_r+0x26c>
 800805a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800805e:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8008062:	2201      	movs	r2, #1
 8008064:	f10c 0c01 	add.w	ip, ip, #1
 8008068:	fa02 f20e 	lsl.w	r2, r2, lr
 800806c:	4310      	orrs	r0, r2
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8008074:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8008078:	3a08      	subs	r2, #8
 800807a:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800807e:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8008082:	60c4      	str	r4, [r0, #12]
 8008084:	2001      	movs	r0, #1
 8008086:	109a      	asrs	r2, r3, #2
 8008088:	fa00 f202 	lsl.w	r2, r0, r2
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	4290      	cmp	r0, r2
 8008090:	d326      	bcc.n	80080e0 <_malloc_r+0x1c0>
 8008092:	4210      	tst	r0, r2
 8008094:	d106      	bne.n	80080a4 <_malloc_r+0x184>
 8008096:	f023 0303 	bic.w	r3, r3, #3
 800809a:	0052      	lsls	r2, r2, #1
 800809c:	4210      	tst	r0, r2
 800809e:	f103 0304 	add.w	r3, r3, #4
 80080a2:	d0fa      	beq.n	800809a <_malloc_r+0x17a>
 80080a4:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 80080a8:	46e1      	mov	r9, ip
 80080aa:	4698      	mov	r8, r3
 80080ac:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80080b0:	454c      	cmp	r4, r9
 80080b2:	f040 80af 	bne.w	8008214 <_malloc_r+0x2f4>
 80080b6:	f108 0801 	add.w	r8, r8, #1
 80080ba:	f018 0f03 	tst.w	r8, #3
 80080be:	f109 0908 	add.w	r9, r9, #8
 80080c2:	d1f3      	bne.n	80080ac <_malloc_r+0x18c>
 80080c4:	0798      	lsls	r0, r3, #30
 80080c6:	f040 80e8 	bne.w	800829a <_malloc_r+0x37a>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	ea23 0302 	bic.w	r3, r3, r2
 80080d0:	607b      	str	r3, [r7, #4]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	0052      	lsls	r2, r2, #1
 80080d6:	4290      	cmp	r0, r2
 80080d8:	d302      	bcc.n	80080e0 <_malloc_r+0x1c0>
 80080da:	2a00      	cmp	r2, #0
 80080dc:	f040 80ec 	bne.w	80082b8 <_malloc_r+0x398>
 80080e0:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80080e4:	f8da 4004 	ldr.w	r4, [sl, #4]
 80080e8:	f024 0203 	bic.w	r2, r4, #3
 80080ec:	42aa      	cmp	r2, r5
 80080ee:	d303      	bcc.n	80080f8 <_malloc_r+0x1d8>
 80080f0:	1b53      	subs	r3, r2, r5
 80080f2:	2b0f      	cmp	r3, #15
 80080f4:	f300 8140 	bgt.w	8008378 <_malloc_r+0x458>
 80080f8:	4b57      	ldr	r3, [pc, #348]	; (8008258 <_malloc_r+0x338>)
 80080fa:	9200      	str	r2, [sp, #0]
 80080fc:	2008      	movs	r0, #8
 80080fe:	681c      	ldr	r4, [r3, #0]
 8008100:	f002 fa60 	bl	800a5c4 <sysconf>
 8008104:	4b55      	ldr	r3, [pc, #340]	; (800825c <_malloc_r+0x33c>)
 8008106:	9a00      	ldr	r2, [sp, #0]
 8008108:	6819      	ldr	r1, [r3, #0]
 800810a:	3410      	adds	r4, #16
 800810c:	3101      	adds	r1, #1
 800810e:	442c      	add	r4, r5
 8008110:	bf1f      	itttt	ne
 8008112:	f104 34ff 	addne.w	r4, r4, #4294967295
 8008116:	1824      	addne	r4, r4, r0
 8008118:	4241      	negne	r1, r0
 800811a:	400c      	andne	r4, r1
 800811c:	4680      	mov	r8, r0
 800811e:	4621      	mov	r1, r4
 8008120:	4630      	mov	r0, r6
 8008122:	e9cd 2300 	strd	r2, r3, [sp]
 8008126:	f000 f945 	bl	80083b4 <_sbrk_r>
 800812a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800812e:	4683      	mov	fp, r0
 8008130:	f000 80fb 	beq.w	800832a <_malloc_r+0x40a>
 8008134:	9a00      	ldr	r2, [sp, #0]
 8008136:	9b01      	ldr	r3, [sp, #4]
 8008138:	eb0a 0102 	add.w	r1, sl, r2
 800813c:	4281      	cmp	r1, r0
 800813e:	d902      	bls.n	8008146 <_malloc_r+0x226>
 8008140:	45ba      	cmp	sl, r7
 8008142:	f040 80f2 	bne.w	800832a <_malloc_r+0x40a>
 8008146:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8008268 <_malloc_r+0x348>
 800814a:	f8d9 0000 	ldr.w	r0, [r9]
 800814e:	4559      	cmp	r1, fp
 8008150:	eb00 0e04 	add.w	lr, r0, r4
 8008154:	f8c9 e000 	str.w	lr, [r9]
 8008158:	f108 3cff 	add.w	ip, r8, #4294967295
 800815c:	f040 80ae 	bne.w	80082bc <_malloc_r+0x39c>
 8008160:	ea11 0f0c 	tst.w	r1, ip
 8008164:	f040 80aa 	bne.w	80082bc <_malloc_r+0x39c>
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4414      	add	r4, r2
 800816c:	f044 0401 	orr.w	r4, r4, #1
 8008170:	605c      	str	r4, [r3, #4]
 8008172:	4a3b      	ldr	r2, [pc, #236]	; (8008260 <_malloc_r+0x340>)
 8008174:	f8d9 3000 	ldr.w	r3, [r9]
 8008178:	6811      	ldr	r1, [r2, #0]
 800817a:	428b      	cmp	r3, r1
 800817c:	bf88      	it	hi
 800817e:	6013      	strhi	r3, [r2, #0]
 8008180:	4a38      	ldr	r2, [pc, #224]	; (8008264 <_malloc_r+0x344>)
 8008182:	6811      	ldr	r1, [r2, #0]
 8008184:	428b      	cmp	r3, r1
 8008186:	bf88      	it	hi
 8008188:	6013      	strhi	r3, [r2, #0]
 800818a:	e0ce      	b.n	800832a <_malloc_r+0x40a>
 800818c:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8008190:	2a04      	cmp	r2, #4
 8008192:	d818      	bhi.n	80081c6 <_malloc_r+0x2a6>
 8008194:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8008198:	3238      	adds	r2, #56	; 0x38
 800819a:	f102 0e01 	add.w	lr, r2, #1
 800819e:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 80081a2:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 80081a6:	45f0      	cmp	r8, lr
 80081a8:	d12b      	bne.n	8008202 <_malloc_r+0x2e2>
 80081aa:	1092      	asrs	r2, r2, #2
 80081ac:	f04f 0c01 	mov.w	ip, #1
 80081b0:	fa0c f202 	lsl.w	r2, ip, r2
 80081b4:	4310      	orrs	r0, r2
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80081bc:	f8c8 4008 	str.w	r4, [r8, #8]
 80081c0:	f8ce 400c 	str.w	r4, [lr, #12]
 80081c4:	e75e      	b.n	8008084 <_malloc_r+0x164>
 80081c6:	2a14      	cmp	r2, #20
 80081c8:	d801      	bhi.n	80081ce <_malloc_r+0x2ae>
 80081ca:	325b      	adds	r2, #91	; 0x5b
 80081cc:	e7e5      	b.n	800819a <_malloc_r+0x27a>
 80081ce:	2a54      	cmp	r2, #84	; 0x54
 80081d0:	d803      	bhi.n	80081da <_malloc_r+0x2ba>
 80081d2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80081d6:	326e      	adds	r2, #110	; 0x6e
 80081d8:	e7df      	b.n	800819a <_malloc_r+0x27a>
 80081da:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80081de:	d803      	bhi.n	80081e8 <_malloc_r+0x2c8>
 80081e0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80081e4:	3277      	adds	r2, #119	; 0x77
 80081e6:	e7d8      	b.n	800819a <_malloc_r+0x27a>
 80081e8:	f240 5e54 	movw	lr, #1364	; 0x554
 80081ec:	4572      	cmp	r2, lr
 80081ee:	bf9a      	itte	ls
 80081f0:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80081f4:	327c      	addls	r2, #124	; 0x7c
 80081f6:	227e      	movhi	r2, #126	; 0x7e
 80081f8:	e7cf      	b.n	800819a <_malloc_r+0x27a>
 80081fa:	f8de e008 	ldr.w	lr, [lr, #8]
 80081fe:	45f0      	cmp	r8, lr
 8008200:	d005      	beq.n	800820e <_malloc_r+0x2ee>
 8008202:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008206:	f022 0203 	bic.w	r2, r2, #3
 800820a:	4562      	cmp	r2, ip
 800820c:	d8f5      	bhi.n	80081fa <_malloc_r+0x2da>
 800820e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8008212:	e7d1      	b.n	80081b8 <_malloc_r+0x298>
 8008214:	6860      	ldr	r0, [r4, #4]
 8008216:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800821a:	f020 0003 	bic.w	r0, r0, #3
 800821e:	eba0 0a05 	sub.w	sl, r0, r5
 8008222:	f1ba 0f0f 	cmp.w	sl, #15
 8008226:	dd21      	ble.n	800826c <_malloc_r+0x34c>
 8008228:	68a2      	ldr	r2, [r4, #8]
 800822a:	1963      	adds	r3, r4, r5
 800822c:	f045 0501 	orr.w	r5, r5, #1
 8008230:	6065      	str	r5, [r4, #4]
 8008232:	f8c2 e00c 	str.w	lr, [r2, #12]
 8008236:	f8ce 2008 	str.w	r2, [lr, #8]
 800823a:	f04a 0201 	orr.w	r2, sl, #1
 800823e:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8008242:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8008246:	605a      	str	r2, [r3, #4]
 8008248:	f844 a000 	str.w	sl, [r4, r0]
 800824c:	e699      	b.n	8007f82 <_malloc_r+0x62>
 800824e:	bf00      	nop
 8008250:	20000440 	.word	0x20000440
 8008254:	20000448 	.word	0x20000448
 8008258:	20000a14 	.word	0x20000a14
 800825c:	20000848 	.word	0x20000848
 8008260:	20000a0c 	.word	0x20000a0c
 8008264:	20000a10 	.word	0x20000a10
 8008268:	200009e4 	.word	0x200009e4
 800826c:	f1ba 0f00 	cmp.w	sl, #0
 8008270:	db11      	blt.n	8008296 <_malloc_r+0x376>
 8008272:	4420      	add	r0, r4
 8008274:	6843      	ldr	r3, [r0, #4]
 8008276:	f043 0301 	orr.w	r3, r3, #1
 800827a:	6043      	str	r3, [r0, #4]
 800827c:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8008280:	4630      	mov	r0, r6
 8008282:	f8c3 e00c 	str.w	lr, [r3, #12]
 8008286:	f8ce 3008 	str.w	r3, [lr, #8]
 800828a:	f000 f88d 	bl	80083a8 <__malloc_unlock>
 800828e:	4620      	mov	r0, r4
 8008290:	b003      	add	sp, #12
 8008292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008296:	4674      	mov	r4, lr
 8008298:	e70a      	b.n	80080b0 <_malloc_r+0x190>
 800829a:	f1ac 0008 	sub.w	r0, ip, #8
 800829e:	f8dc c000 	ldr.w	ip, [ip]
 80082a2:	4584      	cmp	ip, r0
 80082a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80082a8:	f43f af0c 	beq.w	80080c4 <_malloc_r+0x1a4>
 80082ac:	e711      	b.n	80080d2 <_malloc_r+0x1b2>
 80082ae:	3304      	adds	r3, #4
 80082b0:	0052      	lsls	r2, r2, #1
 80082b2:	4210      	tst	r0, r2
 80082b4:	d0fb      	beq.n	80082ae <_malloc_r+0x38e>
 80082b6:	e6f5      	b.n	80080a4 <_malloc_r+0x184>
 80082b8:	4643      	mov	r3, r8
 80082ba:	e7fa      	b.n	80082b2 <_malloc_r+0x392>
 80082bc:	6818      	ldr	r0, [r3, #0]
 80082be:	9200      	str	r2, [sp, #0]
 80082c0:	3001      	adds	r0, #1
 80082c2:	bf1b      	ittet	ne
 80082c4:	ebab 0101 	subne.w	r1, fp, r1
 80082c8:	4471      	addne	r1, lr
 80082ca:	f8c3 b000 	streq.w	fp, [r3]
 80082ce:	f8c9 1000 	strne.w	r1, [r9]
 80082d2:	f01b 0307 	ands.w	r3, fp, #7
 80082d6:	bf1c      	itt	ne
 80082d8:	f1c3 0308 	rsbne	r3, r3, #8
 80082dc:	449b      	addne	fp, r3
 80082de:	445c      	add	r4, fp
 80082e0:	4498      	add	r8, r3
 80082e2:	ea04 030c 	and.w	r3, r4, ip
 80082e6:	eba8 0803 	sub.w	r8, r8, r3
 80082ea:	4641      	mov	r1, r8
 80082ec:	4630      	mov	r0, r6
 80082ee:	f000 f861 	bl	80083b4 <_sbrk_r>
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	bf04      	itt	eq
 80082f6:	4658      	moveq	r0, fp
 80082f8:	f04f 0800 	moveq.w	r8, #0
 80082fc:	f8d9 3000 	ldr.w	r3, [r9]
 8008300:	f8c7 b008 	str.w	fp, [r7, #8]
 8008304:	eba0 000b 	sub.w	r0, r0, fp
 8008308:	4440      	add	r0, r8
 800830a:	4443      	add	r3, r8
 800830c:	f040 0001 	orr.w	r0, r0, #1
 8008310:	45ba      	cmp	sl, r7
 8008312:	9a00      	ldr	r2, [sp, #0]
 8008314:	f8c9 3000 	str.w	r3, [r9]
 8008318:	f8cb 0004 	str.w	r0, [fp, #4]
 800831c:	f43f af29 	beq.w	8008172 <_malloc_r+0x252>
 8008320:	2a0f      	cmp	r2, #15
 8008322:	d810      	bhi.n	8008346 <_malloc_r+0x426>
 8008324:	2301      	movs	r3, #1
 8008326:	f8cb 3004 	str.w	r3, [fp, #4]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	f022 0203 	bic.w	r2, r2, #3
 8008332:	42aa      	cmp	r2, r5
 8008334:	eba2 0305 	sub.w	r3, r2, r5
 8008338:	d301      	bcc.n	800833e <_malloc_r+0x41e>
 800833a:	2b0f      	cmp	r3, #15
 800833c:	dc1c      	bgt.n	8008378 <_malloc_r+0x458>
 800833e:	4630      	mov	r0, r6
 8008340:	f000 f832 	bl	80083a8 <__malloc_unlock>
 8008344:	e5f8      	b.n	8007f38 <_malloc_r+0x18>
 8008346:	f8da 3004 	ldr.w	r3, [sl, #4]
 800834a:	f1a2 040c 	sub.w	r4, r2, #12
 800834e:	f024 0407 	bic.w	r4, r4, #7
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	4323      	orrs	r3, r4
 8008358:	f8ca 3004 	str.w	r3, [sl, #4]
 800835c:	2205      	movs	r2, #5
 800835e:	eb0a 0304 	add.w	r3, sl, r4
 8008362:	2c0f      	cmp	r4, #15
 8008364:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8008368:	f67f af03 	bls.w	8008172 <_malloc_r+0x252>
 800836c:	f10a 0108 	add.w	r1, sl, #8
 8008370:	4630      	mov	r0, r6
 8008372:	f002 ffe7 	bl	800b344 <_free_r>
 8008376:	e6fc      	b.n	8008172 <_malloc_r+0x252>
 8008378:	68bc      	ldr	r4, [r7, #8]
 800837a:	f045 0201 	orr.w	r2, r5, #1
 800837e:	4425      	add	r5, r4
 8008380:	f043 0301 	orr.w	r3, r3, #1
 8008384:	6062      	str	r2, [r4, #4]
 8008386:	60bd      	str	r5, [r7, #8]
 8008388:	606b      	str	r3, [r5, #4]
 800838a:	e5fa      	b.n	8007f82 <_malloc_r+0x62>

0800838c <memset>:
 800838c:	4402      	add	r2, r0
 800838e:	4603      	mov	r3, r0
 8008390:	4293      	cmp	r3, r2
 8008392:	d100      	bne.n	8008396 <memset+0xa>
 8008394:	4770      	bx	lr
 8008396:	f803 1b01 	strb.w	r1, [r3], #1
 800839a:	e7f9      	b.n	8008390 <memset+0x4>

0800839c <__malloc_lock>:
 800839c:	4801      	ldr	r0, [pc, #4]	; (80083a4 <__malloc_lock+0x8>)
 800839e:	f003 bbc7 	b.w	800bb30 <__retarget_lock_acquire_recursive>
 80083a2:	bf00      	nop
 80083a4:	20000f98 	.word	0x20000f98

080083a8 <__malloc_unlock>:
 80083a8:	4801      	ldr	r0, [pc, #4]	; (80083b0 <__malloc_unlock+0x8>)
 80083aa:	f003 bbc2 	b.w	800bb32 <__retarget_lock_release_recursive>
 80083ae:	bf00      	nop
 80083b0:	20000f98 	.word	0x20000f98

080083b4 <_sbrk_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4c06      	ldr	r4, [pc, #24]	; (80083d0 <_sbrk_r+0x1c>)
 80083b8:	2300      	movs	r3, #0
 80083ba:	4605      	mov	r5, r0
 80083bc:	4608      	mov	r0, r1
 80083be:	6023      	str	r3, [r4, #0]
 80083c0:	f006 ff44 	bl	800f24c <_sbrk>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_sbrk_r+0x1a>
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_sbrk_r+0x1a>
 80083cc:	602b      	str	r3, [r5, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	20000fa0 	.word	0x20000fa0

080083d4 <sprintf>:
 80083d4:	b40e      	push	{r1, r2, r3}
 80083d6:	b500      	push	{lr}
 80083d8:	b09c      	sub	sp, #112	; 0x70
 80083da:	ab1d      	add	r3, sp, #116	; 0x74
 80083dc:	9002      	str	r0, [sp, #8]
 80083de:	9006      	str	r0, [sp, #24]
 80083e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083e4:	4809      	ldr	r0, [pc, #36]	; (800840c <sprintf+0x38>)
 80083e6:	9107      	str	r1, [sp, #28]
 80083e8:	9104      	str	r1, [sp, #16]
 80083ea:	4909      	ldr	r1, [pc, #36]	; (8008410 <sprintf+0x3c>)
 80083ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80083f0:	9105      	str	r1, [sp, #20]
 80083f2:	6800      	ldr	r0, [r0, #0]
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	a902      	add	r1, sp, #8
 80083f8:	f000 fec6 	bl	8009188 <_svfprintf_r>
 80083fc:	9b02      	ldr	r3, [sp, #8]
 80083fe:	2200      	movs	r2, #0
 8008400:	701a      	strb	r2, [r3, #0]
 8008402:	b01c      	add	sp, #112	; 0x70
 8008404:	f85d eb04 	ldr.w	lr, [sp], #4
 8008408:	b003      	add	sp, #12
 800840a:	4770      	bx	lr
 800840c:	20000010 	.word	0x20000010
 8008410:	ffff0208 	.word	0xffff0208

08008414 <sulp>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	4604      	mov	r4, r0
 8008418:	460d      	mov	r5, r1
 800841a:	ec45 4b10 	vmov	d0, r4, r5
 800841e:	4616      	mov	r6, r2
 8008420:	f003 fe46 	bl	800c0b0 <__ulp>
 8008424:	ec51 0b10 	vmov	r0, r1, d0
 8008428:	b17e      	cbz	r6, 800844a <sulp+0x36>
 800842a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800842e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008432:	2b00      	cmp	r3, #0
 8008434:	dd09      	ble.n	800844a <sulp+0x36>
 8008436:	051b      	lsls	r3, r3, #20
 8008438:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800843c:	2400      	movs	r4, #0
 800843e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008442:	4622      	mov	r2, r4
 8008444:	462b      	mov	r3, r5
 8008446:	f7f8 f8d7 	bl	80005f8 <__aeabi_dmul>
 800844a:	bd70      	pop	{r4, r5, r6, pc}
 800844c:	0000      	movs	r0, r0
	...

08008450 <_strtod_l>:
 8008450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008454:	461f      	mov	r7, r3
 8008456:	b0a1      	sub	sp, #132	; 0x84
 8008458:	2300      	movs	r3, #0
 800845a:	4681      	mov	r9, r0
 800845c:	4638      	mov	r0, r7
 800845e:	460e      	mov	r6, r1
 8008460:	9217      	str	r2, [sp, #92]	; 0x5c
 8008462:	931c      	str	r3, [sp, #112]	; 0x70
 8008464:	f003 fb53 	bl	800bb0e <__localeconv_l>
 8008468:	4680      	mov	r8, r0
 800846a:	6800      	ldr	r0, [r0, #0]
 800846c:	f7f7 feb0 	bl	80001d0 <strlen>
 8008470:	f04f 0a00 	mov.w	sl, #0
 8008474:	4604      	mov	r4, r0
 8008476:	f04f 0b00 	mov.w	fp, #0
 800847a:	961b      	str	r6, [sp, #108]	; 0x6c
 800847c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800847e:	781a      	ldrb	r2, [r3, #0]
 8008480:	2a0d      	cmp	r2, #13
 8008482:	d832      	bhi.n	80084ea <_strtod_l+0x9a>
 8008484:	2a09      	cmp	r2, #9
 8008486:	d236      	bcs.n	80084f6 <_strtod_l+0xa6>
 8008488:	2a00      	cmp	r2, #0
 800848a:	d03e      	beq.n	800850a <_strtod_l+0xba>
 800848c:	2300      	movs	r3, #0
 800848e:	930d      	str	r3, [sp, #52]	; 0x34
 8008490:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008492:	782b      	ldrb	r3, [r5, #0]
 8008494:	2b30      	cmp	r3, #48	; 0x30
 8008496:	f040 80ac 	bne.w	80085f2 <_strtod_l+0x1a2>
 800849a:	786b      	ldrb	r3, [r5, #1]
 800849c:	2b58      	cmp	r3, #88	; 0x58
 800849e:	d001      	beq.n	80084a4 <_strtod_l+0x54>
 80084a0:	2b78      	cmp	r3, #120	; 0x78
 80084a2:	d167      	bne.n	8008574 <_strtod_l+0x124>
 80084a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a6:	9301      	str	r3, [sp, #4]
 80084a8:	ab1c      	add	r3, sp, #112	; 0x70
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	9702      	str	r7, [sp, #8]
 80084ae:	ab1d      	add	r3, sp, #116	; 0x74
 80084b0:	4a88      	ldr	r2, [pc, #544]	; (80086d4 <_strtod_l+0x284>)
 80084b2:	a91b      	add	r1, sp, #108	; 0x6c
 80084b4:	4648      	mov	r0, r9
 80084b6:	f003 f850 	bl	800b55a <__gethex>
 80084ba:	f010 0407 	ands.w	r4, r0, #7
 80084be:	4606      	mov	r6, r0
 80084c0:	d005      	beq.n	80084ce <_strtod_l+0x7e>
 80084c2:	2c06      	cmp	r4, #6
 80084c4:	d12b      	bne.n	800851e <_strtod_l+0xce>
 80084c6:	3501      	adds	r5, #1
 80084c8:	2300      	movs	r3, #0
 80084ca:	951b      	str	r5, [sp, #108]	; 0x6c
 80084cc:	930d      	str	r3, [sp, #52]	; 0x34
 80084ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f040 859a 	bne.w	800900a <_strtod_l+0xbba>
 80084d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084d8:	b1e3      	cbz	r3, 8008514 <_strtod_l+0xc4>
 80084da:	4652      	mov	r2, sl
 80084dc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80084e0:	ec43 2b10 	vmov	d0, r2, r3
 80084e4:	b021      	add	sp, #132	; 0x84
 80084e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ea:	2a2b      	cmp	r2, #43	; 0x2b
 80084ec:	d015      	beq.n	800851a <_strtod_l+0xca>
 80084ee:	2a2d      	cmp	r2, #45	; 0x2d
 80084f0:	d004      	beq.n	80084fc <_strtod_l+0xac>
 80084f2:	2a20      	cmp	r2, #32
 80084f4:	d1ca      	bne.n	800848c <_strtod_l+0x3c>
 80084f6:	3301      	adds	r3, #1
 80084f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80084fa:	e7bf      	b.n	800847c <_strtod_l+0x2c>
 80084fc:	2201      	movs	r2, #1
 80084fe:	920d      	str	r2, [sp, #52]	; 0x34
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	921b      	str	r2, [sp, #108]	; 0x6c
 8008504:	785b      	ldrb	r3, [r3, #1]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1c2      	bne.n	8008490 <_strtod_l+0x40>
 800850a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800850c:	961b      	str	r6, [sp, #108]	; 0x6c
 800850e:	2b00      	cmp	r3, #0
 8008510:	f040 8579 	bne.w	8009006 <_strtod_l+0xbb6>
 8008514:	4652      	mov	r2, sl
 8008516:	465b      	mov	r3, fp
 8008518:	e7e2      	b.n	80084e0 <_strtod_l+0x90>
 800851a:	2200      	movs	r2, #0
 800851c:	e7ef      	b.n	80084fe <_strtod_l+0xae>
 800851e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008520:	b13a      	cbz	r2, 8008532 <_strtod_l+0xe2>
 8008522:	2135      	movs	r1, #53	; 0x35
 8008524:	a81e      	add	r0, sp, #120	; 0x78
 8008526:	f003 febb 	bl	800c2a0 <__copybits>
 800852a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800852c:	4648      	mov	r0, r9
 800852e:	f003 fb43 	bl	800bbb8 <_Bfree>
 8008532:	3c01      	subs	r4, #1
 8008534:	2c04      	cmp	r4, #4
 8008536:	d806      	bhi.n	8008546 <_strtod_l+0xf6>
 8008538:	e8df f004 	tbb	[pc, r4]
 800853c:	1714030a 	.word	0x1714030a
 8008540:	0a          	.byte	0x0a
 8008541:	00          	.byte	0x00
 8008542:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008546:	0730      	lsls	r0, r6, #28
 8008548:	d5c1      	bpl.n	80084ce <_strtod_l+0x7e>
 800854a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800854e:	e7be      	b.n	80084ce <_strtod_l+0x7e>
 8008550:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008554:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008556:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800855a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800855e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008562:	e7f0      	b.n	8008546 <_strtod_l+0xf6>
 8008564:	f8df b170 	ldr.w	fp, [pc, #368]	; 80086d8 <_strtod_l+0x288>
 8008568:	e7ed      	b.n	8008546 <_strtod_l+0xf6>
 800856a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800856e:	f04f 3aff 	mov.w	sl, #4294967295
 8008572:	e7e8      	b.n	8008546 <_strtod_l+0xf6>
 8008574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	921b      	str	r2, [sp, #108]	; 0x6c
 800857a:	785b      	ldrb	r3, [r3, #1]
 800857c:	2b30      	cmp	r3, #48	; 0x30
 800857e:	d0f9      	beq.n	8008574 <_strtod_l+0x124>
 8008580:	2b00      	cmp	r3, #0
 8008582:	d0a4      	beq.n	80084ce <_strtod_l+0x7e>
 8008584:	2301      	movs	r3, #1
 8008586:	2500      	movs	r5, #0
 8008588:	9306      	str	r3, [sp, #24]
 800858a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800858c:	9308      	str	r3, [sp, #32]
 800858e:	9507      	str	r5, [sp, #28]
 8008590:	9505      	str	r5, [sp, #20]
 8008592:	220a      	movs	r2, #10
 8008594:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008596:	7807      	ldrb	r7, [r0, #0]
 8008598:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800859c:	b2d9      	uxtb	r1, r3
 800859e:	2909      	cmp	r1, #9
 80085a0:	d929      	bls.n	80085f6 <_strtod_l+0x1a6>
 80085a2:	4622      	mov	r2, r4
 80085a4:	f8d8 1000 	ldr.w	r1, [r8]
 80085a8:	f003 feec 	bl	800c384 <strncmp>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d031      	beq.n	8008614 <_strtod_l+0x1c4>
 80085b0:	2000      	movs	r0, #0
 80085b2:	9c05      	ldr	r4, [sp, #20]
 80085b4:	9004      	str	r0, [sp, #16]
 80085b6:	463b      	mov	r3, r7
 80085b8:	4602      	mov	r2, r0
 80085ba:	2b65      	cmp	r3, #101	; 0x65
 80085bc:	d001      	beq.n	80085c2 <_strtod_l+0x172>
 80085be:	2b45      	cmp	r3, #69	; 0x45
 80085c0:	d114      	bne.n	80085ec <_strtod_l+0x19c>
 80085c2:	b924      	cbnz	r4, 80085ce <_strtod_l+0x17e>
 80085c4:	b910      	cbnz	r0, 80085cc <_strtod_l+0x17c>
 80085c6:	9b06      	ldr	r3, [sp, #24]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d09e      	beq.n	800850a <_strtod_l+0xba>
 80085cc:	2400      	movs	r4, #0
 80085ce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80085d0:	1c73      	adds	r3, r6, #1
 80085d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80085d4:	7873      	ldrb	r3, [r6, #1]
 80085d6:	2b2b      	cmp	r3, #43	; 0x2b
 80085d8:	d078      	beq.n	80086cc <_strtod_l+0x27c>
 80085da:	2b2d      	cmp	r3, #45	; 0x2d
 80085dc:	d070      	beq.n	80086c0 <_strtod_l+0x270>
 80085de:	f04f 0c00 	mov.w	ip, #0
 80085e2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80085e6:	2f09      	cmp	r7, #9
 80085e8:	d97c      	bls.n	80086e4 <_strtod_l+0x294>
 80085ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80085ec:	f04f 0e00 	mov.w	lr, #0
 80085f0:	e09a      	b.n	8008728 <_strtod_l+0x2d8>
 80085f2:	2300      	movs	r3, #0
 80085f4:	e7c7      	b.n	8008586 <_strtod_l+0x136>
 80085f6:	9905      	ldr	r1, [sp, #20]
 80085f8:	2908      	cmp	r1, #8
 80085fa:	bfdd      	ittte	le
 80085fc:	9907      	ldrle	r1, [sp, #28]
 80085fe:	fb02 3301 	mlale	r3, r2, r1, r3
 8008602:	9307      	strle	r3, [sp, #28]
 8008604:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008608:	9b05      	ldr	r3, [sp, #20]
 800860a:	3001      	adds	r0, #1
 800860c:	3301      	adds	r3, #1
 800860e:	9305      	str	r3, [sp, #20]
 8008610:	901b      	str	r0, [sp, #108]	; 0x6c
 8008612:	e7bf      	b.n	8008594 <_strtod_l+0x144>
 8008614:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008616:	191a      	adds	r2, r3, r4
 8008618:	921b      	str	r2, [sp, #108]	; 0x6c
 800861a:	9a05      	ldr	r2, [sp, #20]
 800861c:	5d1b      	ldrb	r3, [r3, r4]
 800861e:	2a00      	cmp	r2, #0
 8008620:	d037      	beq.n	8008692 <_strtod_l+0x242>
 8008622:	9c05      	ldr	r4, [sp, #20]
 8008624:	4602      	mov	r2, r0
 8008626:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800862a:	2909      	cmp	r1, #9
 800862c:	d913      	bls.n	8008656 <_strtod_l+0x206>
 800862e:	2101      	movs	r1, #1
 8008630:	9104      	str	r1, [sp, #16]
 8008632:	e7c2      	b.n	80085ba <_strtod_l+0x16a>
 8008634:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	921b      	str	r2, [sp, #108]	; 0x6c
 800863a:	785b      	ldrb	r3, [r3, #1]
 800863c:	3001      	adds	r0, #1
 800863e:	2b30      	cmp	r3, #48	; 0x30
 8008640:	d0f8      	beq.n	8008634 <_strtod_l+0x1e4>
 8008642:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008646:	2a08      	cmp	r2, #8
 8008648:	f200 84e4 	bhi.w	8009014 <_strtod_l+0xbc4>
 800864c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800864e:	9208      	str	r2, [sp, #32]
 8008650:	4602      	mov	r2, r0
 8008652:	2000      	movs	r0, #0
 8008654:	4604      	mov	r4, r0
 8008656:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800865a:	f100 0101 	add.w	r1, r0, #1
 800865e:	d012      	beq.n	8008686 <_strtod_l+0x236>
 8008660:	440a      	add	r2, r1
 8008662:	eb00 0c04 	add.w	ip, r0, r4
 8008666:	4621      	mov	r1, r4
 8008668:	270a      	movs	r7, #10
 800866a:	458c      	cmp	ip, r1
 800866c:	d113      	bne.n	8008696 <_strtod_l+0x246>
 800866e:	1821      	adds	r1, r4, r0
 8008670:	2908      	cmp	r1, #8
 8008672:	f104 0401 	add.w	r4, r4, #1
 8008676:	4404      	add	r4, r0
 8008678:	dc19      	bgt.n	80086ae <_strtod_l+0x25e>
 800867a:	9b07      	ldr	r3, [sp, #28]
 800867c:	210a      	movs	r1, #10
 800867e:	fb01 e303 	mla	r3, r1, r3, lr
 8008682:	9307      	str	r3, [sp, #28]
 8008684:	2100      	movs	r1, #0
 8008686:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008688:	1c58      	adds	r0, r3, #1
 800868a:	901b      	str	r0, [sp, #108]	; 0x6c
 800868c:	785b      	ldrb	r3, [r3, #1]
 800868e:	4608      	mov	r0, r1
 8008690:	e7c9      	b.n	8008626 <_strtod_l+0x1d6>
 8008692:	9805      	ldr	r0, [sp, #20]
 8008694:	e7d3      	b.n	800863e <_strtod_l+0x1ee>
 8008696:	2908      	cmp	r1, #8
 8008698:	f101 0101 	add.w	r1, r1, #1
 800869c:	dc03      	bgt.n	80086a6 <_strtod_l+0x256>
 800869e:	9b07      	ldr	r3, [sp, #28]
 80086a0:	437b      	muls	r3, r7
 80086a2:	9307      	str	r3, [sp, #28]
 80086a4:	e7e1      	b.n	800866a <_strtod_l+0x21a>
 80086a6:	2910      	cmp	r1, #16
 80086a8:	bfd8      	it	le
 80086aa:	437d      	mulle	r5, r7
 80086ac:	e7dd      	b.n	800866a <_strtod_l+0x21a>
 80086ae:	2c10      	cmp	r4, #16
 80086b0:	bfdc      	itt	le
 80086b2:	210a      	movle	r1, #10
 80086b4:	fb01 e505 	mlale	r5, r1, r5, lr
 80086b8:	e7e4      	b.n	8008684 <_strtod_l+0x234>
 80086ba:	2301      	movs	r3, #1
 80086bc:	9304      	str	r3, [sp, #16]
 80086be:	e781      	b.n	80085c4 <_strtod_l+0x174>
 80086c0:	f04f 0c01 	mov.w	ip, #1
 80086c4:	1cb3      	adds	r3, r6, #2
 80086c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80086c8:	78b3      	ldrb	r3, [r6, #2]
 80086ca:	e78a      	b.n	80085e2 <_strtod_l+0x192>
 80086cc:	f04f 0c00 	mov.w	ip, #0
 80086d0:	e7f8      	b.n	80086c4 <_strtod_l+0x274>
 80086d2:	bf00      	nop
 80086d4:	0800f320 	.word	0x0800f320
 80086d8:	7ff00000 	.word	0x7ff00000
 80086dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086de:	1c5f      	adds	r7, r3, #1
 80086e0:	971b      	str	r7, [sp, #108]	; 0x6c
 80086e2:	785b      	ldrb	r3, [r3, #1]
 80086e4:	2b30      	cmp	r3, #48	; 0x30
 80086e6:	d0f9      	beq.n	80086dc <_strtod_l+0x28c>
 80086e8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80086ec:	2f08      	cmp	r7, #8
 80086ee:	f63f af7d 	bhi.w	80085ec <_strtod_l+0x19c>
 80086f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80086f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086f8:	930a      	str	r3, [sp, #40]	; 0x28
 80086fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086fc:	1c5f      	adds	r7, r3, #1
 80086fe:	971b      	str	r7, [sp, #108]	; 0x6c
 8008700:	785b      	ldrb	r3, [r3, #1]
 8008702:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008706:	f1b8 0f09 	cmp.w	r8, #9
 800870a:	d937      	bls.n	800877c <_strtod_l+0x32c>
 800870c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800870e:	1a7f      	subs	r7, r7, r1
 8008710:	2f08      	cmp	r7, #8
 8008712:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008716:	dc37      	bgt.n	8008788 <_strtod_l+0x338>
 8008718:	45be      	cmp	lr, r7
 800871a:	bfa8      	it	ge
 800871c:	46be      	movge	lr, r7
 800871e:	f1bc 0f00 	cmp.w	ip, #0
 8008722:	d001      	beq.n	8008728 <_strtod_l+0x2d8>
 8008724:	f1ce 0e00 	rsb	lr, lr, #0
 8008728:	2c00      	cmp	r4, #0
 800872a:	d151      	bne.n	80087d0 <_strtod_l+0x380>
 800872c:	2800      	cmp	r0, #0
 800872e:	f47f aece 	bne.w	80084ce <_strtod_l+0x7e>
 8008732:	9a06      	ldr	r2, [sp, #24]
 8008734:	2a00      	cmp	r2, #0
 8008736:	f47f aeca 	bne.w	80084ce <_strtod_l+0x7e>
 800873a:	9a04      	ldr	r2, [sp, #16]
 800873c:	2a00      	cmp	r2, #0
 800873e:	f47f aee4 	bne.w	800850a <_strtod_l+0xba>
 8008742:	2b4e      	cmp	r3, #78	; 0x4e
 8008744:	d027      	beq.n	8008796 <_strtod_l+0x346>
 8008746:	dc21      	bgt.n	800878c <_strtod_l+0x33c>
 8008748:	2b49      	cmp	r3, #73	; 0x49
 800874a:	f47f aede 	bne.w	800850a <_strtod_l+0xba>
 800874e:	49a0      	ldr	r1, [pc, #640]	; (80089d0 <_strtod_l+0x580>)
 8008750:	a81b      	add	r0, sp, #108	; 0x6c
 8008752:	f003 f935 	bl	800b9c0 <__match>
 8008756:	2800      	cmp	r0, #0
 8008758:	f43f aed7 	beq.w	800850a <_strtod_l+0xba>
 800875c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800875e:	499d      	ldr	r1, [pc, #628]	; (80089d4 <_strtod_l+0x584>)
 8008760:	3b01      	subs	r3, #1
 8008762:	a81b      	add	r0, sp, #108	; 0x6c
 8008764:	931b      	str	r3, [sp, #108]	; 0x6c
 8008766:	f003 f92b 	bl	800b9c0 <__match>
 800876a:	b910      	cbnz	r0, 8008772 <_strtod_l+0x322>
 800876c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800876e:	3301      	adds	r3, #1
 8008770:	931b      	str	r3, [sp, #108]	; 0x6c
 8008772:	f8df b274 	ldr.w	fp, [pc, #628]	; 80089e8 <_strtod_l+0x598>
 8008776:	f04f 0a00 	mov.w	sl, #0
 800877a:	e6a8      	b.n	80084ce <_strtod_l+0x7e>
 800877c:	210a      	movs	r1, #10
 800877e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008782:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008786:	e7b8      	b.n	80086fa <_strtod_l+0x2aa>
 8008788:	46be      	mov	lr, r7
 800878a:	e7c8      	b.n	800871e <_strtod_l+0x2ce>
 800878c:	2b69      	cmp	r3, #105	; 0x69
 800878e:	d0de      	beq.n	800874e <_strtod_l+0x2fe>
 8008790:	2b6e      	cmp	r3, #110	; 0x6e
 8008792:	f47f aeba 	bne.w	800850a <_strtod_l+0xba>
 8008796:	4990      	ldr	r1, [pc, #576]	; (80089d8 <_strtod_l+0x588>)
 8008798:	a81b      	add	r0, sp, #108	; 0x6c
 800879a:	f003 f911 	bl	800b9c0 <__match>
 800879e:	2800      	cmp	r0, #0
 80087a0:	f43f aeb3 	beq.w	800850a <_strtod_l+0xba>
 80087a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2b28      	cmp	r3, #40	; 0x28
 80087aa:	d10e      	bne.n	80087ca <_strtod_l+0x37a>
 80087ac:	aa1e      	add	r2, sp, #120	; 0x78
 80087ae:	498b      	ldr	r1, [pc, #556]	; (80089dc <_strtod_l+0x58c>)
 80087b0:	a81b      	add	r0, sp, #108	; 0x6c
 80087b2:	f003 f919 	bl	800b9e8 <__hexnan>
 80087b6:	2805      	cmp	r0, #5
 80087b8:	d107      	bne.n	80087ca <_strtod_l+0x37a>
 80087ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80087bc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80087c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80087c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80087c8:	e681      	b.n	80084ce <_strtod_l+0x7e>
 80087ca:	f8df b224 	ldr.w	fp, [pc, #548]	; 80089f0 <_strtod_l+0x5a0>
 80087ce:	e7d2      	b.n	8008776 <_strtod_l+0x326>
 80087d0:	ebae 0302 	sub.w	r3, lr, r2
 80087d4:	9306      	str	r3, [sp, #24]
 80087d6:	9b05      	ldr	r3, [sp, #20]
 80087d8:	9807      	ldr	r0, [sp, #28]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	bf08      	it	eq
 80087de:	4623      	moveq	r3, r4
 80087e0:	2c10      	cmp	r4, #16
 80087e2:	9305      	str	r3, [sp, #20]
 80087e4:	46a0      	mov	r8, r4
 80087e6:	bfa8      	it	ge
 80087e8:	f04f 0810 	movge.w	r8, #16
 80087ec:	f7f7 fe8a 	bl	8000504 <__aeabi_ui2d>
 80087f0:	2c09      	cmp	r4, #9
 80087f2:	4682      	mov	sl, r0
 80087f4:	468b      	mov	fp, r1
 80087f6:	dc13      	bgt.n	8008820 <_strtod_l+0x3d0>
 80087f8:	9b06      	ldr	r3, [sp, #24]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f43f ae67 	beq.w	80084ce <_strtod_l+0x7e>
 8008800:	9b06      	ldr	r3, [sp, #24]
 8008802:	dd7a      	ble.n	80088fa <_strtod_l+0x4aa>
 8008804:	2b16      	cmp	r3, #22
 8008806:	dc61      	bgt.n	80088cc <_strtod_l+0x47c>
 8008808:	4a75      	ldr	r2, [pc, #468]	; (80089e0 <_strtod_l+0x590>)
 800880a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800880e:	e9de 0100 	ldrd	r0, r1, [lr]
 8008812:	4652      	mov	r2, sl
 8008814:	465b      	mov	r3, fp
 8008816:	f7f7 feef 	bl	80005f8 <__aeabi_dmul>
 800881a:	4682      	mov	sl, r0
 800881c:	468b      	mov	fp, r1
 800881e:	e656      	b.n	80084ce <_strtod_l+0x7e>
 8008820:	4b6f      	ldr	r3, [pc, #444]	; (80089e0 <_strtod_l+0x590>)
 8008822:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008826:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800882a:	f7f7 fee5 	bl	80005f8 <__aeabi_dmul>
 800882e:	4606      	mov	r6, r0
 8008830:	4628      	mov	r0, r5
 8008832:	460f      	mov	r7, r1
 8008834:	f7f7 fe66 	bl	8000504 <__aeabi_ui2d>
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	4630      	mov	r0, r6
 800883e:	4639      	mov	r1, r7
 8008840:	f7f7 fd24 	bl	800028c <__adddf3>
 8008844:	2c0f      	cmp	r4, #15
 8008846:	4682      	mov	sl, r0
 8008848:	468b      	mov	fp, r1
 800884a:	ddd5      	ble.n	80087f8 <_strtod_l+0x3a8>
 800884c:	9b06      	ldr	r3, [sp, #24]
 800884e:	eba4 0808 	sub.w	r8, r4, r8
 8008852:	4498      	add	r8, r3
 8008854:	f1b8 0f00 	cmp.w	r8, #0
 8008858:	f340 8096 	ble.w	8008988 <_strtod_l+0x538>
 800885c:	f018 030f 	ands.w	r3, r8, #15
 8008860:	d00a      	beq.n	8008878 <_strtod_l+0x428>
 8008862:	495f      	ldr	r1, [pc, #380]	; (80089e0 <_strtod_l+0x590>)
 8008864:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008868:	4652      	mov	r2, sl
 800886a:	465b      	mov	r3, fp
 800886c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008870:	f7f7 fec2 	bl	80005f8 <__aeabi_dmul>
 8008874:	4682      	mov	sl, r0
 8008876:	468b      	mov	fp, r1
 8008878:	f038 080f 	bics.w	r8, r8, #15
 800887c:	d073      	beq.n	8008966 <_strtod_l+0x516>
 800887e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008882:	dd47      	ble.n	8008914 <_strtod_l+0x4c4>
 8008884:	2400      	movs	r4, #0
 8008886:	46a0      	mov	r8, r4
 8008888:	9407      	str	r4, [sp, #28]
 800888a:	9405      	str	r4, [sp, #20]
 800888c:	2322      	movs	r3, #34	; 0x22
 800888e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80089e8 <_strtod_l+0x598>
 8008892:	f8c9 3000 	str.w	r3, [r9]
 8008896:	f04f 0a00 	mov.w	sl, #0
 800889a:	9b07      	ldr	r3, [sp, #28]
 800889c:	2b00      	cmp	r3, #0
 800889e:	f43f ae16 	beq.w	80084ce <_strtod_l+0x7e>
 80088a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80088a4:	4648      	mov	r0, r9
 80088a6:	f003 f987 	bl	800bbb8 <_Bfree>
 80088aa:	9905      	ldr	r1, [sp, #20]
 80088ac:	4648      	mov	r0, r9
 80088ae:	f003 f983 	bl	800bbb8 <_Bfree>
 80088b2:	4641      	mov	r1, r8
 80088b4:	4648      	mov	r0, r9
 80088b6:	f003 f97f 	bl	800bbb8 <_Bfree>
 80088ba:	9907      	ldr	r1, [sp, #28]
 80088bc:	4648      	mov	r0, r9
 80088be:	f003 f97b 	bl	800bbb8 <_Bfree>
 80088c2:	4621      	mov	r1, r4
 80088c4:	4648      	mov	r0, r9
 80088c6:	f003 f977 	bl	800bbb8 <_Bfree>
 80088ca:	e600      	b.n	80084ce <_strtod_l+0x7e>
 80088cc:	9a06      	ldr	r2, [sp, #24]
 80088ce:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80088d2:	4293      	cmp	r3, r2
 80088d4:	dbba      	blt.n	800884c <_strtod_l+0x3fc>
 80088d6:	4d42      	ldr	r5, [pc, #264]	; (80089e0 <_strtod_l+0x590>)
 80088d8:	f1c4 040f 	rsb	r4, r4, #15
 80088dc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80088e0:	4652      	mov	r2, sl
 80088e2:	465b      	mov	r3, fp
 80088e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088e8:	f7f7 fe86 	bl	80005f8 <__aeabi_dmul>
 80088ec:	9b06      	ldr	r3, [sp, #24]
 80088ee:	1b1c      	subs	r4, r3, r4
 80088f0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80088f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088f8:	e78d      	b.n	8008816 <_strtod_l+0x3c6>
 80088fa:	f113 0f16 	cmn.w	r3, #22
 80088fe:	dba5      	blt.n	800884c <_strtod_l+0x3fc>
 8008900:	4a37      	ldr	r2, [pc, #220]	; (80089e0 <_strtod_l+0x590>)
 8008902:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008906:	e9d2 2300 	ldrd	r2, r3, [r2]
 800890a:	4650      	mov	r0, sl
 800890c:	4659      	mov	r1, fp
 800890e:	f7f7 ff9d 	bl	800084c <__aeabi_ddiv>
 8008912:	e782      	b.n	800881a <_strtod_l+0x3ca>
 8008914:	2300      	movs	r3, #0
 8008916:	4e33      	ldr	r6, [pc, #204]	; (80089e4 <_strtod_l+0x594>)
 8008918:	ea4f 1828 	mov.w	r8, r8, asr #4
 800891c:	4650      	mov	r0, sl
 800891e:	4659      	mov	r1, fp
 8008920:	461d      	mov	r5, r3
 8008922:	f1b8 0f01 	cmp.w	r8, #1
 8008926:	dc21      	bgt.n	800896c <_strtod_l+0x51c>
 8008928:	b10b      	cbz	r3, 800892e <_strtod_l+0x4de>
 800892a:	4682      	mov	sl, r0
 800892c:	468b      	mov	fp, r1
 800892e:	4b2d      	ldr	r3, [pc, #180]	; (80089e4 <_strtod_l+0x594>)
 8008930:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008934:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008938:	4652      	mov	r2, sl
 800893a:	465b      	mov	r3, fp
 800893c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008940:	f7f7 fe5a 	bl	80005f8 <__aeabi_dmul>
 8008944:	4b28      	ldr	r3, [pc, #160]	; (80089e8 <_strtod_l+0x598>)
 8008946:	460a      	mov	r2, r1
 8008948:	400b      	ands	r3, r1
 800894a:	4928      	ldr	r1, [pc, #160]	; (80089ec <_strtod_l+0x59c>)
 800894c:	428b      	cmp	r3, r1
 800894e:	4682      	mov	sl, r0
 8008950:	d898      	bhi.n	8008884 <_strtod_l+0x434>
 8008952:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008956:	428b      	cmp	r3, r1
 8008958:	bf86      	itte	hi
 800895a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80089f4 <_strtod_l+0x5a4>
 800895e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008962:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008966:	2300      	movs	r3, #0
 8008968:	9304      	str	r3, [sp, #16]
 800896a:	e077      	b.n	8008a5c <_strtod_l+0x60c>
 800896c:	f018 0f01 	tst.w	r8, #1
 8008970:	d006      	beq.n	8008980 <_strtod_l+0x530>
 8008972:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897a:	f7f7 fe3d 	bl	80005f8 <__aeabi_dmul>
 800897e:	2301      	movs	r3, #1
 8008980:	3501      	adds	r5, #1
 8008982:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008986:	e7cc      	b.n	8008922 <_strtod_l+0x4d2>
 8008988:	d0ed      	beq.n	8008966 <_strtod_l+0x516>
 800898a:	f1c8 0800 	rsb	r8, r8, #0
 800898e:	f018 020f 	ands.w	r2, r8, #15
 8008992:	d00a      	beq.n	80089aa <_strtod_l+0x55a>
 8008994:	4b12      	ldr	r3, [pc, #72]	; (80089e0 <_strtod_l+0x590>)
 8008996:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800899a:	4650      	mov	r0, sl
 800899c:	4659      	mov	r1, fp
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	f7f7 ff53 	bl	800084c <__aeabi_ddiv>
 80089a6:	4682      	mov	sl, r0
 80089a8:	468b      	mov	fp, r1
 80089aa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80089ae:	d0da      	beq.n	8008966 <_strtod_l+0x516>
 80089b0:	f1b8 0f1f 	cmp.w	r8, #31
 80089b4:	dd20      	ble.n	80089f8 <_strtod_l+0x5a8>
 80089b6:	2400      	movs	r4, #0
 80089b8:	46a0      	mov	r8, r4
 80089ba:	9407      	str	r4, [sp, #28]
 80089bc:	9405      	str	r4, [sp, #20]
 80089be:	2322      	movs	r3, #34	; 0x22
 80089c0:	f04f 0a00 	mov.w	sl, #0
 80089c4:	f04f 0b00 	mov.w	fp, #0
 80089c8:	f8c9 3000 	str.w	r3, [r9]
 80089cc:	e765      	b.n	800889a <_strtod_l+0x44a>
 80089ce:	bf00      	nop
 80089d0:	0800f375 	.word	0x0800f375
 80089d4:	0800f3c7 	.word	0x0800f3c7
 80089d8:	0800f37d 	.word	0x0800f37d
 80089dc:	0800f334 	.word	0x0800f334
 80089e0:	0800f408 	.word	0x0800f408
 80089e4:	0800f3e0 	.word	0x0800f3e0
 80089e8:	7ff00000 	.word	0x7ff00000
 80089ec:	7ca00000 	.word	0x7ca00000
 80089f0:	fff80000 	.word	0xfff80000
 80089f4:	7fefffff 	.word	0x7fefffff
 80089f8:	f018 0310 	ands.w	r3, r8, #16
 80089fc:	bf18      	it	ne
 80089fe:	236a      	movne	r3, #106	; 0x6a
 8008a00:	4da0      	ldr	r5, [pc, #640]	; (8008c84 <_strtod_l+0x834>)
 8008a02:	9304      	str	r3, [sp, #16]
 8008a04:	4650      	mov	r0, sl
 8008a06:	4659      	mov	r1, fp
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f1b8 0f00 	cmp.w	r8, #0
 8008a0e:	f300 810a 	bgt.w	8008c26 <_strtod_l+0x7d6>
 8008a12:	b10b      	cbz	r3, 8008a18 <_strtod_l+0x5c8>
 8008a14:	4682      	mov	sl, r0
 8008a16:	468b      	mov	fp, r1
 8008a18:	9b04      	ldr	r3, [sp, #16]
 8008a1a:	b1bb      	cbz	r3, 8008a4c <_strtod_l+0x5fc>
 8008a1c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008a20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	4659      	mov	r1, fp
 8008a28:	dd10      	ble.n	8008a4c <_strtod_l+0x5fc>
 8008a2a:	2b1f      	cmp	r3, #31
 8008a2c:	f340 8107 	ble.w	8008c3e <_strtod_l+0x7ee>
 8008a30:	2b34      	cmp	r3, #52	; 0x34
 8008a32:	bfde      	ittt	le
 8008a34:	3b20      	suble	r3, #32
 8008a36:	f04f 32ff 	movle.w	r2, #4294967295
 8008a3a:	fa02 f303 	lslle.w	r3, r2, r3
 8008a3e:	f04f 0a00 	mov.w	sl, #0
 8008a42:	bfcc      	ite	gt
 8008a44:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008a48:	ea03 0b01 	andle.w	fp, r3, r1
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2300      	movs	r3, #0
 8008a50:	4650      	mov	r0, sl
 8008a52:	4659      	mov	r1, fp
 8008a54:	f7f8 f838 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d1ac      	bne.n	80089b6 <_strtod_l+0x566>
 8008a5c:	9b07      	ldr	r3, [sp, #28]
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	9a05      	ldr	r2, [sp, #20]
 8008a62:	9908      	ldr	r1, [sp, #32]
 8008a64:	4623      	mov	r3, r4
 8008a66:	4648      	mov	r0, r9
 8008a68:	f003 f8ea 	bl	800bc40 <__s2b>
 8008a6c:	9007      	str	r0, [sp, #28]
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	f43f af08 	beq.w	8008884 <_strtod_l+0x434>
 8008a74:	9a06      	ldr	r2, [sp, #24]
 8008a76:	9b06      	ldr	r3, [sp, #24]
 8008a78:	2a00      	cmp	r2, #0
 8008a7a:	f1c3 0300 	rsb	r3, r3, #0
 8008a7e:	bfa8      	it	ge
 8008a80:	2300      	movge	r3, #0
 8008a82:	930e      	str	r3, [sp, #56]	; 0x38
 8008a84:	2400      	movs	r4, #0
 8008a86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008a8a:	9316      	str	r3, [sp, #88]	; 0x58
 8008a8c:	46a0      	mov	r8, r4
 8008a8e:	9b07      	ldr	r3, [sp, #28]
 8008a90:	4648      	mov	r0, r9
 8008a92:	6859      	ldr	r1, [r3, #4]
 8008a94:	f003 f86b 	bl	800bb6e <_Balloc>
 8008a98:	9005      	str	r0, [sp, #20]
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	f43f aef6 	beq.w	800888c <_strtod_l+0x43c>
 8008aa0:	9b07      	ldr	r3, [sp, #28]
 8008aa2:	691a      	ldr	r2, [r3, #16]
 8008aa4:	3202      	adds	r2, #2
 8008aa6:	f103 010c 	add.w	r1, r3, #12
 8008aaa:	0092      	lsls	r2, r2, #2
 8008aac:	300c      	adds	r0, #12
 8008aae:	f003 f853 	bl	800bb58 <memcpy>
 8008ab2:	aa1e      	add	r2, sp, #120	; 0x78
 8008ab4:	a91d      	add	r1, sp, #116	; 0x74
 8008ab6:	ec4b ab10 	vmov	d0, sl, fp
 8008aba:	4648      	mov	r0, r9
 8008abc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008ac0:	f003 fb6c 	bl	800c19c <__d2b>
 8008ac4:	901c      	str	r0, [sp, #112]	; 0x70
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	f43f aee0 	beq.w	800888c <_strtod_l+0x43c>
 8008acc:	2101      	movs	r1, #1
 8008ace:	4648      	mov	r0, r9
 8008ad0:	f003 f942 	bl	800bd58 <__i2b>
 8008ad4:	4680      	mov	r8, r0
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	f43f aed8 	beq.w	800888c <_strtod_l+0x43c>
 8008adc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008ade:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008ae0:	2e00      	cmp	r6, #0
 8008ae2:	bfab      	itete	ge
 8008ae4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008ae6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008ae8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008aea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008aec:	bfac      	ite	ge
 8008aee:	18f7      	addge	r7, r6, r3
 8008af0:	1b9d      	sublt	r5, r3, r6
 8008af2:	9b04      	ldr	r3, [sp, #16]
 8008af4:	1af6      	subs	r6, r6, r3
 8008af6:	4416      	add	r6, r2
 8008af8:	4b63      	ldr	r3, [pc, #396]	; (8008c88 <_strtod_l+0x838>)
 8008afa:	3e01      	subs	r6, #1
 8008afc:	429e      	cmp	r6, r3
 8008afe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008b02:	f280 80af 	bge.w	8008c64 <_strtod_l+0x814>
 8008b06:	1b9b      	subs	r3, r3, r6
 8008b08:	2b1f      	cmp	r3, #31
 8008b0a:	eba2 0203 	sub.w	r2, r2, r3
 8008b0e:	f04f 0101 	mov.w	r1, #1
 8008b12:	f300 809b 	bgt.w	8008c4c <_strtod_l+0x7fc>
 8008b16:	fa01 f303 	lsl.w	r3, r1, r3
 8008b1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b20:	18be      	adds	r6, r7, r2
 8008b22:	9b04      	ldr	r3, [sp, #16]
 8008b24:	42b7      	cmp	r7, r6
 8008b26:	4415      	add	r5, r2
 8008b28:	441d      	add	r5, r3
 8008b2a:	463b      	mov	r3, r7
 8008b2c:	bfa8      	it	ge
 8008b2e:	4633      	movge	r3, r6
 8008b30:	42ab      	cmp	r3, r5
 8008b32:	bfa8      	it	ge
 8008b34:	462b      	movge	r3, r5
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	bfc2      	ittt	gt
 8008b3a:	1af6      	subgt	r6, r6, r3
 8008b3c:	1aed      	subgt	r5, r5, r3
 8008b3e:	1aff      	subgt	r7, r7, r3
 8008b40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b42:	b1bb      	cbz	r3, 8008b74 <_strtod_l+0x724>
 8008b44:	4641      	mov	r1, r8
 8008b46:	461a      	mov	r2, r3
 8008b48:	4648      	mov	r0, r9
 8008b4a:	f003 f9a5 	bl	800be98 <__pow5mult>
 8008b4e:	4680      	mov	r8, r0
 8008b50:	2800      	cmp	r0, #0
 8008b52:	f43f ae9b 	beq.w	800888c <_strtod_l+0x43c>
 8008b56:	4601      	mov	r1, r0
 8008b58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b5a:	4648      	mov	r0, r9
 8008b5c:	f003 f905 	bl	800bd6a <__multiply>
 8008b60:	900c      	str	r0, [sp, #48]	; 0x30
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f43f ae92 	beq.w	800888c <_strtod_l+0x43c>
 8008b68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008b6a:	4648      	mov	r0, r9
 8008b6c:	f003 f824 	bl	800bbb8 <_Bfree>
 8008b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b72:	931c      	str	r3, [sp, #112]	; 0x70
 8008b74:	2e00      	cmp	r6, #0
 8008b76:	dc7a      	bgt.n	8008c6e <_strtod_l+0x81e>
 8008b78:	9b06      	ldr	r3, [sp, #24]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	dd08      	ble.n	8008b90 <_strtod_l+0x740>
 8008b7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008b80:	9905      	ldr	r1, [sp, #20]
 8008b82:	4648      	mov	r0, r9
 8008b84:	f003 f988 	bl	800be98 <__pow5mult>
 8008b88:	9005      	str	r0, [sp, #20]
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	f43f ae7e 	beq.w	800888c <_strtod_l+0x43c>
 8008b90:	2d00      	cmp	r5, #0
 8008b92:	dd08      	ble.n	8008ba6 <_strtod_l+0x756>
 8008b94:	462a      	mov	r2, r5
 8008b96:	9905      	ldr	r1, [sp, #20]
 8008b98:	4648      	mov	r0, r9
 8008b9a:	f003 f9bd 	bl	800bf18 <__lshift>
 8008b9e:	9005      	str	r0, [sp, #20]
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	f43f ae73 	beq.w	800888c <_strtod_l+0x43c>
 8008ba6:	2f00      	cmp	r7, #0
 8008ba8:	dd08      	ble.n	8008bbc <_strtod_l+0x76c>
 8008baa:	4641      	mov	r1, r8
 8008bac:	463a      	mov	r2, r7
 8008bae:	4648      	mov	r0, r9
 8008bb0:	f003 f9b2 	bl	800bf18 <__lshift>
 8008bb4:	4680      	mov	r8, r0
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	f43f ae68 	beq.w	800888c <_strtod_l+0x43c>
 8008bbc:	9a05      	ldr	r2, [sp, #20]
 8008bbe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008bc0:	4648      	mov	r0, r9
 8008bc2:	f003 fa17 	bl	800bff4 <__mdiff>
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	f43f ae5f 	beq.w	800888c <_strtod_l+0x43c>
 8008bce:	68c3      	ldr	r3, [r0, #12]
 8008bd0:	930c      	str	r3, [sp, #48]	; 0x30
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60c3      	str	r3, [r0, #12]
 8008bd6:	4641      	mov	r1, r8
 8008bd8:	f003 f9f2 	bl	800bfc0 <__mcmp>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	da55      	bge.n	8008c8c <_strtod_l+0x83c>
 8008be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008be2:	b9e3      	cbnz	r3, 8008c1e <_strtod_l+0x7ce>
 8008be4:	f1ba 0f00 	cmp.w	sl, #0
 8008be8:	d119      	bne.n	8008c1e <_strtod_l+0x7ce>
 8008bea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bee:	b9b3      	cbnz	r3, 8008c1e <_strtod_l+0x7ce>
 8008bf0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bf4:	0d1b      	lsrs	r3, r3, #20
 8008bf6:	051b      	lsls	r3, r3, #20
 8008bf8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008bfc:	d90f      	bls.n	8008c1e <_strtod_l+0x7ce>
 8008bfe:	6963      	ldr	r3, [r4, #20]
 8008c00:	b913      	cbnz	r3, 8008c08 <_strtod_l+0x7b8>
 8008c02:	6923      	ldr	r3, [r4, #16]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	dd0a      	ble.n	8008c1e <_strtod_l+0x7ce>
 8008c08:	4621      	mov	r1, r4
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	4648      	mov	r0, r9
 8008c0e:	f003 f983 	bl	800bf18 <__lshift>
 8008c12:	4641      	mov	r1, r8
 8008c14:	4604      	mov	r4, r0
 8008c16:	f003 f9d3 	bl	800bfc0 <__mcmp>
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	dc67      	bgt.n	8008cee <_strtod_l+0x89e>
 8008c1e:	9b04      	ldr	r3, [sp, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d171      	bne.n	8008d08 <_strtod_l+0x8b8>
 8008c24:	e63d      	b.n	80088a2 <_strtod_l+0x452>
 8008c26:	f018 0f01 	tst.w	r8, #1
 8008c2a:	d004      	beq.n	8008c36 <_strtod_l+0x7e6>
 8008c2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c30:	f7f7 fce2 	bl	80005f8 <__aeabi_dmul>
 8008c34:	2301      	movs	r3, #1
 8008c36:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c3a:	3508      	adds	r5, #8
 8008c3c:	e6e5      	b.n	8008a0a <_strtod_l+0x5ba>
 8008c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c42:	fa02 f303 	lsl.w	r3, r2, r3
 8008c46:	ea03 0a0a 	and.w	sl, r3, sl
 8008c4a:	e6ff      	b.n	8008a4c <_strtod_l+0x5fc>
 8008c4c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008c50:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008c54:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008c58:	36e2      	adds	r6, #226	; 0xe2
 8008c5a:	fa01 f306 	lsl.w	r3, r1, r6
 8008c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c60:	910f      	str	r1, [sp, #60]	; 0x3c
 8008c62:	e75d      	b.n	8008b20 <_strtod_l+0x6d0>
 8008c64:	2300      	movs	r3, #0
 8008c66:	930a      	str	r3, [sp, #40]	; 0x28
 8008c68:	2301      	movs	r3, #1
 8008c6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c6c:	e758      	b.n	8008b20 <_strtod_l+0x6d0>
 8008c6e:	4632      	mov	r2, r6
 8008c70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008c72:	4648      	mov	r0, r9
 8008c74:	f003 f950 	bl	800bf18 <__lshift>
 8008c78:	901c      	str	r0, [sp, #112]	; 0x70
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	f47f af7c 	bne.w	8008b78 <_strtod_l+0x728>
 8008c80:	e604      	b.n	800888c <_strtod_l+0x43c>
 8008c82:	bf00      	nop
 8008c84:	0800f348 	.word	0x0800f348
 8008c88:	fffffc02 	.word	0xfffffc02
 8008c8c:	465d      	mov	r5, fp
 8008c8e:	f040 8086 	bne.w	8008d9e <_strtod_l+0x94e>
 8008c92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c98:	b32a      	cbz	r2, 8008ce6 <_strtod_l+0x896>
 8008c9a:	4aaf      	ldr	r2, [pc, #700]	; (8008f58 <_strtod_l+0xb08>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d153      	bne.n	8008d48 <_strtod_l+0x8f8>
 8008ca0:	9b04      	ldr	r3, [sp, #16]
 8008ca2:	4650      	mov	r0, sl
 8008ca4:	b1d3      	cbz	r3, 8008cdc <_strtod_l+0x88c>
 8008ca6:	4aad      	ldr	r2, [pc, #692]	; (8008f5c <_strtod_l+0xb0c>)
 8008ca8:	402a      	ands	r2, r5
 8008caa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008cae:	f04f 31ff 	mov.w	r1, #4294967295
 8008cb2:	d816      	bhi.n	8008ce2 <_strtod_l+0x892>
 8008cb4:	0d12      	lsrs	r2, r2, #20
 8008cb6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008cba:	fa01 f303 	lsl.w	r3, r1, r3
 8008cbe:	4298      	cmp	r0, r3
 8008cc0:	d142      	bne.n	8008d48 <_strtod_l+0x8f8>
 8008cc2:	4ba7      	ldr	r3, [pc, #668]	; (8008f60 <_strtod_l+0xb10>)
 8008cc4:	429d      	cmp	r5, r3
 8008cc6:	d102      	bne.n	8008cce <_strtod_l+0x87e>
 8008cc8:	3001      	adds	r0, #1
 8008cca:	f43f addf 	beq.w	800888c <_strtod_l+0x43c>
 8008cce:	4ba3      	ldr	r3, [pc, #652]	; (8008f5c <_strtod_l+0xb0c>)
 8008cd0:	402b      	ands	r3, r5
 8008cd2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008cd6:	f04f 0a00 	mov.w	sl, #0
 8008cda:	e7a0      	b.n	8008c1e <_strtod_l+0x7ce>
 8008cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce0:	e7ed      	b.n	8008cbe <_strtod_l+0x86e>
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	e7eb      	b.n	8008cbe <_strtod_l+0x86e>
 8008ce6:	bb7b      	cbnz	r3, 8008d48 <_strtod_l+0x8f8>
 8008ce8:	f1ba 0f00 	cmp.w	sl, #0
 8008cec:	d12c      	bne.n	8008d48 <_strtod_l+0x8f8>
 8008cee:	9904      	ldr	r1, [sp, #16]
 8008cf0:	4a9a      	ldr	r2, [pc, #616]	; (8008f5c <_strtod_l+0xb0c>)
 8008cf2:	465b      	mov	r3, fp
 8008cf4:	b1f1      	cbz	r1, 8008d34 <_strtod_l+0x8e4>
 8008cf6:	ea02 010b 	and.w	r1, r2, fp
 8008cfa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008cfe:	dc19      	bgt.n	8008d34 <_strtod_l+0x8e4>
 8008d00:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008d04:	f77f ae5b 	ble.w	80089be <_strtod_l+0x56e>
 8008d08:	4a96      	ldr	r2, [pc, #600]	; (8008f64 <_strtod_l+0xb14>)
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008d10:	4650      	mov	r0, sl
 8008d12:	4659      	mov	r1, fp
 8008d14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008d18:	f7f7 fc6e 	bl	80005f8 <__aeabi_dmul>
 8008d1c:	4682      	mov	sl, r0
 8008d1e:	468b      	mov	fp, r1
 8008d20:	2900      	cmp	r1, #0
 8008d22:	f47f adbe 	bne.w	80088a2 <_strtod_l+0x452>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	f47f adbb 	bne.w	80088a2 <_strtod_l+0x452>
 8008d2c:	2322      	movs	r3, #34	; 0x22
 8008d2e:	f8c9 3000 	str.w	r3, [r9]
 8008d32:	e5b6      	b.n	80088a2 <_strtod_l+0x452>
 8008d34:	4013      	ands	r3, r2
 8008d36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008d3a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008d3e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008d42:	f04f 3aff 	mov.w	sl, #4294967295
 8008d46:	e76a      	b.n	8008c1e <_strtod_l+0x7ce>
 8008d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d4a:	b193      	cbz	r3, 8008d72 <_strtod_l+0x922>
 8008d4c:	422b      	tst	r3, r5
 8008d4e:	f43f af66 	beq.w	8008c1e <_strtod_l+0x7ce>
 8008d52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d54:	9a04      	ldr	r2, [sp, #16]
 8008d56:	4650      	mov	r0, sl
 8008d58:	4659      	mov	r1, fp
 8008d5a:	b173      	cbz	r3, 8008d7a <_strtod_l+0x92a>
 8008d5c:	f7ff fb5a 	bl	8008414 <sulp>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d68:	f7f7 fa90 	bl	800028c <__adddf3>
 8008d6c:	4682      	mov	sl, r0
 8008d6e:	468b      	mov	fp, r1
 8008d70:	e755      	b.n	8008c1e <_strtod_l+0x7ce>
 8008d72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d74:	ea13 0f0a 	tst.w	r3, sl
 8008d78:	e7e9      	b.n	8008d4e <_strtod_l+0x8fe>
 8008d7a:	f7ff fb4b 	bl	8008414 <sulp>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d86:	f7f7 fa7f 	bl	8000288 <__aeabi_dsub>
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	4682      	mov	sl, r0
 8008d90:	468b      	mov	fp, r1
 8008d92:	f7f7 fe99 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	f47f ae11 	bne.w	80089be <_strtod_l+0x56e>
 8008d9c:	e73f      	b.n	8008c1e <_strtod_l+0x7ce>
 8008d9e:	4641      	mov	r1, r8
 8008da0:	4620      	mov	r0, r4
 8008da2:	f003 fa4a 	bl	800c23a <__ratio>
 8008da6:	ec57 6b10 	vmov	r6, r7, d0
 8008daa:	2200      	movs	r2, #0
 8008dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008db0:	ee10 0a10 	vmov	r0, s0
 8008db4:	4639      	mov	r1, r7
 8008db6:	f7f7 fe9b 	bl	8000af0 <__aeabi_dcmple>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d077      	beq.n	8008eae <_strtod_l+0xa5e>
 8008dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d04a      	beq.n	8008e5a <_strtod_l+0xa0a>
 8008dc4:	4b68      	ldr	r3, [pc, #416]	; (8008f68 <_strtod_l+0xb18>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008dcc:	4f66      	ldr	r7, [pc, #408]	; (8008f68 <_strtod_l+0xb18>)
 8008dce:	2600      	movs	r6, #0
 8008dd0:	4b62      	ldr	r3, [pc, #392]	; (8008f5c <_strtod_l+0xb0c>)
 8008dd2:	402b      	ands	r3, r5
 8008dd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008dd8:	4b64      	ldr	r3, [pc, #400]	; (8008f6c <_strtod_l+0xb1c>)
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	f040 80ce 	bne.w	8008f7c <_strtod_l+0xb2c>
 8008de0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008de4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008de8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008dec:	ec4b ab10 	vmov	d0, sl, fp
 8008df0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008df4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008df8:	f003 f95a 	bl	800c0b0 <__ulp>
 8008dfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e00:	ec53 2b10 	vmov	r2, r3, d0
 8008e04:	f7f7 fbf8 	bl	80005f8 <__aeabi_dmul>
 8008e08:	4652      	mov	r2, sl
 8008e0a:	465b      	mov	r3, fp
 8008e0c:	f7f7 fa3e 	bl	800028c <__adddf3>
 8008e10:	460b      	mov	r3, r1
 8008e12:	4952      	ldr	r1, [pc, #328]	; (8008f5c <_strtod_l+0xb0c>)
 8008e14:	4a56      	ldr	r2, [pc, #344]	; (8008f70 <_strtod_l+0xb20>)
 8008e16:	4019      	ands	r1, r3
 8008e18:	4291      	cmp	r1, r2
 8008e1a:	4682      	mov	sl, r0
 8008e1c:	d95b      	bls.n	8008ed6 <_strtod_l+0xa86>
 8008e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e20:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d103      	bne.n	8008e30 <_strtod_l+0x9e0>
 8008e28:	9b08      	ldr	r3, [sp, #32]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	f43f ad2e 	beq.w	800888c <_strtod_l+0x43c>
 8008e30:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008f60 <_strtod_l+0xb10>
 8008e34:	f04f 3aff 	mov.w	sl, #4294967295
 8008e38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008e3a:	4648      	mov	r0, r9
 8008e3c:	f002 febc 	bl	800bbb8 <_Bfree>
 8008e40:	9905      	ldr	r1, [sp, #20]
 8008e42:	4648      	mov	r0, r9
 8008e44:	f002 feb8 	bl	800bbb8 <_Bfree>
 8008e48:	4641      	mov	r1, r8
 8008e4a:	4648      	mov	r0, r9
 8008e4c:	f002 feb4 	bl	800bbb8 <_Bfree>
 8008e50:	4621      	mov	r1, r4
 8008e52:	4648      	mov	r0, r9
 8008e54:	f002 feb0 	bl	800bbb8 <_Bfree>
 8008e58:	e619      	b.n	8008a8e <_strtod_l+0x63e>
 8008e5a:	f1ba 0f00 	cmp.w	sl, #0
 8008e5e:	d11a      	bne.n	8008e96 <_strtod_l+0xa46>
 8008e60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e64:	b9eb      	cbnz	r3, 8008ea2 <_strtod_l+0xa52>
 8008e66:	2200      	movs	r2, #0
 8008e68:	4b3f      	ldr	r3, [pc, #252]	; (8008f68 <_strtod_l+0xb18>)
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	4639      	mov	r1, r7
 8008e6e:	f7f7 fe35 	bl	8000adc <__aeabi_dcmplt>
 8008e72:	b9c8      	cbnz	r0, 8008ea8 <_strtod_l+0xa58>
 8008e74:	4630      	mov	r0, r6
 8008e76:	4639      	mov	r1, r7
 8008e78:	2200      	movs	r2, #0
 8008e7a:	4b3e      	ldr	r3, [pc, #248]	; (8008f74 <_strtod_l+0xb24>)
 8008e7c:	f7f7 fbbc 	bl	80005f8 <__aeabi_dmul>
 8008e80:	4606      	mov	r6, r0
 8008e82:	460f      	mov	r7, r1
 8008e84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008e88:	9618      	str	r6, [sp, #96]	; 0x60
 8008e8a:	9319      	str	r3, [sp, #100]	; 0x64
 8008e8c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008e90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008e94:	e79c      	b.n	8008dd0 <_strtod_l+0x980>
 8008e96:	f1ba 0f01 	cmp.w	sl, #1
 8008e9a:	d102      	bne.n	8008ea2 <_strtod_l+0xa52>
 8008e9c:	2d00      	cmp	r5, #0
 8008e9e:	f43f ad8e 	beq.w	80089be <_strtod_l+0x56e>
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	4b34      	ldr	r3, [pc, #208]	; (8008f78 <_strtod_l+0xb28>)
 8008ea6:	e78f      	b.n	8008dc8 <_strtod_l+0x978>
 8008ea8:	2600      	movs	r6, #0
 8008eaa:	4f32      	ldr	r7, [pc, #200]	; (8008f74 <_strtod_l+0xb24>)
 8008eac:	e7ea      	b.n	8008e84 <_strtod_l+0xa34>
 8008eae:	4b31      	ldr	r3, [pc, #196]	; (8008f74 <_strtod_l+0xb24>)
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	4639      	mov	r1, r7
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f7f7 fb9f 	bl	80005f8 <__aeabi_dmul>
 8008eba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	460f      	mov	r7, r1
 8008ec0:	b933      	cbnz	r3, 8008ed0 <_strtod_l+0xa80>
 8008ec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ec6:	9010      	str	r0, [sp, #64]	; 0x40
 8008ec8:	9311      	str	r3, [sp, #68]	; 0x44
 8008eca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ece:	e7df      	b.n	8008e90 <_strtod_l+0xa40>
 8008ed0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008ed4:	e7f9      	b.n	8008eca <_strtod_l+0xa7a>
 8008ed6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008eda:	9b04      	ldr	r3, [sp, #16]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1ab      	bne.n	8008e38 <_strtod_l+0x9e8>
 8008ee0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ee4:	0d1b      	lsrs	r3, r3, #20
 8008ee6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ee8:	051b      	lsls	r3, r3, #20
 8008eea:	429a      	cmp	r2, r3
 8008eec:	465d      	mov	r5, fp
 8008eee:	d1a3      	bne.n	8008e38 <_strtod_l+0x9e8>
 8008ef0:	4639      	mov	r1, r7
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f7f7 fe30 	bl	8000b58 <__aeabi_d2iz>
 8008ef8:	f7f7 fb14 	bl	8000524 <__aeabi_i2d>
 8008efc:	460b      	mov	r3, r1
 8008efe:	4602      	mov	r2, r0
 8008f00:	4639      	mov	r1, r7
 8008f02:	4630      	mov	r0, r6
 8008f04:	f7f7 f9c0 	bl	8000288 <__aeabi_dsub>
 8008f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	460f      	mov	r7, r1
 8008f0e:	b933      	cbnz	r3, 8008f1e <_strtod_l+0xace>
 8008f10:	f1ba 0f00 	cmp.w	sl, #0
 8008f14:	d103      	bne.n	8008f1e <_strtod_l+0xace>
 8008f16:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008f1a:	2d00      	cmp	r5, #0
 8008f1c:	d06d      	beq.n	8008ffa <_strtod_l+0xbaa>
 8008f1e:	a30a      	add	r3, pc, #40	; (adr r3, 8008f48 <_strtod_l+0xaf8>)
 8008f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f24:	4630      	mov	r0, r6
 8008f26:	4639      	mov	r1, r7
 8008f28:	f7f7 fdd8 	bl	8000adc <__aeabi_dcmplt>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f47f acb8 	bne.w	80088a2 <_strtod_l+0x452>
 8008f32:	a307      	add	r3, pc, #28	; (adr r3, 8008f50 <_strtod_l+0xb00>)
 8008f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f38:	4630      	mov	r0, r6
 8008f3a:	4639      	mov	r1, r7
 8008f3c:	f7f7 fdec 	bl	8000b18 <__aeabi_dcmpgt>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	f43f af79 	beq.w	8008e38 <_strtod_l+0x9e8>
 8008f46:	e4ac      	b.n	80088a2 <_strtod_l+0x452>
 8008f48:	94a03595 	.word	0x94a03595
 8008f4c:	3fdfffff 	.word	0x3fdfffff
 8008f50:	35afe535 	.word	0x35afe535
 8008f54:	3fe00000 	.word	0x3fe00000
 8008f58:	000fffff 	.word	0x000fffff
 8008f5c:	7ff00000 	.word	0x7ff00000
 8008f60:	7fefffff 	.word	0x7fefffff
 8008f64:	39500000 	.word	0x39500000
 8008f68:	3ff00000 	.word	0x3ff00000
 8008f6c:	7fe00000 	.word	0x7fe00000
 8008f70:	7c9fffff 	.word	0x7c9fffff
 8008f74:	3fe00000 	.word	0x3fe00000
 8008f78:	bff00000 	.word	0xbff00000
 8008f7c:	9b04      	ldr	r3, [sp, #16]
 8008f7e:	b333      	cbz	r3, 8008fce <_strtod_l+0xb7e>
 8008f80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f82:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008f86:	d822      	bhi.n	8008fce <_strtod_l+0xb7e>
 8008f88:	a327      	add	r3, pc, #156	; (adr r3, 8009028 <_strtod_l+0xbd8>)
 8008f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8e:	4630      	mov	r0, r6
 8008f90:	4639      	mov	r1, r7
 8008f92:	f7f7 fdad 	bl	8000af0 <__aeabi_dcmple>
 8008f96:	b1a0      	cbz	r0, 8008fc2 <_strtod_l+0xb72>
 8008f98:	4639      	mov	r1, r7
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f7f7 fe04 	bl	8000ba8 <__aeabi_d2uiz>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	bf08      	it	eq
 8008fa4:	2001      	moveq	r0, #1
 8008fa6:	f7f7 faad 	bl	8000504 <__aeabi_ui2d>
 8008faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fac:	4606      	mov	r6, r0
 8008fae:	460f      	mov	r7, r1
 8008fb0:	bb03      	cbnz	r3, 8008ff4 <_strtod_l+0xba4>
 8008fb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fb6:	9012      	str	r0, [sp, #72]	; 0x48
 8008fb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8008fba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008fbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fc6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008fca:	1a9b      	subs	r3, r3, r2
 8008fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fce:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008fd2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008fd6:	f003 f86b 	bl	800c0b0 <__ulp>
 8008fda:	4650      	mov	r0, sl
 8008fdc:	ec53 2b10 	vmov	r2, r3, d0
 8008fe0:	4659      	mov	r1, fp
 8008fe2:	f7f7 fb09 	bl	80005f8 <__aeabi_dmul>
 8008fe6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008fea:	f7f7 f94f 	bl	800028c <__adddf3>
 8008fee:	4682      	mov	sl, r0
 8008ff0:	468b      	mov	fp, r1
 8008ff2:	e772      	b.n	8008eda <_strtod_l+0xa8a>
 8008ff4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008ff8:	e7df      	b.n	8008fba <_strtod_l+0xb6a>
 8008ffa:	a30d      	add	r3, pc, #52	; (adr r3, 8009030 <_strtod_l+0xbe0>)
 8008ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009000:	f7f7 fd6c 	bl	8000adc <__aeabi_dcmplt>
 8009004:	e79c      	b.n	8008f40 <_strtod_l+0xaf0>
 8009006:	2300      	movs	r3, #0
 8009008:	930d      	str	r3, [sp, #52]	; 0x34
 800900a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800900c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800900e:	6013      	str	r3, [r2, #0]
 8009010:	f7ff ba61 	b.w	80084d6 <_strtod_l+0x86>
 8009014:	2b65      	cmp	r3, #101	; 0x65
 8009016:	f04f 0200 	mov.w	r2, #0
 800901a:	f43f ab4e 	beq.w	80086ba <_strtod_l+0x26a>
 800901e:	2101      	movs	r1, #1
 8009020:	4614      	mov	r4, r2
 8009022:	9104      	str	r1, [sp, #16]
 8009024:	f7ff bacb 	b.w	80085be <_strtod_l+0x16e>
 8009028:	ffc00000 	.word	0xffc00000
 800902c:	41dfffff 	.word	0x41dfffff
 8009030:	94a03595 	.word	0x94a03595
 8009034:	3fcfffff 	.word	0x3fcfffff

08009038 <strtod>:
 8009038:	4b07      	ldr	r3, [pc, #28]	; (8009058 <strtod+0x20>)
 800903a:	4a08      	ldr	r2, [pc, #32]	; (800905c <strtod+0x24>)
 800903c:	b410      	push	{r4}
 800903e:	681c      	ldr	r4, [r3, #0]
 8009040:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009042:	2b00      	cmp	r3, #0
 8009044:	bf08      	it	eq
 8009046:	4613      	moveq	r3, r2
 8009048:	460a      	mov	r2, r1
 800904a:	4601      	mov	r1, r0
 800904c:	4620      	mov	r0, r4
 800904e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009052:	f7ff b9fd 	b.w	8008450 <_strtod_l>
 8009056:	bf00      	nop
 8009058:	20000010 	.word	0x20000010
 800905c:	20000854 	.word	0x20000854

08009060 <_strtol_l.isra.0>:
 8009060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009064:	4680      	mov	r8, r0
 8009066:	4689      	mov	r9, r1
 8009068:	4692      	mov	sl, r2
 800906a:	461e      	mov	r6, r3
 800906c:	460f      	mov	r7, r1
 800906e:	463d      	mov	r5, r7
 8009070:	9808      	ldr	r0, [sp, #32]
 8009072:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009076:	f002 fd47 	bl	800bb08 <__locale_ctype_ptr_l>
 800907a:	4420      	add	r0, r4
 800907c:	7843      	ldrb	r3, [r0, #1]
 800907e:	f013 0308 	ands.w	r3, r3, #8
 8009082:	d132      	bne.n	80090ea <_strtol_l.isra.0+0x8a>
 8009084:	2c2d      	cmp	r4, #45	; 0x2d
 8009086:	d132      	bne.n	80090ee <_strtol_l.isra.0+0x8e>
 8009088:	787c      	ldrb	r4, [r7, #1]
 800908a:	1cbd      	adds	r5, r7, #2
 800908c:	2201      	movs	r2, #1
 800908e:	2e00      	cmp	r6, #0
 8009090:	d05d      	beq.n	800914e <_strtol_l.isra.0+0xee>
 8009092:	2e10      	cmp	r6, #16
 8009094:	d109      	bne.n	80090aa <_strtol_l.isra.0+0x4a>
 8009096:	2c30      	cmp	r4, #48	; 0x30
 8009098:	d107      	bne.n	80090aa <_strtol_l.isra.0+0x4a>
 800909a:	782b      	ldrb	r3, [r5, #0]
 800909c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80090a0:	2b58      	cmp	r3, #88	; 0x58
 80090a2:	d14f      	bne.n	8009144 <_strtol_l.isra.0+0xe4>
 80090a4:	786c      	ldrb	r4, [r5, #1]
 80090a6:	2610      	movs	r6, #16
 80090a8:	3502      	adds	r5, #2
 80090aa:	2a00      	cmp	r2, #0
 80090ac:	bf14      	ite	ne
 80090ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80090b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80090b6:	2700      	movs	r7, #0
 80090b8:	fbb1 fcf6 	udiv	ip, r1, r6
 80090bc:	4638      	mov	r0, r7
 80090be:	fb06 1e1c 	mls	lr, r6, ip, r1
 80090c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80090c6:	2b09      	cmp	r3, #9
 80090c8:	d817      	bhi.n	80090fa <_strtol_l.isra.0+0x9a>
 80090ca:	461c      	mov	r4, r3
 80090cc:	42a6      	cmp	r6, r4
 80090ce:	dd23      	ble.n	8009118 <_strtol_l.isra.0+0xb8>
 80090d0:	1c7b      	adds	r3, r7, #1
 80090d2:	d007      	beq.n	80090e4 <_strtol_l.isra.0+0x84>
 80090d4:	4584      	cmp	ip, r0
 80090d6:	d31c      	bcc.n	8009112 <_strtol_l.isra.0+0xb2>
 80090d8:	d101      	bne.n	80090de <_strtol_l.isra.0+0x7e>
 80090da:	45a6      	cmp	lr, r4
 80090dc:	db19      	blt.n	8009112 <_strtol_l.isra.0+0xb2>
 80090de:	fb00 4006 	mla	r0, r0, r6, r4
 80090e2:	2701      	movs	r7, #1
 80090e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090e8:	e7eb      	b.n	80090c2 <_strtol_l.isra.0+0x62>
 80090ea:	462f      	mov	r7, r5
 80090ec:	e7bf      	b.n	800906e <_strtol_l.isra.0+0xe>
 80090ee:	2c2b      	cmp	r4, #43	; 0x2b
 80090f0:	bf04      	itt	eq
 80090f2:	1cbd      	addeq	r5, r7, #2
 80090f4:	787c      	ldrbeq	r4, [r7, #1]
 80090f6:	461a      	mov	r2, r3
 80090f8:	e7c9      	b.n	800908e <_strtol_l.isra.0+0x2e>
 80090fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80090fe:	2b19      	cmp	r3, #25
 8009100:	d801      	bhi.n	8009106 <_strtol_l.isra.0+0xa6>
 8009102:	3c37      	subs	r4, #55	; 0x37
 8009104:	e7e2      	b.n	80090cc <_strtol_l.isra.0+0x6c>
 8009106:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800910a:	2b19      	cmp	r3, #25
 800910c:	d804      	bhi.n	8009118 <_strtol_l.isra.0+0xb8>
 800910e:	3c57      	subs	r4, #87	; 0x57
 8009110:	e7dc      	b.n	80090cc <_strtol_l.isra.0+0x6c>
 8009112:	f04f 37ff 	mov.w	r7, #4294967295
 8009116:	e7e5      	b.n	80090e4 <_strtol_l.isra.0+0x84>
 8009118:	1c7b      	adds	r3, r7, #1
 800911a:	d108      	bne.n	800912e <_strtol_l.isra.0+0xce>
 800911c:	2322      	movs	r3, #34	; 0x22
 800911e:	f8c8 3000 	str.w	r3, [r8]
 8009122:	4608      	mov	r0, r1
 8009124:	f1ba 0f00 	cmp.w	sl, #0
 8009128:	d107      	bne.n	800913a <_strtol_l.isra.0+0xda>
 800912a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800912e:	b102      	cbz	r2, 8009132 <_strtol_l.isra.0+0xd2>
 8009130:	4240      	negs	r0, r0
 8009132:	f1ba 0f00 	cmp.w	sl, #0
 8009136:	d0f8      	beq.n	800912a <_strtol_l.isra.0+0xca>
 8009138:	b10f      	cbz	r7, 800913e <_strtol_l.isra.0+0xde>
 800913a:	f105 39ff 	add.w	r9, r5, #4294967295
 800913e:	f8ca 9000 	str.w	r9, [sl]
 8009142:	e7f2      	b.n	800912a <_strtol_l.isra.0+0xca>
 8009144:	2430      	movs	r4, #48	; 0x30
 8009146:	2e00      	cmp	r6, #0
 8009148:	d1af      	bne.n	80090aa <_strtol_l.isra.0+0x4a>
 800914a:	2608      	movs	r6, #8
 800914c:	e7ad      	b.n	80090aa <_strtol_l.isra.0+0x4a>
 800914e:	2c30      	cmp	r4, #48	; 0x30
 8009150:	d0a3      	beq.n	800909a <_strtol_l.isra.0+0x3a>
 8009152:	260a      	movs	r6, #10
 8009154:	e7a9      	b.n	80090aa <_strtol_l.isra.0+0x4a>
	...

08009158 <strtol>:
 8009158:	4b08      	ldr	r3, [pc, #32]	; (800917c <strtol+0x24>)
 800915a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800915c:	681c      	ldr	r4, [r3, #0]
 800915e:	4d08      	ldr	r5, [pc, #32]	; (8009180 <strtol+0x28>)
 8009160:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009162:	2b00      	cmp	r3, #0
 8009164:	bf08      	it	eq
 8009166:	462b      	moveq	r3, r5
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	4613      	mov	r3, r2
 800916c:	460a      	mov	r2, r1
 800916e:	4601      	mov	r1, r0
 8009170:	4620      	mov	r0, r4
 8009172:	f7ff ff75 	bl	8009060 <_strtol_l.isra.0>
 8009176:	b003      	add	sp, #12
 8009178:	bd30      	pop	{r4, r5, pc}
 800917a:	bf00      	nop
 800917c:	20000010 	.word	0x20000010
 8009180:	20000854 	.word	0x20000854
 8009184:	00000000 	.word	0x00000000

08009188 <_svfprintf_r>:
 8009188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	b0d3      	sub	sp, #332	; 0x14c
 800918e:	4688      	mov	r8, r1
 8009190:	4693      	mov	fp, r2
 8009192:	461e      	mov	r6, r3
 8009194:	9003      	str	r0, [sp, #12]
 8009196:	f002 fcbd 	bl	800bb14 <_localeconv_r>
 800919a:	6803      	ldr	r3, [r0, #0]
 800919c:	9316      	str	r3, [sp, #88]	; 0x58
 800919e:	4618      	mov	r0, r3
 80091a0:	f7f7 f816 	bl	80001d0 <strlen>
 80091a4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80091a8:	900d      	str	r0, [sp, #52]	; 0x34
 80091aa:	0618      	lsls	r0, r3, #24
 80091ac:	d518      	bpl.n	80091e0 <_svfprintf_r+0x58>
 80091ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80091b2:	b9ab      	cbnz	r3, 80091e0 <_svfprintf_r+0x58>
 80091b4:	2140      	movs	r1, #64	; 0x40
 80091b6:	9803      	ldr	r0, [sp, #12]
 80091b8:	f7fe feb2 	bl	8007f20 <_malloc_r>
 80091bc:	f8c8 0000 	str.w	r0, [r8]
 80091c0:	f8c8 0010 	str.w	r0, [r8, #16]
 80091c4:	b948      	cbnz	r0, 80091da <_svfprintf_r+0x52>
 80091c6:	9a03      	ldr	r2, [sp, #12]
 80091c8:	230c      	movs	r3, #12
 80091ca:	6013      	str	r3, [r2, #0]
 80091cc:	f04f 33ff 	mov.w	r3, #4294967295
 80091d0:	930e      	str	r3, [sp, #56]	; 0x38
 80091d2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80091d4:	b053      	add	sp, #332	; 0x14c
 80091d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091da:	2340      	movs	r3, #64	; 0x40
 80091dc:	f8c8 3014 	str.w	r3, [r8, #20]
 80091e0:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 8009508 <_svfprintf_r+0x380>
 80091e4:	2300      	movs	r3, #0
 80091e6:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 80091ea:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80091ee:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 80091f2:	ac29      	add	r4, sp, #164	; 0xa4
 80091f4:	9426      	str	r4, [sp, #152]	; 0x98
 80091f6:	9304      	str	r3, [sp, #16]
 80091f8:	9309      	str	r3, [sp, #36]	; 0x24
 80091fa:	9312      	str	r3, [sp, #72]	; 0x48
 80091fc:	9319      	str	r3, [sp, #100]	; 0x64
 80091fe:	930e      	str	r3, [sp, #56]	; 0x38
 8009200:	465d      	mov	r5, fp
 8009202:	462b      	mov	r3, r5
 8009204:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009208:	b112      	cbz	r2, 8009210 <_svfprintf_r+0x88>
 800920a:	2a25      	cmp	r2, #37	; 0x25
 800920c:	f040 80e4 	bne.w	80093d8 <_svfprintf_r+0x250>
 8009210:	ebb5 070b 	subs.w	r7, r5, fp
 8009214:	d00e      	beq.n	8009234 <_svfprintf_r+0xac>
 8009216:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009218:	443b      	add	r3, r7
 800921a:	9328      	str	r3, [sp, #160]	; 0xa0
 800921c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800921e:	3301      	adds	r3, #1
 8009220:	2b07      	cmp	r3, #7
 8009222:	e9c4 b700 	strd	fp, r7, [r4]
 8009226:	9327      	str	r3, [sp, #156]	; 0x9c
 8009228:	f300 80d8 	bgt.w	80093dc <_svfprintf_r+0x254>
 800922c:	3408      	adds	r4, #8
 800922e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009230:	443b      	add	r3, r7
 8009232:	930e      	str	r3, [sp, #56]	; 0x38
 8009234:	782b      	ldrb	r3, [r5, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	f001 81b4 	beq.w	800a5a4 <_svfprintf_r+0x141c>
 800923c:	1c6b      	adds	r3, r5, #1
 800923e:	930c      	str	r3, [sp, #48]	; 0x30
 8009240:	2300      	movs	r3, #0
 8009242:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8009246:	f04f 35ff 	mov.w	r5, #4294967295
 800924a:	930f      	str	r3, [sp, #60]	; 0x3c
 800924c:	469a      	mov	sl, r3
 800924e:	270a      	movs	r7, #10
 8009250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	9306      	str	r3, [sp, #24]
 8009256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009258:	3301      	adds	r3, #1
 800925a:	930c      	str	r3, [sp, #48]	; 0x30
 800925c:	9b06      	ldr	r3, [sp, #24]
 800925e:	3b20      	subs	r3, #32
 8009260:	2b5a      	cmp	r3, #90	; 0x5a
 8009262:	f200 8624 	bhi.w	8009eae <_svfprintf_r+0xd26>
 8009266:	a201      	add	r2, pc, #4	; (adr r2, 800926c <_svfprintf_r+0xe4>)
 8009268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926c:	0800946f 	.word	0x0800946f
 8009270:	08009eaf 	.word	0x08009eaf
 8009274:	08009eaf 	.word	0x08009eaf
 8009278:	08009481 	.word	0x08009481
 800927c:	08009eaf 	.word	0x08009eaf
 8009280:	08009eaf 	.word	0x08009eaf
 8009284:	08009eaf 	.word	0x08009eaf
 8009288:	08009435 	.word	0x08009435
 800928c:	08009eaf 	.word	0x08009eaf
 8009290:	08009eaf 	.word	0x08009eaf
 8009294:	08009487 	.word	0x08009487
 8009298:	0800949f 	.word	0x0800949f
 800929c:	08009eaf 	.word	0x08009eaf
 80092a0:	08009499 	.word	0x08009499
 80092a4:	080094a3 	.word	0x080094a3
 80092a8:	08009eaf 	.word	0x08009eaf
 80092ac:	080094d7 	.word	0x080094d7
 80092b0:	080094dd 	.word	0x080094dd
 80092b4:	080094dd 	.word	0x080094dd
 80092b8:	080094dd 	.word	0x080094dd
 80092bc:	080094dd 	.word	0x080094dd
 80092c0:	080094dd 	.word	0x080094dd
 80092c4:	080094dd 	.word	0x080094dd
 80092c8:	080094dd 	.word	0x080094dd
 80092cc:	080094dd 	.word	0x080094dd
 80092d0:	080094dd 	.word	0x080094dd
 80092d4:	08009eaf 	.word	0x08009eaf
 80092d8:	08009eaf 	.word	0x08009eaf
 80092dc:	08009eaf 	.word	0x08009eaf
 80092e0:	08009eaf 	.word	0x08009eaf
 80092e4:	08009eaf 	.word	0x08009eaf
 80092e8:	08009eaf 	.word	0x08009eaf
 80092ec:	08009eaf 	.word	0x08009eaf
 80092f0:	080095df 	.word	0x080095df
 80092f4:	08009eaf 	.word	0x08009eaf
 80092f8:	08009549 	.word	0x08009549
 80092fc:	0800956b 	.word	0x0800956b
 8009300:	080095df 	.word	0x080095df
 8009304:	080095df 	.word	0x080095df
 8009308:	080095df 	.word	0x080095df
 800930c:	08009eaf 	.word	0x08009eaf
 8009310:	08009eaf 	.word	0x08009eaf
 8009314:	08009eaf 	.word	0x08009eaf
 8009318:	08009eaf 	.word	0x08009eaf
 800931c:	080094fd 	.word	0x080094fd
 8009320:	08009eaf 	.word	0x08009eaf
 8009324:	08009eaf 	.word	0x08009eaf
 8009328:	08009ab1 	.word	0x08009ab1
 800932c:	08009eaf 	.word	0x08009eaf
 8009330:	08009eaf 	.word	0x08009eaf
 8009334:	08009eaf 	.word	0x08009eaf
 8009338:	08009b3d 	.word	0x08009b3d
 800933c:	08009eaf 	.word	0x08009eaf
 8009340:	08009d1f 	.word	0x08009d1f
 8009344:	08009eaf 	.word	0x08009eaf
 8009348:	08009eaf 	.word	0x08009eaf
 800934c:	080093f5 	.word	0x080093f5
 8009350:	08009eaf 	.word	0x08009eaf
 8009354:	08009eaf 	.word	0x08009eaf
 8009358:	08009eaf 	.word	0x08009eaf
 800935c:	08009eaf 	.word	0x08009eaf
 8009360:	08009eaf 	.word	0x08009eaf
 8009364:	08009eaf 	.word	0x08009eaf
 8009368:	08009eaf 	.word	0x08009eaf
 800936c:	08009eaf 	.word	0x08009eaf
 8009370:	080095df 	.word	0x080095df
 8009374:	08009eaf 	.word	0x08009eaf
 8009378:	08009549 	.word	0x08009549
 800937c:	0800956f 	.word	0x0800956f
 8009380:	080095df 	.word	0x080095df
 8009384:	080095df 	.word	0x080095df
 8009388:	080095df 	.word	0x080095df
 800938c:	08009515 	.word	0x08009515
 8009390:	0800956f 	.word	0x0800956f
 8009394:	0800953d 	.word	0x0800953d
 8009398:	08009eaf 	.word	0x08009eaf
 800939c:	0800952f 	.word	0x0800952f
 80093a0:	08009eaf 	.word	0x08009eaf
 80093a4:	08009a6b 	.word	0x08009a6b
 80093a8:	08009ab5 	.word	0x08009ab5
 80093ac:	08009b1d 	.word	0x08009b1d
 80093b0:	0800953d 	.word	0x0800953d
 80093b4:	08009eaf 	.word	0x08009eaf
 80093b8:	08009b3d 	.word	0x08009b3d
 80093bc:	08009251 	.word	0x08009251
 80093c0:	08009d23 	.word	0x08009d23
 80093c4:	08009eaf 	.word	0x08009eaf
 80093c8:	08009eaf 	.word	0x08009eaf
 80093cc:	08009d61 	.word	0x08009d61
 80093d0:	08009eaf 	.word	0x08009eaf
 80093d4:	08009251 	.word	0x08009251
 80093d8:	461d      	mov	r5, r3
 80093da:	e712      	b.n	8009202 <_svfprintf_r+0x7a>
 80093dc:	aa26      	add	r2, sp, #152	; 0x98
 80093de:	4641      	mov	r1, r8
 80093e0:	9803      	ldr	r0, [sp, #12]
 80093e2:	f002 fff6 	bl	800c3d2 <__ssprint_r>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	f040 8166 	bne.w	80096b8 <_svfprintf_r+0x530>
 80093ec:	ac29      	add	r4, sp, #164	; 0xa4
 80093ee:	e71e      	b.n	800922e <_svfprintf_r+0xa6>
 80093f0:	461e      	mov	r6, r3
 80093f2:	e72d      	b.n	8009250 <_svfprintf_r+0xc8>
 80093f4:	4b46      	ldr	r3, [pc, #280]	; (8009510 <_svfprintf_r+0x388>)
 80093f6:	9318      	str	r3, [sp, #96]	; 0x60
 80093f8:	f01a 0f20 	tst.w	sl, #32
 80093fc:	f000 84b3 	beq.w	8009d66 <_svfprintf_r+0xbde>
 8009400:	3607      	adds	r6, #7
 8009402:	f026 0607 	bic.w	r6, r6, #7
 8009406:	f106 0308 	add.w	r3, r6, #8
 800940a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800940e:	9308      	str	r3, [sp, #32]
 8009410:	f01a 0f01 	tst.w	sl, #1
 8009414:	d00a      	beq.n	800942c <_svfprintf_r+0x2a4>
 8009416:	ea56 0307 	orrs.w	r3, r6, r7
 800941a:	d007      	beq.n	800942c <_svfprintf_r+0x2a4>
 800941c:	2330      	movs	r3, #48	; 0x30
 800941e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8009422:	9b06      	ldr	r3, [sp, #24]
 8009424:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8009428:	f04a 0a02 	orr.w	sl, sl, #2
 800942c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009430:	2302      	movs	r3, #2
 8009432:	e34d      	b.n	8009ad0 <_svfprintf_r+0x948>
 8009434:	9803      	ldr	r0, [sp, #12]
 8009436:	f002 fb6d 	bl	800bb14 <_localeconv_r>
 800943a:	6843      	ldr	r3, [r0, #4]
 800943c:	9319      	str	r3, [sp, #100]	; 0x64
 800943e:	4618      	mov	r0, r3
 8009440:	f7f6 fec6 	bl	80001d0 <strlen>
 8009444:	9012      	str	r0, [sp, #72]	; 0x48
 8009446:	9803      	ldr	r0, [sp, #12]
 8009448:	f002 fb64 	bl	800bb14 <_localeconv_r>
 800944c:	6883      	ldr	r3, [r0, #8]
 800944e:	9309      	str	r3, [sp, #36]	; 0x24
 8009450:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009452:	2b00      	cmp	r3, #0
 8009454:	f43f aefc 	beq.w	8009250 <_svfprintf_r+0xc8>
 8009458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945a:	2b00      	cmp	r3, #0
 800945c:	f43f aef8 	beq.w	8009250 <_svfprintf_r+0xc8>
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	f43f aef4 	beq.w	8009250 <_svfprintf_r+0xc8>
 8009468:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800946c:	e6f0      	b.n	8009250 <_svfprintf_r+0xc8>
 800946e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8009472:	2b00      	cmp	r3, #0
 8009474:	f47f aeec 	bne.w	8009250 <_svfprintf_r+0xc8>
 8009478:	2320      	movs	r3, #32
 800947a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800947e:	e6e7      	b.n	8009250 <_svfprintf_r+0xc8>
 8009480:	f04a 0a01 	orr.w	sl, sl, #1
 8009484:	e6e4      	b.n	8009250 <_svfprintf_r+0xc8>
 8009486:	6832      	ldr	r2, [r6, #0]
 8009488:	920f      	str	r2, [sp, #60]	; 0x3c
 800948a:	2a00      	cmp	r2, #0
 800948c:	f106 0304 	add.w	r3, r6, #4
 8009490:	daae      	bge.n	80093f0 <_svfprintf_r+0x268>
 8009492:	4252      	negs	r2, r2
 8009494:	920f      	str	r2, [sp, #60]	; 0x3c
 8009496:	461e      	mov	r6, r3
 8009498:	f04a 0a04 	orr.w	sl, sl, #4
 800949c:	e6d8      	b.n	8009250 <_svfprintf_r+0xc8>
 800949e:	232b      	movs	r3, #43	; 0x2b
 80094a0:	e7eb      	b.n	800947a <_svfprintf_r+0x2f2>
 80094a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094a6:	7812      	ldrb	r2, [r2, #0]
 80094a8:	9206      	str	r2, [sp, #24]
 80094aa:	2a2a      	cmp	r2, #42	; 0x2a
 80094ac:	f103 0301 	add.w	r3, r3, #1
 80094b0:	d10f      	bne.n	80094d2 <_svfprintf_r+0x34a>
 80094b2:	6835      	ldr	r5, [r6, #0]
 80094b4:	930c      	str	r3, [sp, #48]	; 0x30
 80094b6:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80094ba:	3604      	adds	r6, #4
 80094bc:	e6c8      	b.n	8009250 <_svfprintf_r+0xc8>
 80094be:	fb07 2505 	mla	r5, r7, r5, r2
 80094c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094c6:	9206      	str	r2, [sp, #24]
 80094c8:	9a06      	ldr	r2, [sp, #24]
 80094ca:	3a30      	subs	r2, #48	; 0x30
 80094cc:	2a09      	cmp	r2, #9
 80094ce:	d9f6      	bls.n	80094be <_svfprintf_r+0x336>
 80094d0:	e6c3      	b.n	800925a <_svfprintf_r+0xd2>
 80094d2:	2500      	movs	r5, #0
 80094d4:	e7f8      	b.n	80094c8 <_svfprintf_r+0x340>
 80094d6:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80094da:	e6b9      	b.n	8009250 <_svfprintf_r+0xc8>
 80094dc:	2200      	movs	r2, #0
 80094de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094e0:	920f      	str	r2, [sp, #60]	; 0x3c
 80094e2:	9a06      	ldr	r2, [sp, #24]
 80094e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80094e6:	3a30      	subs	r2, #48	; 0x30
 80094e8:	fb07 2201 	mla	r2, r7, r1, r2
 80094ec:	920f      	str	r2, [sp, #60]	; 0x3c
 80094ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094f2:	9206      	str	r2, [sp, #24]
 80094f4:	3a30      	subs	r2, #48	; 0x30
 80094f6:	2a09      	cmp	r2, #9
 80094f8:	d9f3      	bls.n	80094e2 <_svfprintf_r+0x35a>
 80094fa:	e6ae      	b.n	800925a <_svfprintf_r+0xd2>
 80094fc:	f04a 0a08 	orr.w	sl, sl, #8
 8009500:	e6a6      	b.n	8009250 <_svfprintf_r+0xc8>
 8009502:	bf00      	nop
 8009504:	f3af 8000 	nop.w
	...
 8009510:	0800f391 	.word	0x0800f391
 8009514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	2b68      	cmp	r3, #104	; 0x68
 800951a:	bf01      	itttt	eq
 800951c:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 800951e:	3301      	addeq	r3, #1
 8009520:	930c      	streq	r3, [sp, #48]	; 0x30
 8009522:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8009526:	bf18      	it	ne
 8009528:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800952c:	e690      	b.n	8009250 <_svfprintf_r+0xc8>
 800952e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b6c      	cmp	r3, #108	; 0x6c
 8009534:	d105      	bne.n	8009542 <_svfprintf_r+0x3ba>
 8009536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009538:	3301      	adds	r3, #1
 800953a:	930c      	str	r3, [sp, #48]	; 0x30
 800953c:	f04a 0a20 	orr.w	sl, sl, #32
 8009540:	e686      	b.n	8009250 <_svfprintf_r+0xc8>
 8009542:	f04a 0a10 	orr.w	sl, sl, #16
 8009546:	e683      	b.n	8009250 <_svfprintf_r+0xc8>
 8009548:	1d33      	adds	r3, r6, #4
 800954a:	9308      	str	r3, [sp, #32]
 800954c:	2000      	movs	r0, #0
 800954e:	6833      	ldr	r3, [r6, #0]
 8009550:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8009554:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8009558:	4681      	mov	r9, r0
 800955a:	2501      	movs	r5, #1
 800955c:	9010      	str	r0, [sp, #64]	; 0x40
 800955e:	4607      	mov	r7, r0
 8009560:	9007      	str	r0, [sp, #28]
 8009562:	4606      	mov	r6, r0
 8009564:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8009568:	e301      	b.n	8009b6e <_svfprintf_r+0x9e6>
 800956a:	f04a 0a10 	orr.w	sl, sl, #16
 800956e:	f01a 0f20 	tst.w	sl, #32
 8009572:	d021      	beq.n	80095b8 <_svfprintf_r+0x430>
 8009574:	3607      	adds	r6, #7
 8009576:	f026 0607 	bic.w	r6, r6, #7
 800957a:	f106 0308 	add.w	r3, r6, #8
 800957e:	e9d6 6700 	ldrd	r6, r7, [r6]
 8009582:	9308      	str	r3, [sp, #32]
 8009584:	2e00      	cmp	r6, #0
 8009586:	f177 0300 	sbcs.w	r3, r7, #0
 800958a:	da06      	bge.n	800959a <_svfprintf_r+0x412>
 800958c:	4276      	negs	r6, r6
 800958e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8009592:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8009596:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800959a:	1c6b      	adds	r3, r5, #1
 800959c:	f040 83f6 	bne.w	8009d8c <_svfprintf_r+0xc04>
 80095a0:	2f00      	cmp	r7, #0
 80095a2:	bf08      	it	eq
 80095a4:	2e0a      	cmpeq	r6, #10
 80095a6:	f080 8427 	bcs.w	8009df8 <_svfprintf_r+0xc70>
 80095aa:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 80095ae:	3630      	adds	r6, #48	; 0x30
 80095b0:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 80095b4:	f000 bc0d 	b.w	8009dd2 <_svfprintf_r+0xc4a>
 80095b8:	1d33      	adds	r3, r6, #4
 80095ba:	f01a 0f10 	tst.w	sl, #16
 80095be:	9308      	str	r3, [sp, #32]
 80095c0:	d002      	beq.n	80095c8 <_svfprintf_r+0x440>
 80095c2:	6836      	ldr	r6, [r6, #0]
 80095c4:	17f7      	asrs	r7, r6, #31
 80095c6:	e7dd      	b.n	8009584 <_svfprintf_r+0x3fc>
 80095c8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80095cc:	6836      	ldr	r6, [r6, #0]
 80095ce:	d001      	beq.n	80095d4 <_svfprintf_r+0x44c>
 80095d0:	b236      	sxth	r6, r6
 80095d2:	e7f7      	b.n	80095c4 <_svfprintf_r+0x43c>
 80095d4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80095d8:	bf18      	it	ne
 80095da:	b276      	sxtbne	r6, r6
 80095dc:	e7f2      	b.n	80095c4 <_svfprintf_r+0x43c>
 80095de:	3607      	adds	r6, #7
 80095e0:	f026 0607 	bic.w	r6, r6, #7
 80095e4:	ed96 7b00 	vldr	d7, [r6]
 80095e8:	f106 0308 	add.w	r3, r6, #8
 80095ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80095f0:	9308      	str	r3, [sp, #32]
 80095f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f4:	931a      	str	r3, [sp, #104]	; 0x68
 80095f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80095fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009602:	4bb2      	ldr	r3, [pc, #712]	; (80098cc <_svfprintf_r+0x744>)
 8009604:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8009608:	f7f7 fa90 	bl	8000b2c <__aeabi_dcmpun>
 800960c:	bb00      	cbnz	r0, 8009650 <_svfprintf_r+0x4c8>
 800960e:	f04f 32ff 	mov.w	r2, #4294967295
 8009612:	4bae      	ldr	r3, [pc, #696]	; (80098cc <_svfprintf_r+0x744>)
 8009614:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8009618:	f7f7 fa6a 	bl	8000af0 <__aeabi_dcmple>
 800961c:	b9c0      	cbnz	r0, 8009650 <_svfprintf_r+0x4c8>
 800961e:	2200      	movs	r2, #0
 8009620:	2300      	movs	r3, #0
 8009622:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009626:	f7f7 fa59 	bl	8000adc <__aeabi_dcmplt>
 800962a:	b110      	cbz	r0, 8009632 <_svfprintf_r+0x4aa>
 800962c:	232d      	movs	r3, #45	; 0x2d
 800962e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8009632:	4aa7      	ldr	r2, [pc, #668]	; (80098d0 <_svfprintf_r+0x748>)
 8009634:	4ba7      	ldr	r3, [pc, #668]	; (80098d4 <_svfprintf_r+0x74c>)
 8009636:	9906      	ldr	r1, [sp, #24]
 8009638:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800963c:	2947      	cmp	r1, #71	; 0x47
 800963e:	bfcc      	ite	gt
 8009640:	4693      	movgt	fp, r2
 8009642:	469b      	movle	fp, r3
 8009644:	f04f 0900 	mov.w	r9, #0
 8009648:	2503      	movs	r5, #3
 800964a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800964e:	e3c6      	b.n	8009dde <_svfprintf_r+0xc56>
 8009650:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009654:	4610      	mov	r0, r2
 8009656:	4619      	mov	r1, r3
 8009658:	f7f7 fa68 	bl	8000b2c <__aeabi_dcmpun>
 800965c:	4681      	mov	r9, r0
 800965e:	b140      	cbz	r0, 8009672 <_svfprintf_r+0x4ea>
 8009660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009662:	4a9d      	ldr	r2, [pc, #628]	; (80098d8 <_svfprintf_r+0x750>)
 8009664:	2b00      	cmp	r3, #0
 8009666:	bfbc      	itt	lt
 8009668:	232d      	movlt	r3, #45	; 0x2d
 800966a:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 800966e:	4b9b      	ldr	r3, [pc, #620]	; (80098dc <_svfprintf_r+0x754>)
 8009670:	e7e1      	b.n	8009636 <_svfprintf_r+0x4ae>
 8009672:	9b06      	ldr	r3, [sp, #24]
 8009674:	f023 0320 	bic.w	r3, r3, #32
 8009678:	2b41      	cmp	r3, #65	; 0x41
 800967a:	9307      	str	r3, [sp, #28]
 800967c:	d125      	bne.n	80096ca <_svfprintf_r+0x542>
 800967e:	2330      	movs	r3, #48	; 0x30
 8009680:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8009684:	9b06      	ldr	r3, [sp, #24]
 8009686:	2b61      	cmp	r3, #97	; 0x61
 8009688:	bf14      	ite	ne
 800968a:	2358      	movne	r3, #88	; 0x58
 800968c:	2378      	moveq	r3, #120	; 0x78
 800968e:	2d63      	cmp	r5, #99	; 0x63
 8009690:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8009694:	f04a 0a02 	orr.w	sl, sl, #2
 8009698:	f340 8108 	ble.w	80098ac <_svfprintf_r+0x724>
 800969c:	1c69      	adds	r1, r5, #1
 800969e:	9803      	ldr	r0, [sp, #12]
 80096a0:	f7fe fc3e 	bl	8007f20 <_malloc_r>
 80096a4:	4683      	mov	fp, r0
 80096a6:	2800      	cmp	r0, #0
 80096a8:	f040 8103 	bne.w	80098b2 <_svfprintf_r+0x72a>
 80096ac:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80096b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096b4:	f8a8 300c 	strh.w	r3, [r8, #12]
 80096b8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80096bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80096c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096c2:	bf18      	it	ne
 80096c4:	f04f 33ff 	movne.w	r3, #4294967295
 80096c8:	e582      	b.n	80091d0 <_svfprintf_r+0x48>
 80096ca:	1c69      	adds	r1, r5, #1
 80096cc:	f000 80f3 	beq.w	80098b6 <_svfprintf_r+0x72e>
 80096d0:	9b07      	ldr	r3, [sp, #28]
 80096d2:	2b47      	cmp	r3, #71	; 0x47
 80096d4:	d102      	bne.n	80096dc <_svfprintf_r+0x554>
 80096d6:	2d00      	cmp	r5, #0
 80096d8:	f000 80ef 	beq.w	80098ba <_svfprintf_r+0x732>
 80096dc:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 80096e0:	9310      	str	r3, [sp, #64]	; 0x40
 80096e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f280 80eb 	bge.w	80098c0 <_svfprintf_r+0x738>
 80096ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096ec:	9314      	str	r3, [sp, #80]	; 0x50
 80096ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80096f4:	9315      	str	r3, [sp, #84]	; 0x54
 80096f6:	232d      	movs	r3, #45	; 0x2d
 80096f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80096fa:	9b07      	ldr	r3, [sp, #28]
 80096fc:	2b41      	cmp	r3, #65	; 0x41
 80096fe:	f040 8105 	bne.w	800990c <_svfprintf_r+0x784>
 8009702:	a820      	add	r0, sp, #128	; 0x80
 8009704:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8009708:	f002 fe06 	bl	800c318 <frexp>
 800970c:	2200      	movs	r2, #0
 800970e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009712:	ec51 0b10 	vmov	r0, r1, d0
 8009716:	f7f6 ff6f 	bl	80005f8 <__aeabi_dmul>
 800971a:	2200      	movs	r2, #0
 800971c:	2300      	movs	r3, #0
 800971e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009722:	f7f7 f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009726:	b108      	cbz	r0, 800972c <_svfprintf_r+0x5a4>
 8009728:	2301      	movs	r3, #1
 800972a:	9320      	str	r3, [sp, #128]	; 0x80
 800972c:	4f6c      	ldr	r7, [pc, #432]	; (80098e0 <_svfprintf_r+0x758>)
 800972e:	4b6d      	ldr	r3, [pc, #436]	; (80098e4 <_svfprintf_r+0x75c>)
 8009730:	9a06      	ldr	r2, [sp, #24]
 8009732:	2a61      	cmp	r2, #97	; 0x61
 8009734:	bf08      	it	eq
 8009736:	461f      	moveq	r7, r3
 8009738:	9711      	str	r7, [sp, #68]	; 0x44
 800973a:	465e      	mov	r6, fp
 800973c:	1e6f      	subs	r7, r5, #1
 800973e:	2200      	movs	r2, #0
 8009740:	4b69      	ldr	r3, [pc, #420]	; (80098e8 <_svfprintf_r+0x760>)
 8009742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009746:	f7f6 ff57 	bl	80005f8 <__aeabi_dmul>
 800974a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800974e:	f7f7 fa03 	bl	8000b58 <__aeabi_d2iz>
 8009752:	901c      	str	r0, [sp, #112]	; 0x70
 8009754:	f7f6 fee6 	bl	8000524 <__aeabi_i2d>
 8009758:	4602      	mov	r2, r0
 800975a:	460b      	mov	r3, r1
 800975c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009760:	f7f6 fd92 	bl	8000288 <__aeabi_dsub>
 8009764:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009768:	971d      	str	r7, [sp, #116]	; 0x74
 800976a:	5c9b      	ldrb	r3, [r3, r2]
 800976c:	f806 3b01 	strb.w	r3, [r6], #1
 8009770:	1c7a      	adds	r2, r7, #1
 8009772:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009776:	d006      	beq.n	8009786 <_svfprintf_r+0x5fe>
 8009778:	2200      	movs	r2, #0
 800977a:	2300      	movs	r3, #0
 800977c:	3f01      	subs	r7, #1
 800977e:	f7f7 f9a3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009782:	2800      	cmp	r0, #0
 8009784:	d0db      	beq.n	800973e <_svfprintf_r+0x5b6>
 8009786:	2200      	movs	r2, #0
 8009788:	4b58      	ldr	r3, [pc, #352]	; (80098ec <_svfprintf_r+0x764>)
 800978a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800978e:	f7f7 f9c3 	bl	8000b18 <__aeabi_dcmpgt>
 8009792:	b960      	cbnz	r0, 80097ae <_svfprintf_r+0x626>
 8009794:	2200      	movs	r2, #0
 8009796:	4b55      	ldr	r3, [pc, #340]	; (80098ec <_svfprintf_r+0x764>)
 8009798:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800979c:	f7f7 f994 	bl	8000ac8 <__aeabi_dcmpeq>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	f000 80ae 	beq.w	8009902 <_svfprintf_r+0x77a>
 80097a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80097a8:	07db      	lsls	r3, r3, #31
 80097aa:	f140 80aa 	bpl.w	8009902 <_svfprintf_r+0x77a>
 80097ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097b0:	9624      	str	r6, [sp, #144]	; 0x90
 80097b2:	7bd9      	ldrb	r1, [r3, #15]
 80097b4:	2030      	movs	r0, #48	; 0x30
 80097b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80097b8:	1e53      	subs	r3, r2, #1
 80097ba:	9324      	str	r3, [sp, #144]	; 0x90
 80097bc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80097c0:	428b      	cmp	r3, r1
 80097c2:	f000 8095 	beq.w	80098f0 <_svfprintf_r+0x768>
 80097c6:	2b39      	cmp	r3, #57	; 0x39
 80097c8:	bf0b      	itete	eq
 80097ca:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 80097cc:	3301      	addne	r3, #1
 80097ce:	7a9b      	ldrbeq	r3, [r3, #10]
 80097d0:	b2db      	uxtbne	r3, r3
 80097d2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80097d6:	4633      	mov	r3, r6
 80097d8:	eba3 030b 	sub.w	r3, r3, fp
 80097dc:	9304      	str	r3, [sp, #16]
 80097de:	9b07      	ldr	r3, [sp, #28]
 80097e0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80097e2:	2b47      	cmp	r3, #71	; 0x47
 80097e4:	f040 80d7 	bne.w	8009996 <_svfprintf_r+0x80e>
 80097e8:	1cf7      	adds	r7, r6, #3
 80097ea:	db02      	blt.n	80097f2 <_svfprintf_r+0x66a>
 80097ec:	42b5      	cmp	r5, r6
 80097ee:	f280 80fd 	bge.w	80099ec <_svfprintf_r+0x864>
 80097f2:	9b06      	ldr	r3, [sp, #24]
 80097f4:	3b02      	subs	r3, #2
 80097f6:	9306      	str	r3, [sp, #24]
 80097f8:	9906      	ldr	r1, [sp, #24]
 80097fa:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80097fe:	f021 0120 	bic.w	r1, r1, #32
 8009802:	2941      	cmp	r1, #65	; 0x41
 8009804:	bf08      	it	eq
 8009806:	320f      	addeq	r2, #15
 8009808:	f106 33ff 	add.w	r3, r6, #4294967295
 800980c:	bf06      	itte	eq
 800980e:	b2d2      	uxtbeq	r2, r2
 8009810:	2101      	moveq	r1, #1
 8009812:	2100      	movne	r1, #0
 8009814:	2b00      	cmp	r3, #0
 8009816:	9320      	str	r3, [sp, #128]	; 0x80
 8009818:	bfb8      	it	lt
 800981a:	f1c6 0301 	rsblt	r3, r6, #1
 800981e:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8009822:	bfb4      	ite	lt
 8009824:	222d      	movlt	r2, #45	; 0x2d
 8009826:	222b      	movge	r2, #43	; 0x2b
 8009828:	2b09      	cmp	r3, #9
 800982a:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 800982e:	f340 80c9 	ble.w	80099c4 <_svfprintf_r+0x83c>
 8009832:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8009836:	250a      	movs	r5, #10
 8009838:	fb93 f0f5 	sdiv	r0, r3, r5
 800983c:	fb05 3310 	mls	r3, r5, r0, r3
 8009840:	3330      	adds	r3, #48	; 0x30
 8009842:	2809      	cmp	r0, #9
 8009844:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009848:	f102 31ff 	add.w	r1, r2, #4294967295
 800984c:	4603      	mov	r3, r0
 800984e:	f300 80b2 	bgt.w	80099b6 <_svfprintf_r+0x82e>
 8009852:	3330      	adds	r3, #48	; 0x30
 8009854:	f801 3c01 	strb.w	r3, [r1, #-1]
 8009858:	3a02      	subs	r2, #2
 800985a:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 800985e:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8009862:	4282      	cmp	r2, r0
 8009864:	4619      	mov	r1, r3
 8009866:	f0c0 80a8 	bcc.w	80099ba <_svfprintf_r+0x832>
 800986a:	9a04      	ldr	r2, [sp, #16]
 800986c:	ab22      	add	r3, sp, #136	; 0x88
 800986e:	1acb      	subs	r3, r1, r3
 8009870:	2a01      	cmp	r2, #1
 8009872:	9317      	str	r3, [sp, #92]	; 0x5c
 8009874:	eb03 0502 	add.w	r5, r3, r2
 8009878:	dc02      	bgt.n	8009880 <_svfprintf_r+0x6f8>
 800987a:	f01a 0f01 	tst.w	sl, #1
 800987e:	d001      	beq.n	8009884 <_svfprintf_r+0x6fc>
 8009880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009882:	441d      	add	r5, r3
 8009884:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8009888:	2700      	movs	r7, #0
 800988a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800988e:	9310      	str	r3, [sp, #64]	; 0x40
 8009890:	9707      	str	r7, [sp, #28]
 8009892:	463e      	mov	r6, r7
 8009894:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009896:	2b00      	cmp	r3, #0
 8009898:	f000 8315 	beq.w	8009ec6 <_svfprintf_r+0xd3e>
 800989c:	232d      	movs	r3, #45	; 0x2d
 800989e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 80098a2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80098a6:	2300      	movs	r3, #0
 80098a8:	9310      	str	r3, [sp, #64]	; 0x40
 80098aa:	e160      	b.n	8009b6e <_svfprintf_r+0x9e6>
 80098ac:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80098b0:	e714      	b.n	80096dc <_svfprintf_r+0x554>
 80098b2:	4681      	mov	r9, r0
 80098b4:	e712      	b.n	80096dc <_svfprintf_r+0x554>
 80098b6:	2506      	movs	r5, #6
 80098b8:	e710      	b.n	80096dc <_svfprintf_r+0x554>
 80098ba:	46a9      	mov	r9, r5
 80098bc:	2501      	movs	r5, #1
 80098be:	e70d      	b.n	80096dc <_svfprintf_r+0x554>
 80098c0:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80098c4:	2300      	movs	r3, #0
 80098c6:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80098ca:	e715      	b.n	80096f8 <_svfprintf_r+0x570>
 80098cc:	7fefffff 	.word	0x7fefffff
 80098d0:	0800f374 	.word	0x0800f374
 80098d4:	0800f370 	.word	0x0800f370
 80098d8:	0800f37c 	.word	0x0800f37c
 80098dc:	0800f378 	.word	0x0800f378
 80098e0:	0800f391 	.word	0x0800f391
 80098e4:	0800f380 	.word	0x0800f380
 80098e8:	40300000 	.word	0x40300000
 80098ec:	3fe00000 	.word	0x3fe00000
 80098f0:	f802 0c01 	strb.w	r0, [r2, #-1]
 80098f4:	e75f      	b.n	80097b6 <_svfprintf_r+0x62e>
 80098f6:	f803 1b01 	strb.w	r1, [r3], #1
 80098fa:	1af2      	subs	r2, r6, r3
 80098fc:	2a00      	cmp	r2, #0
 80098fe:	dafa      	bge.n	80098f6 <_svfprintf_r+0x76e>
 8009900:	e76a      	b.n	80097d8 <_svfprintf_r+0x650>
 8009902:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009904:	4633      	mov	r3, r6
 8009906:	2130      	movs	r1, #48	; 0x30
 8009908:	4416      	add	r6, r2
 800990a:	e7f6      	b.n	80098fa <_svfprintf_r+0x772>
 800990c:	9b07      	ldr	r3, [sp, #28]
 800990e:	2b46      	cmp	r3, #70	; 0x46
 8009910:	d004      	beq.n	800991c <_svfprintf_r+0x794>
 8009912:	2b45      	cmp	r3, #69	; 0x45
 8009914:	d13a      	bne.n	800998c <_svfprintf_r+0x804>
 8009916:	1c6e      	adds	r6, r5, #1
 8009918:	2102      	movs	r1, #2
 800991a:	e001      	b.n	8009920 <_svfprintf_r+0x798>
 800991c:	462e      	mov	r6, r5
 800991e:	2103      	movs	r1, #3
 8009920:	ab24      	add	r3, sp, #144	; 0x90
 8009922:	9301      	str	r3, [sp, #4]
 8009924:	ab21      	add	r3, sp, #132	; 0x84
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	4632      	mov	r2, r6
 800992a:	ab20      	add	r3, sp, #128	; 0x80
 800992c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8009930:	9803      	ldr	r0, [sp, #12]
 8009932:	f000 fef1 	bl	800a718 <_dtoa_r>
 8009936:	9b07      	ldr	r3, [sp, #28]
 8009938:	2b47      	cmp	r3, #71	; 0x47
 800993a:	4683      	mov	fp, r0
 800993c:	d102      	bne.n	8009944 <_svfprintf_r+0x7bc>
 800993e:	f01a 0f01 	tst.w	sl, #1
 8009942:	d026      	beq.n	8009992 <_svfprintf_r+0x80a>
 8009944:	9b07      	ldr	r3, [sp, #28]
 8009946:	2b46      	cmp	r3, #70	; 0x46
 8009948:	eb0b 0706 	add.w	r7, fp, r6
 800994c:	d10f      	bne.n	800996e <_svfprintf_r+0x7e6>
 800994e:	f89b 3000 	ldrb.w	r3, [fp]
 8009952:	2b30      	cmp	r3, #48	; 0x30
 8009954:	d109      	bne.n	800996a <_svfprintf_r+0x7e2>
 8009956:	2200      	movs	r2, #0
 8009958:	2300      	movs	r3, #0
 800995a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800995e:	f7f7 f8b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009962:	b910      	cbnz	r0, 800996a <_svfprintf_r+0x7e2>
 8009964:	f1c6 0601 	rsb	r6, r6, #1
 8009968:	9620      	str	r6, [sp, #128]	; 0x80
 800996a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800996c:	441f      	add	r7, r3
 800996e:	2200      	movs	r2, #0
 8009970:	2300      	movs	r3, #0
 8009972:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8009976:	f7f7 f8a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800997a:	b948      	cbnz	r0, 8009990 <_svfprintf_r+0x808>
 800997c:	2230      	movs	r2, #48	; 0x30
 800997e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009980:	429f      	cmp	r7, r3
 8009982:	d906      	bls.n	8009992 <_svfprintf_r+0x80a>
 8009984:	1c59      	adds	r1, r3, #1
 8009986:	9124      	str	r1, [sp, #144]	; 0x90
 8009988:	701a      	strb	r2, [r3, #0]
 800998a:	e7f8      	b.n	800997e <_svfprintf_r+0x7f6>
 800998c:	462e      	mov	r6, r5
 800998e:	e7c3      	b.n	8009918 <_svfprintf_r+0x790>
 8009990:	9724      	str	r7, [sp, #144]	; 0x90
 8009992:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009994:	e720      	b.n	80097d8 <_svfprintf_r+0x650>
 8009996:	9b07      	ldr	r3, [sp, #28]
 8009998:	2b46      	cmp	r3, #70	; 0x46
 800999a:	f47f af2d 	bne.w	80097f8 <_svfprintf_r+0x670>
 800999e:	2e00      	cmp	r6, #0
 80099a0:	dd1d      	ble.n	80099de <_svfprintf_r+0x856>
 80099a2:	b915      	cbnz	r5, 80099aa <_svfprintf_r+0x822>
 80099a4:	f01a 0f01 	tst.w	sl, #1
 80099a8:	d034      	beq.n	8009a14 <_svfprintf_r+0x88c>
 80099aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099ac:	18f3      	adds	r3, r6, r3
 80099ae:	441d      	add	r5, r3
 80099b0:	2366      	movs	r3, #102	; 0x66
 80099b2:	9306      	str	r3, [sp, #24]
 80099b4:	e033      	b.n	8009a1e <_svfprintf_r+0x896>
 80099b6:	460a      	mov	r2, r1
 80099b8:	e73e      	b.n	8009838 <_svfprintf_r+0x6b0>
 80099ba:	f812 1b01 	ldrb.w	r1, [r2], #1
 80099be:	f803 1b01 	strb.w	r1, [r3], #1
 80099c2:	e74e      	b.n	8009862 <_svfprintf_r+0x6da>
 80099c4:	b941      	cbnz	r1, 80099d8 <_svfprintf_r+0x850>
 80099c6:	2230      	movs	r2, #48	; 0x30
 80099c8:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 80099cc:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 80099d0:	3330      	adds	r3, #48	; 0x30
 80099d2:	1c51      	adds	r1, r2, #1
 80099d4:	7013      	strb	r3, [r2, #0]
 80099d6:	e748      	b.n	800986a <_svfprintf_r+0x6e2>
 80099d8:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 80099dc:	e7f8      	b.n	80099d0 <_svfprintf_r+0x848>
 80099de:	b915      	cbnz	r5, 80099e6 <_svfprintf_r+0x85e>
 80099e0:	f01a 0f01 	tst.w	sl, #1
 80099e4:	d018      	beq.n	8009a18 <_svfprintf_r+0x890>
 80099e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099e8:	3301      	adds	r3, #1
 80099ea:	e7e0      	b.n	80099ae <_svfprintf_r+0x826>
 80099ec:	9b04      	ldr	r3, [sp, #16]
 80099ee:	42b3      	cmp	r3, r6
 80099f0:	dc06      	bgt.n	8009a00 <_svfprintf_r+0x878>
 80099f2:	f01a 0f01 	tst.w	sl, #1
 80099f6:	d025      	beq.n	8009a44 <_svfprintf_r+0x8bc>
 80099f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099fa:	18f5      	adds	r5, r6, r3
 80099fc:	2367      	movs	r3, #103	; 0x67
 80099fe:	e7d8      	b.n	80099b2 <_svfprintf_r+0x82a>
 8009a00:	9b04      	ldr	r3, [sp, #16]
 8009a02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a04:	2e00      	cmp	r6, #0
 8009a06:	eb03 0502 	add.w	r5, r3, r2
 8009a0a:	dcf7      	bgt.n	80099fc <_svfprintf_r+0x874>
 8009a0c:	f1c6 0301 	rsb	r3, r6, #1
 8009a10:	441d      	add	r5, r3
 8009a12:	e7f3      	b.n	80099fc <_svfprintf_r+0x874>
 8009a14:	4635      	mov	r5, r6
 8009a16:	e7cb      	b.n	80099b0 <_svfprintf_r+0x828>
 8009a18:	2366      	movs	r3, #102	; 0x66
 8009a1a:	9306      	str	r3, [sp, #24]
 8009a1c:	2501      	movs	r5, #1
 8009a1e:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8009a22:	9307      	str	r3, [sp, #28]
 8009a24:	d01f      	beq.n	8009a66 <_svfprintf_r+0x8de>
 8009a26:	2700      	movs	r7, #0
 8009a28:	2e00      	cmp	r6, #0
 8009a2a:	9707      	str	r7, [sp, #28]
 8009a2c:	f77f af32 	ble.w	8009894 <_svfprintf_r+0x70c>
 8009a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	2bff      	cmp	r3, #255	; 0xff
 8009a36:	d107      	bne.n	8009a48 <_svfprintf_r+0x8c0>
 8009a38:	9b07      	ldr	r3, [sp, #28]
 8009a3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a3c:	443b      	add	r3, r7
 8009a3e:	fb02 5503 	mla	r5, r2, r3, r5
 8009a42:	e727      	b.n	8009894 <_svfprintf_r+0x70c>
 8009a44:	4635      	mov	r5, r6
 8009a46:	e7d9      	b.n	80099fc <_svfprintf_r+0x874>
 8009a48:	42b3      	cmp	r3, r6
 8009a4a:	daf5      	bge.n	8009a38 <_svfprintf_r+0x8b0>
 8009a4c:	1af6      	subs	r6, r6, r3
 8009a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a50:	785b      	ldrb	r3, [r3, #1]
 8009a52:	b133      	cbz	r3, 8009a62 <_svfprintf_r+0x8da>
 8009a54:	9b07      	ldr	r3, [sp, #28]
 8009a56:	3301      	adds	r3, #1
 8009a58:	9307      	str	r3, [sp, #28]
 8009a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a60:	e7e6      	b.n	8009a30 <_svfprintf_r+0x8a8>
 8009a62:	3701      	adds	r7, #1
 8009a64:	e7e4      	b.n	8009a30 <_svfprintf_r+0x8a8>
 8009a66:	9f07      	ldr	r7, [sp, #28]
 8009a68:	e714      	b.n	8009894 <_svfprintf_r+0x70c>
 8009a6a:	4632      	mov	r2, r6
 8009a6c:	f01a 0f20 	tst.w	sl, #32
 8009a70:	f852 3b04 	ldr.w	r3, [r2], #4
 8009a74:	9208      	str	r2, [sp, #32]
 8009a76:	d009      	beq.n	8009a8c <_svfprintf_r+0x904>
 8009a78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	17d1      	asrs	r1, r2, #31
 8009a7e:	e9c3 0100 	strd	r0, r1, [r3]
 8009a82:	9e08      	ldr	r6, [sp, #32]
 8009a84:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8009a88:	f7ff bbba 	b.w	8009200 <_svfprintf_r+0x78>
 8009a8c:	f01a 0f10 	tst.w	sl, #16
 8009a90:	d002      	beq.n	8009a98 <_svfprintf_r+0x910>
 8009a92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a94:	601a      	str	r2, [r3, #0]
 8009a96:	e7f4      	b.n	8009a82 <_svfprintf_r+0x8fa>
 8009a98:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009a9c:	d002      	beq.n	8009aa4 <_svfprintf_r+0x91c>
 8009a9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009aa0:	801a      	strh	r2, [r3, #0]
 8009aa2:	e7ee      	b.n	8009a82 <_svfprintf_r+0x8fa>
 8009aa4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009aa8:	d0f3      	beq.n	8009a92 <_svfprintf_r+0x90a>
 8009aaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009aac:	701a      	strb	r2, [r3, #0]
 8009aae:	e7e8      	b.n	8009a82 <_svfprintf_r+0x8fa>
 8009ab0:	f04a 0a10 	orr.w	sl, sl, #16
 8009ab4:	f01a 0f20 	tst.w	sl, #32
 8009ab8:	d01e      	beq.n	8009af8 <_svfprintf_r+0x970>
 8009aba:	3607      	adds	r6, #7
 8009abc:	f026 0607 	bic.w	r6, r6, #7
 8009ac0:	f106 0308 	add.w	r3, r6, #8
 8009ac4:	e9d6 6700 	ldrd	r6, r7, [r6]
 8009ac8:	9308      	str	r3, [sp, #32]
 8009aca:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009ace:	2300      	movs	r3, #0
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	1c69      	adds	r1, r5, #1
 8009ad4:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8009ad8:	f000 815b 	beq.w	8009d92 <_svfprintf_r+0xc0a>
 8009adc:	4652      	mov	r2, sl
 8009ade:	ea56 0107 	orrs.w	r1, r6, r7
 8009ae2:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8009ae6:	f040 8154 	bne.w	8009d92 <_svfprintf_r+0xc0a>
 8009aea:	2d00      	cmp	r5, #0
 8009aec:	f000 81d5 	beq.w	8009e9a <_svfprintf_r+0xd12>
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	f040 8151 	bne.w	8009d98 <_svfprintf_r+0xc10>
 8009af6:	e558      	b.n	80095aa <_svfprintf_r+0x422>
 8009af8:	1d33      	adds	r3, r6, #4
 8009afa:	f01a 0f10 	tst.w	sl, #16
 8009afe:	9308      	str	r3, [sp, #32]
 8009b00:	d001      	beq.n	8009b06 <_svfprintf_r+0x97e>
 8009b02:	6836      	ldr	r6, [r6, #0]
 8009b04:	e003      	b.n	8009b0e <_svfprintf_r+0x986>
 8009b06:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009b0a:	d002      	beq.n	8009b12 <_svfprintf_r+0x98a>
 8009b0c:	8836      	ldrh	r6, [r6, #0]
 8009b0e:	2700      	movs	r7, #0
 8009b10:	e7db      	b.n	8009aca <_svfprintf_r+0x942>
 8009b12:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009b16:	d0f4      	beq.n	8009b02 <_svfprintf_r+0x97a>
 8009b18:	7836      	ldrb	r6, [r6, #0]
 8009b1a:	e7f8      	b.n	8009b0e <_svfprintf_r+0x986>
 8009b1c:	1d33      	adds	r3, r6, #4
 8009b1e:	9308      	str	r3, [sp, #32]
 8009b20:	f647 0330 	movw	r3, #30768	; 0x7830
 8009b24:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8009b28:	2278      	movs	r2, #120	; 0x78
 8009b2a:	4bb0      	ldr	r3, [pc, #704]	; (8009dec <_svfprintf_r+0xc64>)
 8009b2c:	9318      	str	r3, [sp, #96]	; 0x60
 8009b2e:	6836      	ldr	r6, [r6, #0]
 8009b30:	9206      	str	r2, [sp, #24]
 8009b32:	2700      	movs	r7, #0
 8009b34:	f04a 0a02 	orr.w	sl, sl, #2
 8009b38:	2302      	movs	r3, #2
 8009b3a:	e7c9      	b.n	8009ad0 <_svfprintf_r+0x948>
 8009b3c:	1d33      	adds	r3, r6, #4
 8009b3e:	f8d6 b000 	ldr.w	fp, [r6]
 8009b42:	9308      	str	r3, [sp, #32]
 8009b44:	2600      	movs	r6, #0
 8009b46:	1c68      	adds	r0, r5, #1
 8009b48:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 8009b4c:	f000 80e1 	beq.w	8009d12 <_svfprintf_r+0xb8a>
 8009b50:	462a      	mov	r2, r5
 8009b52:	4631      	mov	r1, r6
 8009b54:	4658      	mov	r0, fp
 8009b56:	f7f6 fb43 	bl	80001e0 <memchr>
 8009b5a:	4681      	mov	r9, r0
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	f43f ad74 	beq.w	800964a <_svfprintf_r+0x4c2>
 8009b62:	eba0 050b 	sub.w	r5, r0, fp
 8009b66:	46b1      	mov	r9, r6
 8009b68:	9610      	str	r6, [sp, #64]	; 0x40
 8009b6a:	4637      	mov	r7, r6
 8009b6c:	9607      	str	r6, [sp, #28]
 8009b6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b70:	42ab      	cmp	r3, r5
 8009b72:	bfb8      	it	lt
 8009b74:	462b      	movlt	r3, r5
 8009b76:	9311      	str	r3, [sp, #68]	; 0x44
 8009b78:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8009b7c:	b113      	cbz	r3, 8009b84 <_svfprintf_r+0x9fc>
 8009b7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b80:	3301      	adds	r3, #1
 8009b82:	9311      	str	r3, [sp, #68]	; 0x44
 8009b84:	f01a 0302 	ands.w	r3, sl, #2
 8009b88:	931c      	str	r3, [sp, #112]	; 0x70
 8009b8a:	bf1e      	ittt	ne
 8009b8c:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8009b8e:	3302      	addne	r3, #2
 8009b90:	9311      	strne	r3, [sp, #68]	; 0x44
 8009b92:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8009b96:	931d      	str	r3, [sp, #116]	; 0x74
 8009b98:	d122      	bne.n	8009be0 <_svfprintf_r+0xa58>
 8009b9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b9e:	1a9b      	subs	r3, r3, r2
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ba4:	dd1c      	ble.n	8009be0 <_svfprintf_r+0xa58>
 8009ba6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009ba8:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8009bac:	2810      	cmp	r0, #16
 8009bae:	4890      	ldr	r0, [pc, #576]	; (8009df0 <_svfprintf_r+0xc68>)
 8009bb0:	6020      	str	r0, [r4, #0]
 8009bb2:	f102 0201 	add.w	r2, r2, #1
 8009bb6:	f104 0108 	add.w	r1, r4, #8
 8009bba:	f300 8188 	bgt.w	8009ece <_svfprintf_r+0xd46>
 8009bbe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009bc0:	6060      	str	r0, [r4, #4]
 8009bc2:	4403      	add	r3, r0
 8009bc4:	2a07      	cmp	r2, #7
 8009bc6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8009bca:	f340 8195 	ble.w	8009ef8 <_svfprintf_r+0xd70>
 8009bce:	aa26      	add	r2, sp, #152	; 0x98
 8009bd0:	4641      	mov	r1, r8
 8009bd2:	9803      	ldr	r0, [sp, #12]
 8009bd4:	f002 fbfd 	bl	800c3d2 <__ssprint_r>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	f040 84c1 	bne.w	800a560 <_svfprintf_r+0x13d8>
 8009bde:	ac29      	add	r4, sp, #164	; 0xa4
 8009be0:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8009be4:	b173      	cbz	r3, 8009c04 <_svfprintf_r+0xa7c>
 8009be6:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8009bea:	6023      	str	r3, [r4, #0]
 8009bec:	2301      	movs	r3, #1
 8009bee:	6063      	str	r3, [r4, #4]
 8009bf0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	9328      	str	r3, [sp, #160]	; 0xa0
 8009bf6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	2b07      	cmp	r3, #7
 8009bfc:	9327      	str	r3, [sp, #156]	; 0x9c
 8009bfe:	f300 817d 	bgt.w	8009efc <_svfprintf_r+0xd74>
 8009c02:	3408      	adds	r4, #8
 8009c04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009c06:	b16b      	cbz	r3, 8009c24 <_svfprintf_r+0xa9c>
 8009c08:	ab1f      	add	r3, sp, #124	; 0x7c
 8009c0a:	6023      	str	r3, [r4, #0]
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	6063      	str	r3, [r4, #4]
 8009c10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009c12:	3302      	adds	r3, #2
 8009c14:	9328      	str	r3, [sp, #160]	; 0xa0
 8009c16:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009c18:	3301      	adds	r3, #1
 8009c1a:	2b07      	cmp	r3, #7
 8009c1c:	9327      	str	r3, [sp, #156]	; 0x9c
 8009c1e:	f300 8177 	bgt.w	8009f10 <_svfprintf_r+0xd88>
 8009c22:	3408      	adds	r4, #8
 8009c24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c26:	2b80      	cmp	r3, #128	; 0x80
 8009c28:	d122      	bne.n	8009c70 <_svfprintf_r+0xae8>
 8009c2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009c2e:	1a9b      	subs	r3, r3, r2
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	9313      	str	r3, [sp, #76]	; 0x4c
 8009c34:	dd1c      	ble.n	8009c70 <_svfprintf_r+0xae8>
 8009c36:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009c38:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8009c3c:	2810      	cmp	r0, #16
 8009c3e:	486d      	ldr	r0, [pc, #436]	; (8009df4 <_svfprintf_r+0xc6c>)
 8009c40:	6020      	str	r0, [r4, #0]
 8009c42:	f102 0201 	add.w	r2, r2, #1
 8009c46:	f104 0108 	add.w	r1, r4, #8
 8009c4a:	f300 816b 	bgt.w	8009f24 <_svfprintf_r+0xd9c>
 8009c4e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009c50:	6060      	str	r0, [r4, #4]
 8009c52:	4403      	add	r3, r0
 8009c54:	2a07      	cmp	r2, #7
 8009c56:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8009c5a:	f340 8178 	ble.w	8009f4e <_svfprintf_r+0xdc6>
 8009c5e:	aa26      	add	r2, sp, #152	; 0x98
 8009c60:	4641      	mov	r1, r8
 8009c62:	9803      	ldr	r0, [sp, #12]
 8009c64:	f002 fbb5 	bl	800c3d2 <__ssprint_r>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	f040 8479 	bne.w	800a560 <_svfprintf_r+0x13d8>
 8009c6e:	ac29      	add	r4, sp, #164	; 0xa4
 8009c70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c72:	1b5b      	subs	r3, r3, r5
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	9310      	str	r3, [sp, #64]	; 0x40
 8009c78:	dd1c      	ble.n	8009cb4 <_svfprintf_r+0xb2c>
 8009c7a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009c7c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8009c80:	2810      	cmp	r0, #16
 8009c82:	485c      	ldr	r0, [pc, #368]	; (8009df4 <_svfprintf_r+0xc6c>)
 8009c84:	6020      	str	r0, [r4, #0]
 8009c86:	f102 0201 	add.w	r2, r2, #1
 8009c8a:	f104 0108 	add.w	r1, r4, #8
 8009c8e:	f300 8160 	bgt.w	8009f52 <_svfprintf_r+0xdca>
 8009c92:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009c94:	6060      	str	r0, [r4, #4]
 8009c96:	4403      	add	r3, r0
 8009c98:	2a07      	cmp	r2, #7
 8009c9a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8009c9e:	f340 816d 	ble.w	8009f7c <_svfprintf_r+0xdf4>
 8009ca2:	aa26      	add	r2, sp, #152	; 0x98
 8009ca4:	4641      	mov	r1, r8
 8009ca6:	9803      	ldr	r0, [sp, #12]
 8009ca8:	f002 fb93 	bl	800c3d2 <__ssprint_r>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	f040 8457 	bne.w	800a560 <_svfprintf_r+0x13d8>
 8009cb2:	ac29      	add	r4, sp, #164	; 0xa4
 8009cb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009cb6:	9310      	str	r3, [sp, #64]	; 0x40
 8009cb8:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009cbc:	f040 8160 	bne.w	8009f80 <_svfprintf_r+0xdf8>
 8009cc0:	e9c4 b500 	strd	fp, r5, [r4]
 8009cc4:	441d      	add	r5, r3
 8009cc6:	9528      	str	r5, [sp, #160]	; 0xa0
 8009cc8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009cca:	3301      	adds	r3, #1
 8009ccc:	2b07      	cmp	r3, #7
 8009cce:	9327      	str	r3, [sp, #156]	; 0x9c
 8009cd0:	f300 819c 	bgt.w	800a00c <_svfprintf_r+0xe84>
 8009cd4:	3408      	adds	r4, #8
 8009cd6:	f01a 0f04 	tst.w	sl, #4
 8009cda:	f040 8423 	bne.w	800a524 <_svfprintf_r+0x139c>
 8009cde:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8009ce2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009ce4:	428a      	cmp	r2, r1
 8009ce6:	bfac      	ite	ge
 8009ce8:	189b      	addge	r3, r3, r2
 8009cea:	185b      	addlt	r3, r3, r1
 8009cec:	930e      	str	r3, [sp, #56]	; 0x38
 8009cee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009cf0:	b13b      	cbz	r3, 8009d02 <_svfprintf_r+0xb7a>
 8009cf2:	aa26      	add	r2, sp, #152	; 0x98
 8009cf4:	4641      	mov	r1, r8
 8009cf6:	9803      	ldr	r0, [sp, #12]
 8009cf8:	f002 fb6b 	bl	800c3d2 <__ssprint_r>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	f040 842f 	bne.w	800a560 <_svfprintf_r+0x13d8>
 8009d02:	2300      	movs	r3, #0
 8009d04:	9327      	str	r3, [sp, #156]	; 0x9c
 8009d06:	f1b9 0f00 	cmp.w	r9, #0
 8009d0a:	f040 8445 	bne.w	800a598 <_svfprintf_r+0x1410>
 8009d0e:	ac29      	add	r4, sp, #164	; 0xa4
 8009d10:	e6b7      	b.n	8009a82 <_svfprintf_r+0x8fa>
 8009d12:	4658      	mov	r0, fp
 8009d14:	f7f6 fa5c 	bl	80001d0 <strlen>
 8009d18:	46b1      	mov	r9, r6
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	e495      	b.n	800964a <_svfprintf_r+0x4c2>
 8009d1e:	f04a 0a10 	orr.w	sl, sl, #16
 8009d22:	f01a 0f20 	tst.w	sl, #32
 8009d26:	d009      	beq.n	8009d3c <_svfprintf_r+0xbb4>
 8009d28:	3607      	adds	r6, #7
 8009d2a:	f026 0607 	bic.w	r6, r6, #7
 8009d2e:	f106 0308 	add.w	r3, r6, #8
 8009d32:	e9d6 6700 	ldrd	r6, r7, [r6]
 8009d36:	9308      	str	r3, [sp, #32]
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e6c9      	b.n	8009ad0 <_svfprintf_r+0x948>
 8009d3c:	1d33      	adds	r3, r6, #4
 8009d3e:	f01a 0f10 	tst.w	sl, #16
 8009d42:	9308      	str	r3, [sp, #32]
 8009d44:	d001      	beq.n	8009d4a <_svfprintf_r+0xbc2>
 8009d46:	6836      	ldr	r6, [r6, #0]
 8009d48:	e003      	b.n	8009d52 <_svfprintf_r+0xbca>
 8009d4a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009d4e:	d002      	beq.n	8009d56 <_svfprintf_r+0xbce>
 8009d50:	8836      	ldrh	r6, [r6, #0]
 8009d52:	2700      	movs	r7, #0
 8009d54:	e7f0      	b.n	8009d38 <_svfprintf_r+0xbb0>
 8009d56:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009d5a:	d0f4      	beq.n	8009d46 <_svfprintf_r+0xbbe>
 8009d5c:	7836      	ldrb	r6, [r6, #0]
 8009d5e:	e7f8      	b.n	8009d52 <_svfprintf_r+0xbca>
 8009d60:	4b22      	ldr	r3, [pc, #136]	; (8009dec <_svfprintf_r+0xc64>)
 8009d62:	f7ff bb48 	b.w	80093f6 <_svfprintf_r+0x26e>
 8009d66:	1d33      	adds	r3, r6, #4
 8009d68:	f01a 0f10 	tst.w	sl, #16
 8009d6c:	9308      	str	r3, [sp, #32]
 8009d6e:	d001      	beq.n	8009d74 <_svfprintf_r+0xbec>
 8009d70:	6836      	ldr	r6, [r6, #0]
 8009d72:	e003      	b.n	8009d7c <_svfprintf_r+0xbf4>
 8009d74:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009d78:	d003      	beq.n	8009d82 <_svfprintf_r+0xbfa>
 8009d7a:	8836      	ldrh	r6, [r6, #0]
 8009d7c:	2700      	movs	r7, #0
 8009d7e:	f7ff bb47 	b.w	8009410 <_svfprintf_r+0x288>
 8009d82:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009d86:	d0f3      	beq.n	8009d70 <_svfprintf_r+0xbe8>
 8009d88:	7836      	ldrb	r6, [r6, #0]
 8009d8a:	e7f7      	b.n	8009d7c <_svfprintf_r+0xbf4>
 8009d8c:	4652      	mov	r2, sl
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e6a5      	b.n	8009ade <_svfprintf_r+0x956>
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	f43f ac04 	beq.w	80095a0 <_svfprintf_r+0x418>
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d06c      	beq.n	8009e76 <_svfprintf_r+0xcee>
 8009d9c:	ab52      	add	r3, sp, #328	; 0x148
 8009d9e:	08f1      	lsrs	r1, r6, #3
 8009da0:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8009da4:	08f8      	lsrs	r0, r7, #3
 8009da6:	f006 0207 	and.w	r2, r6, #7
 8009daa:	4607      	mov	r7, r0
 8009dac:	460e      	mov	r6, r1
 8009dae:	3230      	adds	r2, #48	; 0x30
 8009db0:	ea56 0107 	orrs.w	r1, r6, r7
 8009db4:	f103 3bff 	add.w	fp, r3, #4294967295
 8009db8:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009dbc:	d114      	bne.n	8009de8 <_svfprintf_r+0xc60>
 8009dbe:	f01a 0f01 	tst.w	sl, #1
 8009dc2:	d006      	beq.n	8009dd2 <_svfprintf_r+0xc4a>
 8009dc4:	2a30      	cmp	r2, #48	; 0x30
 8009dc6:	d004      	beq.n	8009dd2 <_svfprintf_r+0xc4a>
 8009dc8:	2230      	movs	r2, #48	; 0x30
 8009dca:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8009dce:	f1a3 0b02 	sub.w	fp, r3, #2
 8009dd2:	ab52      	add	r3, sp, #328	; 0x148
 8009dd4:	9510      	str	r5, [sp, #64]	; 0x40
 8009dd6:	f04f 0900 	mov.w	r9, #0
 8009dda:	eba3 050b 	sub.w	r5, r3, fp
 8009dde:	464f      	mov	r7, r9
 8009de0:	f8cd 901c 	str.w	r9, [sp, #28]
 8009de4:	464e      	mov	r6, r9
 8009de6:	e6c2      	b.n	8009b6e <_svfprintf_r+0x9e6>
 8009de8:	465b      	mov	r3, fp
 8009dea:	e7d8      	b.n	8009d9e <_svfprintf_r+0xc16>
 8009dec:	0800f380 	.word	0x0800f380
 8009df0:	0800f3a4 	.word	0x0800f3a4
 8009df4:	0800f3b4 	.word	0x0800f3b4
 8009df8:	2300      	movs	r3, #0
 8009dfa:	9304      	str	r3, [sp, #16]
 8009dfc:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8009e00:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8009e04:	9307      	str	r3, [sp, #28]
 8009e06:	220a      	movs	r2, #10
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	4639      	mov	r1, r7
 8009e0e:	f7f6 ff3b 	bl	8000c88 <__aeabi_uldivmod>
 8009e12:	9b04      	ldr	r3, [sp, #16]
 8009e14:	3301      	adds	r3, #1
 8009e16:	9304      	str	r3, [sp, #16]
 8009e18:	9b07      	ldr	r3, [sp, #28]
 8009e1a:	3230      	adds	r2, #48	; 0x30
 8009e1c:	f109 3bff 	add.w	fp, r9, #4294967295
 8009e20:	f809 2c01 	strb.w	r2, [r9, #-1]
 8009e24:	b1d3      	cbz	r3, 8009e5c <_svfprintf_r+0xcd4>
 8009e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e28:	9a04      	ldr	r2, [sp, #16]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d115      	bne.n	8009e5c <_svfprintf_r+0xcd4>
 8009e30:	2aff      	cmp	r2, #255	; 0xff
 8009e32:	d013      	beq.n	8009e5c <_svfprintf_r+0xcd4>
 8009e34:	2f00      	cmp	r7, #0
 8009e36:	bf08      	it	eq
 8009e38:	2e0a      	cmpeq	r6, #10
 8009e3a:	d30f      	bcc.n	8009e5c <_svfprintf_r+0xcd4>
 8009e3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e3e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009e40:	ebab 0b03 	sub.w	fp, fp, r3
 8009e44:	461a      	mov	r2, r3
 8009e46:	4658      	mov	r0, fp
 8009e48:	f002 faae 	bl	800c3a8 <strncpy>
 8009e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e4e:	785b      	ldrb	r3, [r3, #1]
 8009e50:	b11b      	cbz	r3, 8009e5a <_svfprintf_r+0xcd2>
 8009e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e54:	3301      	adds	r3, #1
 8009e56:	9309      	str	r3, [sp, #36]	; 0x24
 8009e58:	2300      	movs	r3, #0
 8009e5a:	9304      	str	r3, [sp, #16]
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4630      	mov	r0, r6
 8009e60:	4639      	mov	r1, r7
 8009e62:	220a      	movs	r2, #10
 8009e64:	f7f6 ff10 	bl	8000c88 <__aeabi_uldivmod>
 8009e68:	4606      	mov	r6, r0
 8009e6a:	460f      	mov	r7, r1
 8009e6c:	ea56 0307 	orrs.w	r3, r6, r7
 8009e70:	d0af      	beq.n	8009dd2 <_svfprintf_r+0xc4a>
 8009e72:	46d9      	mov	r9, fp
 8009e74:	e7c7      	b.n	8009e06 <_svfprintf_r+0xc7e>
 8009e76:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8009e7a:	f006 030f 	and.w	r3, r6, #15
 8009e7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e80:	5cd3      	ldrb	r3, [r2, r3]
 8009e82:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8009e86:	0933      	lsrs	r3, r6, #4
 8009e88:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8009e8c:	093a      	lsrs	r2, r7, #4
 8009e8e:	461e      	mov	r6, r3
 8009e90:	4617      	mov	r7, r2
 8009e92:	ea56 0307 	orrs.w	r3, r6, r7
 8009e96:	d1f0      	bne.n	8009e7a <_svfprintf_r+0xcf2>
 8009e98:	e79b      	b.n	8009dd2 <_svfprintf_r+0xc4a>
 8009e9a:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d197      	bne.n	8009dd2 <_svfprintf_r+0xc4a>
 8009ea2:	07d2      	lsls	r2, r2, #31
 8009ea4:	bf44      	itt	mi
 8009ea6:	2330      	movmi	r3, #48	; 0x30
 8009ea8:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8009eac:	e791      	b.n	8009dd2 <_svfprintf_r+0xc4a>
 8009eae:	9b06      	ldr	r3, [sp, #24]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 8377 	beq.w	800a5a4 <_svfprintf_r+0x141c>
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8009ebc:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8009ec0:	9608      	str	r6, [sp, #32]
 8009ec2:	f7ff bb49 	b.w	8009558 <_svfprintf_r+0x3d0>
 8009ec6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8009eca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ecc:	e4ec      	b.n	80098a8 <_svfprintf_r+0x720>
 8009ece:	2010      	movs	r0, #16
 8009ed0:	4403      	add	r3, r0
 8009ed2:	2a07      	cmp	r2, #7
 8009ed4:	6060      	str	r0, [r4, #4]
 8009ed6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8009eda:	dd08      	ble.n	8009eee <_svfprintf_r+0xd66>
 8009edc:	aa26      	add	r2, sp, #152	; 0x98
 8009ede:	4641      	mov	r1, r8
 8009ee0:	9803      	ldr	r0, [sp, #12]
 8009ee2:	f002 fa76 	bl	800c3d2 <__ssprint_r>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	f040 833a 	bne.w	800a560 <_svfprintf_r+0x13d8>
 8009eec:	a929      	add	r1, sp, #164	; 0xa4
 8009eee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ef0:	3b10      	subs	r3, #16
 8009ef2:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	e656      	b.n	8009ba6 <_svfprintf_r+0xa1e>
 8009ef8:	460c      	mov	r4, r1
 8009efa:	e671      	b.n	8009be0 <_svfprintf_r+0xa58>
 8009efc:	aa26      	add	r2, sp, #152	; 0x98
 8009efe:	4641      	mov	r1, r8
 8009f00:	9803      	ldr	r0, [sp, #12]
 8009f02:	f002 fa66 	bl	800c3d2 <__ssprint_r>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	f040 832a 	bne.w	800a560 <_svfprintf_r+0x13d8>
 8009f0c:	ac29      	add	r4, sp, #164	; 0xa4
 8009f0e:	e679      	b.n	8009c04 <_svfprintf_r+0xa7c>
 8009f10:	aa26      	add	r2, sp, #152	; 0x98
 8009f12:	4641      	mov	r1, r8
 8009f14:	9803      	ldr	r0, [sp, #12]
 8009f16:	f002 fa5c 	bl	800c3d2 <__ssprint_r>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	f040 8320 	bne.w	800a560 <_svfprintf_r+0x13d8>
 8009f20:	ac29      	add	r4, sp, #164	; 0xa4
 8009f22:	e67f      	b.n	8009c24 <_svfprintf_r+0xa9c>
 8009f24:	2010      	movs	r0, #16
 8009f26:	4403      	add	r3, r0
 8009f28:	2a07      	cmp	r2, #7
 8009f2a:	6060      	str	r0, [r4, #4]
 8009f2c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8009f30:	dd08      	ble.n	8009f44 <_svfprintf_r+0xdbc>
 8009f32:	aa26      	add	r2, sp, #152	; 0x98
 8009f34:	4641      	mov	r1, r8
 8009f36:	9803      	ldr	r0, [sp, #12]
 8009f38:	f002 fa4b 	bl	800c3d2 <__ssprint_r>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	f040 830f 	bne.w	800a560 <_svfprintf_r+0x13d8>
 8009f42:	a929      	add	r1, sp, #164	; 0xa4
 8009f44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f46:	3b10      	subs	r3, #16
 8009f48:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f4a:	460c      	mov	r4, r1
 8009f4c:	e673      	b.n	8009c36 <_svfprintf_r+0xaae>
 8009f4e:	460c      	mov	r4, r1
 8009f50:	e68e      	b.n	8009c70 <_svfprintf_r+0xae8>
 8009f52:	2010      	movs	r0, #16
 8009f54:	4403      	add	r3, r0
 8009f56:	2a07      	cmp	r2, #7
 8009f58:	6060      	str	r0, [r4, #4]
 8009f5a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8009f5e:	dd08      	ble.n	8009f72 <_svfprintf_r+0xdea>
 8009f60:	aa26      	add	r2, sp, #152	; 0x98
 8009f62:	4641      	mov	r1, r8
 8009f64:	9803      	ldr	r0, [sp, #12]
 8009f66:	f002 fa34 	bl	800c3d2 <__ssprint_r>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	f040 82f8 	bne.w	800a560 <_svfprintf_r+0x13d8>
 8009f70:	a929      	add	r1, sp, #164	; 0xa4
 8009f72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f74:	3b10      	subs	r3, #16
 8009f76:	9310      	str	r3, [sp, #64]	; 0x40
 8009f78:	460c      	mov	r4, r1
 8009f7a:	e67e      	b.n	8009c7a <_svfprintf_r+0xaf2>
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	e699      	b.n	8009cb4 <_svfprintf_r+0xb2c>
 8009f80:	9b06      	ldr	r3, [sp, #24]
 8009f82:	2b65      	cmp	r3, #101	; 0x65
 8009f84:	f340 8234 	ble.w	800a3f0 <_svfprintf_r+0x1268>
 8009f88:	2200      	movs	r2, #0
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f90:	f7f6 fd9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d069      	beq.n	800a06c <_svfprintf_r+0xee4>
 8009f98:	4b6e      	ldr	r3, [pc, #440]	; (800a154 <_svfprintf_r+0xfcc>)
 8009f9a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	441d      	add	r5, r3
 8009fa2:	6063      	str	r3, [r4, #4]
 8009fa4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009fa6:	9528      	str	r5, [sp, #160]	; 0xa0
 8009fa8:	3301      	adds	r3, #1
 8009faa:	2b07      	cmp	r3, #7
 8009fac:	9327      	str	r3, [sp, #156]	; 0x9c
 8009fae:	dc37      	bgt.n	800a020 <_svfprintf_r+0xe98>
 8009fb0:	3408      	adds	r4, #8
 8009fb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009fb4:	9a04      	ldr	r2, [sp, #16]
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	db03      	blt.n	8009fc2 <_svfprintf_r+0xe3a>
 8009fba:	f01a 0f01 	tst.w	sl, #1
 8009fbe:	f43f ae8a 	beq.w	8009cd6 <_svfprintf_r+0xb4e>
 8009fc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fc8:	6063      	str	r3, [r4, #4]
 8009fca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009fce:	4413      	add	r3, r2
 8009fd0:	9328      	str	r3, [sp, #160]	; 0xa0
 8009fd2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	2b07      	cmp	r3, #7
 8009fd8:	9327      	str	r3, [sp, #156]	; 0x9c
 8009fda:	dc2b      	bgt.n	800a034 <_svfprintf_r+0xeac>
 8009fdc:	3408      	adds	r4, #8
 8009fde:	9b04      	ldr	r3, [sp, #16]
 8009fe0:	1e5d      	subs	r5, r3, #1
 8009fe2:	2d00      	cmp	r5, #0
 8009fe4:	f77f ae77 	ble.w	8009cd6 <_svfprintf_r+0xb4e>
 8009fe8:	4e5b      	ldr	r6, [pc, #364]	; (800a158 <_svfprintf_r+0xfd0>)
 8009fea:	2710      	movs	r7, #16
 8009fec:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8009ff0:	2d10      	cmp	r5, #16
 8009ff2:	f103 0301 	add.w	r3, r3, #1
 8009ff6:	f104 0108 	add.w	r1, r4, #8
 8009ffa:	6026      	str	r6, [r4, #0]
 8009ffc:	dc24      	bgt.n	800a048 <_svfprintf_r+0xec0>
 8009ffe:	6065      	str	r5, [r4, #4]
 800a000:	2b07      	cmp	r3, #7
 800a002:	4415      	add	r5, r2
 800a004:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800a008:	f340 8289 	ble.w	800a51e <_svfprintf_r+0x1396>
 800a00c:	aa26      	add	r2, sp, #152	; 0x98
 800a00e:	4641      	mov	r1, r8
 800a010:	9803      	ldr	r0, [sp, #12]
 800a012:	f002 f9de 	bl	800c3d2 <__ssprint_r>
 800a016:	2800      	cmp	r0, #0
 800a018:	f040 82a2 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a01c:	ac29      	add	r4, sp, #164	; 0xa4
 800a01e:	e65a      	b.n	8009cd6 <_svfprintf_r+0xb4e>
 800a020:	aa26      	add	r2, sp, #152	; 0x98
 800a022:	4641      	mov	r1, r8
 800a024:	9803      	ldr	r0, [sp, #12]
 800a026:	f002 f9d4 	bl	800c3d2 <__ssprint_r>
 800a02a:	2800      	cmp	r0, #0
 800a02c:	f040 8298 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a030:	ac29      	add	r4, sp, #164	; 0xa4
 800a032:	e7be      	b.n	8009fb2 <_svfprintf_r+0xe2a>
 800a034:	aa26      	add	r2, sp, #152	; 0x98
 800a036:	4641      	mov	r1, r8
 800a038:	9803      	ldr	r0, [sp, #12]
 800a03a:	f002 f9ca 	bl	800c3d2 <__ssprint_r>
 800a03e:	2800      	cmp	r0, #0
 800a040:	f040 828e 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a044:	ac29      	add	r4, sp, #164	; 0xa4
 800a046:	e7ca      	b.n	8009fde <_svfprintf_r+0xe56>
 800a048:	3210      	adds	r2, #16
 800a04a:	2b07      	cmp	r3, #7
 800a04c:	6067      	str	r7, [r4, #4]
 800a04e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800a052:	dd08      	ble.n	800a066 <_svfprintf_r+0xede>
 800a054:	aa26      	add	r2, sp, #152	; 0x98
 800a056:	4641      	mov	r1, r8
 800a058:	9803      	ldr	r0, [sp, #12]
 800a05a:	f002 f9ba 	bl	800c3d2 <__ssprint_r>
 800a05e:	2800      	cmp	r0, #0
 800a060:	f040 827e 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a064:	a929      	add	r1, sp, #164	; 0xa4
 800a066:	3d10      	subs	r5, #16
 800a068:	460c      	mov	r4, r1
 800a06a:	e7bf      	b.n	8009fec <_svfprintf_r+0xe64>
 800a06c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a06e:	2b00      	cmp	r3, #0
 800a070:	dc74      	bgt.n	800a15c <_svfprintf_r+0xfd4>
 800a072:	4b38      	ldr	r3, [pc, #224]	; (800a154 <_svfprintf_r+0xfcc>)
 800a074:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a076:	6023      	str	r3, [r4, #0]
 800a078:	2301      	movs	r3, #1
 800a07a:	441d      	add	r5, r3
 800a07c:	6063      	str	r3, [r4, #4]
 800a07e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a080:	9528      	str	r5, [sp, #160]	; 0xa0
 800a082:	3301      	adds	r3, #1
 800a084:	2b07      	cmp	r3, #7
 800a086:	9327      	str	r3, [sp, #156]	; 0x9c
 800a088:	dc3e      	bgt.n	800a108 <_svfprintf_r+0xf80>
 800a08a:	3408      	adds	r4, #8
 800a08c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a08e:	b92b      	cbnz	r3, 800a09c <_svfprintf_r+0xf14>
 800a090:	9b04      	ldr	r3, [sp, #16]
 800a092:	b91b      	cbnz	r3, 800a09c <_svfprintf_r+0xf14>
 800a094:	f01a 0f01 	tst.w	sl, #1
 800a098:	f43f ae1d 	beq.w	8009cd6 <_svfprintf_r+0xb4e>
 800a09c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a09e:	6023      	str	r3, [r4, #0]
 800a0a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0a2:	6063      	str	r3, [r4, #4]
 800a0a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a0a8:	4413      	add	r3, r2
 800a0aa:	9328      	str	r3, [sp, #160]	; 0xa0
 800a0ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	2b07      	cmp	r3, #7
 800a0b2:	9327      	str	r3, [sp, #156]	; 0x9c
 800a0b4:	dc32      	bgt.n	800a11c <_svfprintf_r+0xf94>
 800a0b6:	3408      	adds	r4, #8
 800a0b8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800a0ba:	2d00      	cmp	r5, #0
 800a0bc:	da1b      	bge.n	800a0f6 <_svfprintf_r+0xf6e>
 800a0be:	4e26      	ldr	r6, [pc, #152]	; (800a158 <_svfprintf_r+0xfd0>)
 800a0c0:	426d      	negs	r5, r5
 800a0c2:	4623      	mov	r3, r4
 800a0c4:	2710      	movs	r7, #16
 800a0c6:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 800a0ca:	2d10      	cmp	r5, #16
 800a0cc:	f102 0201 	add.w	r2, r2, #1
 800a0d0:	f104 0408 	add.w	r4, r4, #8
 800a0d4:	601e      	str	r6, [r3, #0]
 800a0d6:	dc2b      	bgt.n	800a130 <_svfprintf_r+0xfa8>
 800a0d8:	605d      	str	r5, [r3, #4]
 800a0da:	2a07      	cmp	r2, #7
 800a0dc:	440d      	add	r5, r1
 800a0de:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 800a0e2:	dd08      	ble.n	800a0f6 <_svfprintf_r+0xf6e>
 800a0e4:	aa26      	add	r2, sp, #152	; 0x98
 800a0e6:	4641      	mov	r1, r8
 800a0e8:	9803      	ldr	r0, [sp, #12]
 800a0ea:	f002 f972 	bl	800c3d2 <__ssprint_r>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	f040 8236 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a0f4:	ac29      	add	r4, sp, #164	; 0xa4
 800a0f6:	9b04      	ldr	r3, [sp, #16]
 800a0f8:	6063      	str	r3, [r4, #4]
 800a0fa:	9a04      	ldr	r2, [sp, #16]
 800a0fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a0fe:	f8c4 b000 	str.w	fp, [r4]
 800a102:	4413      	add	r3, r2
 800a104:	9328      	str	r3, [sp, #160]	; 0xa0
 800a106:	e5df      	b.n	8009cc8 <_svfprintf_r+0xb40>
 800a108:	aa26      	add	r2, sp, #152	; 0x98
 800a10a:	4641      	mov	r1, r8
 800a10c:	9803      	ldr	r0, [sp, #12]
 800a10e:	f002 f960 	bl	800c3d2 <__ssprint_r>
 800a112:	2800      	cmp	r0, #0
 800a114:	f040 8224 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a118:	ac29      	add	r4, sp, #164	; 0xa4
 800a11a:	e7b7      	b.n	800a08c <_svfprintf_r+0xf04>
 800a11c:	aa26      	add	r2, sp, #152	; 0x98
 800a11e:	4641      	mov	r1, r8
 800a120:	9803      	ldr	r0, [sp, #12]
 800a122:	f002 f956 	bl	800c3d2 <__ssprint_r>
 800a126:	2800      	cmp	r0, #0
 800a128:	f040 821a 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a12c:	ac29      	add	r4, sp, #164	; 0xa4
 800a12e:	e7c3      	b.n	800a0b8 <_svfprintf_r+0xf30>
 800a130:	3110      	adds	r1, #16
 800a132:	2a07      	cmp	r2, #7
 800a134:	605f      	str	r7, [r3, #4]
 800a136:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 800a13a:	dd08      	ble.n	800a14e <_svfprintf_r+0xfc6>
 800a13c:	aa26      	add	r2, sp, #152	; 0x98
 800a13e:	4641      	mov	r1, r8
 800a140:	9803      	ldr	r0, [sp, #12]
 800a142:	f002 f946 	bl	800c3d2 <__ssprint_r>
 800a146:	2800      	cmp	r0, #0
 800a148:	f040 820a 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a14c:	ac29      	add	r4, sp, #164	; 0xa4
 800a14e:	3d10      	subs	r5, #16
 800a150:	4623      	mov	r3, r4
 800a152:	e7b8      	b.n	800a0c6 <_svfprintf_r+0xf3e>
 800a154:	0800f3a2 	.word	0x0800f3a2
 800a158:	0800f3b4 	.word	0x0800f3b4
 800a15c:	9b04      	ldr	r3, [sp, #16]
 800a15e:	42b3      	cmp	r3, r6
 800a160:	bfa8      	it	ge
 800a162:	4633      	movge	r3, r6
 800a164:	2b00      	cmp	r3, #0
 800a166:	461d      	mov	r5, r3
 800a168:	dd0b      	ble.n	800a182 <_svfprintf_r+0xffa>
 800a16a:	e9c4 b300 	strd	fp, r3, [r4]
 800a16e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a170:	442b      	add	r3, r5
 800a172:	9328      	str	r3, [sp, #160]	; 0xa0
 800a174:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a176:	3301      	adds	r3, #1
 800a178:	2b07      	cmp	r3, #7
 800a17a:	9327      	str	r3, [sp, #156]	; 0x9c
 800a17c:	f300 8086 	bgt.w	800a28c <_svfprintf_r+0x1104>
 800a180:	3408      	adds	r4, #8
 800a182:	2d00      	cmp	r5, #0
 800a184:	bfac      	ite	ge
 800a186:	1b75      	subge	r5, r6, r5
 800a188:	4635      	movlt	r5, r6
 800a18a:	2d00      	cmp	r5, #0
 800a18c:	dd19      	ble.n	800a1c2 <_svfprintf_r+0x103a>
 800a18e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800a192:	4896      	ldr	r0, [pc, #600]	; (800a3ec <_svfprintf_r+0x1264>)
 800a194:	6020      	str	r0, [r4, #0]
 800a196:	2d10      	cmp	r5, #16
 800a198:	f103 0301 	add.w	r3, r3, #1
 800a19c:	f104 0108 	add.w	r1, r4, #8
 800a1a0:	dc7e      	bgt.n	800a2a0 <_svfprintf_r+0x1118>
 800a1a2:	6065      	str	r5, [r4, #4]
 800a1a4:	2b07      	cmp	r3, #7
 800a1a6:	4415      	add	r5, r2
 800a1a8:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800a1ac:	f340 808b 	ble.w	800a2c6 <_svfprintf_r+0x113e>
 800a1b0:	aa26      	add	r2, sp, #152	; 0x98
 800a1b2:	4641      	mov	r1, r8
 800a1b4:	9803      	ldr	r0, [sp, #12]
 800a1b6:	f002 f90c 	bl	800c3d2 <__ssprint_r>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f040 81d0 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a1c0:	ac29      	add	r4, sp, #164	; 0xa4
 800a1c2:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 800a1c6:	445e      	add	r6, fp
 800a1c8:	d009      	beq.n	800a1de <_svfprintf_r+0x1056>
 800a1ca:	9b07      	ldr	r3, [sp, #28]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d17c      	bne.n	800a2ca <_svfprintf_r+0x1142>
 800a1d0:	2f00      	cmp	r7, #0
 800a1d2:	d17c      	bne.n	800a2ce <_svfprintf_r+0x1146>
 800a1d4:	9b04      	ldr	r3, [sp, #16]
 800a1d6:	445b      	add	r3, fp
 800a1d8:	429e      	cmp	r6, r3
 800a1da:	bf28      	it	cs
 800a1dc:	461e      	movcs	r6, r3
 800a1de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a1e0:	9a04      	ldr	r2, [sp, #16]
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	db02      	blt.n	800a1ec <_svfprintf_r+0x1064>
 800a1e6:	f01a 0f01 	tst.w	sl, #1
 800a1ea:	d00e      	beq.n	800a20a <_svfprintf_r+0x1082>
 800a1ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a1ee:	6023      	str	r3, [r4, #0]
 800a1f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1f2:	6063      	str	r3, [r4, #4]
 800a1f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a1f8:	4413      	add	r3, r2
 800a1fa:	9328      	str	r3, [sp, #160]	; 0xa0
 800a1fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a1fe:	3301      	adds	r3, #1
 800a200:	2b07      	cmp	r3, #7
 800a202:	9327      	str	r3, [sp, #156]	; 0x9c
 800a204:	f300 80dd 	bgt.w	800a3c2 <_svfprintf_r+0x123a>
 800a208:	3408      	adds	r4, #8
 800a20a:	9b04      	ldr	r3, [sp, #16]
 800a20c:	9a04      	ldr	r2, [sp, #16]
 800a20e:	eb0b 0503 	add.w	r5, fp, r3
 800a212:	1bab      	subs	r3, r5, r6
 800a214:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800a216:	1b55      	subs	r5, r2, r5
 800a218:	429d      	cmp	r5, r3
 800a21a:	bfa8      	it	ge
 800a21c:	461d      	movge	r5, r3
 800a21e:	2d00      	cmp	r5, #0
 800a220:	dd0b      	ble.n	800a23a <_svfprintf_r+0x10b2>
 800a222:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a224:	442b      	add	r3, r5
 800a226:	9328      	str	r3, [sp, #160]	; 0xa0
 800a228:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a22a:	3301      	adds	r3, #1
 800a22c:	2b07      	cmp	r3, #7
 800a22e:	e9c4 6500 	strd	r6, r5, [r4]
 800a232:	9327      	str	r3, [sp, #156]	; 0x9c
 800a234:	f300 80cf 	bgt.w	800a3d6 <_svfprintf_r+0x124e>
 800a238:	3408      	adds	r4, #8
 800a23a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a23c:	9a04      	ldr	r2, [sp, #16]
 800a23e:	2d00      	cmp	r5, #0
 800a240:	eba2 0303 	sub.w	r3, r2, r3
 800a244:	bfac      	ite	ge
 800a246:	1b5d      	subge	r5, r3, r5
 800a248:	461d      	movlt	r5, r3
 800a24a:	2d00      	cmp	r5, #0
 800a24c:	f77f ad43 	ble.w	8009cd6 <_svfprintf_r+0xb4e>
 800a250:	4e66      	ldr	r6, [pc, #408]	; (800a3ec <_svfprintf_r+0x1264>)
 800a252:	2710      	movs	r7, #16
 800a254:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800a258:	2d10      	cmp	r5, #16
 800a25a:	f103 0301 	add.w	r3, r3, #1
 800a25e:	f104 0108 	add.w	r1, r4, #8
 800a262:	6026      	str	r6, [r4, #0]
 800a264:	f77f aecb 	ble.w	8009ffe <_svfprintf_r+0xe76>
 800a268:	3210      	adds	r2, #16
 800a26a:	2b07      	cmp	r3, #7
 800a26c:	6067      	str	r7, [r4, #4]
 800a26e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800a272:	dd08      	ble.n	800a286 <_svfprintf_r+0x10fe>
 800a274:	aa26      	add	r2, sp, #152	; 0x98
 800a276:	4641      	mov	r1, r8
 800a278:	9803      	ldr	r0, [sp, #12]
 800a27a:	f002 f8aa 	bl	800c3d2 <__ssprint_r>
 800a27e:	2800      	cmp	r0, #0
 800a280:	f040 816e 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a284:	a929      	add	r1, sp, #164	; 0xa4
 800a286:	3d10      	subs	r5, #16
 800a288:	460c      	mov	r4, r1
 800a28a:	e7e3      	b.n	800a254 <_svfprintf_r+0x10cc>
 800a28c:	aa26      	add	r2, sp, #152	; 0x98
 800a28e:	4641      	mov	r1, r8
 800a290:	9803      	ldr	r0, [sp, #12]
 800a292:	f002 f89e 	bl	800c3d2 <__ssprint_r>
 800a296:	2800      	cmp	r0, #0
 800a298:	f040 8162 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a29c:	ac29      	add	r4, sp, #164	; 0xa4
 800a29e:	e770      	b.n	800a182 <_svfprintf_r+0xffa>
 800a2a0:	2010      	movs	r0, #16
 800a2a2:	4402      	add	r2, r0
 800a2a4:	2b07      	cmp	r3, #7
 800a2a6:	6060      	str	r0, [r4, #4]
 800a2a8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800a2ac:	dd08      	ble.n	800a2c0 <_svfprintf_r+0x1138>
 800a2ae:	aa26      	add	r2, sp, #152	; 0x98
 800a2b0:	4641      	mov	r1, r8
 800a2b2:	9803      	ldr	r0, [sp, #12]
 800a2b4:	f002 f88d 	bl	800c3d2 <__ssprint_r>
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	f040 8151 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a2be:	a929      	add	r1, sp, #164	; 0xa4
 800a2c0:	3d10      	subs	r5, #16
 800a2c2:	460c      	mov	r4, r1
 800a2c4:	e763      	b.n	800a18e <_svfprintf_r+0x1006>
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	e77b      	b.n	800a1c2 <_svfprintf_r+0x103a>
 800a2ca:	2f00      	cmp	r7, #0
 800a2cc:	d049      	beq.n	800a362 <_svfprintf_r+0x11da>
 800a2ce:	3f01      	subs	r7, #1
 800a2d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a2d2:	6023      	str	r3, [r4, #0]
 800a2d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2d6:	6063      	str	r3, [r4, #4]
 800a2d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a2dc:	4413      	add	r3, r2
 800a2de:	9328      	str	r3, [sp, #160]	; 0xa0
 800a2e0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	2b07      	cmp	r3, #7
 800a2e6:	9327      	str	r3, [sp, #156]	; 0x9c
 800a2e8:	dc42      	bgt.n	800a370 <_svfprintf_r+0x11e8>
 800a2ea:	3408      	adds	r4, #8
 800a2ec:	9b04      	ldr	r3, [sp, #16]
 800a2ee:	445b      	add	r3, fp
 800a2f0:	1b9a      	subs	r2, r3, r6
 800a2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	bfa8      	it	ge
 800a2fa:	4613      	movge	r3, r2
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	461d      	mov	r5, r3
 800a300:	dd0a      	ble.n	800a318 <_svfprintf_r+0x1190>
 800a302:	e9c4 6300 	strd	r6, r3, [r4]
 800a306:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a308:	442b      	add	r3, r5
 800a30a:	9328      	str	r3, [sp, #160]	; 0xa0
 800a30c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a30e:	3301      	adds	r3, #1
 800a310:	2b07      	cmp	r3, #7
 800a312:	9327      	str	r3, [sp, #156]	; 0x9c
 800a314:	dc36      	bgt.n	800a384 <_svfprintf_r+0x11fc>
 800a316:	3408      	adds	r4, #8
 800a318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	2d00      	cmp	r5, #0
 800a31e:	bfac      	ite	ge
 800a320:	1b5d      	subge	r5, r3, r5
 800a322:	461d      	movlt	r5, r3
 800a324:	2d00      	cmp	r5, #0
 800a326:	dd18      	ble.n	800a35a <_svfprintf_r+0x11d2>
 800a328:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800a32c:	482f      	ldr	r0, [pc, #188]	; (800a3ec <_svfprintf_r+0x1264>)
 800a32e:	6020      	str	r0, [r4, #0]
 800a330:	2d10      	cmp	r5, #16
 800a332:	f102 0201 	add.w	r2, r2, #1
 800a336:	f104 0108 	add.w	r1, r4, #8
 800a33a:	dc2d      	bgt.n	800a398 <_svfprintf_r+0x1210>
 800a33c:	442b      	add	r3, r5
 800a33e:	2a07      	cmp	r2, #7
 800a340:	6065      	str	r5, [r4, #4]
 800a342:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800a346:	dd3a      	ble.n	800a3be <_svfprintf_r+0x1236>
 800a348:	aa26      	add	r2, sp, #152	; 0x98
 800a34a:	4641      	mov	r1, r8
 800a34c:	9803      	ldr	r0, [sp, #12]
 800a34e:	f002 f840 	bl	800c3d2 <__ssprint_r>
 800a352:	2800      	cmp	r0, #0
 800a354:	f040 8104 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a358:	ac29      	add	r4, sp, #164	; 0xa4
 800a35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	441e      	add	r6, r3
 800a360:	e733      	b.n	800a1ca <_svfprintf_r+0x1042>
 800a362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a364:	3b01      	subs	r3, #1
 800a366:	9309      	str	r3, [sp, #36]	; 0x24
 800a368:	9b07      	ldr	r3, [sp, #28]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	9307      	str	r3, [sp, #28]
 800a36e:	e7af      	b.n	800a2d0 <_svfprintf_r+0x1148>
 800a370:	aa26      	add	r2, sp, #152	; 0x98
 800a372:	4641      	mov	r1, r8
 800a374:	9803      	ldr	r0, [sp, #12]
 800a376:	f002 f82c 	bl	800c3d2 <__ssprint_r>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	f040 80f0 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a380:	ac29      	add	r4, sp, #164	; 0xa4
 800a382:	e7b3      	b.n	800a2ec <_svfprintf_r+0x1164>
 800a384:	aa26      	add	r2, sp, #152	; 0x98
 800a386:	4641      	mov	r1, r8
 800a388:	9803      	ldr	r0, [sp, #12]
 800a38a:	f002 f822 	bl	800c3d2 <__ssprint_r>
 800a38e:	2800      	cmp	r0, #0
 800a390:	f040 80e6 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a394:	ac29      	add	r4, sp, #164	; 0xa4
 800a396:	e7bf      	b.n	800a318 <_svfprintf_r+0x1190>
 800a398:	2010      	movs	r0, #16
 800a39a:	4403      	add	r3, r0
 800a39c:	2a07      	cmp	r2, #7
 800a39e:	6060      	str	r0, [r4, #4]
 800a3a0:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800a3a4:	dd08      	ble.n	800a3b8 <_svfprintf_r+0x1230>
 800a3a6:	aa26      	add	r2, sp, #152	; 0x98
 800a3a8:	4641      	mov	r1, r8
 800a3aa:	9803      	ldr	r0, [sp, #12]
 800a3ac:	f002 f811 	bl	800c3d2 <__ssprint_r>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	f040 80d5 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a3b6:	a929      	add	r1, sp, #164	; 0xa4
 800a3b8:	3d10      	subs	r5, #16
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	e7b4      	b.n	800a328 <_svfprintf_r+0x11a0>
 800a3be:	460c      	mov	r4, r1
 800a3c0:	e7cb      	b.n	800a35a <_svfprintf_r+0x11d2>
 800a3c2:	aa26      	add	r2, sp, #152	; 0x98
 800a3c4:	4641      	mov	r1, r8
 800a3c6:	9803      	ldr	r0, [sp, #12]
 800a3c8:	f002 f803 	bl	800c3d2 <__ssprint_r>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	f040 80c7 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a3d2:	ac29      	add	r4, sp, #164	; 0xa4
 800a3d4:	e719      	b.n	800a20a <_svfprintf_r+0x1082>
 800a3d6:	aa26      	add	r2, sp, #152	; 0x98
 800a3d8:	4641      	mov	r1, r8
 800a3da:	9803      	ldr	r0, [sp, #12]
 800a3dc:	f001 fff9 	bl	800c3d2 <__ssprint_r>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	f040 80bd 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a3e6:	ac29      	add	r4, sp, #164	; 0xa4
 800a3e8:	e727      	b.n	800a23a <_svfprintf_r+0x10b2>
 800a3ea:	bf00      	nop
 800a3ec:	0800f3b4 	.word	0x0800f3b4
 800a3f0:	9a04      	ldr	r2, [sp, #16]
 800a3f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a3f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a3f6:	2a01      	cmp	r2, #1
 800a3f8:	f105 0501 	add.w	r5, r5, #1
 800a3fc:	f103 0301 	add.w	r3, r3, #1
 800a400:	f104 0608 	add.w	r6, r4, #8
 800a404:	dc02      	bgt.n	800a40c <_svfprintf_r+0x1284>
 800a406:	f01a 0f01 	tst.w	sl, #1
 800a40a:	d07d      	beq.n	800a508 <_svfprintf_r+0x1380>
 800a40c:	2201      	movs	r2, #1
 800a40e:	2b07      	cmp	r3, #7
 800a410:	f8c4 b000 	str.w	fp, [r4]
 800a414:	6062      	str	r2, [r4, #4]
 800a416:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800a41a:	dd08      	ble.n	800a42e <_svfprintf_r+0x12a6>
 800a41c:	aa26      	add	r2, sp, #152	; 0x98
 800a41e:	4641      	mov	r1, r8
 800a420:	9803      	ldr	r0, [sp, #12]
 800a422:	f001 ffd6 	bl	800c3d2 <__ssprint_r>
 800a426:	2800      	cmp	r0, #0
 800a428:	f040 809a 	bne.w	800a560 <_svfprintf_r+0x13d8>
 800a42c:	ae29      	add	r6, sp, #164	; 0xa4
 800a42e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a430:	6033      	str	r3, [r6, #0]
 800a432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a434:	6073      	str	r3, [r6, #4]
 800a436:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a438:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a43a:	4413      	add	r3, r2
 800a43c:	9328      	str	r3, [sp, #160]	; 0xa0
 800a43e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a440:	3301      	adds	r3, #1
 800a442:	2b07      	cmp	r3, #7
 800a444:	9327      	str	r3, [sp, #156]	; 0x9c
 800a446:	dc31      	bgt.n	800a4ac <_svfprintf_r+0x1324>
 800a448:	3608      	adds	r6, #8
 800a44a:	9b04      	ldr	r3, [sp, #16]
 800a44c:	2200      	movs	r2, #0
 800a44e:	1e5c      	subs	r4, r3, #1
 800a450:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a454:	2300      	movs	r3, #0
 800a456:	f7f6 fb37 	bl	8000ac8 <__aeabi_dcmpeq>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d12f      	bne.n	800a4be <_svfprintf_r+0x1336>
 800a45e:	f10b 0301 	add.w	r3, fp, #1
 800a462:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800a464:	9904      	ldr	r1, [sp, #16]
 800a466:	e9c6 3400 	strd	r3, r4, [r6]
 800a46a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a46c:	3201      	adds	r2, #1
 800a46e:	3b01      	subs	r3, #1
 800a470:	440b      	add	r3, r1
 800a472:	2a07      	cmp	r2, #7
 800a474:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800a478:	dd4f      	ble.n	800a51a <_svfprintf_r+0x1392>
 800a47a:	aa26      	add	r2, sp, #152	; 0x98
 800a47c:	4641      	mov	r1, r8
 800a47e:	9803      	ldr	r0, [sp, #12]
 800a480:	f001 ffa7 	bl	800c3d2 <__ssprint_r>
 800a484:	2800      	cmp	r0, #0
 800a486:	d16b      	bne.n	800a560 <_svfprintf_r+0x13d8>
 800a488:	ae29      	add	r6, sp, #164	; 0xa4
 800a48a:	ab22      	add	r3, sp, #136	; 0x88
 800a48c:	6033      	str	r3, [r6, #0]
 800a48e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a490:	6073      	str	r3, [r6, #4]
 800a492:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a494:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a496:	4413      	add	r3, r2
 800a498:	9328      	str	r3, [sp, #160]	; 0xa0
 800a49a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a49c:	3301      	adds	r3, #1
 800a49e:	2b07      	cmp	r3, #7
 800a4a0:	9327      	str	r3, [sp, #156]	; 0x9c
 800a4a2:	f73f adb3 	bgt.w	800a00c <_svfprintf_r+0xe84>
 800a4a6:	f106 0408 	add.w	r4, r6, #8
 800a4aa:	e414      	b.n	8009cd6 <_svfprintf_r+0xb4e>
 800a4ac:	aa26      	add	r2, sp, #152	; 0x98
 800a4ae:	4641      	mov	r1, r8
 800a4b0:	9803      	ldr	r0, [sp, #12]
 800a4b2:	f001 ff8e 	bl	800c3d2 <__ssprint_r>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d152      	bne.n	800a560 <_svfprintf_r+0x13d8>
 800a4ba:	ae29      	add	r6, sp, #164	; 0xa4
 800a4bc:	e7c5      	b.n	800a44a <_svfprintf_r+0x12c2>
 800a4be:	2c00      	cmp	r4, #0
 800a4c0:	dde3      	ble.n	800a48a <_svfprintf_r+0x1302>
 800a4c2:	4d3e      	ldr	r5, [pc, #248]	; (800a5bc <_svfprintf_r+0x1434>)
 800a4c4:	2710      	movs	r7, #16
 800a4c6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800a4ca:	2c10      	cmp	r4, #16
 800a4cc:	f103 0301 	add.w	r3, r3, #1
 800a4d0:	f106 0108 	add.w	r1, r6, #8
 800a4d4:	6035      	str	r5, [r6, #0]
 800a4d6:	dc07      	bgt.n	800a4e8 <_svfprintf_r+0x1360>
 800a4d8:	6074      	str	r4, [r6, #4]
 800a4da:	2b07      	cmp	r3, #7
 800a4dc:	4414      	add	r4, r2
 800a4de:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 800a4e2:	dcca      	bgt.n	800a47a <_svfprintf_r+0x12f2>
 800a4e4:	460e      	mov	r6, r1
 800a4e6:	e7d0      	b.n	800a48a <_svfprintf_r+0x1302>
 800a4e8:	3210      	adds	r2, #16
 800a4ea:	2b07      	cmp	r3, #7
 800a4ec:	6077      	str	r7, [r6, #4]
 800a4ee:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800a4f2:	dd06      	ble.n	800a502 <_svfprintf_r+0x137a>
 800a4f4:	aa26      	add	r2, sp, #152	; 0x98
 800a4f6:	4641      	mov	r1, r8
 800a4f8:	9803      	ldr	r0, [sp, #12]
 800a4fa:	f001 ff6a 	bl	800c3d2 <__ssprint_r>
 800a4fe:	bb78      	cbnz	r0, 800a560 <_svfprintf_r+0x13d8>
 800a500:	a929      	add	r1, sp, #164	; 0xa4
 800a502:	3c10      	subs	r4, #16
 800a504:	460e      	mov	r6, r1
 800a506:	e7de      	b.n	800a4c6 <_svfprintf_r+0x133e>
 800a508:	2201      	movs	r2, #1
 800a50a:	2b07      	cmp	r3, #7
 800a50c:	f8c4 b000 	str.w	fp, [r4]
 800a510:	6062      	str	r2, [r4, #4]
 800a512:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800a516:	ddb8      	ble.n	800a48a <_svfprintf_r+0x1302>
 800a518:	e7af      	b.n	800a47a <_svfprintf_r+0x12f2>
 800a51a:	3608      	adds	r6, #8
 800a51c:	e7b5      	b.n	800a48a <_svfprintf_r+0x1302>
 800a51e:	460c      	mov	r4, r1
 800a520:	f7ff bbd9 	b.w	8009cd6 <_svfprintf_r+0xb4e>
 800a524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a526:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a528:	1a9d      	subs	r5, r3, r2
 800a52a:	2d00      	cmp	r5, #0
 800a52c:	f77f abd7 	ble.w	8009cde <_svfprintf_r+0xb56>
 800a530:	4e23      	ldr	r6, [pc, #140]	; (800a5c0 <_svfprintf_r+0x1438>)
 800a532:	2710      	movs	r7, #16
 800a534:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800a538:	2d10      	cmp	r5, #16
 800a53a:	f103 0301 	add.w	r3, r3, #1
 800a53e:	6026      	str	r6, [r4, #0]
 800a540:	dc18      	bgt.n	800a574 <_svfprintf_r+0x13ec>
 800a542:	6065      	str	r5, [r4, #4]
 800a544:	2b07      	cmp	r3, #7
 800a546:	4415      	add	r5, r2
 800a548:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800a54c:	f77f abc7 	ble.w	8009cde <_svfprintf_r+0xb56>
 800a550:	aa26      	add	r2, sp, #152	; 0x98
 800a552:	4641      	mov	r1, r8
 800a554:	9803      	ldr	r0, [sp, #12]
 800a556:	f001 ff3c 	bl	800c3d2 <__ssprint_r>
 800a55a:	2800      	cmp	r0, #0
 800a55c:	f43f abbf 	beq.w	8009cde <_svfprintf_r+0xb56>
 800a560:	f1b9 0f00 	cmp.w	r9, #0
 800a564:	f43f a8a8 	beq.w	80096b8 <_svfprintf_r+0x530>
 800a568:	4649      	mov	r1, r9
 800a56a:	9803      	ldr	r0, [sp, #12]
 800a56c:	f000 feea 	bl	800b344 <_free_r>
 800a570:	f7ff b8a2 	b.w	80096b8 <_svfprintf_r+0x530>
 800a574:	3210      	adds	r2, #16
 800a576:	2b07      	cmp	r3, #7
 800a578:	6067      	str	r7, [r4, #4]
 800a57a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800a57e:	dc02      	bgt.n	800a586 <_svfprintf_r+0x13fe>
 800a580:	3408      	adds	r4, #8
 800a582:	3d10      	subs	r5, #16
 800a584:	e7d6      	b.n	800a534 <_svfprintf_r+0x13ac>
 800a586:	aa26      	add	r2, sp, #152	; 0x98
 800a588:	4641      	mov	r1, r8
 800a58a:	9803      	ldr	r0, [sp, #12]
 800a58c:	f001 ff21 	bl	800c3d2 <__ssprint_r>
 800a590:	2800      	cmp	r0, #0
 800a592:	d1e5      	bne.n	800a560 <_svfprintf_r+0x13d8>
 800a594:	ac29      	add	r4, sp, #164	; 0xa4
 800a596:	e7f4      	b.n	800a582 <_svfprintf_r+0x13fa>
 800a598:	4649      	mov	r1, r9
 800a59a:	9803      	ldr	r0, [sp, #12]
 800a59c:	f000 fed2 	bl	800b344 <_free_r>
 800a5a0:	f7ff bbb5 	b.w	8009d0e <_svfprintf_r+0xb86>
 800a5a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f43f a886 	beq.w	80096b8 <_svfprintf_r+0x530>
 800a5ac:	aa26      	add	r2, sp, #152	; 0x98
 800a5ae:	4641      	mov	r1, r8
 800a5b0:	9803      	ldr	r0, [sp, #12]
 800a5b2:	f001 ff0e 	bl	800c3d2 <__ssprint_r>
 800a5b6:	f7ff b87f 	b.w	80096b8 <_svfprintf_r+0x530>
 800a5ba:	bf00      	nop
 800a5bc:	0800f3b4 	.word	0x0800f3b4
 800a5c0:	0800f3a4 	.word	0x0800f3a4

0800a5c4 <sysconf>:
 800a5c4:	2808      	cmp	r0, #8
 800a5c6:	b508      	push	{r3, lr}
 800a5c8:	d006      	beq.n	800a5d8 <sysconf+0x14>
 800a5ca:	f000 fe4d 	bl	800b268 <__errno>
 800a5ce:	2316      	movs	r3, #22
 800a5d0:	6003      	str	r3, [r0, #0]
 800a5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d6:	bd08      	pop	{r3, pc}
 800a5d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a5dc:	e7fb      	b.n	800a5d6 <sysconf+0x12>
	...

0800a5e0 <register_fini>:
 800a5e0:	4b02      	ldr	r3, [pc, #8]	; (800a5ec <register_fini+0xc>)
 800a5e2:	b113      	cbz	r3, 800a5ea <register_fini+0xa>
 800a5e4:	4802      	ldr	r0, [pc, #8]	; (800a5f0 <register_fini+0x10>)
 800a5e6:	f000 b805 	b.w	800a5f4 <atexit>
 800a5ea:	4770      	bx	lr
 800a5ec:	00000000 	.word	0x00000000
 800a5f0:	0800b275 	.word	0x0800b275

0800a5f4 <atexit>:
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f001 bf6e 	b.w	800c4dc <__register_exitproc>

0800a600 <quorem>:
 800a600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a604:	6903      	ldr	r3, [r0, #16]
 800a606:	690c      	ldr	r4, [r1, #16]
 800a608:	42a3      	cmp	r3, r4
 800a60a:	4680      	mov	r8, r0
 800a60c:	f2c0 8082 	blt.w	800a714 <quorem+0x114>
 800a610:	3c01      	subs	r4, #1
 800a612:	f101 0714 	add.w	r7, r1, #20
 800a616:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a61a:	f100 0614 	add.w	r6, r0, #20
 800a61e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a622:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a626:	eb06 030c 	add.w	r3, r6, ip
 800a62a:	3501      	adds	r5, #1
 800a62c:	eb07 090c 	add.w	r9, r7, ip
 800a630:	9301      	str	r3, [sp, #4]
 800a632:	fbb0 f5f5 	udiv	r5, r0, r5
 800a636:	b395      	cbz	r5, 800a69e <quorem+0x9e>
 800a638:	f04f 0a00 	mov.w	sl, #0
 800a63c:	4638      	mov	r0, r7
 800a63e:	46b6      	mov	lr, r6
 800a640:	46d3      	mov	fp, sl
 800a642:	f850 2b04 	ldr.w	r2, [r0], #4
 800a646:	b293      	uxth	r3, r2
 800a648:	fb05 a303 	mla	r3, r5, r3, sl
 800a64c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a650:	b29b      	uxth	r3, r3
 800a652:	ebab 0303 	sub.w	r3, fp, r3
 800a656:	0c12      	lsrs	r2, r2, #16
 800a658:	f8de b000 	ldr.w	fp, [lr]
 800a65c:	fb05 a202 	mla	r2, r5, r2, sl
 800a660:	fa13 f38b 	uxtah	r3, r3, fp
 800a664:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a668:	fa1f fb82 	uxth.w	fp, r2
 800a66c:	f8de 2000 	ldr.w	r2, [lr]
 800a670:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a674:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a678:	b29b      	uxth	r3, r3
 800a67a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a67e:	4581      	cmp	r9, r0
 800a680:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a684:	f84e 3b04 	str.w	r3, [lr], #4
 800a688:	d2db      	bcs.n	800a642 <quorem+0x42>
 800a68a:	f856 300c 	ldr.w	r3, [r6, ip]
 800a68e:	b933      	cbnz	r3, 800a69e <quorem+0x9e>
 800a690:	9b01      	ldr	r3, [sp, #4]
 800a692:	3b04      	subs	r3, #4
 800a694:	429e      	cmp	r6, r3
 800a696:	461a      	mov	r2, r3
 800a698:	d330      	bcc.n	800a6fc <quorem+0xfc>
 800a69a:	f8c8 4010 	str.w	r4, [r8, #16]
 800a69e:	4640      	mov	r0, r8
 800a6a0:	f001 fc8e 	bl	800bfc0 <__mcmp>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	db25      	blt.n	800a6f4 <quorem+0xf4>
 800a6a8:	3501      	adds	r5, #1
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f04f 0c00 	mov.w	ip, #0
 800a6b0:	f857 2b04 	ldr.w	r2, [r7], #4
 800a6b4:	f8d0 e000 	ldr.w	lr, [r0]
 800a6b8:	b293      	uxth	r3, r2
 800a6ba:	ebac 0303 	sub.w	r3, ip, r3
 800a6be:	0c12      	lsrs	r2, r2, #16
 800a6c0:	fa13 f38e 	uxtah	r3, r3, lr
 800a6c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6d2:	45b9      	cmp	r9, r7
 800a6d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a6d8:	f840 3b04 	str.w	r3, [r0], #4
 800a6dc:	d2e8      	bcs.n	800a6b0 <quorem+0xb0>
 800a6de:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a6e2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a6e6:	b92a      	cbnz	r2, 800a6f4 <quorem+0xf4>
 800a6e8:	3b04      	subs	r3, #4
 800a6ea:	429e      	cmp	r6, r3
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	d30b      	bcc.n	800a708 <quorem+0x108>
 800a6f0:	f8c8 4010 	str.w	r4, [r8, #16]
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	b003      	add	sp, #12
 800a6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fc:	6812      	ldr	r2, [r2, #0]
 800a6fe:	3b04      	subs	r3, #4
 800a700:	2a00      	cmp	r2, #0
 800a702:	d1ca      	bne.n	800a69a <quorem+0x9a>
 800a704:	3c01      	subs	r4, #1
 800a706:	e7c5      	b.n	800a694 <quorem+0x94>
 800a708:	6812      	ldr	r2, [r2, #0]
 800a70a:	3b04      	subs	r3, #4
 800a70c:	2a00      	cmp	r2, #0
 800a70e:	d1ef      	bne.n	800a6f0 <quorem+0xf0>
 800a710:	3c01      	subs	r4, #1
 800a712:	e7ea      	b.n	800a6ea <quorem+0xea>
 800a714:	2000      	movs	r0, #0
 800a716:	e7ee      	b.n	800a6f6 <quorem+0xf6>

0800a718 <_dtoa_r>:
 800a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	b097      	sub	sp, #92	; 0x5c
 800a71e:	ec57 6b10 	vmov	r6, r7, d0
 800a722:	9106      	str	r1, [sp, #24]
 800a724:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a726:	920b      	str	r2, [sp, #44]	; 0x2c
 800a728:	4604      	mov	r4, r0
 800a72a:	9312      	str	r3, [sp, #72]	; 0x48
 800a72c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800a72e:	e9cd 6700 	strd	r6, r7, [sp]
 800a732:	b141      	cbz	r1, 800a746 <_dtoa_r+0x2e>
 800a734:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a736:	604a      	str	r2, [r1, #4]
 800a738:	2301      	movs	r3, #1
 800a73a:	4093      	lsls	r3, r2
 800a73c:	608b      	str	r3, [r1, #8]
 800a73e:	f001 fa3b 	bl	800bbb8 <_Bfree>
 800a742:	2300      	movs	r3, #0
 800a744:	6423      	str	r3, [r4, #64]	; 0x40
 800a746:	1e3b      	subs	r3, r7, #0
 800a748:	bfb9      	ittee	lt
 800a74a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a74e:	9301      	strlt	r3, [sp, #4]
 800a750:	2300      	movge	r3, #0
 800a752:	602b      	strge	r3, [r5, #0]
 800a754:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a758:	4baf      	ldr	r3, [pc, #700]	; (800aa18 <_dtoa_r+0x300>)
 800a75a:	bfbc      	itt	lt
 800a75c:	2201      	movlt	r2, #1
 800a75e:	602a      	strlt	r2, [r5, #0]
 800a760:	ea33 0308 	bics.w	r3, r3, r8
 800a764:	d116      	bne.n	800a794 <_dtoa_r+0x7c>
 800a766:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a768:	f242 730f 	movw	r3, #9999	; 0x270f
 800a76c:	6013      	str	r3, [r2, #0]
 800a76e:	9b00      	ldr	r3, [sp, #0]
 800a770:	b923      	cbnz	r3, 800a77c <_dtoa_r+0x64>
 800a772:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a776:	2800      	cmp	r0, #0
 800a778:	f000 8543 	beq.w	800b202 <_dtoa_r+0xaea>
 800a77c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a77e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800aa2c <_dtoa_r+0x314>
 800a782:	b11b      	cbz	r3, 800a78c <_dtoa_r+0x74>
 800a784:	f10b 0303 	add.w	r3, fp, #3
 800a788:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a78a:	6013      	str	r3, [r2, #0]
 800a78c:	4658      	mov	r0, fp
 800a78e:	b017      	add	sp, #92	; 0x5c
 800a790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a794:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a798:	2200      	movs	r2, #0
 800a79a:	2300      	movs	r3, #0
 800a79c:	4630      	mov	r0, r6
 800a79e:	4639      	mov	r1, r7
 800a7a0:	f7f6 f992 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7a4:	4681      	mov	r9, r0
 800a7a6:	b160      	cbz	r0, 800a7c2 <_dtoa_r+0xaa>
 800a7a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	6013      	str	r3, [r2, #0]
 800a7ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 8522 	beq.w	800b1fa <_dtoa_r+0xae2>
 800a7b6:	4b99      	ldr	r3, [pc, #612]	; (800aa1c <_dtoa_r+0x304>)
 800a7b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7ba:	f103 3bff 	add.w	fp, r3, #4294967295
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	e7e4      	b.n	800a78c <_dtoa_r+0x74>
 800a7c2:	aa14      	add	r2, sp, #80	; 0x50
 800a7c4:	a915      	add	r1, sp, #84	; 0x54
 800a7c6:	ec47 6b10 	vmov	d0, r6, r7
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f001 fce6 	bl	800c19c <__d2b>
 800a7d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a7d4:	9004      	str	r0, [sp, #16]
 800a7d6:	2d00      	cmp	r5, #0
 800a7d8:	d07c      	beq.n	800a8d4 <_dtoa_r+0x1bc>
 800a7da:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7de:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a7e2:	46b2      	mov	sl, r6
 800a7e4:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a7e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a7ec:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	4b8b      	ldr	r3, [pc, #556]	; (800aa20 <_dtoa_r+0x308>)
 800a7f4:	4650      	mov	r0, sl
 800a7f6:	4659      	mov	r1, fp
 800a7f8:	f7f5 fd46 	bl	8000288 <__aeabi_dsub>
 800a7fc:	a380      	add	r3, pc, #512	; (adr r3, 800aa00 <_dtoa_r+0x2e8>)
 800a7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a802:	f7f5 fef9 	bl	80005f8 <__aeabi_dmul>
 800a806:	a380      	add	r3, pc, #512	; (adr r3, 800aa08 <_dtoa_r+0x2f0>)
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	f7f5 fd3e 	bl	800028c <__adddf3>
 800a810:	4606      	mov	r6, r0
 800a812:	4628      	mov	r0, r5
 800a814:	460f      	mov	r7, r1
 800a816:	f7f5 fe85 	bl	8000524 <__aeabi_i2d>
 800a81a:	a37d      	add	r3, pc, #500	; (adr r3, 800aa10 <_dtoa_r+0x2f8>)
 800a81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a820:	f7f5 feea 	bl	80005f8 <__aeabi_dmul>
 800a824:	4602      	mov	r2, r0
 800a826:	460b      	mov	r3, r1
 800a828:	4630      	mov	r0, r6
 800a82a:	4639      	mov	r1, r7
 800a82c:	f7f5 fd2e 	bl	800028c <__adddf3>
 800a830:	4606      	mov	r6, r0
 800a832:	460f      	mov	r7, r1
 800a834:	f7f6 f990 	bl	8000b58 <__aeabi_d2iz>
 800a838:	2200      	movs	r2, #0
 800a83a:	4682      	mov	sl, r0
 800a83c:	2300      	movs	r3, #0
 800a83e:	4630      	mov	r0, r6
 800a840:	4639      	mov	r1, r7
 800a842:	f7f6 f94b 	bl	8000adc <__aeabi_dcmplt>
 800a846:	b148      	cbz	r0, 800a85c <_dtoa_r+0x144>
 800a848:	4650      	mov	r0, sl
 800a84a:	f7f5 fe6b 	bl	8000524 <__aeabi_i2d>
 800a84e:	4632      	mov	r2, r6
 800a850:	463b      	mov	r3, r7
 800a852:	f7f6 f939 	bl	8000ac8 <__aeabi_dcmpeq>
 800a856:	b908      	cbnz	r0, 800a85c <_dtoa_r+0x144>
 800a858:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a85c:	f1ba 0f16 	cmp.w	sl, #22
 800a860:	d859      	bhi.n	800a916 <_dtoa_r+0x1fe>
 800a862:	4970      	ldr	r1, [pc, #448]	; (800aa24 <_dtoa_r+0x30c>)
 800a864:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a868:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a86c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a870:	f7f6 f952 	bl	8000b18 <__aeabi_dcmpgt>
 800a874:	2800      	cmp	r0, #0
 800a876:	d050      	beq.n	800a91a <_dtoa_r+0x202>
 800a878:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a87c:	2300      	movs	r3, #0
 800a87e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a880:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a882:	1b5d      	subs	r5, r3, r5
 800a884:	f1b5 0801 	subs.w	r8, r5, #1
 800a888:	bf49      	itett	mi
 800a88a:	f1c5 0301 	rsbmi	r3, r5, #1
 800a88e:	2300      	movpl	r3, #0
 800a890:	9305      	strmi	r3, [sp, #20]
 800a892:	f04f 0800 	movmi.w	r8, #0
 800a896:	bf58      	it	pl
 800a898:	9305      	strpl	r3, [sp, #20]
 800a89a:	f1ba 0f00 	cmp.w	sl, #0
 800a89e:	db3e      	blt.n	800a91e <_dtoa_r+0x206>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	44d0      	add	r8, sl
 800a8a4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a8a8:	9307      	str	r3, [sp, #28]
 800a8aa:	9b06      	ldr	r3, [sp, #24]
 800a8ac:	2b09      	cmp	r3, #9
 800a8ae:	f200 808d 	bhi.w	800a9cc <_dtoa_r+0x2b4>
 800a8b2:	2b05      	cmp	r3, #5
 800a8b4:	bfc4      	itt	gt
 800a8b6:	3b04      	subgt	r3, #4
 800a8b8:	9306      	strgt	r3, [sp, #24]
 800a8ba:	9b06      	ldr	r3, [sp, #24]
 800a8bc:	f1a3 0302 	sub.w	r3, r3, #2
 800a8c0:	bfcc      	ite	gt
 800a8c2:	2500      	movgt	r5, #0
 800a8c4:	2501      	movle	r5, #1
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	f200 808c 	bhi.w	800a9e4 <_dtoa_r+0x2cc>
 800a8cc:	e8df f003 	tbb	[pc, r3]
 800a8d0:	6e317c7a 	.word	0x6e317c7a
 800a8d4:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a8d8:	441d      	add	r5, r3
 800a8da:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a8de:	2820      	cmp	r0, #32
 800a8e0:	dd13      	ble.n	800a90a <_dtoa_r+0x1f2>
 800a8e2:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a8e6:	9b00      	ldr	r3, [sp, #0]
 800a8e8:	fa08 f800 	lsl.w	r8, r8, r0
 800a8ec:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a8f0:	fa23 f000 	lsr.w	r0, r3, r0
 800a8f4:	ea48 0000 	orr.w	r0, r8, r0
 800a8f8:	f7f5 fe04 	bl	8000504 <__aeabi_ui2d>
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	4682      	mov	sl, r0
 800a900:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a904:	3d01      	subs	r5, #1
 800a906:	9313      	str	r3, [sp, #76]	; 0x4c
 800a908:	e772      	b.n	800a7f0 <_dtoa_r+0xd8>
 800a90a:	9b00      	ldr	r3, [sp, #0]
 800a90c:	f1c0 0020 	rsb	r0, r0, #32
 800a910:	fa03 f000 	lsl.w	r0, r3, r0
 800a914:	e7f0      	b.n	800a8f8 <_dtoa_r+0x1e0>
 800a916:	2301      	movs	r3, #1
 800a918:	e7b1      	b.n	800a87e <_dtoa_r+0x166>
 800a91a:	900f      	str	r0, [sp, #60]	; 0x3c
 800a91c:	e7b0      	b.n	800a880 <_dtoa_r+0x168>
 800a91e:	9b05      	ldr	r3, [sp, #20]
 800a920:	eba3 030a 	sub.w	r3, r3, sl
 800a924:	9305      	str	r3, [sp, #20]
 800a926:	f1ca 0300 	rsb	r3, sl, #0
 800a92a:	9307      	str	r3, [sp, #28]
 800a92c:	2300      	movs	r3, #0
 800a92e:	930e      	str	r3, [sp, #56]	; 0x38
 800a930:	e7bb      	b.n	800a8aa <_dtoa_r+0x192>
 800a932:	2301      	movs	r3, #1
 800a934:	930a      	str	r3, [sp, #40]	; 0x28
 800a936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a938:	2b00      	cmp	r3, #0
 800a93a:	dd56      	ble.n	800a9ea <_dtoa_r+0x2d2>
 800a93c:	9302      	str	r3, [sp, #8]
 800a93e:	4699      	mov	r9, r3
 800a940:	2200      	movs	r2, #0
 800a942:	6462      	str	r2, [r4, #68]	; 0x44
 800a944:	2204      	movs	r2, #4
 800a946:	f102 0014 	add.w	r0, r2, #20
 800a94a:	4298      	cmp	r0, r3
 800a94c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a94e:	d951      	bls.n	800a9f4 <_dtoa_r+0x2dc>
 800a950:	4620      	mov	r0, r4
 800a952:	f001 f90c 	bl	800bb6e <_Balloc>
 800a956:	f1b9 0f0e 	cmp.w	r9, #14
 800a95a:	4683      	mov	fp, r0
 800a95c:	6420      	str	r0, [r4, #64]	; 0x40
 800a95e:	f200 80e8 	bhi.w	800ab32 <_dtoa_r+0x41a>
 800a962:	2d00      	cmp	r5, #0
 800a964:	f000 80e5 	beq.w	800ab32 <_dtoa_r+0x41a>
 800a968:	ed9d 7b00 	vldr	d7, [sp]
 800a96c:	f1ba 0f00 	cmp.w	sl, #0
 800a970:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a974:	dd76      	ble.n	800aa64 <_dtoa_r+0x34c>
 800a976:	4a2b      	ldr	r2, [pc, #172]	; (800aa24 <_dtoa_r+0x30c>)
 800a978:	f00a 030f 	and.w	r3, sl, #15
 800a97c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a980:	ed93 7b00 	vldr	d7, [r3]
 800a984:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a988:	06f0      	lsls	r0, r6, #27
 800a98a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a98e:	d567      	bpl.n	800aa60 <_dtoa_r+0x348>
 800a990:	4b25      	ldr	r3, [pc, #148]	; (800aa28 <_dtoa_r+0x310>)
 800a992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a996:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a99a:	f7f5 ff57 	bl	800084c <__aeabi_ddiv>
 800a99e:	e9cd 0100 	strd	r0, r1, [sp]
 800a9a2:	f006 060f 	and.w	r6, r6, #15
 800a9a6:	2503      	movs	r5, #3
 800a9a8:	4f1f      	ldr	r7, [pc, #124]	; (800aa28 <_dtoa_r+0x310>)
 800a9aa:	e04e      	b.n	800aa4a <_dtoa_r+0x332>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a9b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9b2:	4453      	add	r3, sl
 800a9b4:	f103 0901 	add.w	r9, r3, #1
 800a9b8:	9302      	str	r3, [sp, #8]
 800a9ba:	464b      	mov	r3, r9
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	bfb8      	it	lt
 800a9c0:	2301      	movlt	r3, #1
 800a9c2:	e7bd      	b.n	800a940 <_dtoa_r+0x228>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	e7b5      	b.n	800a934 <_dtoa_r+0x21c>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	e7f0      	b.n	800a9ae <_dtoa_r+0x296>
 800a9cc:	2501      	movs	r5, #1
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	9306      	str	r3, [sp, #24]
 800a9d2:	950a      	str	r5, [sp, #40]	; 0x28
 800a9d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d8:	9302      	str	r3, [sp, #8]
 800a9da:	4699      	mov	r9, r3
 800a9dc:	2200      	movs	r2, #0
 800a9de:	2312      	movs	r3, #18
 800a9e0:	920b      	str	r2, [sp, #44]	; 0x2c
 800a9e2:	e7ad      	b.n	800a940 <_dtoa_r+0x228>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	930a      	str	r3, [sp, #40]	; 0x28
 800a9e8:	e7f4      	b.n	800a9d4 <_dtoa_r+0x2bc>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	9302      	str	r3, [sp, #8]
 800a9ee:	4699      	mov	r9, r3
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	e7f5      	b.n	800a9e0 <_dtoa_r+0x2c8>
 800a9f4:	3101      	adds	r1, #1
 800a9f6:	6461      	str	r1, [r4, #68]	; 0x44
 800a9f8:	0052      	lsls	r2, r2, #1
 800a9fa:	e7a4      	b.n	800a946 <_dtoa_r+0x22e>
 800a9fc:	f3af 8000 	nop.w
 800aa00:	636f4361 	.word	0x636f4361
 800aa04:	3fd287a7 	.word	0x3fd287a7
 800aa08:	8b60c8b3 	.word	0x8b60c8b3
 800aa0c:	3fc68a28 	.word	0x3fc68a28
 800aa10:	509f79fb 	.word	0x509f79fb
 800aa14:	3fd34413 	.word	0x3fd34413
 800aa18:	7ff00000 	.word	0x7ff00000
 800aa1c:	0800f3a3 	.word	0x0800f3a3
 800aa20:	3ff80000 	.word	0x3ff80000
 800aa24:	0800f408 	.word	0x0800f408
 800aa28:	0800f3e0 	.word	0x0800f3e0
 800aa2c:	0800f3cd 	.word	0x0800f3cd
 800aa30:	07f1      	lsls	r1, r6, #31
 800aa32:	d508      	bpl.n	800aa46 <_dtoa_r+0x32e>
 800aa34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa3c:	f7f5 fddc 	bl	80005f8 <__aeabi_dmul>
 800aa40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa44:	3501      	adds	r5, #1
 800aa46:	1076      	asrs	r6, r6, #1
 800aa48:	3708      	adds	r7, #8
 800aa4a:	2e00      	cmp	r6, #0
 800aa4c:	d1f0      	bne.n	800aa30 <_dtoa_r+0x318>
 800aa4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aa52:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa56:	f7f5 fef9 	bl	800084c <__aeabi_ddiv>
 800aa5a:	e9cd 0100 	strd	r0, r1, [sp]
 800aa5e:	e01a      	b.n	800aa96 <_dtoa_r+0x37e>
 800aa60:	2502      	movs	r5, #2
 800aa62:	e7a1      	b.n	800a9a8 <_dtoa_r+0x290>
 800aa64:	f000 80a0 	beq.w	800aba8 <_dtoa_r+0x490>
 800aa68:	f1ca 0600 	rsb	r6, sl, #0
 800aa6c:	4b9f      	ldr	r3, [pc, #636]	; (800acec <_dtoa_r+0x5d4>)
 800aa6e:	4fa0      	ldr	r7, [pc, #640]	; (800acf0 <_dtoa_r+0x5d8>)
 800aa70:	f006 020f 	and.w	r2, r6, #15
 800aa74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa80:	f7f5 fdba 	bl	80005f8 <__aeabi_dmul>
 800aa84:	e9cd 0100 	strd	r0, r1, [sp]
 800aa88:	1136      	asrs	r6, r6, #4
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	2502      	movs	r5, #2
 800aa8e:	2e00      	cmp	r6, #0
 800aa90:	d17f      	bne.n	800ab92 <_dtoa_r+0x47a>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1e1      	bne.n	800aa5a <_dtoa_r+0x342>
 800aa96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f000 8087 	beq.w	800abac <_dtoa_r+0x494>
 800aa9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	4b93      	ldr	r3, [pc, #588]	; (800acf4 <_dtoa_r+0x5dc>)
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	4639      	mov	r1, r7
 800aaaa:	f7f6 f817 	bl	8000adc <__aeabi_dcmplt>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d07c      	beq.n	800abac <_dtoa_r+0x494>
 800aab2:	f1b9 0f00 	cmp.w	r9, #0
 800aab6:	d079      	beq.n	800abac <_dtoa_r+0x494>
 800aab8:	9b02      	ldr	r3, [sp, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	dd35      	ble.n	800ab2a <_dtoa_r+0x412>
 800aabe:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aac2:	9308      	str	r3, [sp, #32]
 800aac4:	4639      	mov	r1, r7
 800aac6:	2200      	movs	r2, #0
 800aac8:	4b8b      	ldr	r3, [pc, #556]	; (800acf8 <_dtoa_r+0x5e0>)
 800aaca:	4630      	mov	r0, r6
 800aacc:	f7f5 fd94 	bl	80005f8 <__aeabi_dmul>
 800aad0:	e9cd 0100 	strd	r0, r1, [sp]
 800aad4:	9f02      	ldr	r7, [sp, #8]
 800aad6:	3501      	adds	r5, #1
 800aad8:	4628      	mov	r0, r5
 800aada:	f7f5 fd23 	bl	8000524 <__aeabi_i2d>
 800aade:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aae2:	f7f5 fd89 	bl	80005f8 <__aeabi_dmul>
 800aae6:	2200      	movs	r2, #0
 800aae8:	4b84      	ldr	r3, [pc, #528]	; (800acfc <_dtoa_r+0x5e4>)
 800aaea:	f7f5 fbcf 	bl	800028c <__adddf3>
 800aaee:	4605      	mov	r5, r0
 800aaf0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800aaf4:	2f00      	cmp	r7, #0
 800aaf6:	d15d      	bne.n	800abb4 <_dtoa_r+0x49c>
 800aaf8:	2200      	movs	r2, #0
 800aafa:	4b81      	ldr	r3, [pc, #516]	; (800ad00 <_dtoa_r+0x5e8>)
 800aafc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab00:	f7f5 fbc2 	bl	8000288 <__aeabi_dsub>
 800ab04:	462a      	mov	r2, r5
 800ab06:	4633      	mov	r3, r6
 800ab08:	e9cd 0100 	strd	r0, r1, [sp]
 800ab0c:	f7f6 f804 	bl	8000b18 <__aeabi_dcmpgt>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	f040 8288 	bne.w	800b026 <_dtoa_r+0x90e>
 800ab16:	462a      	mov	r2, r5
 800ab18:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ab1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab20:	f7f5 ffdc 	bl	8000adc <__aeabi_dcmplt>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	f040 827c 	bne.w	800b022 <_dtoa_r+0x90a>
 800ab2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab2e:	e9cd 2300 	strd	r2, r3, [sp]
 800ab32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f2c0 8150 	blt.w	800adda <_dtoa_r+0x6c2>
 800ab3a:	f1ba 0f0e 	cmp.w	sl, #14
 800ab3e:	f300 814c 	bgt.w	800adda <_dtoa_r+0x6c2>
 800ab42:	4b6a      	ldr	r3, [pc, #424]	; (800acec <_dtoa_r+0x5d4>)
 800ab44:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab48:	ed93 7b00 	vldr	d7, [r3]
 800ab4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab54:	f280 80d8 	bge.w	800ad08 <_dtoa_r+0x5f0>
 800ab58:	f1b9 0f00 	cmp.w	r9, #0
 800ab5c:	f300 80d4 	bgt.w	800ad08 <_dtoa_r+0x5f0>
 800ab60:	f040 825e 	bne.w	800b020 <_dtoa_r+0x908>
 800ab64:	2200      	movs	r2, #0
 800ab66:	4b66      	ldr	r3, [pc, #408]	; (800ad00 <_dtoa_r+0x5e8>)
 800ab68:	ec51 0b17 	vmov	r0, r1, d7
 800ab6c:	f7f5 fd44 	bl	80005f8 <__aeabi_dmul>
 800ab70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab74:	f7f5 ffc6 	bl	8000b04 <__aeabi_dcmpge>
 800ab78:	464f      	mov	r7, r9
 800ab7a:	464e      	mov	r6, r9
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	f040 8234 	bne.w	800afea <_dtoa_r+0x8d2>
 800ab82:	2331      	movs	r3, #49	; 0x31
 800ab84:	f10b 0501 	add.w	r5, fp, #1
 800ab88:	f88b 3000 	strb.w	r3, [fp]
 800ab8c:	f10a 0a01 	add.w	sl, sl, #1
 800ab90:	e22f      	b.n	800aff2 <_dtoa_r+0x8da>
 800ab92:	07f2      	lsls	r2, r6, #31
 800ab94:	d505      	bpl.n	800aba2 <_dtoa_r+0x48a>
 800ab96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab9a:	f7f5 fd2d 	bl	80005f8 <__aeabi_dmul>
 800ab9e:	3501      	adds	r5, #1
 800aba0:	2301      	movs	r3, #1
 800aba2:	1076      	asrs	r6, r6, #1
 800aba4:	3708      	adds	r7, #8
 800aba6:	e772      	b.n	800aa8e <_dtoa_r+0x376>
 800aba8:	2502      	movs	r5, #2
 800abaa:	e774      	b.n	800aa96 <_dtoa_r+0x37e>
 800abac:	f8cd a020 	str.w	sl, [sp, #32]
 800abb0:	464f      	mov	r7, r9
 800abb2:	e791      	b.n	800aad8 <_dtoa_r+0x3c0>
 800abb4:	4b4d      	ldr	r3, [pc, #308]	; (800acec <_dtoa_r+0x5d4>)
 800abb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800abba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800abbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d047      	beq.n	800ac54 <_dtoa_r+0x53c>
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	2000      	movs	r0, #0
 800abca:	494e      	ldr	r1, [pc, #312]	; (800ad04 <_dtoa_r+0x5ec>)
 800abcc:	f7f5 fe3e 	bl	800084c <__aeabi_ddiv>
 800abd0:	462a      	mov	r2, r5
 800abd2:	4633      	mov	r3, r6
 800abd4:	f7f5 fb58 	bl	8000288 <__aeabi_dsub>
 800abd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800abdc:	465d      	mov	r5, fp
 800abde:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abe2:	f7f5 ffb9 	bl	8000b58 <__aeabi_d2iz>
 800abe6:	4606      	mov	r6, r0
 800abe8:	f7f5 fc9c 	bl	8000524 <__aeabi_i2d>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abf4:	f7f5 fb48 	bl	8000288 <__aeabi_dsub>
 800abf8:	3630      	adds	r6, #48	; 0x30
 800abfa:	f805 6b01 	strb.w	r6, [r5], #1
 800abfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac02:	e9cd 0100 	strd	r0, r1, [sp]
 800ac06:	f7f5 ff69 	bl	8000adc <__aeabi_dcmplt>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d163      	bne.n	800acd6 <_dtoa_r+0x5be>
 800ac0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac12:	2000      	movs	r0, #0
 800ac14:	4937      	ldr	r1, [pc, #220]	; (800acf4 <_dtoa_r+0x5dc>)
 800ac16:	f7f5 fb37 	bl	8000288 <__aeabi_dsub>
 800ac1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac1e:	f7f5 ff5d 	bl	8000adc <__aeabi_dcmplt>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	f040 80b7 	bne.w	800ad96 <_dtoa_r+0x67e>
 800ac28:	eba5 030b 	sub.w	r3, r5, fp
 800ac2c:	429f      	cmp	r7, r3
 800ac2e:	f77f af7c 	ble.w	800ab2a <_dtoa_r+0x412>
 800ac32:	2200      	movs	r2, #0
 800ac34:	4b30      	ldr	r3, [pc, #192]	; (800acf8 <_dtoa_r+0x5e0>)
 800ac36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac3a:	f7f5 fcdd 	bl	80005f8 <__aeabi_dmul>
 800ac3e:	2200      	movs	r2, #0
 800ac40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ac44:	4b2c      	ldr	r3, [pc, #176]	; (800acf8 <_dtoa_r+0x5e0>)
 800ac46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac4a:	f7f5 fcd5 	bl	80005f8 <__aeabi_dmul>
 800ac4e:	e9cd 0100 	strd	r0, r1, [sp]
 800ac52:	e7c4      	b.n	800abde <_dtoa_r+0x4c6>
 800ac54:	462a      	mov	r2, r5
 800ac56:	4633      	mov	r3, r6
 800ac58:	f7f5 fcce 	bl	80005f8 <__aeabi_dmul>
 800ac5c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ac60:	eb0b 0507 	add.w	r5, fp, r7
 800ac64:	465e      	mov	r6, fp
 800ac66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac6a:	f7f5 ff75 	bl	8000b58 <__aeabi_d2iz>
 800ac6e:	4607      	mov	r7, r0
 800ac70:	f7f5 fc58 	bl	8000524 <__aeabi_i2d>
 800ac74:	3730      	adds	r7, #48	; 0x30
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac7e:	f7f5 fb03 	bl	8000288 <__aeabi_dsub>
 800ac82:	f806 7b01 	strb.w	r7, [r6], #1
 800ac86:	42ae      	cmp	r6, r5
 800ac88:	e9cd 0100 	strd	r0, r1, [sp]
 800ac8c:	f04f 0200 	mov.w	r2, #0
 800ac90:	d126      	bne.n	800ace0 <_dtoa_r+0x5c8>
 800ac92:	4b1c      	ldr	r3, [pc, #112]	; (800ad04 <_dtoa_r+0x5ec>)
 800ac94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac98:	f7f5 faf8 	bl	800028c <__adddf3>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aca4:	f7f5 ff38 	bl	8000b18 <__aeabi_dcmpgt>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d174      	bne.n	800ad96 <_dtoa_r+0x67e>
 800acac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800acb0:	2000      	movs	r0, #0
 800acb2:	4914      	ldr	r1, [pc, #80]	; (800ad04 <_dtoa_r+0x5ec>)
 800acb4:	f7f5 fae8 	bl	8000288 <__aeabi_dsub>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acc0:	f7f5 ff0c 	bl	8000adc <__aeabi_dcmplt>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f43f af30 	beq.w	800ab2a <_dtoa_r+0x412>
 800acca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800acce:	2b30      	cmp	r3, #48	; 0x30
 800acd0:	f105 32ff 	add.w	r2, r5, #4294967295
 800acd4:	d002      	beq.n	800acdc <_dtoa_r+0x5c4>
 800acd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800acda:	e04a      	b.n	800ad72 <_dtoa_r+0x65a>
 800acdc:	4615      	mov	r5, r2
 800acde:	e7f4      	b.n	800acca <_dtoa_r+0x5b2>
 800ace0:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <_dtoa_r+0x5e0>)
 800ace2:	f7f5 fc89 	bl	80005f8 <__aeabi_dmul>
 800ace6:	e9cd 0100 	strd	r0, r1, [sp]
 800acea:	e7bc      	b.n	800ac66 <_dtoa_r+0x54e>
 800acec:	0800f408 	.word	0x0800f408
 800acf0:	0800f3e0 	.word	0x0800f3e0
 800acf4:	3ff00000 	.word	0x3ff00000
 800acf8:	40240000 	.word	0x40240000
 800acfc:	401c0000 	.word	0x401c0000
 800ad00:	40140000 	.word	0x40140000
 800ad04:	3fe00000 	.word	0x3fe00000
 800ad08:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ad0c:	465d      	mov	r5, fp
 800ad0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad12:	4630      	mov	r0, r6
 800ad14:	4639      	mov	r1, r7
 800ad16:	f7f5 fd99 	bl	800084c <__aeabi_ddiv>
 800ad1a:	f7f5 ff1d 	bl	8000b58 <__aeabi_d2iz>
 800ad1e:	4680      	mov	r8, r0
 800ad20:	f7f5 fc00 	bl	8000524 <__aeabi_i2d>
 800ad24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad28:	f7f5 fc66 	bl	80005f8 <__aeabi_dmul>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	4630      	mov	r0, r6
 800ad32:	4639      	mov	r1, r7
 800ad34:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ad38:	f7f5 faa6 	bl	8000288 <__aeabi_dsub>
 800ad3c:	f805 6b01 	strb.w	r6, [r5], #1
 800ad40:	eba5 060b 	sub.w	r6, r5, fp
 800ad44:	45b1      	cmp	r9, r6
 800ad46:	4602      	mov	r2, r0
 800ad48:	460b      	mov	r3, r1
 800ad4a:	d139      	bne.n	800adc0 <_dtoa_r+0x6a8>
 800ad4c:	f7f5 fa9e 	bl	800028c <__adddf3>
 800ad50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad54:	4606      	mov	r6, r0
 800ad56:	460f      	mov	r7, r1
 800ad58:	f7f5 fede 	bl	8000b18 <__aeabi_dcmpgt>
 800ad5c:	b9c8      	cbnz	r0, 800ad92 <_dtoa_r+0x67a>
 800ad5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad62:	4630      	mov	r0, r6
 800ad64:	4639      	mov	r1, r7
 800ad66:	f7f5 feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad6a:	b110      	cbz	r0, 800ad72 <_dtoa_r+0x65a>
 800ad6c:	f018 0f01 	tst.w	r8, #1
 800ad70:	d10f      	bne.n	800ad92 <_dtoa_r+0x67a>
 800ad72:	9904      	ldr	r1, [sp, #16]
 800ad74:	4620      	mov	r0, r4
 800ad76:	f000 ff1f 	bl	800bbb8 <_Bfree>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad7e:	702b      	strb	r3, [r5, #0]
 800ad80:	f10a 0301 	add.w	r3, sl, #1
 800ad84:	6013      	str	r3, [r2, #0]
 800ad86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f43f acff 	beq.w	800a78c <_dtoa_r+0x74>
 800ad8e:	601d      	str	r5, [r3, #0]
 800ad90:	e4fc      	b.n	800a78c <_dtoa_r+0x74>
 800ad92:	f8cd a020 	str.w	sl, [sp, #32]
 800ad96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad9a:	2a39      	cmp	r2, #57	; 0x39
 800ad9c:	f105 33ff 	add.w	r3, r5, #4294967295
 800ada0:	d108      	bne.n	800adb4 <_dtoa_r+0x69c>
 800ada2:	459b      	cmp	fp, r3
 800ada4:	d10a      	bne.n	800adbc <_dtoa_r+0x6a4>
 800ada6:	9b08      	ldr	r3, [sp, #32]
 800ada8:	3301      	adds	r3, #1
 800adaa:	9308      	str	r3, [sp, #32]
 800adac:	2330      	movs	r3, #48	; 0x30
 800adae:	f88b 3000 	strb.w	r3, [fp]
 800adb2:	465b      	mov	r3, fp
 800adb4:	781a      	ldrb	r2, [r3, #0]
 800adb6:	3201      	adds	r2, #1
 800adb8:	701a      	strb	r2, [r3, #0]
 800adba:	e78c      	b.n	800acd6 <_dtoa_r+0x5be>
 800adbc:	461d      	mov	r5, r3
 800adbe:	e7ea      	b.n	800ad96 <_dtoa_r+0x67e>
 800adc0:	2200      	movs	r2, #0
 800adc2:	4b9b      	ldr	r3, [pc, #620]	; (800b030 <_dtoa_r+0x918>)
 800adc4:	f7f5 fc18 	bl	80005f8 <__aeabi_dmul>
 800adc8:	2200      	movs	r2, #0
 800adca:	2300      	movs	r3, #0
 800adcc:	4606      	mov	r6, r0
 800adce:	460f      	mov	r7, r1
 800add0:	f7f5 fe7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800add4:	2800      	cmp	r0, #0
 800add6:	d09a      	beq.n	800ad0e <_dtoa_r+0x5f6>
 800add8:	e7cb      	b.n	800ad72 <_dtoa_r+0x65a>
 800adda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800addc:	2a00      	cmp	r2, #0
 800adde:	f000 808b 	beq.w	800aef8 <_dtoa_r+0x7e0>
 800ade2:	9a06      	ldr	r2, [sp, #24]
 800ade4:	2a01      	cmp	r2, #1
 800ade6:	dc6e      	bgt.n	800aec6 <_dtoa_r+0x7ae>
 800ade8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800adea:	2a00      	cmp	r2, #0
 800adec:	d067      	beq.n	800aebe <_dtoa_r+0x7a6>
 800adee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800adf2:	9f07      	ldr	r7, [sp, #28]
 800adf4:	9d05      	ldr	r5, [sp, #20]
 800adf6:	9a05      	ldr	r2, [sp, #20]
 800adf8:	2101      	movs	r1, #1
 800adfa:	441a      	add	r2, r3
 800adfc:	4620      	mov	r0, r4
 800adfe:	9205      	str	r2, [sp, #20]
 800ae00:	4498      	add	r8, r3
 800ae02:	f000 ffa9 	bl	800bd58 <__i2b>
 800ae06:	4606      	mov	r6, r0
 800ae08:	2d00      	cmp	r5, #0
 800ae0a:	dd0c      	ble.n	800ae26 <_dtoa_r+0x70e>
 800ae0c:	f1b8 0f00 	cmp.w	r8, #0
 800ae10:	dd09      	ble.n	800ae26 <_dtoa_r+0x70e>
 800ae12:	4545      	cmp	r5, r8
 800ae14:	9a05      	ldr	r2, [sp, #20]
 800ae16:	462b      	mov	r3, r5
 800ae18:	bfa8      	it	ge
 800ae1a:	4643      	movge	r3, r8
 800ae1c:	1ad2      	subs	r2, r2, r3
 800ae1e:	9205      	str	r2, [sp, #20]
 800ae20:	1aed      	subs	r5, r5, r3
 800ae22:	eba8 0803 	sub.w	r8, r8, r3
 800ae26:	9b07      	ldr	r3, [sp, #28]
 800ae28:	b1eb      	cbz	r3, 800ae66 <_dtoa_r+0x74e>
 800ae2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d067      	beq.n	800af00 <_dtoa_r+0x7e8>
 800ae30:	b18f      	cbz	r7, 800ae56 <_dtoa_r+0x73e>
 800ae32:	4631      	mov	r1, r6
 800ae34:	463a      	mov	r2, r7
 800ae36:	4620      	mov	r0, r4
 800ae38:	f001 f82e 	bl	800be98 <__pow5mult>
 800ae3c:	9a04      	ldr	r2, [sp, #16]
 800ae3e:	4601      	mov	r1, r0
 800ae40:	4606      	mov	r6, r0
 800ae42:	4620      	mov	r0, r4
 800ae44:	f000 ff91 	bl	800bd6a <__multiply>
 800ae48:	9904      	ldr	r1, [sp, #16]
 800ae4a:	9008      	str	r0, [sp, #32]
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f000 feb3 	bl	800bbb8 <_Bfree>
 800ae52:	9b08      	ldr	r3, [sp, #32]
 800ae54:	9304      	str	r3, [sp, #16]
 800ae56:	9b07      	ldr	r3, [sp, #28]
 800ae58:	1bda      	subs	r2, r3, r7
 800ae5a:	d004      	beq.n	800ae66 <_dtoa_r+0x74e>
 800ae5c:	9904      	ldr	r1, [sp, #16]
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f001 f81a 	bl	800be98 <__pow5mult>
 800ae64:	9004      	str	r0, [sp, #16]
 800ae66:	2101      	movs	r1, #1
 800ae68:	4620      	mov	r0, r4
 800ae6a:	f000 ff75 	bl	800bd58 <__i2b>
 800ae6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae70:	4607      	mov	r7, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f000 81cf 	beq.w	800b216 <_dtoa_r+0xafe>
 800ae78:	461a      	mov	r2, r3
 800ae7a:	4601      	mov	r1, r0
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f001 f80b 	bl	800be98 <__pow5mult>
 800ae82:	9b06      	ldr	r3, [sp, #24]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	4607      	mov	r7, r0
 800ae88:	dc40      	bgt.n	800af0c <_dtoa_r+0x7f4>
 800ae8a:	9b00      	ldr	r3, [sp, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d139      	bne.n	800af04 <_dtoa_r+0x7ec>
 800ae90:	9b01      	ldr	r3, [sp, #4]
 800ae92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d136      	bne.n	800af08 <_dtoa_r+0x7f0>
 800ae9a:	9b01      	ldr	r3, [sp, #4]
 800ae9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aea0:	0d1b      	lsrs	r3, r3, #20
 800aea2:	051b      	lsls	r3, r3, #20
 800aea4:	b12b      	cbz	r3, 800aeb2 <_dtoa_r+0x79a>
 800aea6:	9b05      	ldr	r3, [sp, #20]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	9305      	str	r3, [sp, #20]
 800aeac:	f108 0801 	add.w	r8, r8, #1
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	9307      	str	r3, [sp, #28]
 800aeb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d12a      	bne.n	800af10 <_dtoa_r+0x7f8>
 800aeba:	2001      	movs	r0, #1
 800aebc:	e030      	b.n	800af20 <_dtoa_r+0x808>
 800aebe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aec0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aec4:	e795      	b.n	800adf2 <_dtoa_r+0x6da>
 800aec6:	9b07      	ldr	r3, [sp, #28]
 800aec8:	f109 37ff 	add.w	r7, r9, #4294967295
 800aecc:	42bb      	cmp	r3, r7
 800aece:	bfbf      	itttt	lt
 800aed0:	9b07      	ldrlt	r3, [sp, #28]
 800aed2:	9707      	strlt	r7, [sp, #28]
 800aed4:	1afa      	sublt	r2, r7, r3
 800aed6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aed8:	bfbb      	ittet	lt
 800aeda:	189b      	addlt	r3, r3, r2
 800aedc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aede:	1bdf      	subge	r7, r3, r7
 800aee0:	2700      	movlt	r7, #0
 800aee2:	f1b9 0f00 	cmp.w	r9, #0
 800aee6:	bfb5      	itete	lt
 800aee8:	9b05      	ldrlt	r3, [sp, #20]
 800aeea:	9d05      	ldrge	r5, [sp, #20]
 800aeec:	eba3 0509 	sublt.w	r5, r3, r9
 800aef0:	464b      	movge	r3, r9
 800aef2:	bfb8      	it	lt
 800aef4:	2300      	movlt	r3, #0
 800aef6:	e77e      	b.n	800adf6 <_dtoa_r+0x6de>
 800aef8:	9f07      	ldr	r7, [sp, #28]
 800aefa:	9d05      	ldr	r5, [sp, #20]
 800aefc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800aefe:	e783      	b.n	800ae08 <_dtoa_r+0x6f0>
 800af00:	9a07      	ldr	r2, [sp, #28]
 800af02:	e7ab      	b.n	800ae5c <_dtoa_r+0x744>
 800af04:	2300      	movs	r3, #0
 800af06:	e7d4      	b.n	800aeb2 <_dtoa_r+0x79a>
 800af08:	9b00      	ldr	r3, [sp, #0]
 800af0a:	e7d2      	b.n	800aeb2 <_dtoa_r+0x79a>
 800af0c:	2300      	movs	r3, #0
 800af0e:	9307      	str	r3, [sp, #28]
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800af16:	6918      	ldr	r0, [r3, #16]
 800af18:	f000 fed0 	bl	800bcbc <__hi0bits>
 800af1c:	f1c0 0020 	rsb	r0, r0, #32
 800af20:	4440      	add	r0, r8
 800af22:	f010 001f 	ands.w	r0, r0, #31
 800af26:	d047      	beq.n	800afb8 <_dtoa_r+0x8a0>
 800af28:	f1c0 0320 	rsb	r3, r0, #32
 800af2c:	2b04      	cmp	r3, #4
 800af2e:	dd3b      	ble.n	800afa8 <_dtoa_r+0x890>
 800af30:	9b05      	ldr	r3, [sp, #20]
 800af32:	f1c0 001c 	rsb	r0, r0, #28
 800af36:	4403      	add	r3, r0
 800af38:	9305      	str	r3, [sp, #20]
 800af3a:	4405      	add	r5, r0
 800af3c:	4480      	add	r8, r0
 800af3e:	9b05      	ldr	r3, [sp, #20]
 800af40:	2b00      	cmp	r3, #0
 800af42:	dd05      	ble.n	800af50 <_dtoa_r+0x838>
 800af44:	461a      	mov	r2, r3
 800af46:	9904      	ldr	r1, [sp, #16]
 800af48:	4620      	mov	r0, r4
 800af4a:	f000 ffe5 	bl	800bf18 <__lshift>
 800af4e:	9004      	str	r0, [sp, #16]
 800af50:	f1b8 0f00 	cmp.w	r8, #0
 800af54:	dd05      	ble.n	800af62 <_dtoa_r+0x84a>
 800af56:	4639      	mov	r1, r7
 800af58:	4642      	mov	r2, r8
 800af5a:	4620      	mov	r0, r4
 800af5c:	f000 ffdc 	bl	800bf18 <__lshift>
 800af60:	4607      	mov	r7, r0
 800af62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af64:	b353      	cbz	r3, 800afbc <_dtoa_r+0x8a4>
 800af66:	4639      	mov	r1, r7
 800af68:	9804      	ldr	r0, [sp, #16]
 800af6a:	f001 f829 	bl	800bfc0 <__mcmp>
 800af6e:	2800      	cmp	r0, #0
 800af70:	da24      	bge.n	800afbc <_dtoa_r+0x8a4>
 800af72:	2300      	movs	r3, #0
 800af74:	220a      	movs	r2, #10
 800af76:	9904      	ldr	r1, [sp, #16]
 800af78:	4620      	mov	r0, r4
 800af7a:	f000 fe26 	bl	800bbca <__multadd>
 800af7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af80:	9004      	str	r0, [sp, #16]
 800af82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af86:	2b00      	cmp	r3, #0
 800af88:	f000 814c 	beq.w	800b224 <_dtoa_r+0xb0c>
 800af8c:	2300      	movs	r3, #0
 800af8e:	4631      	mov	r1, r6
 800af90:	220a      	movs	r2, #10
 800af92:	4620      	mov	r0, r4
 800af94:	f000 fe19 	bl	800bbca <__multadd>
 800af98:	9b02      	ldr	r3, [sp, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	4606      	mov	r6, r0
 800af9e:	dc4f      	bgt.n	800b040 <_dtoa_r+0x928>
 800afa0:	9b06      	ldr	r3, [sp, #24]
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	dd4c      	ble.n	800b040 <_dtoa_r+0x928>
 800afa6:	e011      	b.n	800afcc <_dtoa_r+0x8b4>
 800afa8:	d0c9      	beq.n	800af3e <_dtoa_r+0x826>
 800afaa:	9a05      	ldr	r2, [sp, #20]
 800afac:	331c      	adds	r3, #28
 800afae:	441a      	add	r2, r3
 800afb0:	9205      	str	r2, [sp, #20]
 800afb2:	441d      	add	r5, r3
 800afb4:	4498      	add	r8, r3
 800afb6:	e7c2      	b.n	800af3e <_dtoa_r+0x826>
 800afb8:	4603      	mov	r3, r0
 800afba:	e7f6      	b.n	800afaa <_dtoa_r+0x892>
 800afbc:	f1b9 0f00 	cmp.w	r9, #0
 800afc0:	dc38      	bgt.n	800b034 <_dtoa_r+0x91c>
 800afc2:	9b06      	ldr	r3, [sp, #24]
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	dd35      	ble.n	800b034 <_dtoa_r+0x91c>
 800afc8:	f8cd 9008 	str.w	r9, [sp, #8]
 800afcc:	9b02      	ldr	r3, [sp, #8]
 800afce:	b963      	cbnz	r3, 800afea <_dtoa_r+0x8d2>
 800afd0:	4639      	mov	r1, r7
 800afd2:	2205      	movs	r2, #5
 800afd4:	4620      	mov	r0, r4
 800afd6:	f000 fdf8 	bl	800bbca <__multadd>
 800afda:	4601      	mov	r1, r0
 800afdc:	4607      	mov	r7, r0
 800afde:	9804      	ldr	r0, [sp, #16]
 800afe0:	f000 ffee 	bl	800bfc0 <__mcmp>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	f73f adcc 	bgt.w	800ab82 <_dtoa_r+0x46a>
 800afea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afec:	465d      	mov	r5, fp
 800afee:	ea6f 0a03 	mvn.w	sl, r3
 800aff2:	f04f 0900 	mov.w	r9, #0
 800aff6:	4639      	mov	r1, r7
 800aff8:	4620      	mov	r0, r4
 800affa:	f000 fddd 	bl	800bbb8 <_Bfree>
 800affe:	2e00      	cmp	r6, #0
 800b000:	f43f aeb7 	beq.w	800ad72 <_dtoa_r+0x65a>
 800b004:	f1b9 0f00 	cmp.w	r9, #0
 800b008:	d005      	beq.n	800b016 <_dtoa_r+0x8fe>
 800b00a:	45b1      	cmp	r9, r6
 800b00c:	d003      	beq.n	800b016 <_dtoa_r+0x8fe>
 800b00e:	4649      	mov	r1, r9
 800b010:	4620      	mov	r0, r4
 800b012:	f000 fdd1 	bl	800bbb8 <_Bfree>
 800b016:	4631      	mov	r1, r6
 800b018:	4620      	mov	r0, r4
 800b01a:	f000 fdcd 	bl	800bbb8 <_Bfree>
 800b01e:	e6a8      	b.n	800ad72 <_dtoa_r+0x65a>
 800b020:	2700      	movs	r7, #0
 800b022:	463e      	mov	r6, r7
 800b024:	e7e1      	b.n	800afea <_dtoa_r+0x8d2>
 800b026:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b02a:	463e      	mov	r6, r7
 800b02c:	e5a9      	b.n	800ab82 <_dtoa_r+0x46a>
 800b02e:	bf00      	nop
 800b030:	40240000 	.word	0x40240000
 800b034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b036:	f8cd 9008 	str.w	r9, [sp, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f000 80f9 	beq.w	800b232 <_dtoa_r+0xb1a>
 800b040:	2d00      	cmp	r5, #0
 800b042:	dd05      	ble.n	800b050 <_dtoa_r+0x938>
 800b044:	4631      	mov	r1, r6
 800b046:	462a      	mov	r2, r5
 800b048:	4620      	mov	r0, r4
 800b04a:	f000 ff65 	bl	800bf18 <__lshift>
 800b04e:	4606      	mov	r6, r0
 800b050:	9b07      	ldr	r3, [sp, #28]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d04c      	beq.n	800b0f0 <_dtoa_r+0x9d8>
 800b056:	6871      	ldr	r1, [r6, #4]
 800b058:	4620      	mov	r0, r4
 800b05a:	f000 fd88 	bl	800bb6e <_Balloc>
 800b05e:	6932      	ldr	r2, [r6, #16]
 800b060:	3202      	adds	r2, #2
 800b062:	4605      	mov	r5, r0
 800b064:	0092      	lsls	r2, r2, #2
 800b066:	f106 010c 	add.w	r1, r6, #12
 800b06a:	300c      	adds	r0, #12
 800b06c:	f000 fd74 	bl	800bb58 <memcpy>
 800b070:	2201      	movs	r2, #1
 800b072:	4629      	mov	r1, r5
 800b074:	4620      	mov	r0, r4
 800b076:	f000 ff4f 	bl	800bf18 <__lshift>
 800b07a:	9b00      	ldr	r3, [sp, #0]
 800b07c:	f8cd b014 	str.w	fp, [sp, #20]
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	46b1      	mov	r9, r6
 800b086:	9307      	str	r3, [sp, #28]
 800b088:	4606      	mov	r6, r0
 800b08a:	4639      	mov	r1, r7
 800b08c:	9804      	ldr	r0, [sp, #16]
 800b08e:	f7ff fab7 	bl	800a600 <quorem>
 800b092:	4649      	mov	r1, r9
 800b094:	4605      	mov	r5, r0
 800b096:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b09a:	9804      	ldr	r0, [sp, #16]
 800b09c:	f000 ff90 	bl	800bfc0 <__mcmp>
 800b0a0:	4632      	mov	r2, r6
 800b0a2:	9000      	str	r0, [sp, #0]
 800b0a4:	4639      	mov	r1, r7
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f000 ffa4 	bl	800bff4 <__mdiff>
 800b0ac:	68c3      	ldr	r3, [r0, #12]
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	bb03      	cbnz	r3, 800b0f4 <_dtoa_r+0x9dc>
 800b0b2:	4601      	mov	r1, r0
 800b0b4:	9008      	str	r0, [sp, #32]
 800b0b6:	9804      	ldr	r0, [sp, #16]
 800b0b8:	f000 ff82 	bl	800bfc0 <__mcmp>
 800b0bc:	9a08      	ldr	r2, [sp, #32]
 800b0be:	4603      	mov	r3, r0
 800b0c0:	4611      	mov	r1, r2
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	9308      	str	r3, [sp, #32]
 800b0c6:	f000 fd77 	bl	800bbb8 <_Bfree>
 800b0ca:	9b08      	ldr	r3, [sp, #32]
 800b0cc:	b9a3      	cbnz	r3, 800b0f8 <_dtoa_r+0x9e0>
 800b0ce:	9a06      	ldr	r2, [sp, #24]
 800b0d0:	b992      	cbnz	r2, 800b0f8 <_dtoa_r+0x9e0>
 800b0d2:	9a07      	ldr	r2, [sp, #28]
 800b0d4:	b982      	cbnz	r2, 800b0f8 <_dtoa_r+0x9e0>
 800b0d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b0da:	d029      	beq.n	800b130 <_dtoa_r+0xa18>
 800b0dc:	9b00      	ldr	r3, [sp, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	dd01      	ble.n	800b0e6 <_dtoa_r+0x9ce>
 800b0e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b0e6:	9b05      	ldr	r3, [sp, #20]
 800b0e8:	1c5d      	adds	r5, r3, #1
 800b0ea:	f883 8000 	strb.w	r8, [r3]
 800b0ee:	e782      	b.n	800aff6 <_dtoa_r+0x8de>
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	e7c2      	b.n	800b07a <_dtoa_r+0x962>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e7e3      	b.n	800b0c0 <_dtoa_r+0x9a8>
 800b0f8:	9a00      	ldr	r2, [sp, #0]
 800b0fa:	2a00      	cmp	r2, #0
 800b0fc:	db04      	blt.n	800b108 <_dtoa_r+0x9f0>
 800b0fe:	d125      	bne.n	800b14c <_dtoa_r+0xa34>
 800b100:	9a06      	ldr	r2, [sp, #24]
 800b102:	bb1a      	cbnz	r2, 800b14c <_dtoa_r+0xa34>
 800b104:	9a07      	ldr	r2, [sp, #28]
 800b106:	bb0a      	cbnz	r2, 800b14c <_dtoa_r+0xa34>
 800b108:	2b00      	cmp	r3, #0
 800b10a:	ddec      	ble.n	800b0e6 <_dtoa_r+0x9ce>
 800b10c:	2201      	movs	r2, #1
 800b10e:	9904      	ldr	r1, [sp, #16]
 800b110:	4620      	mov	r0, r4
 800b112:	f000 ff01 	bl	800bf18 <__lshift>
 800b116:	4639      	mov	r1, r7
 800b118:	9004      	str	r0, [sp, #16]
 800b11a:	f000 ff51 	bl	800bfc0 <__mcmp>
 800b11e:	2800      	cmp	r0, #0
 800b120:	dc03      	bgt.n	800b12a <_dtoa_r+0xa12>
 800b122:	d1e0      	bne.n	800b0e6 <_dtoa_r+0x9ce>
 800b124:	f018 0f01 	tst.w	r8, #1
 800b128:	d0dd      	beq.n	800b0e6 <_dtoa_r+0x9ce>
 800b12a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b12e:	d1d8      	bne.n	800b0e2 <_dtoa_r+0x9ca>
 800b130:	9b05      	ldr	r3, [sp, #20]
 800b132:	9a05      	ldr	r2, [sp, #20]
 800b134:	1c5d      	adds	r5, r3, #1
 800b136:	2339      	movs	r3, #57	; 0x39
 800b138:	7013      	strb	r3, [r2, #0]
 800b13a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b13e:	2b39      	cmp	r3, #57	; 0x39
 800b140:	f105 32ff 	add.w	r2, r5, #4294967295
 800b144:	d04f      	beq.n	800b1e6 <_dtoa_r+0xace>
 800b146:	3301      	adds	r3, #1
 800b148:	7013      	strb	r3, [r2, #0]
 800b14a:	e754      	b.n	800aff6 <_dtoa_r+0x8de>
 800b14c:	9a05      	ldr	r2, [sp, #20]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f102 0501 	add.w	r5, r2, #1
 800b154:	dd06      	ble.n	800b164 <_dtoa_r+0xa4c>
 800b156:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b15a:	d0e9      	beq.n	800b130 <_dtoa_r+0xa18>
 800b15c:	f108 0801 	add.w	r8, r8, #1
 800b160:	9b05      	ldr	r3, [sp, #20]
 800b162:	e7c2      	b.n	800b0ea <_dtoa_r+0x9d2>
 800b164:	9a02      	ldr	r2, [sp, #8]
 800b166:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b16a:	eba5 030b 	sub.w	r3, r5, fp
 800b16e:	4293      	cmp	r3, r2
 800b170:	d021      	beq.n	800b1b6 <_dtoa_r+0xa9e>
 800b172:	2300      	movs	r3, #0
 800b174:	220a      	movs	r2, #10
 800b176:	9904      	ldr	r1, [sp, #16]
 800b178:	4620      	mov	r0, r4
 800b17a:	f000 fd26 	bl	800bbca <__multadd>
 800b17e:	45b1      	cmp	r9, r6
 800b180:	9004      	str	r0, [sp, #16]
 800b182:	f04f 0300 	mov.w	r3, #0
 800b186:	f04f 020a 	mov.w	r2, #10
 800b18a:	4649      	mov	r1, r9
 800b18c:	4620      	mov	r0, r4
 800b18e:	d105      	bne.n	800b19c <_dtoa_r+0xa84>
 800b190:	f000 fd1b 	bl	800bbca <__multadd>
 800b194:	4681      	mov	r9, r0
 800b196:	4606      	mov	r6, r0
 800b198:	9505      	str	r5, [sp, #20]
 800b19a:	e776      	b.n	800b08a <_dtoa_r+0x972>
 800b19c:	f000 fd15 	bl	800bbca <__multadd>
 800b1a0:	4631      	mov	r1, r6
 800b1a2:	4681      	mov	r9, r0
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	220a      	movs	r2, #10
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f000 fd0e 	bl	800bbca <__multadd>
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	e7f2      	b.n	800b198 <_dtoa_r+0xa80>
 800b1b2:	f04f 0900 	mov.w	r9, #0
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	9904      	ldr	r1, [sp, #16]
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 feac 	bl	800bf18 <__lshift>
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	9004      	str	r0, [sp, #16]
 800b1c4:	f000 fefc 	bl	800bfc0 <__mcmp>
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	dcb6      	bgt.n	800b13a <_dtoa_r+0xa22>
 800b1cc:	d102      	bne.n	800b1d4 <_dtoa_r+0xabc>
 800b1ce:	f018 0f01 	tst.w	r8, #1
 800b1d2:	d1b2      	bne.n	800b13a <_dtoa_r+0xa22>
 800b1d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b1d8:	2b30      	cmp	r3, #48	; 0x30
 800b1da:	f105 32ff 	add.w	r2, r5, #4294967295
 800b1de:	f47f af0a 	bne.w	800aff6 <_dtoa_r+0x8de>
 800b1e2:	4615      	mov	r5, r2
 800b1e4:	e7f6      	b.n	800b1d4 <_dtoa_r+0xabc>
 800b1e6:	4593      	cmp	fp, r2
 800b1e8:	d105      	bne.n	800b1f6 <_dtoa_r+0xade>
 800b1ea:	2331      	movs	r3, #49	; 0x31
 800b1ec:	f10a 0a01 	add.w	sl, sl, #1
 800b1f0:	f88b 3000 	strb.w	r3, [fp]
 800b1f4:	e6ff      	b.n	800aff6 <_dtoa_r+0x8de>
 800b1f6:	4615      	mov	r5, r2
 800b1f8:	e79f      	b.n	800b13a <_dtoa_r+0xa22>
 800b1fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b260 <_dtoa_r+0xb48>
 800b1fe:	f7ff bac5 	b.w	800a78c <_dtoa_r+0x74>
 800b202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b204:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800b264 <_dtoa_r+0xb4c>
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f43f aabf 	beq.w	800a78c <_dtoa_r+0x74>
 800b20e:	f10b 0308 	add.w	r3, fp, #8
 800b212:	f7ff bab9 	b.w	800a788 <_dtoa_r+0x70>
 800b216:	9b06      	ldr	r3, [sp, #24]
 800b218:	2b01      	cmp	r3, #1
 800b21a:	f77f ae36 	ble.w	800ae8a <_dtoa_r+0x772>
 800b21e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b220:	9307      	str	r3, [sp, #28]
 800b222:	e64a      	b.n	800aeba <_dtoa_r+0x7a2>
 800b224:	9b02      	ldr	r3, [sp, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	dc03      	bgt.n	800b232 <_dtoa_r+0xb1a>
 800b22a:	9b06      	ldr	r3, [sp, #24]
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	f73f aecd 	bgt.w	800afcc <_dtoa_r+0x8b4>
 800b232:	465d      	mov	r5, fp
 800b234:	4639      	mov	r1, r7
 800b236:	9804      	ldr	r0, [sp, #16]
 800b238:	f7ff f9e2 	bl	800a600 <quorem>
 800b23c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b240:	f805 8b01 	strb.w	r8, [r5], #1
 800b244:	9a02      	ldr	r2, [sp, #8]
 800b246:	eba5 030b 	sub.w	r3, r5, fp
 800b24a:	429a      	cmp	r2, r3
 800b24c:	ddb1      	ble.n	800b1b2 <_dtoa_r+0xa9a>
 800b24e:	2300      	movs	r3, #0
 800b250:	220a      	movs	r2, #10
 800b252:	9904      	ldr	r1, [sp, #16]
 800b254:	4620      	mov	r0, r4
 800b256:	f000 fcb8 	bl	800bbca <__multadd>
 800b25a:	9004      	str	r0, [sp, #16]
 800b25c:	e7ea      	b.n	800b234 <_dtoa_r+0xb1c>
 800b25e:	bf00      	nop
 800b260:	0800f3a2 	.word	0x0800f3a2
 800b264:	0800f3c4 	.word	0x0800f3c4

0800b268 <__errno>:
 800b268:	4b01      	ldr	r3, [pc, #4]	; (800b270 <__errno+0x8>)
 800b26a:	6818      	ldr	r0, [r3, #0]
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	20000010 	.word	0x20000010

0800b274 <__libc_fini_array>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	4d07      	ldr	r5, [pc, #28]	; (800b294 <__libc_fini_array+0x20>)
 800b278:	4c07      	ldr	r4, [pc, #28]	; (800b298 <__libc_fini_array+0x24>)
 800b27a:	1b64      	subs	r4, r4, r5
 800b27c:	10a4      	asrs	r4, r4, #2
 800b27e:	b91c      	cbnz	r4, 800b288 <__libc_fini_array+0x14>
 800b280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b284:	f003 bff6 	b.w	800f274 <_fini>
 800b288:	3c01      	subs	r4, #1
 800b28a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b28e:	4798      	blx	r3
 800b290:	e7f5      	b.n	800b27e <__libc_fini_array+0xa>
 800b292:	bf00      	nop
 800b294:	0800f868 	.word	0x0800f868
 800b298:	0800f86c 	.word	0x0800f86c

0800b29c <_malloc_trim_r>:
 800b29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	2008      	movs	r0, #8
 800b2a4:	460c      	mov	r4, r1
 800b2a6:	f7ff f98d 	bl	800a5c4 <sysconf>
 800b2aa:	4f23      	ldr	r7, [pc, #140]	; (800b338 <_malloc_trim_r+0x9c>)
 800b2ac:	4680      	mov	r8, r0
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	f7fd f874 	bl	800839c <__malloc_lock>
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	685e      	ldr	r6, [r3, #4]
 800b2b8:	f026 0603 	bic.w	r6, r6, #3
 800b2bc:	1b34      	subs	r4, r6, r4
 800b2be:	3c11      	subs	r4, #17
 800b2c0:	4444      	add	r4, r8
 800b2c2:	fbb4 f4f8 	udiv	r4, r4, r8
 800b2c6:	3c01      	subs	r4, #1
 800b2c8:	fb08 f404 	mul.w	r4, r8, r4
 800b2cc:	45a0      	cmp	r8, r4
 800b2ce:	dd05      	ble.n	800b2dc <_malloc_trim_r+0x40>
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	f7fd f869 	bl	80083a8 <__malloc_unlock>
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2dc:	2100      	movs	r1, #0
 800b2de:	4628      	mov	r0, r5
 800b2e0:	f7fd f868 	bl	80083b4 <_sbrk_r>
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	4433      	add	r3, r6
 800b2e8:	4298      	cmp	r0, r3
 800b2ea:	d1f1      	bne.n	800b2d0 <_malloc_trim_r+0x34>
 800b2ec:	4261      	negs	r1, r4
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f7fd f860 	bl	80083b4 <_sbrk_r>
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	d110      	bne.n	800b31a <_malloc_trim_r+0x7e>
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	f7fd f85a 	bl	80083b4 <_sbrk_r>
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	1a83      	subs	r3, r0, r2
 800b304:	2b0f      	cmp	r3, #15
 800b306:	dde3      	ble.n	800b2d0 <_malloc_trim_r+0x34>
 800b308:	490c      	ldr	r1, [pc, #48]	; (800b33c <_malloc_trim_r+0xa0>)
 800b30a:	6809      	ldr	r1, [r1, #0]
 800b30c:	1a40      	subs	r0, r0, r1
 800b30e:	490c      	ldr	r1, [pc, #48]	; (800b340 <_malloc_trim_r+0xa4>)
 800b310:	f043 0301 	orr.w	r3, r3, #1
 800b314:	6008      	str	r0, [r1, #0]
 800b316:	6053      	str	r3, [r2, #4]
 800b318:	e7da      	b.n	800b2d0 <_malloc_trim_r+0x34>
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	4a08      	ldr	r2, [pc, #32]	; (800b340 <_malloc_trim_r+0xa4>)
 800b31e:	1b36      	subs	r6, r6, r4
 800b320:	f046 0601 	orr.w	r6, r6, #1
 800b324:	605e      	str	r6, [r3, #4]
 800b326:	6813      	ldr	r3, [r2, #0]
 800b328:	4628      	mov	r0, r5
 800b32a:	1b1c      	subs	r4, r3, r4
 800b32c:	6014      	str	r4, [r2, #0]
 800b32e:	f7fd f83b 	bl	80083a8 <__malloc_unlock>
 800b332:	2001      	movs	r0, #1
 800b334:	e7d0      	b.n	800b2d8 <_malloc_trim_r+0x3c>
 800b336:	bf00      	nop
 800b338:	20000440 	.word	0x20000440
 800b33c:	20000848 	.word	0x20000848
 800b340:	200009e4 	.word	0x200009e4

0800b344 <_free_r>:
 800b344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b348:	4604      	mov	r4, r0
 800b34a:	4688      	mov	r8, r1
 800b34c:	2900      	cmp	r1, #0
 800b34e:	f000 80ab 	beq.w	800b4a8 <_free_r+0x164>
 800b352:	f7fd f823 	bl	800839c <__malloc_lock>
 800b356:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800b35a:	4d54      	ldr	r5, [pc, #336]	; (800b4ac <_free_r+0x168>)
 800b35c:	f022 0001 	bic.w	r0, r2, #1
 800b360:	f1a8 0308 	sub.w	r3, r8, #8
 800b364:	181f      	adds	r7, r3, r0
 800b366:	68a9      	ldr	r1, [r5, #8]
 800b368:	687e      	ldr	r6, [r7, #4]
 800b36a:	42b9      	cmp	r1, r7
 800b36c:	f026 0603 	bic.w	r6, r6, #3
 800b370:	f002 0201 	and.w	r2, r2, #1
 800b374:	d11b      	bne.n	800b3ae <_free_r+0x6a>
 800b376:	4430      	add	r0, r6
 800b378:	b93a      	cbnz	r2, 800b38a <_free_r+0x46>
 800b37a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800b37e:	1a9b      	subs	r3, r3, r2
 800b380:	4410      	add	r0, r2
 800b382:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800b386:	60ca      	str	r2, [r1, #12]
 800b388:	6091      	str	r1, [r2, #8]
 800b38a:	f040 0201 	orr.w	r2, r0, #1
 800b38e:	605a      	str	r2, [r3, #4]
 800b390:	60ab      	str	r3, [r5, #8]
 800b392:	4b47      	ldr	r3, [pc, #284]	; (800b4b0 <_free_r+0x16c>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4283      	cmp	r3, r0
 800b398:	d804      	bhi.n	800b3a4 <_free_r+0x60>
 800b39a:	4b46      	ldr	r3, [pc, #280]	; (800b4b4 <_free_r+0x170>)
 800b39c:	4620      	mov	r0, r4
 800b39e:	6819      	ldr	r1, [r3, #0]
 800b3a0:	f7ff ff7c 	bl	800b29c <_malloc_trim_r>
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3aa:	f7fc bffd 	b.w	80083a8 <__malloc_unlock>
 800b3ae:	607e      	str	r6, [r7, #4]
 800b3b0:	2a00      	cmp	r2, #0
 800b3b2:	d139      	bne.n	800b428 <_free_r+0xe4>
 800b3b4:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800b3b8:	1a5b      	subs	r3, r3, r1
 800b3ba:	4408      	add	r0, r1
 800b3bc:	6899      	ldr	r1, [r3, #8]
 800b3be:	f105 0c08 	add.w	ip, r5, #8
 800b3c2:	4561      	cmp	r1, ip
 800b3c4:	d032      	beq.n	800b42c <_free_r+0xe8>
 800b3c6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800b3ca:	f8c1 c00c 	str.w	ip, [r1, #12]
 800b3ce:	f8cc 1008 	str.w	r1, [ip, #8]
 800b3d2:	19b9      	adds	r1, r7, r6
 800b3d4:	6849      	ldr	r1, [r1, #4]
 800b3d6:	07c9      	lsls	r1, r1, #31
 800b3d8:	d40a      	bmi.n	800b3f0 <_free_r+0xac>
 800b3da:	4430      	add	r0, r6
 800b3dc:	68b9      	ldr	r1, [r7, #8]
 800b3de:	bb3a      	cbnz	r2, 800b430 <_free_r+0xec>
 800b3e0:	4e35      	ldr	r6, [pc, #212]	; (800b4b8 <_free_r+0x174>)
 800b3e2:	42b1      	cmp	r1, r6
 800b3e4:	d124      	bne.n	800b430 <_free_r+0xec>
 800b3e6:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800b3ea:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f040 0101 	orr.w	r1, r0, #1
 800b3f4:	6059      	str	r1, [r3, #4]
 800b3f6:	5018      	str	r0, [r3, r0]
 800b3f8:	2a00      	cmp	r2, #0
 800b3fa:	d1d3      	bne.n	800b3a4 <_free_r+0x60>
 800b3fc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800b400:	d21a      	bcs.n	800b438 <_free_r+0xf4>
 800b402:	08c0      	lsrs	r0, r0, #3
 800b404:	1081      	asrs	r1, r0, #2
 800b406:	2201      	movs	r2, #1
 800b408:	408a      	lsls	r2, r1
 800b40a:	6869      	ldr	r1, [r5, #4]
 800b40c:	3001      	adds	r0, #1
 800b40e:	430a      	orrs	r2, r1
 800b410:	606a      	str	r2, [r5, #4]
 800b412:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800b416:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800b41a:	3a08      	subs	r2, #8
 800b41c:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800b420:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800b424:	60cb      	str	r3, [r1, #12]
 800b426:	e7bd      	b.n	800b3a4 <_free_r+0x60>
 800b428:	2200      	movs	r2, #0
 800b42a:	e7d2      	b.n	800b3d2 <_free_r+0x8e>
 800b42c:	2201      	movs	r2, #1
 800b42e:	e7d0      	b.n	800b3d2 <_free_r+0x8e>
 800b430:	68fe      	ldr	r6, [r7, #12]
 800b432:	60ce      	str	r6, [r1, #12]
 800b434:	60b1      	str	r1, [r6, #8]
 800b436:	e7db      	b.n	800b3f0 <_free_r+0xac>
 800b438:	0a42      	lsrs	r2, r0, #9
 800b43a:	2a04      	cmp	r2, #4
 800b43c:	d813      	bhi.n	800b466 <_free_r+0x122>
 800b43e:	0982      	lsrs	r2, r0, #6
 800b440:	3238      	adds	r2, #56	; 0x38
 800b442:	1c51      	adds	r1, r2, #1
 800b444:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800b448:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800b44c:	428e      	cmp	r6, r1
 800b44e:	d124      	bne.n	800b49a <_free_r+0x156>
 800b450:	2001      	movs	r0, #1
 800b452:	1092      	asrs	r2, r2, #2
 800b454:	fa00 f202 	lsl.w	r2, r0, r2
 800b458:	6868      	ldr	r0, [r5, #4]
 800b45a:	4302      	orrs	r2, r0
 800b45c:	606a      	str	r2, [r5, #4]
 800b45e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800b462:	60b3      	str	r3, [r6, #8]
 800b464:	e7de      	b.n	800b424 <_free_r+0xe0>
 800b466:	2a14      	cmp	r2, #20
 800b468:	d801      	bhi.n	800b46e <_free_r+0x12a>
 800b46a:	325b      	adds	r2, #91	; 0x5b
 800b46c:	e7e9      	b.n	800b442 <_free_r+0xfe>
 800b46e:	2a54      	cmp	r2, #84	; 0x54
 800b470:	d802      	bhi.n	800b478 <_free_r+0x134>
 800b472:	0b02      	lsrs	r2, r0, #12
 800b474:	326e      	adds	r2, #110	; 0x6e
 800b476:	e7e4      	b.n	800b442 <_free_r+0xfe>
 800b478:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b47c:	d802      	bhi.n	800b484 <_free_r+0x140>
 800b47e:	0bc2      	lsrs	r2, r0, #15
 800b480:	3277      	adds	r2, #119	; 0x77
 800b482:	e7de      	b.n	800b442 <_free_r+0xfe>
 800b484:	f240 5154 	movw	r1, #1364	; 0x554
 800b488:	428a      	cmp	r2, r1
 800b48a:	bf9a      	itte	ls
 800b48c:	0c82      	lsrls	r2, r0, #18
 800b48e:	327c      	addls	r2, #124	; 0x7c
 800b490:	227e      	movhi	r2, #126	; 0x7e
 800b492:	e7d6      	b.n	800b442 <_free_r+0xfe>
 800b494:	6889      	ldr	r1, [r1, #8]
 800b496:	428e      	cmp	r6, r1
 800b498:	d004      	beq.n	800b4a4 <_free_r+0x160>
 800b49a:	684a      	ldr	r2, [r1, #4]
 800b49c:	f022 0203 	bic.w	r2, r2, #3
 800b4a0:	4282      	cmp	r2, r0
 800b4a2:	d8f7      	bhi.n	800b494 <_free_r+0x150>
 800b4a4:	68ce      	ldr	r6, [r1, #12]
 800b4a6:	e7da      	b.n	800b45e <_free_r+0x11a>
 800b4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ac:	20000440 	.word	0x20000440
 800b4b0:	2000084c 	.word	0x2000084c
 800b4b4:	20000a14 	.word	0x20000a14
 800b4b8:	20000448 	.word	0x20000448

0800b4bc <rshift>:
 800b4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4be:	6906      	ldr	r6, [r0, #16]
 800b4c0:	114b      	asrs	r3, r1, #5
 800b4c2:	429e      	cmp	r6, r3
 800b4c4:	f100 0414 	add.w	r4, r0, #20
 800b4c8:	dd30      	ble.n	800b52c <rshift+0x70>
 800b4ca:	f011 011f 	ands.w	r1, r1, #31
 800b4ce:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b4d2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b4d6:	d108      	bne.n	800b4ea <rshift+0x2e>
 800b4d8:	4621      	mov	r1, r4
 800b4da:	42b2      	cmp	r2, r6
 800b4dc:	460b      	mov	r3, r1
 800b4de:	d211      	bcs.n	800b504 <rshift+0x48>
 800b4e0:	f852 3b04 	ldr.w	r3, [r2], #4
 800b4e4:	f841 3b04 	str.w	r3, [r1], #4
 800b4e8:	e7f7      	b.n	800b4da <rshift+0x1e>
 800b4ea:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b4ee:	f1c1 0c20 	rsb	ip, r1, #32
 800b4f2:	40cd      	lsrs	r5, r1
 800b4f4:	3204      	adds	r2, #4
 800b4f6:	4623      	mov	r3, r4
 800b4f8:	42b2      	cmp	r2, r6
 800b4fa:	4617      	mov	r7, r2
 800b4fc:	d30c      	bcc.n	800b518 <rshift+0x5c>
 800b4fe:	601d      	str	r5, [r3, #0]
 800b500:	b105      	cbz	r5, 800b504 <rshift+0x48>
 800b502:	3304      	adds	r3, #4
 800b504:	1b1a      	subs	r2, r3, r4
 800b506:	42a3      	cmp	r3, r4
 800b508:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b50c:	bf08      	it	eq
 800b50e:	2300      	moveq	r3, #0
 800b510:	6102      	str	r2, [r0, #16]
 800b512:	bf08      	it	eq
 800b514:	6143      	streq	r3, [r0, #20]
 800b516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b518:	683f      	ldr	r7, [r7, #0]
 800b51a:	fa07 f70c 	lsl.w	r7, r7, ip
 800b51e:	433d      	orrs	r5, r7
 800b520:	f843 5b04 	str.w	r5, [r3], #4
 800b524:	f852 5b04 	ldr.w	r5, [r2], #4
 800b528:	40cd      	lsrs	r5, r1
 800b52a:	e7e5      	b.n	800b4f8 <rshift+0x3c>
 800b52c:	4623      	mov	r3, r4
 800b52e:	e7e9      	b.n	800b504 <rshift+0x48>

0800b530 <__hexdig_fun>:
 800b530:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b534:	2b09      	cmp	r3, #9
 800b536:	d802      	bhi.n	800b53e <__hexdig_fun+0xe>
 800b538:	3820      	subs	r0, #32
 800b53a:	b2c0      	uxtb	r0, r0
 800b53c:	4770      	bx	lr
 800b53e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b542:	2b05      	cmp	r3, #5
 800b544:	d801      	bhi.n	800b54a <__hexdig_fun+0x1a>
 800b546:	3847      	subs	r0, #71	; 0x47
 800b548:	e7f7      	b.n	800b53a <__hexdig_fun+0xa>
 800b54a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b54e:	2b05      	cmp	r3, #5
 800b550:	d801      	bhi.n	800b556 <__hexdig_fun+0x26>
 800b552:	3827      	subs	r0, #39	; 0x27
 800b554:	e7f1      	b.n	800b53a <__hexdig_fun+0xa>
 800b556:	2000      	movs	r0, #0
 800b558:	4770      	bx	lr

0800b55a <__gethex>:
 800b55a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55e:	b08b      	sub	sp, #44	; 0x2c
 800b560:	468a      	mov	sl, r1
 800b562:	9002      	str	r0, [sp, #8]
 800b564:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b566:	9306      	str	r3, [sp, #24]
 800b568:	4690      	mov	r8, r2
 800b56a:	f000 fad0 	bl	800bb0e <__localeconv_l>
 800b56e:	6803      	ldr	r3, [r0, #0]
 800b570:	9303      	str	r3, [sp, #12]
 800b572:	4618      	mov	r0, r3
 800b574:	f7f4 fe2c 	bl	80001d0 <strlen>
 800b578:	9b03      	ldr	r3, [sp, #12]
 800b57a:	9001      	str	r0, [sp, #4]
 800b57c:	4403      	add	r3, r0
 800b57e:	f04f 0b00 	mov.w	fp, #0
 800b582:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b586:	9307      	str	r3, [sp, #28]
 800b588:	f8da 3000 	ldr.w	r3, [sl]
 800b58c:	3302      	adds	r3, #2
 800b58e:	461f      	mov	r7, r3
 800b590:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b594:	2830      	cmp	r0, #48	; 0x30
 800b596:	d06c      	beq.n	800b672 <__gethex+0x118>
 800b598:	f7ff ffca 	bl	800b530 <__hexdig_fun>
 800b59c:	4604      	mov	r4, r0
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d16a      	bne.n	800b678 <__gethex+0x11e>
 800b5a2:	9a01      	ldr	r2, [sp, #4]
 800b5a4:	9903      	ldr	r1, [sp, #12]
 800b5a6:	4638      	mov	r0, r7
 800b5a8:	f000 feec 	bl	800c384 <strncmp>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d166      	bne.n	800b67e <__gethex+0x124>
 800b5b0:	9b01      	ldr	r3, [sp, #4]
 800b5b2:	5cf8      	ldrb	r0, [r7, r3]
 800b5b4:	18fe      	adds	r6, r7, r3
 800b5b6:	f7ff ffbb 	bl	800b530 <__hexdig_fun>
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	d062      	beq.n	800b684 <__gethex+0x12a>
 800b5be:	4633      	mov	r3, r6
 800b5c0:	7818      	ldrb	r0, [r3, #0]
 800b5c2:	2830      	cmp	r0, #48	; 0x30
 800b5c4:	461f      	mov	r7, r3
 800b5c6:	f103 0301 	add.w	r3, r3, #1
 800b5ca:	d0f9      	beq.n	800b5c0 <__gethex+0x66>
 800b5cc:	f7ff ffb0 	bl	800b530 <__hexdig_fun>
 800b5d0:	fab0 f580 	clz	r5, r0
 800b5d4:	096d      	lsrs	r5, r5, #5
 800b5d6:	4634      	mov	r4, r6
 800b5d8:	f04f 0b01 	mov.w	fp, #1
 800b5dc:	463a      	mov	r2, r7
 800b5de:	4616      	mov	r6, r2
 800b5e0:	3201      	adds	r2, #1
 800b5e2:	7830      	ldrb	r0, [r6, #0]
 800b5e4:	f7ff ffa4 	bl	800b530 <__hexdig_fun>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d1f8      	bne.n	800b5de <__gethex+0x84>
 800b5ec:	9a01      	ldr	r2, [sp, #4]
 800b5ee:	9903      	ldr	r1, [sp, #12]
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f000 fec7 	bl	800c384 <strncmp>
 800b5f6:	b950      	cbnz	r0, 800b60e <__gethex+0xb4>
 800b5f8:	b954      	cbnz	r4, 800b610 <__gethex+0xb6>
 800b5fa:	9b01      	ldr	r3, [sp, #4]
 800b5fc:	18f4      	adds	r4, r6, r3
 800b5fe:	4622      	mov	r2, r4
 800b600:	4616      	mov	r6, r2
 800b602:	3201      	adds	r2, #1
 800b604:	7830      	ldrb	r0, [r6, #0]
 800b606:	f7ff ff93 	bl	800b530 <__hexdig_fun>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	d1f8      	bne.n	800b600 <__gethex+0xa6>
 800b60e:	b10c      	cbz	r4, 800b614 <__gethex+0xba>
 800b610:	1ba4      	subs	r4, r4, r6
 800b612:	00a4      	lsls	r4, r4, #2
 800b614:	7833      	ldrb	r3, [r6, #0]
 800b616:	2b50      	cmp	r3, #80	; 0x50
 800b618:	d001      	beq.n	800b61e <__gethex+0xc4>
 800b61a:	2b70      	cmp	r3, #112	; 0x70
 800b61c:	d140      	bne.n	800b6a0 <__gethex+0x146>
 800b61e:	7873      	ldrb	r3, [r6, #1]
 800b620:	2b2b      	cmp	r3, #43	; 0x2b
 800b622:	d031      	beq.n	800b688 <__gethex+0x12e>
 800b624:	2b2d      	cmp	r3, #45	; 0x2d
 800b626:	d033      	beq.n	800b690 <__gethex+0x136>
 800b628:	1c71      	adds	r1, r6, #1
 800b62a:	f04f 0900 	mov.w	r9, #0
 800b62e:	7808      	ldrb	r0, [r1, #0]
 800b630:	f7ff ff7e 	bl	800b530 <__hexdig_fun>
 800b634:	1e43      	subs	r3, r0, #1
 800b636:	b2db      	uxtb	r3, r3
 800b638:	2b18      	cmp	r3, #24
 800b63a:	d831      	bhi.n	800b6a0 <__gethex+0x146>
 800b63c:	f1a0 0210 	sub.w	r2, r0, #16
 800b640:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b644:	f7ff ff74 	bl	800b530 <__hexdig_fun>
 800b648:	1e43      	subs	r3, r0, #1
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	2b18      	cmp	r3, #24
 800b64e:	d922      	bls.n	800b696 <__gethex+0x13c>
 800b650:	f1b9 0f00 	cmp.w	r9, #0
 800b654:	d000      	beq.n	800b658 <__gethex+0xfe>
 800b656:	4252      	negs	r2, r2
 800b658:	4414      	add	r4, r2
 800b65a:	f8ca 1000 	str.w	r1, [sl]
 800b65e:	b30d      	cbz	r5, 800b6a4 <__gethex+0x14a>
 800b660:	f1bb 0f00 	cmp.w	fp, #0
 800b664:	bf0c      	ite	eq
 800b666:	2706      	moveq	r7, #6
 800b668:	2700      	movne	r7, #0
 800b66a:	4638      	mov	r0, r7
 800b66c:	b00b      	add	sp, #44	; 0x2c
 800b66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b672:	f10b 0b01 	add.w	fp, fp, #1
 800b676:	e78a      	b.n	800b58e <__gethex+0x34>
 800b678:	2500      	movs	r5, #0
 800b67a:	462c      	mov	r4, r5
 800b67c:	e7ae      	b.n	800b5dc <__gethex+0x82>
 800b67e:	463e      	mov	r6, r7
 800b680:	2501      	movs	r5, #1
 800b682:	e7c7      	b.n	800b614 <__gethex+0xba>
 800b684:	4604      	mov	r4, r0
 800b686:	e7fb      	b.n	800b680 <__gethex+0x126>
 800b688:	f04f 0900 	mov.w	r9, #0
 800b68c:	1cb1      	adds	r1, r6, #2
 800b68e:	e7ce      	b.n	800b62e <__gethex+0xd4>
 800b690:	f04f 0901 	mov.w	r9, #1
 800b694:	e7fa      	b.n	800b68c <__gethex+0x132>
 800b696:	230a      	movs	r3, #10
 800b698:	fb03 0202 	mla	r2, r3, r2, r0
 800b69c:	3a10      	subs	r2, #16
 800b69e:	e7cf      	b.n	800b640 <__gethex+0xe6>
 800b6a0:	4631      	mov	r1, r6
 800b6a2:	e7da      	b.n	800b65a <__gethex+0x100>
 800b6a4:	1bf3      	subs	r3, r6, r7
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	2b07      	cmp	r3, #7
 800b6ac:	dc49      	bgt.n	800b742 <__gethex+0x1e8>
 800b6ae:	9802      	ldr	r0, [sp, #8]
 800b6b0:	f000 fa5d 	bl	800bb6e <_Balloc>
 800b6b4:	9b01      	ldr	r3, [sp, #4]
 800b6b6:	f100 0914 	add.w	r9, r0, #20
 800b6ba:	f04f 0b00 	mov.w	fp, #0
 800b6be:	f1c3 0301 	rsb	r3, r3, #1
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	f8cd 9010 	str.w	r9, [sp, #16]
 800b6c8:	46da      	mov	sl, fp
 800b6ca:	9308      	str	r3, [sp, #32]
 800b6cc:	42b7      	cmp	r7, r6
 800b6ce:	d33b      	bcc.n	800b748 <__gethex+0x1ee>
 800b6d0:	9804      	ldr	r0, [sp, #16]
 800b6d2:	f840 ab04 	str.w	sl, [r0], #4
 800b6d6:	eba0 0009 	sub.w	r0, r0, r9
 800b6da:	1080      	asrs	r0, r0, #2
 800b6dc:	6128      	str	r0, [r5, #16]
 800b6de:	0147      	lsls	r7, r0, #5
 800b6e0:	4650      	mov	r0, sl
 800b6e2:	f000 faeb 	bl	800bcbc <__hi0bits>
 800b6e6:	f8d8 6000 	ldr.w	r6, [r8]
 800b6ea:	1a3f      	subs	r7, r7, r0
 800b6ec:	42b7      	cmp	r7, r6
 800b6ee:	dd64      	ble.n	800b7ba <__gethex+0x260>
 800b6f0:	1bbf      	subs	r7, r7, r6
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	f000 fded 	bl	800c2d4 <__any_on>
 800b6fa:	4682      	mov	sl, r0
 800b6fc:	b178      	cbz	r0, 800b71e <__gethex+0x1c4>
 800b6fe:	1e7b      	subs	r3, r7, #1
 800b700:	1159      	asrs	r1, r3, #5
 800b702:	f003 021f 	and.w	r2, r3, #31
 800b706:	f04f 0a01 	mov.w	sl, #1
 800b70a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b70e:	fa0a f202 	lsl.w	r2, sl, r2
 800b712:	420a      	tst	r2, r1
 800b714:	d003      	beq.n	800b71e <__gethex+0x1c4>
 800b716:	4553      	cmp	r3, sl
 800b718:	dc46      	bgt.n	800b7a8 <__gethex+0x24e>
 800b71a:	f04f 0a02 	mov.w	sl, #2
 800b71e:	4639      	mov	r1, r7
 800b720:	4628      	mov	r0, r5
 800b722:	f7ff fecb 	bl	800b4bc <rshift>
 800b726:	443c      	add	r4, r7
 800b728:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b72c:	42a3      	cmp	r3, r4
 800b72e:	da52      	bge.n	800b7d6 <__gethex+0x27c>
 800b730:	4629      	mov	r1, r5
 800b732:	9802      	ldr	r0, [sp, #8]
 800b734:	f000 fa40 	bl	800bbb8 <_Bfree>
 800b738:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b73a:	2300      	movs	r3, #0
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	27a3      	movs	r7, #163	; 0xa3
 800b740:	e793      	b.n	800b66a <__gethex+0x110>
 800b742:	3101      	adds	r1, #1
 800b744:	105b      	asrs	r3, r3, #1
 800b746:	e7b0      	b.n	800b6aa <__gethex+0x150>
 800b748:	1e73      	subs	r3, r6, #1
 800b74a:	9305      	str	r3, [sp, #20]
 800b74c:	9a07      	ldr	r2, [sp, #28]
 800b74e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b752:	4293      	cmp	r3, r2
 800b754:	d018      	beq.n	800b788 <__gethex+0x22e>
 800b756:	f1bb 0f20 	cmp.w	fp, #32
 800b75a:	d107      	bne.n	800b76c <__gethex+0x212>
 800b75c:	9b04      	ldr	r3, [sp, #16]
 800b75e:	f8c3 a000 	str.w	sl, [r3]
 800b762:	3304      	adds	r3, #4
 800b764:	f04f 0a00 	mov.w	sl, #0
 800b768:	9304      	str	r3, [sp, #16]
 800b76a:	46d3      	mov	fp, sl
 800b76c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b770:	f7ff fede 	bl	800b530 <__hexdig_fun>
 800b774:	f000 000f 	and.w	r0, r0, #15
 800b778:	fa00 f00b 	lsl.w	r0, r0, fp
 800b77c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b780:	f10b 0b04 	add.w	fp, fp, #4
 800b784:	9b05      	ldr	r3, [sp, #20]
 800b786:	e00d      	b.n	800b7a4 <__gethex+0x24a>
 800b788:	9b05      	ldr	r3, [sp, #20]
 800b78a:	9a08      	ldr	r2, [sp, #32]
 800b78c:	4413      	add	r3, r2
 800b78e:	42bb      	cmp	r3, r7
 800b790:	d3e1      	bcc.n	800b756 <__gethex+0x1fc>
 800b792:	4618      	mov	r0, r3
 800b794:	9a01      	ldr	r2, [sp, #4]
 800b796:	9903      	ldr	r1, [sp, #12]
 800b798:	9309      	str	r3, [sp, #36]	; 0x24
 800b79a:	f000 fdf3 	bl	800c384 <strncmp>
 800b79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d1d8      	bne.n	800b756 <__gethex+0x1fc>
 800b7a4:	461e      	mov	r6, r3
 800b7a6:	e791      	b.n	800b6cc <__gethex+0x172>
 800b7a8:	1eb9      	subs	r1, r7, #2
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	f000 fd92 	bl	800c2d4 <__any_on>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d0b2      	beq.n	800b71a <__gethex+0x1c0>
 800b7b4:	f04f 0a03 	mov.w	sl, #3
 800b7b8:	e7b1      	b.n	800b71e <__gethex+0x1c4>
 800b7ba:	da09      	bge.n	800b7d0 <__gethex+0x276>
 800b7bc:	1bf7      	subs	r7, r6, r7
 800b7be:	4629      	mov	r1, r5
 800b7c0:	463a      	mov	r2, r7
 800b7c2:	9802      	ldr	r0, [sp, #8]
 800b7c4:	f000 fba8 	bl	800bf18 <__lshift>
 800b7c8:	1be4      	subs	r4, r4, r7
 800b7ca:	4605      	mov	r5, r0
 800b7cc:	f100 0914 	add.w	r9, r0, #20
 800b7d0:	f04f 0a00 	mov.w	sl, #0
 800b7d4:	e7a8      	b.n	800b728 <__gethex+0x1ce>
 800b7d6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b7da:	42a0      	cmp	r0, r4
 800b7dc:	dd6a      	ble.n	800b8b4 <__gethex+0x35a>
 800b7de:	1b04      	subs	r4, r0, r4
 800b7e0:	42a6      	cmp	r6, r4
 800b7e2:	dc2e      	bgt.n	800b842 <__gethex+0x2e8>
 800b7e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	d022      	beq.n	800b832 <__gethex+0x2d8>
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	d024      	beq.n	800b83a <__gethex+0x2e0>
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d115      	bne.n	800b820 <__gethex+0x2c6>
 800b7f4:	42a6      	cmp	r6, r4
 800b7f6:	d113      	bne.n	800b820 <__gethex+0x2c6>
 800b7f8:	2e01      	cmp	r6, #1
 800b7fa:	dc0b      	bgt.n	800b814 <__gethex+0x2ba>
 800b7fc:	9a06      	ldr	r2, [sp, #24]
 800b7fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b802:	6013      	str	r3, [r2, #0]
 800b804:	2301      	movs	r3, #1
 800b806:	612b      	str	r3, [r5, #16]
 800b808:	f8c9 3000 	str.w	r3, [r9]
 800b80c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b80e:	2762      	movs	r7, #98	; 0x62
 800b810:	601d      	str	r5, [r3, #0]
 800b812:	e72a      	b.n	800b66a <__gethex+0x110>
 800b814:	1e71      	subs	r1, r6, #1
 800b816:	4628      	mov	r0, r5
 800b818:	f000 fd5c 	bl	800c2d4 <__any_on>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d1ed      	bne.n	800b7fc <__gethex+0x2a2>
 800b820:	4629      	mov	r1, r5
 800b822:	9802      	ldr	r0, [sp, #8]
 800b824:	f000 f9c8 	bl	800bbb8 <_Bfree>
 800b828:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b82a:	2300      	movs	r3, #0
 800b82c:	6013      	str	r3, [r2, #0]
 800b82e:	2750      	movs	r7, #80	; 0x50
 800b830:	e71b      	b.n	800b66a <__gethex+0x110>
 800b832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b834:	2b00      	cmp	r3, #0
 800b836:	d0e1      	beq.n	800b7fc <__gethex+0x2a2>
 800b838:	e7f2      	b.n	800b820 <__gethex+0x2c6>
 800b83a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1dd      	bne.n	800b7fc <__gethex+0x2a2>
 800b840:	e7ee      	b.n	800b820 <__gethex+0x2c6>
 800b842:	1e67      	subs	r7, r4, #1
 800b844:	f1ba 0f00 	cmp.w	sl, #0
 800b848:	d131      	bne.n	800b8ae <__gethex+0x354>
 800b84a:	b127      	cbz	r7, 800b856 <__gethex+0x2fc>
 800b84c:	4639      	mov	r1, r7
 800b84e:	4628      	mov	r0, r5
 800b850:	f000 fd40 	bl	800c2d4 <__any_on>
 800b854:	4682      	mov	sl, r0
 800b856:	117a      	asrs	r2, r7, #5
 800b858:	2301      	movs	r3, #1
 800b85a:	f007 071f 	and.w	r7, r7, #31
 800b85e:	fa03 f707 	lsl.w	r7, r3, r7
 800b862:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b866:	4621      	mov	r1, r4
 800b868:	421f      	tst	r7, r3
 800b86a:	4628      	mov	r0, r5
 800b86c:	bf18      	it	ne
 800b86e:	f04a 0a02 	orrne.w	sl, sl, #2
 800b872:	1b36      	subs	r6, r6, r4
 800b874:	f7ff fe22 	bl	800b4bc <rshift>
 800b878:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b87c:	2702      	movs	r7, #2
 800b87e:	f1ba 0f00 	cmp.w	sl, #0
 800b882:	d048      	beq.n	800b916 <__gethex+0x3bc>
 800b884:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d015      	beq.n	800b8b8 <__gethex+0x35e>
 800b88c:	2b03      	cmp	r3, #3
 800b88e:	d017      	beq.n	800b8c0 <__gethex+0x366>
 800b890:	2b01      	cmp	r3, #1
 800b892:	d109      	bne.n	800b8a8 <__gethex+0x34e>
 800b894:	f01a 0f02 	tst.w	sl, #2
 800b898:	d006      	beq.n	800b8a8 <__gethex+0x34e>
 800b89a:	f8d9 3000 	ldr.w	r3, [r9]
 800b89e:	ea4a 0a03 	orr.w	sl, sl, r3
 800b8a2:	f01a 0f01 	tst.w	sl, #1
 800b8a6:	d10e      	bne.n	800b8c6 <__gethex+0x36c>
 800b8a8:	f047 0710 	orr.w	r7, r7, #16
 800b8ac:	e033      	b.n	800b916 <__gethex+0x3bc>
 800b8ae:	f04f 0a01 	mov.w	sl, #1
 800b8b2:	e7d0      	b.n	800b856 <__gethex+0x2fc>
 800b8b4:	2701      	movs	r7, #1
 800b8b6:	e7e2      	b.n	800b87e <__gethex+0x324>
 800b8b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8ba:	f1c3 0301 	rsb	r3, r3, #1
 800b8be:	9315      	str	r3, [sp, #84]	; 0x54
 800b8c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d0f0      	beq.n	800b8a8 <__gethex+0x34e>
 800b8c6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b8ca:	f105 0314 	add.w	r3, r5, #20
 800b8ce:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b8d2:	eb03 010a 	add.w	r1, r3, sl
 800b8d6:	f04f 0c00 	mov.w	ip, #0
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b8e4:	d01c      	beq.n	800b920 <__gethex+0x3c6>
 800b8e6:	3201      	adds	r2, #1
 800b8e8:	6002      	str	r2, [r0, #0]
 800b8ea:	2f02      	cmp	r7, #2
 800b8ec:	f105 0314 	add.w	r3, r5, #20
 800b8f0:	d138      	bne.n	800b964 <__gethex+0x40a>
 800b8f2:	f8d8 2000 	ldr.w	r2, [r8]
 800b8f6:	3a01      	subs	r2, #1
 800b8f8:	42b2      	cmp	r2, r6
 800b8fa:	d10a      	bne.n	800b912 <__gethex+0x3b8>
 800b8fc:	1171      	asrs	r1, r6, #5
 800b8fe:	2201      	movs	r2, #1
 800b900:	f006 061f 	and.w	r6, r6, #31
 800b904:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b908:	fa02 f606 	lsl.w	r6, r2, r6
 800b90c:	421e      	tst	r6, r3
 800b90e:	bf18      	it	ne
 800b910:	4617      	movne	r7, r2
 800b912:	f047 0720 	orr.w	r7, r7, #32
 800b916:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b918:	601d      	str	r5, [r3, #0]
 800b91a:	9b06      	ldr	r3, [sp, #24]
 800b91c:	601c      	str	r4, [r3, #0]
 800b91e:	e6a4      	b.n	800b66a <__gethex+0x110>
 800b920:	4299      	cmp	r1, r3
 800b922:	f843 cc04 	str.w	ip, [r3, #-4]
 800b926:	d8d8      	bhi.n	800b8da <__gethex+0x380>
 800b928:	68ab      	ldr	r3, [r5, #8]
 800b92a:	4599      	cmp	r9, r3
 800b92c:	db12      	blt.n	800b954 <__gethex+0x3fa>
 800b92e:	6869      	ldr	r1, [r5, #4]
 800b930:	9802      	ldr	r0, [sp, #8]
 800b932:	3101      	adds	r1, #1
 800b934:	f000 f91b 	bl	800bb6e <_Balloc>
 800b938:	692a      	ldr	r2, [r5, #16]
 800b93a:	3202      	adds	r2, #2
 800b93c:	f105 010c 	add.w	r1, r5, #12
 800b940:	4683      	mov	fp, r0
 800b942:	0092      	lsls	r2, r2, #2
 800b944:	300c      	adds	r0, #12
 800b946:	f000 f907 	bl	800bb58 <memcpy>
 800b94a:	4629      	mov	r1, r5
 800b94c:	9802      	ldr	r0, [sp, #8]
 800b94e:	f000 f933 	bl	800bbb8 <_Bfree>
 800b952:	465d      	mov	r5, fp
 800b954:	692b      	ldr	r3, [r5, #16]
 800b956:	1c5a      	adds	r2, r3, #1
 800b958:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b95c:	612a      	str	r2, [r5, #16]
 800b95e:	2201      	movs	r2, #1
 800b960:	615a      	str	r2, [r3, #20]
 800b962:	e7c2      	b.n	800b8ea <__gethex+0x390>
 800b964:	692a      	ldr	r2, [r5, #16]
 800b966:	454a      	cmp	r2, r9
 800b968:	dd0b      	ble.n	800b982 <__gethex+0x428>
 800b96a:	2101      	movs	r1, #1
 800b96c:	4628      	mov	r0, r5
 800b96e:	f7ff fda5 	bl	800b4bc <rshift>
 800b972:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b976:	3401      	adds	r4, #1
 800b978:	42a3      	cmp	r3, r4
 800b97a:	f6ff aed9 	blt.w	800b730 <__gethex+0x1d6>
 800b97e:	2701      	movs	r7, #1
 800b980:	e7c7      	b.n	800b912 <__gethex+0x3b8>
 800b982:	f016 061f 	ands.w	r6, r6, #31
 800b986:	d0fa      	beq.n	800b97e <__gethex+0x424>
 800b988:	449a      	add	sl, r3
 800b98a:	f1c6 0620 	rsb	r6, r6, #32
 800b98e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b992:	f000 f993 	bl	800bcbc <__hi0bits>
 800b996:	42b0      	cmp	r0, r6
 800b998:	dbe7      	blt.n	800b96a <__gethex+0x410>
 800b99a:	e7f0      	b.n	800b97e <__gethex+0x424>

0800b99c <L_shift>:
 800b99c:	f1c2 0208 	rsb	r2, r2, #8
 800b9a0:	0092      	lsls	r2, r2, #2
 800b9a2:	b570      	push	{r4, r5, r6, lr}
 800b9a4:	f1c2 0620 	rsb	r6, r2, #32
 800b9a8:	6843      	ldr	r3, [r0, #4]
 800b9aa:	6804      	ldr	r4, [r0, #0]
 800b9ac:	fa03 f506 	lsl.w	r5, r3, r6
 800b9b0:	432c      	orrs	r4, r5
 800b9b2:	40d3      	lsrs	r3, r2
 800b9b4:	6004      	str	r4, [r0, #0]
 800b9b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b9ba:	4288      	cmp	r0, r1
 800b9bc:	d3f4      	bcc.n	800b9a8 <L_shift+0xc>
 800b9be:	bd70      	pop	{r4, r5, r6, pc}

0800b9c0 <__match>:
 800b9c0:	b530      	push	{r4, r5, lr}
 800b9c2:	6803      	ldr	r3, [r0, #0]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ca:	b914      	cbnz	r4, 800b9d2 <__match+0x12>
 800b9cc:	6003      	str	r3, [r0, #0]
 800b9ce:	2001      	movs	r0, #1
 800b9d0:	bd30      	pop	{r4, r5, pc}
 800b9d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b9da:	2d19      	cmp	r5, #25
 800b9dc:	bf98      	it	ls
 800b9de:	3220      	addls	r2, #32
 800b9e0:	42a2      	cmp	r2, r4
 800b9e2:	d0f0      	beq.n	800b9c6 <__match+0x6>
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	e7f3      	b.n	800b9d0 <__match+0x10>

0800b9e8 <__hexnan>:
 800b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ec:	680b      	ldr	r3, [r1, #0]
 800b9ee:	6801      	ldr	r1, [r0, #0]
 800b9f0:	115f      	asrs	r7, r3, #5
 800b9f2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b9f6:	f013 031f 	ands.w	r3, r3, #31
 800b9fa:	b087      	sub	sp, #28
 800b9fc:	bf18      	it	ne
 800b9fe:	3704      	addne	r7, #4
 800ba00:	2500      	movs	r5, #0
 800ba02:	1f3e      	subs	r6, r7, #4
 800ba04:	4682      	mov	sl, r0
 800ba06:	4690      	mov	r8, r2
 800ba08:	9301      	str	r3, [sp, #4]
 800ba0a:	f847 5c04 	str.w	r5, [r7, #-4]
 800ba0e:	46b1      	mov	r9, r6
 800ba10:	4634      	mov	r4, r6
 800ba12:	9502      	str	r5, [sp, #8]
 800ba14:	46ab      	mov	fp, r5
 800ba16:	784a      	ldrb	r2, [r1, #1]
 800ba18:	1c4b      	adds	r3, r1, #1
 800ba1a:	9303      	str	r3, [sp, #12]
 800ba1c:	b342      	cbz	r2, 800ba70 <__hexnan+0x88>
 800ba1e:	4610      	mov	r0, r2
 800ba20:	9105      	str	r1, [sp, #20]
 800ba22:	9204      	str	r2, [sp, #16]
 800ba24:	f7ff fd84 	bl	800b530 <__hexdig_fun>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d143      	bne.n	800bab4 <__hexnan+0xcc>
 800ba2c:	9a04      	ldr	r2, [sp, #16]
 800ba2e:	9905      	ldr	r1, [sp, #20]
 800ba30:	2a20      	cmp	r2, #32
 800ba32:	d818      	bhi.n	800ba66 <__hexnan+0x7e>
 800ba34:	9b02      	ldr	r3, [sp, #8]
 800ba36:	459b      	cmp	fp, r3
 800ba38:	dd13      	ble.n	800ba62 <__hexnan+0x7a>
 800ba3a:	454c      	cmp	r4, r9
 800ba3c:	d206      	bcs.n	800ba4c <__hexnan+0x64>
 800ba3e:	2d07      	cmp	r5, #7
 800ba40:	dc04      	bgt.n	800ba4c <__hexnan+0x64>
 800ba42:	462a      	mov	r2, r5
 800ba44:	4649      	mov	r1, r9
 800ba46:	4620      	mov	r0, r4
 800ba48:	f7ff ffa8 	bl	800b99c <L_shift>
 800ba4c:	4544      	cmp	r4, r8
 800ba4e:	d944      	bls.n	800bada <__hexnan+0xf2>
 800ba50:	2300      	movs	r3, #0
 800ba52:	f1a4 0904 	sub.w	r9, r4, #4
 800ba56:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba5a:	f8cd b008 	str.w	fp, [sp, #8]
 800ba5e:	464c      	mov	r4, r9
 800ba60:	461d      	mov	r5, r3
 800ba62:	9903      	ldr	r1, [sp, #12]
 800ba64:	e7d7      	b.n	800ba16 <__hexnan+0x2e>
 800ba66:	2a29      	cmp	r2, #41	; 0x29
 800ba68:	d14a      	bne.n	800bb00 <__hexnan+0x118>
 800ba6a:	3102      	adds	r1, #2
 800ba6c:	f8ca 1000 	str.w	r1, [sl]
 800ba70:	f1bb 0f00 	cmp.w	fp, #0
 800ba74:	d044      	beq.n	800bb00 <__hexnan+0x118>
 800ba76:	454c      	cmp	r4, r9
 800ba78:	d206      	bcs.n	800ba88 <__hexnan+0xa0>
 800ba7a:	2d07      	cmp	r5, #7
 800ba7c:	dc04      	bgt.n	800ba88 <__hexnan+0xa0>
 800ba7e:	462a      	mov	r2, r5
 800ba80:	4649      	mov	r1, r9
 800ba82:	4620      	mov	r0, r4
 800ba84:	f7ff ff8a 	bl	800b99c <L_shift>
 800ba88:	4544      	cmp	r4, r8
 800ba8a:	d928      	bls.n	800bade <__hexnan+0xf6>
 800ba8c:	4643      	mov	r3, r8
 800ba8e:	f854 2b04 	ldr.w	r2, [r4], #4
 800ba92:	f843 2b04 	str.w	r2, [r3], #4
 800ba96:	42a6      	cmp	r6, r4
 800ba98:	d2f9      	bcs.n	800ba8e <__hexnan+0xa6>
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f843 2b04 	str.w	r2, [r3], #4
 800baa0:	429e      	cmp	r6, r3
 800baa2:	d2fb      	bcs.n	800ba9c <__hexnan+0xb4>
 800baa4:	6833      	ldr	r3, [r6, #0]
 800baa6:	b91b      	cbnz	r3, 800bab0 <__hexnan+0xc8>
 800baa8:	4546      	cmp	r6, r8
 800baaa:	d127      	bne.n	800bafc <__hexnan+0x114>
 800baac:	2301      	movs	r3, #1
 800baae:	6033      	str	r3, [r6, #0]
 800bab0:	2005      	movs	r0, #5
 800bab2:	e026      	b.n	800bb02 <__hexnan+0x11a>
 800bab4:	3501      	adds	r5, #1
 800bab6:	2d08      	cmp	r5, #8
 800bab8:	f10b 0b01 	add.w	fp, fp, #1
 800babc:	dd06      	ble.n	800bacc <__hexnan+0xe4>
 800babe:	4544      	cmp	r4, r8
 800bac0:	d9cf      	bls.n	800ba62 <__hexnan+0x7a>
 800bac2:	2300      	movs	r3, #0
 800bac4:	f844 3c04 	str.w	r3, [r4, #-4]
 800bac8:	2501      	movs	r5, #1
 800baca:	3c04      	subs	r4, #4
 800bacc:	6822      	ldr	r2, [r4, #0]
 800bace:	f000 000f 	and.w	r0, r0, #15
 800bad2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bad6:	6020      	str	r0, [r4, #0]
 800bad8:	e7c3      	b.n	800ba62 <__hexnan+0x7a>
 800bada:	2508      	movs	r5, #8
 800badc:	e7c1      	b.n	800ba62 <__hexnan+0x7a>
 800bade:	9b01      	ldr	r3, [sp, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d0df      	beq.n	800baa4 <__hexnan+0xbc>
 800bae4:	f04f 32ff 	mov.w	r2, #4294967295
 800bae8:	f1c3 0320 	rsb	r3, r3, #32
 800baec:	fa22 f303 	lsr.w	r3, r2, r3
 800baf0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800baf4:	401a      	ands	r2, r3
 800baf6:	f847 2c04 	str.w	r2, [r7, #-4]
 800bafa:	e7d3      	b.n	800baa4 <__hexnan+0xbc>
 800bafc:	3e04      	subs	r6, #4
 800bafe:	e7d1      	b.n	800baa4 <__hexnan+0xbc>
 800bb00:	2004      	movs	r0, #4
 800bb02:	b007      	add	sp, #28
 800bb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb08 <__locale_ctype_ptr_l>:
 800bb08:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800bb0c:	4770      	bx	lr

0800bb0e <__localeconv_l>:
 800bb0e:	30f0      	adds	r0, #240	; 0xf0
 800bb10:	4770      	bx	lr
	...

0800bb14 <_localeconv_r>:
 800bb14:	4b04      	ldr	r3, [pc, #16]	; (800bb28 <_localeconv_r+0x14>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bb1a:	4b04      	ldr	r3, [pc, #16]	; (800bb2c <_localeconv_r+0x18>)
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	bf08      	it	eq
 800bb20:	4618      	moveq	r0, r3
 800bb22:	30f0      	adds	r0, #240	; 0xf0
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	20000010 	.word	0x20000010
 800bb2c:	20000854 	.word	0x20000854

0800bb30 <__retarget_lock_acquire_recursive>:
 800bb30:	4770      	bx	lr

0800bb32 <__retarget_lock_release_recursive>:
 800bb32:	4770      	bx	lr

0800bb34 <__ascii_mbtowc>:
 800bb34:	b082      	sub	sp, #8
 800bb36:	b901      	cbnz	r1, 800bb3a <__ascii_mbtowc+0x6>
 800bb38:	a901      	add	r1, sp, #4
 800bb3a:	b142      	cbz	r2, 800bb4e <__ascii_mbtowc+0x1a>
 800bb3c:	b14b      	cbz	r3, 800bb52 <__ascii_mbtowc+0x1e>
 800bb3e:	7813      	ldrb	r3, [r2, #0]
 800bb40:	600b      	str	r3, [r1, #0]
 800bb42:	7812      	ldrb	r2, [r2, #0]
 800bb44:	1c10      	adds	r0, r2, #0
 800bb46:	bf18      	it	ne
 800bb48:	2001      	movne	r0, #1
 800bb4a:	b002      	add	sp, #8
 800bb4c:	4770      	bx	lr
 800bb4e:	4610      	mov	r0, r2
 800bb50:	e7fb      	b.n	800bb4a <__ascii_mbtowc+0x16>
 800bb52:	f06f 0001 	mvn.w	r0, #1
 800bb56:	e7f8      	b.n	800bb4a <__ascii_mbtowc+0x16>

0800bb58 <memcpy>:
 800bb58:	b510      	push	{r4, lr}
 800bb5a:	1e43      	subs	r3, r0, #1
 800bb5c:	440a      	add	r2, r1
 800bb5e:	4291      	cmp	r1, r2
 800bb60:	d100      	bne.n	800bb64 <memcpy+0xc>
 800bb62:	bd10      	pop	{r4, pc}
 800bb64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb6c:	e7f7      	b.n	800bb5e <memcpy+0x6>

0800bb6e <_Balloc>:
 800bb6e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800bb70:	b570      	push	{r4, r5, r6, lr}
 800bb72:	4605      	mov	r5, r0
 800bb74:	460c      	mov	r4, r1
 800bb76:	b17b      	cbz	r3, 800bb98 <_Balloc+0x2a>
 800bb78:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800bb7a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800bb7e:	b9a0      	cbnz	r0, 800bbaa <_Balloc+0x3c>
 800bb80:	2101      	movs	r1, #1
 800bb82:	fa01 f604 	lsl.w	r6, r1, r4
 800bb86:	1d72      	adds	r2, r6, #5
 800bb88:	0092      	lsls	r2, r2, #2
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	f000 fcfc 	bl	800c588 <_calloc_r>
 800bb90:	b148      	cbz	r0, 800bba6 <_Balloc+0x38>
 800bb92:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800bb96:	e00b      	b.n	800bbb0 <_Balloc+0x42>
 800bb98:	2221      	movs	r2, #33	; 0x21
 800bb9a:	2104      	movs	r1, #4
 800bb9c:	f000 fcf4 	bl	800c588 <_calloc_r>
 800bba0:	64e8      	str	r0, [r5, #76]	; 0x4c
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d1e8      	bne.n	800bb78 <_Balloc+0xa>
 800bba6:	2000      	movs	r0, #0
 800bba8:	bd70      	pop	{r4, r5, r6, pc}
 800bbaa:	6802      	ldr	r2, [r0, #0]
 800bbac:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbb6:	e7f7      	b.n	800bba8 <_Balloc+0x3a>

0800bbb8 <_Bfree>:
 800bbb8:	b131      	cbz	r1, 800bbc8 <_Bfree+0x10>
 800bbba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800bbbc:	684a      	ldr	r2, [r1, #4]
 800bbbe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bbc2:	6008      	str	r0, [r1, #0]
 800bbc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bbc8:	4770      	bx	lr

0800bbca <__multadd>:
 800bbca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbce:	690d      	ldr	r5, [r1, #16]
 800bbd0:	461f      	mov	r7, r3
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	460c      	mov	r4, r1
 800bbd6:	f101 0c14 	add.w	ip, r1, #20
 800bbda:	2300      	movs	r3, #0
 800bbdc:	f8dc 0000 	ldr.w	r0, [ip]
 800bbe0:	b281      	uxth	r1, r0
 800bbe2:	fb02 7101 	mla	r1, r2, r1, r7
 800bbe6:	0c0f      	lsrs	r7, r1, #16
 800bbe8:	0c00      	lsrs	r0, r0, #16
 800bbea:	fb02 7000 	mla	r0, r2, r0, r7
 800bbee:	b289      	uxth	r1, r1
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bbf6:	429d      	cmp	r5, r3
 800bbf8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bbfc:	f84c 1b04 	str.w	r1, [ip], #4
 800bc00:	dcec      	bgt.n	800bbdc <__multadd+0x12>
 800bc02:	b1d7      	cbz	r7, 800bc3a <__multadd+0x70>
 800bc04:	68a3      	ldr	r3, [r4, #8]
 800bc06:	42ab      	cmp	r3, r5
 800bc08:	dc12      	bgt.n	800bc30 <__multadd+0x66>
 800bc0a:	6861      	ldr	r1, [r4, #4]
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	3101      	adds	r1, #1
 800bc10:	f7ff ffad 	bl	800bb6e <_Balloc>
 800bc14:	6922      	ldr	r2, [r4, #16]
 800bc16:	3202      	adds	r2, #2
 800bc18:	f104 010c 	add.w	r1, r4, #12
 800bc1c:	4680      	mov	r8, r0
 800bc1e:	0092      	lsls	r2, r2, #2
 800bc20:	300c      	adds	r0, #12
 800bc22:	f7ff ff99 	bl	800bb58 <memcpy>
 800bc26:	4621      	mov	r1, r4
 800bc28:	4630      	mov	r0, r6
 800bc2a:	f7ff ffc5 	bl	800bbb8 <_Bfree>
 800bc2e:	4644      	mov	r4, r8
 800bc30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc34:	3501      	adds	r5, #1
 800bc36:	615f      	str	r7, [r3, #20]
 800bc38:	6125      	str	r5, [r4, #16]
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bc40 <__s2b>:
 800bc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc44:	460c      	mov	r4, r1
 800bc46:	4615      	mov	r5, r2
 800bc48:	461f      	mov	r7, r3
 800bc4a:	2209      	movs	r2, #9
 800bc4c:	3308      	adds	r3, #8
 800bc4e:	4606      	mov	r6, r0
 800bc50:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc54:	2100      	movs	r1, #0
 800bc56:	2201      	movs	r2, #1
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	db20      	blt.n	800bc9e <__s2b+0x5e>
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f7ff ff86 	bl	800bb6e <_Balloc>
 800bc62:	9b08      	ldr	r3, [sp, #32]
 800bc64:	6143      	str	r3, [r0, #20]
 800bc66:	2d09      	cmp	r5, #9
 800bc68:	f04f 0301 	mov.w	r3, #1
 800bc6c:	6103      	str	r3, [r0, #16]
 800bc6e:	dd19      	ble.n	800bca4 <__s2b+0x64>
 800bc70:	f104 0809 	add.w	r8, r4, #9
 800bc74:	46c1      	mov	r9, r8
 800bc76:	442c      	add	r4, r5
 800bc78:	f819 3b01 	ldrb.w	r3, [r9], #1
 800bc7c:	4601      	mov	r1, r0
 800bc7e:	3b30      	subs	r3, #48	; 0x30
 800bc80:	220a      	movs	r2, #10
 800bc82:	4630      	mov	r0, r6
 800bc84:	f7ff ffa1 	bl	800bbca <__multadd>
 800bc88:	45a1      	cmp	r9, r4
 800bc8a:	d1f5      	bne.n	800bc78 <__s2b+0x38>
 800bc8c:	eb08 0405 	add.w	r4, r8, r5
 800bc90:	3c08      	subs	r4, #8
 800bc92:	1b2d      	subs	r5, r5, r4
 800bc94:	1963      	adds	r3, r4, r5
 800bc96:	42bb      	cmp	r3, r7
 800bc98:	db07      	blt.n	800bcaa <__s2b+0x6a>
 800bc9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc9e:	0052      	lsls	r2, r2, #1
 800bca0:	3101      	adds	r1, #1
 800bca2:	e7d9      	b.n	800bc58 <__s2b+0x18>
 800bca4:	340a      	adds	r4, #10
 800bca6:	2509      	movs	r5, #9
 800bca8:	e7f3      	b.n	800bc92 <__s2b+0x52>
 800bcaa:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bcae:	4601      	mov	r1, r0
 800bcb0:	3b30      	subs	r3, #48	; 0x30
 800bcb2:	220a      	movs	r2, #10
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f7ff ff88 	bl	800bbca <__multadd>
 800bcba:	e7eb      	b.n	800bc94 <__s2b+0x54>

0800bcbc <__hi0bits>:
 800bcbc:	0c02      	lsrs	r2, r0, #16
 800bcbe:	0412      	lsls	r2, r2, #16
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	b9b2      	cbnz	r2, 800bcf2 <__hi0bits+0x36>
 800bcc4:	0403      	lsls	r3, r0, #16
 800bcc6:	2010      	movs	r0, #16
 800bcc8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bccc:	bf04      	itt	eq
 800bcce:	021b      	lsleq	r3, r3, #8
 800bcd0:	3008      	addeq	r0, #8
 800bcd2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bcd6:	bf04      	itt	eq
 800bcd8:	011b      	lsleq	r3, r3, #4
 800bcda:	3004      	addeq	r0, #4
 800bcdc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bce0:	bf04      	itt	eq
 800bce2:	009b      	lsleq	r3, r3, #2
 800bce4:	3002      	addeq	r0, #2
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	db06      	blt.n	800bcf8 <__hi0bits+0x3c>
 800bcea:	005b      	lsls	r3, r3, #1
 800bcec:	d503      	bpl.n	800bcf6 <__hi0bits+0x3a>
 800bcee:	3001      	adds	r0, #1
 800bcf0:	4770      	bx	lr
 800bcf2:	2000      	movs	r0, #0
 800bcf4:	e7e8      	b.n	800bcc8 <__hi0bits+0xc>
 800bcf6:	2020      	movs	r0, #32
 800bcf8:	4770      	bx	lr

0800bcfa <__lo0bits>:
 800bcfa:	6803      	ldr	r3, [r0, #0]
 800bcfc:	f013 0207 	ands.w	r2, r3, #7
 800bd00:	4601      	mov	r1, r0
 800bd02:	d00b      	beq.n	800bd1c <__lo0bits+0x22>
 800bd04:	07da      	lsls	r2, r3, #31
 800bd06:	d423      	bmi.n	800bd50 <__lo0bits+0x56>
 800bd08:	0798      	lsls	r0, r3, #30
 800bd0a:	bf49      	itett	mi
 800bd0c:	085b      	lsrmi	r3, r3, #1
 800bd0e:	089b      	lsrpl	r3, r3, #2
 800bd10:	2001      	movmi	r0, #1
 800bd12:	600b      	strmi	r3, [r1, #0]
 800bd14:	bf5c      	itt	pl
 800bd16:	600b      	strpl	r3, [r1, #0]
 800bd18:	2002      	movpl	r0, #2
 800bd1a:	4770      	bx	lr
 800bd1c:	b298      	uxth	r0, r3
 800bd1e:	b9a8      	cbnz	r0, 800bd4c <__lo0bits+0x52>
 800bd20:	0c1b      	lsrs	r3, r3, #16
 800bd22:	2010      	movs	r0, #16
 800bd24:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bd28:	bf04      	itt	eq
 800bd2a:	0a1b      	lsreq	r3, r3, #8
 800bd2c:	3008      	addeq	r0, #8
 800bd2e:	071a      	lsls	r2, r3, #28
 800bd30:	bf04      	itt	eq
 800bd32:	091b      	lsreq	r3, r3, #4
 800bd34:	3004      	addeq	r0, #4
 800bd36:	079a      	lsls	r2, r3, #30
 800bd38:	bf04      	itt	eq
 800bd3a:	089b      	lsreq	r3, r3, #2
 800bd3c:	3002      	addeq	r0, #2
 800bd3e:	07da      	lsls	r2, r3, #31
 800bd40:	d402      	bmi.n	800bd48 <__lo0bits+0x4e>
 800bd42:	085b      	lsrs	r3, r3, #1
 800bd44:	d006      	beq.n	800bd54 <__lo0bits+0x5a>
 800bd46:	3001      	adds	r0, #1
 800bd48:	600b      	str	r3, [r1, #0]
 800bd4a:	4770      	bx	lr
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	e7e9      	b.n	800bd24 <__lo0bits+0x2a>
 800bd50:	2000      	movs	r0, #0
 800bd52:	4770      	bx	lr
 800bd54:	2020      	movs	r0, #32
 800bd56:	4770      	bx	lr

0800bd58 <__i2b>:
 800bd58:	b510      	push	{r4, lr}
 800bd5a:	460c      	mov	r4, r1
 800bd5c:	2101      	movs	r1, #1
 800bd5e:	f7ff ff06 	bl	800bb6e <_Balloc>
 800bd62:	2201      	movs	r2, #1
 800bd64:	6144      	str	r4, [r0, #20]
 800bd66:	6102      	str	r2, [r0, #16]
 800bd68:	bd10      	pop	{r4, pc}

0800bd6a <__multiply>:
 800bd6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6e:	4614      	mov	r4, r2
 800bd70:	690a      	ldr	r2, [r1, #16]
 800bd72:	6923      	ldr	r3, [r4, #16]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	bfb8      	it	lt
 800bd78:	460b      	movlt	r3, r1
 800bd7a:	4688      	mov	r8, r1
 800bd7c:	bfbc      	itt	lt
 800bd7e:	46a0      	movlt	r8, r4
 800bd80:	461c      	movlt	r4, r3
 800bd82:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd86:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bd8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd8e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd92:	eb07 0609 	add.w	r6, r7, r9
 800bd96:	42b3      	cmp	r3, r6
 800bd98:	bfb8      	it	lt
 800bd9a:	3101      	addlt	r1, #1
 800bd9c:	f7ff fee7 	bl	800bb6e <_Balloc>
 800bda0:	f100 0514 	add.w	r5, r0, #20
 800bda4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bda8:	462b      	mov	r3, r5
 800bdaa:	2200      	movs	r2, #0
 800bdac:	4573      	cmp	r3, lr
 800bdae:	d316      	bcc.n	800bdde <__multiply+0x74>
 800bdb0:	f104 0214 	add.w	r2, r4, #20
 800bdb4:	f108 0114 	add.w	r1, r8, #20
 800bdb8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bdbc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	9b00      	ldr	r3, [sp, #0]
 800bdc4:	9201      	str	r2, [sp, #4]
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d80c      	bhi.n	800bde4 <__multiply+0x7a>
 800bdca:	2e00      	cmp	r6, #0
 800bdcc:	dd03      	ble.n	800bdd6 <__multiply+0x6c>
 800bdce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d05d      	beq.n	800be92 <__multiply+0x128>
 800bdd6:	6106      	str	r6, [r0, #16]
 800bdd8:	b003      	add	sp, #12
 800bdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdde:	f843 2b04 	str.w	r2, [r3], #4
 800bde2:	e7e3      	b.n	800bdac <__multiply+0x42>
 800bde4:	f8b2 b000 	ldrh.w	fp, [r2]
 800bde8:	f1bb 0f00 	cmp.w	fp, #0
 800bdec:	d023      	beq.n	800be36 <__multiply+0xcc>
 800bdee:	4689      	mov	r9, r1
 800bdf0:	46ac      	mov	ip, r5
 800bdf2:	f04f 0800 	mov.w	r8, #0
 800bdf6:	f859 4b04 	ldr.w	r4, [r9], #4
 800bdfa:	f8dc a000 	ldr.w	sl, [ip]
 800bdfe:	b2a3      	uxth	r3, r4
 800be00:	fa1f fa8a 	uxth.w	sl, sl
 800be04:	fb0b a303 	mla	r3, fp, r3, sl
 800be08:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800be0c:	f8dc 4000 	ldr.w	r4, [ip]
 800be10:	4443      	add	r3, r8
 800be12:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800be16:	fb0b 840a 	mla	r4, fp, sl, r8
 800be1a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800be1e:	46e2      	mov	sl, ip
 800be20:	b29b      	uxth	r3, r3
 800be22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800be26:	454f      	cmp	r7, r9
 800be28:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800be2c:	f84a 3b04 	str.w	r3, [sl], #4
 800be30:	d82b      	bhi.n	800be8a <__multiply+0x120>
 800be32:	f8cc 8004 	str.w	r8, [ip, #4]
 800be36:	9b01      	ldr	r3, [sp, #4]
 800be38:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800be3c:	3204      	adds	r2, #4
 800be3e:	f1ba 0f00 	cmp.w	sl, #0
 800be42:	d020      	beq.n	800be86 <__multiply+0x11c>
 800be44:	682b      	ldr	r3, [r5, #0]
 800be46:	4689      	mov	r9, r1
 800be48:	46a8      	mov	r8, r5
 800be4a:	f04f 0b00 	mov.w	fp, #0
 800be4e:	f8b9 c000 	ldrh.w	ip, [r9]
 800be52:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800be56:	fb0a 440c 	mla	r4, sl, ip, r4
 800be5a:	445c      	add	r4, fp
 800be5c:	46c4      	mov	ip, r8
 800be5e:	b29b      	uxth	r3, r3
 800be60:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800be64:	f84c 3b04 	str.w	r3, [ip], #4
 800be68:	f859 3b04 	ldr.w	r3, [r9], #4
 800be6c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800be70:	0c1b      	lsrs	r3, r3, #16
 800be72:	fb0a b303 	mla	r3, sl, r3, fp
 800be76:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800be7a:	454f      	cmp	r7, r9
 800be7c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800be80:	d805      	bhi.n	800be8e <__multiply+0x124>
 800be82:	f8c8 3004 	str.w	r3, [r8, #4]
 800be86:	3504      	adds	r5, #4
 800be88:	e79b      	b.n	800bdc2 <__multiply+0x58>
 800be8a:	46d4      	mov	ip, sl
 800be8c:	e7b3      	b.n	800bdf6 <__multiply+0x8c>
 800be8e:	46e0      	mov	r8, ip
 800be90:	e7dd      	b.n	800be4e <__multiply+0xe4>
 800be92:	3e01      	subs	r6, #1
 800be94:	e799      	b.n	800bdca <__multiply+0x60>
	...

0800be98 <__pow5mult>:
 800be98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be9c:	4615      	mov	r5, r2
 800be9e:	f012 0203 	ands.w	r2, r2, #3
 800bea2:	4606      	mov	r6, r0
 800bea4:	460f      	mov	r7, r1
 800bea6:	d007      	beq.n	800beb8 <__pow5mult+0x20>
 800bea8:	3a01      	subs	r2, #1
 800beaa:	4c1a      	ldr	r4, [pc, #104]	; (800bf14 <__pow5mult+0x7c>)
 800beac:	2300      	movs	r3, #0
 800beae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800beb2:	f7ff fe8a 	bl	800bbca <__multadd>
 800beb6:	4607      	mov	r7, r0
 800beb8:	10ad      	asrs	r5, r5, #2
 800beba:	d027      	beq.n	800bf0c <__pow5mult+0x74>
 800bebc:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800bebe:	b944      	cbnz	r4, 800bed2 <__pow5mult+0x3a>
 800bec0:	f240 2171 	movw	r1, #625	; 0x271
 800bec4:	4630      	mov	r0, r6
 800bec6:	f7ff ff47 	bl	800bd58 <__i2b>
 800beca:	2300      	movs	r3, #0
 800becc:	64b0      	str	r0, [r6, #72]	; 0x48
 800bece:	4604      	mov	r4, r0
 800bed0:	6003      	str	r3, [r0, #0]
 800bed2:	f04f 0800 	mov.w	r8, #0
 800bed6:	07eb      	lsls	r3, r5, #31
 800bed8:	d50a      	bpl.n	800bef0 <__pow5mult+0x58>
 800beda:	4639      	mov	r1, r7
 800bedc:	4622      	mov	r2, r4
 800bede:	4630      	mov	r0, r6
 800bee0:	f7ff ff43 	bl	800bd6a <__multiply>
 800bee4:	4639      	mov	r1, r7
 800bee6:	4681      	mov	r9, r0
 800bee8:	4630      	mov	r0, r6
 800beea:	f7ff fe65 	bl	800bbb8 <_Bfree>
 800beee:	464f      	mov	r7, r9
 800bef0:	106d      	asrs	r5, r5, #1
 800bef2:	d00b      	beq.n	800bf0c <__pow5mult+0x74>
 800bef4:	6820      	ldr	r0, [r4, #0]
 800bef6:	b938      	cbnz	r0, 800bf08 <__pow5mult+0x70>
 800bef8:	4622      	mov	r2, r4
 800befa:	4621      	mov	r1, r4
 800befc:	4630      	mov	r0, r6
 800befe:	f7ff ff34 	bl	800bd6a <__multiply>
 800bf02:	6020      	str	r0, [r4, #0]
 800bf04:	f8c0 8000 	str.w	r8, [r0]
 800bf08:	4604      	mov	r4, r0
 800bf0a:	e7e4      	b.n	800bed6 <__pow5mult+0x3e>
 800bf0c:	4638      	mov	r0, r7
 800bf0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf12:	bf00      	nop
 800bf14:	0800f4d0 	.word	0x0800f4d0

0800bf18 <__lshift>:
 800bf18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf1c:	460c      	mov	r4, r1
 800bf1e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf22:	6923      	ldr	r3, [r4, #16]
 800bf24:	6849      	ldr	r1, [r1, #4]
 800bf26:	eb0a 0903 	add.w	r9, sl, r3
 800bf2a:	68a3      	ldr	r3, [r4, #8]
 800bf2c:	4607      	mov	r7, r0
 800bf2e:	4616      	mov	r6, r2
 800bf30:	f109 0501 	add.w	r5, r9, #1
 800bf34:	42ab      	cmp	r3, r5
 800bf36:	db32      	blt.n	800bf9e <__lshift+0x86>
 800bf38:	4638      	mov	r0, r7
 800bf3a:	f7ff fe18 	bl	800bb6e <_Balloc>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	4680      	mov	r8, r0
 800bf42:	f100 0114 	add.w	r1, r0, #20
 800bf46:	461a      	mov	r2, r3
 800bf48:	4553      	cmp	r3, sl
 800bf4a:	db2b      	blt.n	800bfa4 <__lshift+0x8c>
 800bf4c:	6920      	ldr	r0, [r4, #16]
 800bf4e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf52:	f104 0314 	add.w	r3, r4, #20
 800bf56:	f016 021f 	ands.w	r2, r6, #31
 800bf5a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf5e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf62:	d025      	beq.n	800bfb0 <__lshift+0x98>
 800bf64:	f1c2 0e20 	rsb	lr, r2, #32
 800bf68:	2000      	movs	r0, #0
 800bf6a:	681e      	ldr	r6, [r3, #0]
 800bf6c:	468a      	mov	sl, r1
 800bf6e:	4096      	lsls	r6, r2
 800bf70:	4330      	orrs	r0, r6
 800bf72:	f84a 0b04 	str.w	r0, [sl], #4
 800bf76:	f853 0b04 	ldr.w	r0, [r3], #4
 800bf7a:	459c      	cmp	ip, r3
 800bf7c:	fa20 f00e 	lsr.w	r0, r0, lr
 800bf80:	d814      	bhi.n	800bfac <__lshift+0x94>
 800bf82:	6048      	str	r0, [r1, #4]
 800bf84:	b108      	cbz	r0, 800bf8a <__lshift+0x72>
 800bf86:	f109 0502 	add.w	r5, r9, #2
 800bf8a:	3d01      	subs	r5, #1
 800bf8c:	4638      	mov	r0, r7
 800bf8e:	f8c8 5010 	str.w	r5, [r8, #16]
 800bf92:	4621      	mov	r1, r4
 800bf94:	f7ff fe10 	bl	800bbb8 <_Bfree>
 800bf98:	4640      	mov	r0, r8
 800bf9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf9e:	3101      	adds	r1, #1
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	e7c7      	b.n	800bf34 <__lshift+0x1c>
 800bfa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	e7cd      	b.n	800bf48 <__lshift+0x30>
 800bfac:	4651      	mov	r1, sl
 800bfae:	e7dc      	b.n	800bf6a <__lshift+0x52>
 800bfb0:	3904      	subs	r1, #4
 800bfb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfb6:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfba:	459c      	cmp	ip, r3
 800bfbc:	d8f9      	bhi.n	800bfb2 <__lshift+0x9a>
 800bfbe:	e7e4      	b.n	800bf8a <__lshift+0x72>

0800bfc0 <__mcmp>:
 800bfc0:	6903      	ldr	r3, [r0, #16]
 800bfc2:	690a      	ldr	r2, [r1, #16]
 800bfc4:	1a9b      	subs	r3, r3, r2
 800bfc6:	b530      	push	{r4, r5, lr}
 800bfc8:	d10c      	bne.n	800bfe4 <__mcmp+0x24>
 800bfca:	0092      	lsls	r2, r2, #2
 800bfcc:	3014      	adds	r0, #20
 800bfce:	3114      	adds	r1, #20
 800bfd0:	1884      	adds	r4, r0, r2
 800bfd2:	4411      	add	r1, r2
 800bfd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bfd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bfdc:	4295      	cmp	r5, r2
 800bfde:	d003      	beq.n	800bfe8 <__mcmp+0x28>
 800bfe0:	d305      	bcc.n	800bfee <__mcmp+0x2e>
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	bd30      	pop	{r4, r5, pc}
 800bfe8:	42a0      	cmp	r0, r4
 800bfea:	d3f3      	bcc.n	800bfd4 <__mcmp+0x14>
 800bfec:	e7fa      	b.n	800bfe4 <__mcmp+0x24>
 800bfee:	f04f 33ff 	mov.w	r3, #4294967295
 800bff2:	e7f7      	b.n	800bfe4 <__mcmp+0x24>

0800bff4 <__mdiff>:
 800bff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bff8:	460d      	mov	r5, r1
 800bffa:	4607      	mov	r7, r0
 800bffc:	4611      	mov	r1, r2
 800bffe:	4628      	mov	r0, r5
 800c000:	4614      	mov	r4, r2
 800c002:	f7ff ffdd 	bl	800bfc0 <__mcmp>
 800c006:	1e06      	subs	r6, r0, #0
 800c008:	d108      	bne.n	800c01c <__mdiff+0x28>
 800c00a:	4631      	mov	r1, r6
 800c00c:	4638      	mov	r0, r7
 800c00e:	f7ff fdae 	bl	800bb6e <_Balloc>
 800c012:	2301      	movs	r3, #1
 800c014:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c01c:	bfa4      	itt	ge
 800c01e:	4623      	movge	r3, r4
 800c020:	462c      	movge	r4, r5
 800c022:	4638      	mov	r0, r7
 800c024:	6861      	ldr	r1, [r4, #4]
 800c026:	bfa6      	itte	ge
 800c028:	461d      	movge	r5, r3
 800c02a:	2600      	movge	r6, #0
 800c02c:	2601      	movlt	r6, #1
 800c02e:	f7ff fd9e 	bl	800bb6e <_Balloc>
 800c032:	692b      	ldr	r3, [r5, #16]
 800c034:	60c6      	str	r6, [r0, #12]
 800c036:	6926      	ldr	r6, [r4, #16]
 800c038:	f105 0914 	add.w	r9, r5, #20
 800c03c:	f104 0214 	add.w	r2, r4, #20
 800c040:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c044:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c048:	f100 0514 	add.w	r5, r0, #20
 800c04c:	f04f 0e00 	mov.w	lr, #0
 800c050:	f852 ab04 	ldr.w	sl, [r2], #4
 800c054:	f859 4b04 	ldr.w	r4, [r9], #4
 800c058:	fa1e f18a 	uxtah	r1, lr, sl
 800c05c:	b2a3      	uxth	r3, r4
 800c05e:	1ac9      	subs	r1, r1, r3
 800c060:	0c23      	lsrs	r3, r4, #16
 800c062:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c066:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c06a:	b289      	uxth	r1, r1
 800c06c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c070:	45c8      	cmp	r8, r9
 800c072:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c076:	4694      	mov	ip, r2
 800c078:	f845 3b04 	str.w	r3, [r5], #4
 800c07c:	d8e8      	bhi.n	800c050 <__mdiff+0x5c>
 800c07e:	45bc      	cmp	ip, r7
 800c080:	d304      	bcc.n	800c08c <__mdiff+0x98>
 800c082:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c086:	b183      	cbz	r3, 800c0aa <__mdiff+0xb6>
 800c088:	6106      	str	r6, [r0, #16]
 800c08a:	e7c5      	b.n	800c018 <__mdiff+0x24>
 800c08c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c090:	fa1e f381 	uxtah	r3, lr, r1
 800c094:	141a      	asrs	r2, r3, #16
 800c096:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c0a4:	f845 3b04 	str.w	r3, [r5], #4
 800c0a8:	e7e9      	b.n	800c07e <__mdiff+0x8a>
 800c0aa:	3e01      	subs	r6, #1
 800c0ac:	e7e9      	b.n	800c082 <__mdiff+0x8e>
	...

0800c0b0 <__ulp>:
 800c0b0:	4b12      	ldr	r3, [pc, #72]	; (800c0fc <__ulp+0x4c>)
 800c0b2:	ee10 2a90 	vmov	r2, s1
 800c0b6:	401a      	ands	r2, r3
 800c0b8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	dd04      	ble.n	800c0ca <__ulp+0x1a>
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	ec41 0b10 	vmov	d0, r0, r1
 800c0c8:	4770      	bx	lr
 800c0ca:	425b      	negs	r3, r3
 800c0cc:	151b      	asrs	r3, r3, #20
 800c0ce:	2b13      	cmp	r3, #19
 800c0d0:	f04f 0000 	mov.w	r0, #0
 800c0d4:	f04f 0100 	mov.w	r1, #0
 800c0d8:	dc04      	bgt.n	800c0e4 <__ulp+0x34>
 800c0da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c0de:	fa42 f103 	asr.w	r1, r2, r3
 800c0e2:	e7ef      	b.n	800c0c4 <__ulp+0x14>
 800c0e4:	3b14      	subs	r3, #20
 800c0e6:	2b1e      	cmp	r3, #30
 800c0e8:	f04f 0201 	mov.w	r2, #1
 800c0ec:	bfda      	itte	le
 800c0ee:	f1c3 031f 	rsble	r3, r3, #31
 800c0f2:	fa02 f303 	lslle.w	r3, r2, r3
 800c0f6:	4613      	movgt	r3, r2
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	e7e3      	b.n	800c0c4 <__ulp+0x14>
 800c0fc:	7ff00000 	.word	0x7ff00000

0800c100 <__b2d>:
 800c100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c102:	6905      	ldr	r5, [r0, #16]
 800c104:	f100 0714 	add.w	r7, r0, #20
 800c108:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c10c:	1f2e      	subs	r6, r5, #4
 800c10e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c112:	4620      	mov	r0, r4
 800c114:	f7ff fdd2 	bl	800bcbc <__hi0bits>
 800c118:	f1c0 0320 	rsb	r3, r0, #32
 800c11c:	280a      	cmp	r0, #10
 800c11e:	600b      	str	r3, [r1, #0]
 800c120:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c198 <__b2d+0x98>
 800c124:	dc14      	bgt.n	800c150 <__b2d+0x50>
 800c126:	f1c0 0e0b 	rsb	lr, r0, #11
 800c12a:	fa24 f10e 	lsr.w	r1, r4, lr
 800c12e:	42b7      	cmp	r7, r6
 800c130:	ea41 030c 	orr.w	r3, r1, ip
 800c134:	bf34      	ite	cc
 800c136:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c13a:	2100      	movcs	r1, #0
 800c13c:	3015      	adds	r0, #21
 800c13e:	fa04 f000 	lsl.w	r0, r4, r0
 800c142:	fa21 f10e 	lsr.w	r1, r1, lr
 800c146:	ea40 0201 	orr.w	r2, r0, r1
 800c14a:	ec43 2b10 	vmov	d0, r2, r3
 800c14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c150:	42b7      	cmp	r7, r6
 800c152:	bf3a      	itte	cc
 800c154:	f1a5 0608 	subcc.w	r6, r5, #8
 800c158:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c15c:	2100      	movcs	r1, #0
 800c15e:	380b      	subs	r0, #11
 800c160:	d015      	beq.n	800c18e <__b2d+0x8e>
 800c162:	4084      	lsls	r4, r0
 800c164:	f1c0 0520 	rsb	r5, r0, #32
 800c168:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800c16c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800c170:	42be      	cmp	r6, r7
 800c172:	fa21 fc05 	lsr.w	ip, r1, r5
 800c176:	ea44 030c 	orr.w	r3, r4, ip
 800c17a:	bf8c      	ite	hi
 800c17c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c180:	2400      	movls	r4, #0
 800c182:	fa01 f000 	lsl.w	r0, r1, r0
 800c186:	40ec      	lsrs	r4, r5
 800c188:	ea40 0204 	orr.w	r2, r0, r4
 800c18c:	e7dd      	b.n	800c14a <__b2d+0x4a>
 800c18e:	ea44 030c 	orr.w	r3, r4, ip
 800c192:	460a      	mov	r2, r1
 800c194:	e7d9      	b.n	800c14a <__b2d+0x4a>
 800c196:	bf00      	nop
 800c198:	3ff00000 	.word	0x3ff00000

0800c19c <__d2b>:
 800c19c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1a0:	460e      	mov	r6, r1
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	ec59 8b10 	vmov	r8, r9, d0
 800c1a8:	4615      	mov	r5, r2
 800c1aa:	f7ff fce0 	bl	800bb6e <_Balloc>
 800c1ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c1b2:	4607      	mov	r7, r0
 800c1b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1b8:	bb34      	cbnz	r4, 800c208 <__d2b+0x6c>
 800c1ba:	9301      	str	r3, [sp, #4]
 800c1bc:	f1b8 0300 	subs.w	r3, r8, #0
 800c1c0:	d027      	beq.n	800c212 <__d2b+0x76>
 800c1c2:	a802      	add	r0, sp, #8
 800c1c4:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c1c8:	f7ff fd97 	bl	800bcfa <__lo0bits>
 800c1cc:	9900      	ldr	r1, [sp, #0]
 800c1ce:	b1f0      	cbz	r0, 800c20e <__d2b+0x72>
 800c1d0:	9a01      	ldr	r2, [sp, #4]
 800c1d2:	f1c0 0320 	rsb	r3, r0, #32
 800c1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1da:	430b      	orrs	r3, r1
 800c1dc:	40c2      	lsrs	r2, r0
 800c1de:	617b      	str	r3, [r7, #20]
 800c1e0:	9201      	str	r2, [sp, #4]
 800c1e2:	9b01      	ldr	r3, [sp, #4]
 800c1e4:	61bb      	str	r3, [r7, #24]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	bf14      	ite	ne
 800c1ea:	2102      	movne	r1, #2
 800c1ec:	2101      	moveq	r1, #1
 800c1ee:	6139      	str	r1, [r7, #16]
 800c1f0:	b1c4      	cbz	r4, 800c224 <__d2b+0x88>
 800c1f2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c1f6:	4404      	add	r4, r0
 800c1f8:	6034      	str	r4, [r6, #0]
 800c1fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c1fe:	6028      	str	r0, [r5, #0]
 800c200:	4638      	mov	r0, r7
 800c202:	b003      	add	sp, #12
 800c204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c208:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c20c:	e7d5      	b.n	800c1ba <__d2b+0x1e>
 800c20e:	6179      	str	r1, [r7, #20]
 800c210:	e7e7      	b.n	800c1e2 <__d2b+0x46>
 800c212:	a801      	add	r0, sp, #4
 800c214:	f7ff fd71 	bl	800bcfa <__lo0bits>
 800c218:	9b01      	ldr	r3, [sp, #4]
 800c21a:	617b      	str	r3, [r7, #20]
 800c21c:	2101      	movs	r1, #1
 800c21e:	6139      	str	r1, [r7, #16]
 800c220:	3020      	adds	r0, #32
 800c222:	e7e5      	b.n	800c1f0 <__d2b+0x54>
 800c224:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c228:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c22c:	6030      	str	r0, [r6, #0]
 800c22e:	6918      	ldr	r0, [r3, #16]
 800c230:	f7ff fd44 	bl	800bcbc <__hi0bits>
 800c234:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c238:	e7e1      	b.n	800c1fe <__d2b+0x62>

0800c23a <__ratio>:
 800c23a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23e:	4688      	mov	r8, r1
 800c240:	4669      	mov	r1, sp
 800c242:	4681      	mov	r9, r0
 800c244:	f7ff ff5c 	bl	800c100 <__b2d>
 800c248:	a901      	add	r1, sp, #4
 800c24a:	4640      	mov	r0, r8
 800c24c:	ec57 6b10 	vmov	r6, r7, d0
 800c250:	f7ff ff56 	bl	800c100 <__b2d>
 800c254:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c258:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c25c:	eba3 0c02 	sub.w	ip, r3, r2
 800c260:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c264:	1a9b      	subs	r3, r3, r2
 800c266:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c26a:	ec5b ab10 	vmov	sl, fp, d0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	bfce      	itee	gt
 800c272:	463a      	movgt	r2, r7
 800c274:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c278:	465a      	movle	r2, fp
 800c27a:	4659      	mov	r1, fp
 800c27c:	463d      	mov	r5, r7
 800c27e:	bfd4      	ite	le
 800c280:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800c284:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800c288:	4630      	mov	r0, r6
 800c28a:	ee10 2a10 	vmov	r2, s0
 800c28e:	460b      	mov	r3, r1
 800c290:	4629      	mov	r1, r5
 800c292:	f7f4 fadb 	bl	800084c <__aeabi_ddiv>
 800c296:	ec41 0b10 	vmov	d0, r0, r1
 800c29a:	b003      	add	sp, #12
 800c29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2a0 <__copybits>:
 800c2a0:	3901      	subs	r1, #1
 800c2a2:	b510      	push	{r4, lr}
 800c2a4:	1149      	asrs	r1, r1, #5
 800c2a6:	6914      	ldr	r4, [r2, #16]
 800c2a8:	3101      	adds	r1, #1
 800c2aa:	f102 0314 	add.w	r3, r2, #20
 800c2ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c2b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c2b6:	42a3      	cmp	r3, r4
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	d303      	bcc.n	800c2c4 <__copybits+0x24>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	428a      	cmp	r2, r1
 800c2c0:	d305      	bcc.n	800c2ce <__copybits+0x2e>
 800c2c2:	bd10      	pop	{r4, pc}
 800c2c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2c8:	f840 2b04 	str.w	r2, [r0], #4
 800c2cc:	e7f3      	b.n	800c2b6 <__copybits+0x16>
 800c2ce:	f842 3b04 	str.w	r3, [r2], #4
 800c2d2:	e7f4      	b.n	800c2be <__copybits+0x1e>

0800c2d4 <__any_on>:
 800c2d4:	f100 0214 	add.w	r2, r0, #20
 800c2d8:	6900      	ldr	r0, [r0, #16]
 800c2da:	114b      	asrs	r3, r1, #5
 800c2dc:	4298      	cmp	r0, r3
 800c2de:	b510      	push	{r4, lr}
 800c2e0:	db11      	blt.n	800c306 <__any_on+0x32>
 800c2e2:	dd0a      	ble.n	800c2fa <__any_on+0x26>
 800c2e4:	f011 011f 	ands.w	r1, r1, #31
 800c2e8:	d007      	beq.n	800c2fa <__any_on+0x26>
 800c2ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c2ee:	fa24 f001 	lsr.w	r0, r4, r1
 800c2f2:	fa00 f101 	lsl.w	r1, r0, r1
 800c2f6:	428c      	cmp	r4, r1
 800c2f8:	d10b      	bne.n	800c312 <__any_on+0x3e>
 800c2fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d803      	bhi.n	800c30a <__any_on+0x36>
 800c302:	2000      	movs	r0, #0
 800c304:	bd10      	pop	{r4, pc}
 800c306:	4603      	mov	r3, r0
 800c308:	e7f7      	b.n	800c2fa <__any_on+0x26>
 800c30a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c30e:	2900      	cmp	r1, #0
 800c310:	d0f5      	beq.n	800c2fe <__any_on+0x2a>
 800c312:	2001      	movs	r0, #1
 800c314:	e7f6      	b.n	800c304 <__any_on+0x30>
	...

0800c318 <frexp>:
 800c318:	b570      	push	{r4, r5, r6, lr}
 800c31a:	2100      	movs	r1, #0
 800c31c:	ec55 4b10 	vmov	r4, r5, d0
 800c320:	6001      	str	r1, [r0, #0]
 800c322:	4916      	ldr	r1, [pc, #88]	; (800c37c <frexp+0x64>)
 800c324:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c328:	428b      	cmp	r3, r1
 800c32a:	4606      	mov	r6, r0
 800c32c:	462a      	mov	r2, r5
 800c32e:	dc22      	bgt.n	800c376 <frexp+0x5e>
 800c330:	ee10 1a10 	vmov	r1, s0
 800c334:	4319      	orrs	r1, r3
 800c336:	d01e      	beq.n	800c376 <frexp+0x5e>
 800c338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c33c:	da0d      	bge.n	800c35a <frexp+0x42>
 800c33e:	2200      	movs	r2, #0
 800c340:	4b0f      	ldr	r3, [pc, #60]	; (800c380 <frexp+0x68>)
 800c342:	ee10 0a10 	vmov	r0, s0
 800c346:	4629      	mov	r1, r5
 800c348:	f7f4 f956 	bl	80005f8 <__aeabi_dmul>
 800c34c:	460a      	mov	r2, r1
 800c34e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c352:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800c356:	4604      	mov	r4, r0
 800c358:	6031      	str	r1, [r6, #0]
 800c35a:	6831      	ldr	r1, [r6, #0]
 800c35c:	151b      	asrs	r3, r3, #20
 800c35e:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c362:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c366:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800c36a:	440b      	add	r3, r1
 800c36c:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c370:	6033      	str	r3, [r6, #0]
 800c372:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800c376:	ec45 4b10 	vmov	d0, r4, r5
 800c37a:	bd70      	pop	{r4, r5, r6, pc}
 800c37c:	7fefffff 	.word	0x7fefffff
 800c380:	43500000 	.word	0x43500000

0800c384 <strncmp>:
 800c384:	b510      	push	{r4, lr}
 800c386:	b16a      	cbz	r2, 800c3a4 <strncmp+0x20>
 800c388:	3901      	subs	r1, #1
 800c38a:	1884      	adds	r4, r0, r2
 800c38c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c390:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c394:	4293      	cmp	r3, r2
 800c396:	d103      	bne.n	800c3a0 <strncmp+0x1c>
 800c398:	42a0      	cmp	r0, r4
 800c39a:	d001      	beq.n	800c3a0 <strncmp+0x1c>
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1f5      	bne.n	800c38c <strncmp+0x8>
 800c3a0:	1a98      	subs	r0, r3, r2
 800c3a2:	bd10      	pop	{r4, pc}
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	e7fc      	b.n	800c3a2 <strncmp+0x1e>

0800c3a8 <strncpy>:
 800c3a8:	b570      	push	{r4, r5, r6, lr}
 800c3aa:	3901      	subs	r1, #1
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	b902      	cbnz	r2, 800c3b2 <strncpy+0xa>
 800c3b0:	bd70      	pop	{r4, r5, r6, pc}
 800c3b2:	4623      	mov	r3, r4
 800c3b4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800c3b8:	f803 5b01 	strb.w	r5, [r3], #1
 800c3bc:	1e56      	subs	r6, r2, #1
 800c3be:	b92d      	cbnz	r5, 800c3cc <strncpy+0x24>
 800c3c0:	4414      	add	r4, r2
 800c3c2:	42a3      	cmp	r3, r4
 800c3c4:	d0f4      	beq.n	800c3b0 <strncpy+0x8>
 800c3c6:	f803 5b01 	strb.w	r5, [r3], #1
 800c3ca:	e7fa      	b.n	800c3c2 <strncpy+0x1a>
 800c3cc:	461c      	mov	r4, r3
 800c3ce:	4632      	mov	r2, r6
 800c3d0:	e7ed      	b.n	800c3ae <strncpy+0x6>

0800c3d2 <__ssprint_r>:
 800c3d2:	6893      	ldr	r3, [r2, #8]
 800c3d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d8:	4681      	mov	r9, r0
 800c3da:	460c      	mov	r4, r1
 800c3dc:	4616      	mov	r6, r2
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d05e      	beq.n	800c4a0 <__ssprint_r+0xce>
 800c3e2:	f04f 0b00 	mov.w	fp, #0
 800c3e6:	f8d2 a000 	ldr.w	sl, [r2]
 800c3ea:	465f      	mov	r7, fp
 800c3ec:	b357      	cbz	r7, 800c444 <__ssprint_r+0x72>
 800c3ee:	68a3      	ldr	r3, [r4, #8]
 800c3f0:	429f      	cmp	r7, r3
 800c3f2:	d340      	bcc.n	800c476 <__ssprint_r+0xa4>
 800c3f4:	89a2      	ldrh	r2, [r4, #12]
 800c3f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3fa:	d03c      	beq.n	800c476 <__ssprint_r+0xa4>
 800c3fc:	6825      	ldr	r5, [r4, #0]
 800c3fe:	6921      	ldr	r1, [r4, #16]
 800c400:	eba5 0801 	sub.w	r8, r5, r1
 800c404:	6965      	ldr	r5, [r4, #20]
 800c406:	2302      	movs	r3, #2
 800c408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c40c:	fb95 f5f3 	sdiv	r5, r5, r3
 800c410:	f108 0301 	add.w	r3, r8, #1
 800c414:	443b      	add	r3, r7
 800c416:	429d      	cmp	r5, r3
 800c418:	bf38      	it	cc
 800c41a:	461d      	movcc	r5, r3
 800c41c:	0553      	lsls	r3, r2, #21
 800c41e:	d544      	bpl.n	800c4aa <__ssprint_r+0xd8>
 800c420:	4629      	mov	r1, r5
 800c422:	4648      	mov	r0, r9
 800c424:	f7fb fd7c 	bl	8007f20 <_malloc_r>
 800c428:	b988      	cbnz	r0, 800c44e <__ssprint_r+0x7c>
 800c42a:	230c      	movs	r3, #12
 800c42c:	f8c9 3000 	str.w	r3, [r9]
 800c430:	89a3      	ldrh	r3, [r4, #12]
 800c432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c436:	81a3      	strh	r3, [r4, #12]
 800c438:	2300      	movs	r3, #0
 800c43a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c43e:	f04f 30ff 	mov.w	r0, #4294967295
 800c442:	e02f      	b.n	800c4a4 <__ssprint_r+0xd2>
 800c444:	e9da b700 	ldrd	fp, r7, [sl]
 800c448:	f10a 0a08 	add.w	sl, sl, #8
 800c44c:	e7ce      	b.n	800c3ec <__ssprint_r+0x1a>
 800c44e:	4642      	mov	r2, r8
 800c450:	6921      	ldr	r1, [r4, #16]
 800c452:	9001      	str	r0, [sp, #4]
 800c454:	f7ff fb80 	bl	800bb58 <memcpy>
 800c458:	89a2      	ldrh	r2, [r4, #12]
 800c45a:	9b01      	ldr	r3, [sp, #4]
 800c45c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c460:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c464:	81a2      	strh	r2, [r4, #12]
 800c466:	6123      	str	r3, [r4, #16]
 800c468:	6165      	str	r5, [r4, #20]
 800c46a:	4443      	add	r3, r8
 800c46c:	eba5 0508 	sub.w	r5, r5, r8
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	60a5      	str	r5, [r4, #8]
 800c474:	463b      	mov	r3, r7
 800c476:	42bb      	cmp	r3, r7
 800c478:	bf28      	it	cs
 800c47a:	463b      	movcs	r3, r7
 800c47c:	461a      	mov	r2, r3
 800c47e:	4659      	mov	r1, fp
 800c480:	6820      	ldr	r0, [r4, #0]
 800c482:	9301      	str	r3, [sp, #4]
 800c484:	f000 f8ad 	bl	800c5e2 <memmove>
 800c488:	68a2      	ldr	r2, [r4, #8]
 800c48a:	9b01      	ldr	r3, [sp, #4]
 800c48c:	1ad2      	subs	r2, r2, r3
 800c48e:	60a2      	str	r2, [r4, #8]
 800c490:	6822      	ldr	r2, [r4, #0]
 800c492:	4413      	add	r3, r2
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	68b3      	ldr	r3, [r6, #8]
 800c498:	1bdf      	subs	r7, r3, r7
 800c49a:	60b7      	str	r7, [r6, #8]
 800c49c:	2f00      	cmp	r7, #0
 800c49e:	d1d1      	bne.n	800c444 <__ssprint_r+0x72>
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	6070      	str	r0, [r6, #4]
 800c4a4:	b003      	add	sp, #12
 800c4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4aa:	462a      	mov	r2, r5
 800c4ac:	4648      	mov	r0, r9
 800c4ae:	f000 f8b1 	bl	800c614 <_realloc_r>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d1d6      	bne.n	800c466 <__ssprint_r+0x94>
 800c4b8:	6921      	ldr	r1, [r4, #16]
 800c4ba:	4648      	mov	r0, r9
 800c4bc:	f7fe ff42 	bl	800b344 <_free_r>
 800c4c0:	e7b3      	b.n	800c42a <__ssprint_r+0x58>

0800c4c2 <__ascii_wctomb>:
 800c4c2:	b149      	cbz	r1, 800c4d8 <__ascii_wctomb+0x16>
 800c4c4:	2aff      	cmp	r2, #255	; 0xff
 800c4c6:	bf85      	ittet	hi
 800c4c8:	238a      	movhi	r3, #138	; 0x8a
 800c4ca:	6003      	strhi	r3, [r0, #0]
 800c4cc:	700a      	strbls	r2, [r1, #0]
 800c4ce:	f04f 30ff 	movhi.w	r0, #4294967295
 800c4d2:	bf98      	it	ls
 800c4d4:	2001      	movls	r0, #1
 800c4d6:	4770      	bx	lr
 800c4d8:	4608      	mov	r0, r1
 800c4da:	4770      	bx	lr

0800c4dc <__register_exitproc>:
 800c4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4e0:	4c26      	ldr	r4, [pc, #152]	; (800c57c <__register_exitproc+0xa0>)
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	6820      	ldr	r0, [r4, #0]
 800c4e6:	4698      	mov	r8, r3
 800c4e8:	460f      	mov	r7, r1
 800c4ea:	4691      	mov	r9, r2
 800c4ec:	f7ff fb20 	bl	800bb30 <__retarget_lock_acquire_recursive>
 800c4f0:	4b23      	ldr	r3, [pc, #140]	; (800c580 <__register_exitproc+0xa4>)
 800c4f2:	681d      	ldr	r5, [r3, #0]
 800c4f4:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800c4f8:	b918      	cbnz	r0, 800c502 <__register_exitproc+0x26>
 800c4fa:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800c4fe:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800c502:	6843      	ldr	r3, [r0, #4]
 800c504:	2b1f      	cmp	r3, #31
 800c506:	dd19      	ble.n	800c53c <__register_exitproc+0x60>
 800c508:	4b1e      	ldr	r3, [pc, #120]	; (800c584 <__register_exitproc+0xa8>)
 800c50a:	b933      	cbnz	r3, 800c51a <__register_exitproc+0x3e>
 800c50c:	6820      	ldr	r0, [r4, #0]
 800c50e:	f7ff fb10 	bl	800bb32 <__retarget_lock_release_recursive>
 800c512:	f04f 30ff 	mov.w	r0, #4294967295
 800c516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c51a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c51e:	f7fb fcf7 	bl	8007f10 <malloc>
 800c522:	2800      	cmp	r0, #0
 800c524:	d0f2      	beq.n	800c50c <__register_exitproc+0x30>
 800c526:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800c52a:	6003      	str	r3, [r0, #0]
 800c52c:	2200      	movs	r2, #0
 800c52e:	6042      	str	r2, [r0, #4]
 800c530:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800c534:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800c538:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800c53c:	6843      	ldr	r3, [r0, #4]
 800c53e:	b19e      	cbz	r6, 800c568 <__register_exitproc+0x8c>
 800c540:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800c544:	2201      	movs	r2, #1
 800c546:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800c54a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800c54e:	409a      	lsls	r2, r3
 800c550:	4311      	orrs	r1, r2
 800c552:	2e02      	cmp	r6, #2
 800c554:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800c558:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800c55c:	bf02      	ittt	eq
 800c55e:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800c562:	430a      	orreq	r2, r1
 800c564:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800c568:	1c5a      	adds	r2, r3, #1
 800c56a:	3302      	adds	r3, #2
 800c56c:	6042      	str	r2, [r0, #4]
 800c56e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800c572:	6820      	ldr	r0, [r4, #0]
 800c574:	f7ff fadd 	bl	800bb32 <__retarget_lock_release_recursive>
 800c578:	2000      	movs	r0, #0
 800c57a:	e7cc      	b.n	800c516 <__register_exitproc+0x3a>
 800c57c:	20000850 	.word	0x20000850
 800c580:	0800f31c 	.word	0x0800f31c
 800c584:	08007f11 	.word	0x08007f11

0800c588 <_calloc_r>:
 800c588:	b510      	push	{r4, lr}
 800c58a:	4351      	muls	r1, r2
 800c58c:	f7fb fcc8 	bl	8007f20 <_malloc_r>
 800c590:	4604      	mov	r4, r0
 800c592:	b198      	cbz	r0, 800c5bc <_calloc_r+0x34>
 800c594:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c598:	f022 0203 	bic.w	r2, r2, #3
 800c59c:	3a04      	subs	r2, #4
 800c59e:	2a24      	cmp	r2, #36	; 0x24
 800c5a0:	d81b      	bhi.n	800c5da <_calloc_r+0x52>
 800c5a2:	2a13      	cmp	r2, #19
 800c5a4:	d917      	bls.n	800c5d6 <_calloc_r+0x4e>
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	2a1b      	cmp	r2, #27
 800c5aa:	e9c0 1100 	strd	r1, r1, [r0]
 800c5ae:	d807      	bhi.n	800c5c0 <_calloc_r+0x38>
 800c5b0:	f100 0308 	add.w	r3, r0, #8
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	e9c3 2200 	strd	r2, r2, [r3]
 800c5ba:	609a      	str	r2, [r3, #8]
 800c5bc:	4620      	mov	r0, r4
 800c5be:	bd10      	pop	{r4, pc}
 800c5c0:	2a24      	cmp	r2, #36	; 0x24
 800c5c2:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800c5c6:	bf11      	iteee	ne
 800c5c8:	f100 0310 	addne.w	r3, r0, #16
 800c5cc:	6101      	streq	r1, [r0, #16]
 800c5ce:	f100 0318 	addeq.w	r3, r0, #24
 800c5d2:	6141      	streq	r1, [r0, #20]
 800c5d4:	e7ee      	b.n	800c5b4 <_calloc_r+0x2c>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	e7ec      	b.n	800c5b4 <_calloc_r+0x2c>
 800c5da:	2100      	movs	r1, #0
 800c5dc:	f7fb fed6 	bl	800838c <memset>
 800c5e0:	e7ec      	b.n	800c5bc <_calloc_r+0x34>

0800c5e2 <memmove>:
 800c5e2:	4288      	cmp	r0, r1
 800c5e4:	b510      	push	{r4, lr}
 800c5e6:	eb01 0302 	add.w	r3, r1, r2
 800c5ea:	d807      	bhi.n	800c5fc <memmove+0x1a>
 800c5ec:	1e42      	subs	r2, r0, #1
 800c5ee:	4299      	cmp	r1, r3
 800c5f0:	d00a      	beq.n	800c608 <memmove+0x26>
 800c5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c5fa:	e7f8      	b.n	800c5ee <memmove+0xc>
 800c5fc:	4283      	cmp	r3, r0
 800c5fe:	d9f5      	bls.n	800c5ec <memmove+0xa>
 800c600:	1881      	adds	r1, r0, r2
 800c602:	1ad2      	subs	r2, r2, r3
 800c604:	42d3      	cmn	r3, r2
 800c606:	d100      	bne.n	800c60a <memmove+0x28>
 800c608:	bd10      	pop	{r4, pc}
 800c60a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c60e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c612:	e7f7      	b.n	800c604 <memmove+0x22>

0800c614 <_realloc_r>:
 800c614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c618:	4682      	mov	sl, r0
 800c61a:	460c      	mov	r4, r1
 800c61c:	b929      	cbnz	r1, 800c62a <_realloc_r+0x16>
 800c61e:	4611      	mov	r1, r2
 800c620:	b003      	add	sp, #12
 800c622:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c626:	f7fb bc7b 	b.w	8007f20 <_malloc_r>
 800c62a:	9201      	str	r2, [sp, #4]
 800c62c:	f7fb feb6 	bl	800839c <__malloc_lock>
 800c630:	9a01      	ldr	r2, [sp, #4]
 800c632:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800c636:	f102 080b 	add.w	r8, r2, #11
 800c63a:	f1b8 0f16 	cmp.w	r8, #22
 800c63e:	f1a4 0908 	sub.w	r9, r4, #8
 800c642:	f025 0603 	bic.w	r6, r5, #3
 800c646:	d90b      	bls.n	800c660 <_realloc_r+0x4c>
 800c648:	f038 0807 	bics.w	r8, r8, #7
 800c64c:	d50a      	bpl.n	800c664 <_realloc_r+0x50>
 800c64e:	230c      	movs	r3, #12
 800c650:	f8ca 3000 	str.w	r3, [sl]
 800c654:	f04f 0b00 	mov.w	fp, #0
 800c658:	4658      	mov	r0, fp
 800c65a:	b003      	add	sp, #12
 800c65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c660:	f04f 0810 	mov.w	r8, #16
 800c664:	4590      	cmp	r8, r2
 800c666:	d3f2      	bcc.n	800c64e <_realloc_r+0x3a>
 800c668:	45b0      	cmp	r8, r6
 800c66a:	f340 8170 	ble.w	800c94e <_realloc_r+0x33a>
 800c66e:	49a9      	ldr	r1, [pc, #676]	; (800c914 <_realloc_r+0x300>)
 800c670:	9101      	str	r1, [sp, #4]
 800c672:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800c676:	eb09 0306 	add.w	r3, r9, r6
 800c67a:	459c      	cmp	ip, r3
 800c67c:	6858      	ldr	r0, [r3, #4]
 800c67e:	d005      	beq.n	800c68c <_realloc_r+0x78>
 800c680:	f020 0101 	bic.w	r1, r0, #1
 800c684:	4419      	add	r1, r3
 800c686:	6849      	ldr	r1, [r1, #4]
 800c688:	07cf      	lsls	r7, r1, #31
 800c68a:	d447      	bmi.n	800c71c <_realloc_r+0x108>
 800c68c:	f020 0003 	bic.w	r0, r0, #3
 800c690:	459c      	cmp	ip, r3
 800c692:	eb06 0700 	add.w	r7, r6, r0
 800c696:	d119      	bne.n	800c6cc <_realloc_r+0xb8>
 800c698:	f108 0110 	add.w	r1, r8, #16
 800c69c:	42b9      	cmp	r1, r7
 800c69e:	dc3f      	bgt.n	800c720 <_realloc_r+0x10c>
 800c6a0:	eb09 0308 	add.w	r3, r9, r8
 800c6a4:	9a01      	ldr	r2, [sp, #4]
 800c6a6:	eba7 0708 	sub.w	r7, r7, r8
 800c6aa:	f047 0701 	orr.w	r7, r7, #1
 800c6ae:	6093      	str	r3, [r2, #8]
 800c6b0:	605f      	str	r7, [r3, #4]
 800c6b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c6b6:	f003 0301 	and.w	r3, r3, #1
 800c6ba:	ea43 0308 	orr.w	r3, r3, r8
 800c6be:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6c2:	4650      	mov	r0, sl
 800c6c4:	f7fb fe70 	bl	80083a8 <__malloc_unlock>
 800c6c8:	46a3      	mov	fp, r4
 800c6ca:	e7c5      	b.n	800c658 <_realloc_r+0x44>
 800c6cc:	45b8      	cmp	r8, r7
 800c6ce:	dc27      	bgt.n	800c720 <_realloc_r+0x10c>
 800c6d0:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800c6d4:	60da      	str	r2, [r3, #12]
 800c6d6:	6093      	str	r3, [r2, #8]
 800c6d8:	eba7 0008 	sub.w	r0, r7, r8
 800c6dc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c6e0:	280f      	cmp	r0, #15
 800c6e2:	f002 0201 	and.w	r2, r2, #1
 800c6e6:	eb09 0307 	add.w	r3, r9, r7
 800c6ea:	f240 8132 	bls.w	800c952 <_realloc_r+0x33e>
 800c6ee:	eb09 0108 	add.w	r1, r9, r8
 800c6f2:	ea48 0202 	orr.w	r2, r8, r2
 800c6f6:	f040 0001 	orr.w	r0, r0, #1
 800c6fa:	f8c9 2004 	str.w	r2, [r9, #4]
 800c6fe:	6048      	str	r0, [r1, #4]
 800c700:	685a      	ldr	r2, [r3, #4]
 800c702:	f042 0201 	orr.w	r2, r2, #1
 800c706:	605a      	str	r2, [r3, #4]
 800c708:	3108      	adds	r1, #8
 800c70a:	4650      	mov	r0, sl
 800c70c:	f7fe fe1a 	bl	800b344 <_free_r>
 800c710:	4650      	mov	r0, sl
 800c712:	f7fb fe49 	bl	80083a8 <__malloc_unlock>
 800c716:	f109 0b08 	add.w	fp, r9, #8
 800c71a:	e79d      	b.n	800c658 <_realloc_r+0x44>
 800c71c:	2000      	movs	r0, #0
 800c71e:	4603      	mov	r3, r0
 800c720:	07e9      	lsls	r1, r5, #31
 800c722:	f100 80c6 	bmi.w	800c8b2 <_realloc_r+0x29e>
 800c726:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800c72a:	eba9 0505 	sub.w	r5, r9, r5
 800c72e:	6869      	ldr	r1, [r5, #4]
 800c730:	f021 0103 	bic.w	r1, r1, #3
 800c734:	eb01 0b06 	add.w	fp, r1, r6
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f000 8086 	beq.w	800c84a <_realloc_r+0x236>
 800c73e:	459c      	cmp	ip, r3
 800c740:	eb00 070b 	add.w	r7, r0, fp
 800c744:	d149      	bne.n	800c7da <_realloc_r+0x1c6>
 800c746:	f108 0310 	add.w	r3, r8, #16
 800c74a:	42bb      	cmp	r3, r7
 800c74c:	dc7d      	bgt.n	800c84a <_realloc_r+0x236>
 800c74e:	46ab      	mov	fp, r5
 800c750:	68eb      	ldr	r3, [r5, #12]
 800c752:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800c756:	60d3      	str	r3, [r2, #12]
 800c758:	609a      	str	r2, [r3, #8]
 800c75a:	1f32      	subs	r2, r6, #4
 800c75c:	2a24      	cmp	r2, #36	; 0x24
 800c75e:	d837      	bhi.n	800c7d0 <_realloc_r+0x1bc>
 800c760:	2a13      	cmp	r2, #19
 800c762:	d933      	bls.n	800c7cc <_realloc_r+0x1b8>
 800c764:	6823      	ldr	r3, [r4, #0]
 800c766:	60ab      	str	r3, [r5, #8]
 800c768:	6863      	ldr	r3, [r4, #4]
 800c76a:	60eb      	str	r3, [r5, #12]
 800c76c:	2a1b      	cmp	r2, #27
 800c76e:	d81b      	bhi.n	800c7a8 <_realloc_r+0x194>
 800c770:	3408      	adds	r4, #8
 800c772:	f105 0310 	add.w	r3, r5, #16
 800c776:	6822      	ldr	r2, [r4, #0]
 800c778:	601a      	str	r2, [r3, #0]
 800c77a:	6862      	ldr	r2, [r4, #4]
 800c77c:	605a      	str	r2, [r3, #4]
 800c77e:	68a2      	ldr	r2, [r4, #8]
 800c780:	609a      	str	r2, [r3, #8]
 800c782:	eb05 0308 	add.w	r3, r5, r8
 800c786:	9a01      	ldr	r2, [sp, #4]
 800c788:	eba7 0708 	sub.w	r7, r7, r8
 800c78c:	f047 0701 	orr.w	r7, r7, #1
 800c790:	6093      	str	r3, [r2, #8]
 800c792:	605f      	str	r7, [r3, #4]
 800c794:	686b      	ldr	r3, [r5, #4]
 800c796:	f003 0301 	and.w	r3, r3, #1
 800c79a:	ea43 0308 	orr.w	r3, r3, r8
 800c79e:	606b      	str	r3, [r5, #4]
 800c7a0:	4650      	mov	r0, sl
 800c7a2:	f7fb fe01 	bl	80083a8 <__malloc_unlock>
 800c7a6:	e757      	b.n	800c658 <_realloc_r+0x44>
 800c7a8:	68a3      	ldr	r3, [r4, #8]
 800c7aa:	612b      	str	r3, [r5, #16]
 800c7ac:	68e3      	ldr	r3, [r4, #12]
 800c7ae:	616b      	str	r3, [r5, #20]
 800c7b0:	2a24      	cmp	r2, #36	; 0x24
 800c7b2:	bf01      	itttt	eq
 800c7b4:	6923      	ldreq	r3, [r4, #16]
 800c7b6:	61ab      	streq	r3, [r5, #24]
 800c7b8:	6962      	ldreq	r2, [r4, #20]
 800c7ba:	61ea      	streq	r2, [r5, #28]
 800c7bc:	bf19      	ittee	ne
 800c7be:	3410      	addne	r4, #16
 800c7c0:	f105 0318 	addne.w	r3, r5, #24
 800c7c4:	f105 0320 	addeq.w	r3, r5, #32
 800c7c8:	3418      	addeq	r4, #24
 800c7ca:	e7d4      	b.n	800c776 <_realloc_r+0x162>
 800c7cc:	465b      	mov	r3, fp
 800c7ce:	e7d2      	b.n	800c776 <_realloc_r+0x162>
 800c7d0:	4621      	mov	r1, r4
 800c7d2:	4658      	mov	r0, fp
 800c7d4:	f7ff ff05 	bl	800c5e2 <memmove>
 800c7d8:	e7d3      	b.n	800c782 <_realloc_r+0x16e>
 800c7da:	45b8      	cmp	r8, r7
 800c7dc:	dc35      	bgt.n	800c84a <_realloc_r+0x236>
 800c7de:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	60da      	str	r2, [r3, #12]
 800c7e6:	6093      	str	r3, [r2, #8]
 800c7e8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c7ec:	68eb      	ldr	r3, [r5, #12]
 800c7ee:	60d3      	str	r3, [r2, #12]
 800c7f0:	609a      	str	r2, [r3, #8]
 800c7f2:	1f32      	subs	r2, r6, #4
 800c7f4:	2a24      	cmp	r2, #36	; 0x24
 800c7f6:	d824      	bhi.n	800c842 <_realloc_r+0x22e>
 800c7f8:	2a13      	cmp	r2, #19
 800c7fa:	d908      	bls.n	800c80e <_realloc_r+0x1fa>
 800c7fc:	6823      	ldr	r3, [r4, #0]
 800c7fe:	60ab      	str	r3, [r5, #8]
 800c800:	6863      	ldr	r3, [r4, #4]
 800c802:	60eb      	str	r3, [r5, #12]
 800c804:	2a1b      	cmp	r2, #27
 800c806:	d80a      	bhi.n	800c81e <_realloc_r+0x20a>
 800c808:	3408      	adds	r4, #8
 800c80a:	f105 0010 	add.w	r0, r5, #16
 800c80e:	6823      	ldr	r3, [r4, #0]
 800c810:	6003      	str	r3, [r0, #0]
 800c812:	6863      	ldr	r3, [r4, #4]
 800c814:	6043      	str	r3, [r0, #4]
 800c816:	68a3      	ldr	r3, [r4, #8]
 800c818:	6083      	str	r3, [r0, #8]
 800c81a:	46a9      	mov	r9, r5
 800c81c:	e75c      	b.n	800c6d8 <_realloc_r+0xc4>
 800c81e:	68a3      	ldr	r3, [r4, #8]
 800c820:	612b      	str	r3, [r5, #16]
 800c822:	68e3      	ldr	r3, [r4, #12]
 800c824:	616b      	str	r3, [r5, #20]
 800c826:	2a24      	cmp	r2, #36	; 0x24
 800c828:	bf01      	itttt	eq
 800c82a:	6923      	ldreq	r3, [r4, #16]
 800c82c:	61ab      	streq	r3, [r5, #24]
 800c82e:	6963      	ldreq	r3, [r4, #20]
 800c830:	61eb      	streq	r3, [r5, #28]
 800c832:	bf19      	ittee	ne
 800c834:	3410      	addne	r4, #16
 800c836:	f105 0018 	addne.w	r0, r5, #24
 800c83a:	f105 0020 	addeq.w	r0, r5, #32
 800c83e:	3418      	addeq	r4, #24
 800c840:	e7e5      	b.n	800c80e <_realloc_r+0x1fa>
 800c842:	4621      	mov	r1, r4
 800c844:	f7ff fecd 	bl	800c5e2 <memmove>
 800c848:	e7e7      	b.n	800c81a <_realloc_r+0x206>
 800c84a:	45d8      	cmp	r8, fp
 800c84c:	dc31      	bgt.n	800c8b2 <_realloc_r+0x29e>
 800c84e:	4628      	mov	r0, r5
 800c850:	68eb      	ldr	r3, [r5, #12]
 800c852:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c856:	60d3      	str	r3, [r2, #12]
 800c858:	609a      	str	r2, [r3, #8]
 800c85a:	1f32      	subs	r2, r6, #4
 800c85c:	2a24      	cmp	r2, #36	; 0x24
 800c85e:	d824      	bhi.n	800c8aa <_realloc_r+0x296>
 800c860:	2a13      	cmp	r2, #19
 800c862:	d908      	bls.n	800c876 <_realloc_r+0x262>
 800c864:	6823      	ldr	r3, [r4, #0]
 800c866:	60ab      	str	r3, [r5, #8]
 800c868:	6863      	ldr	r3, [r4, #4]
 800c86a:	60eb      	str	r3, [r5, #12]
 800c86c:	2a1b      	cmp	r2, #27
 800c86e:	d80a      	bhi.n	800c886 <_realloc_r+0x272>
 800c870:	3408      	adds	r4, #8
 800c872:	f105 0010 	add.w	r0, r5, #16
 800c876:	6823      	ldr	r3, [r4, #0]
 800c878:	6003      	str	r3, [r0, #0]
 800c87a:	6863      	ldr	r3, [r4, #4]
 800c87c:	6043      	str	r3, [r0, #4]
 800c87e:	68a3      	ldr	r3, [r4, #8]
 800c880:	6083      	str	r3, [r0, #8]
 800c882:	465f      	mov	r7, fp
 800c884:	e7c9      	b.n	800c81a <_realloc_r+0x206>
 800c886:	68a3      	ldr	r3, [r4, #8]
 800c888:	612b      	str	r3, [r5, #16]
 800c88a:	68e3      	ldr	r3, [r4, #12]
 800c88c:	616b      	str	r3, [r5, #20]
 800c88e:	2a24      	cmp	r2, #36	; 0x24
 800c890:	bf01      	itttt	eq
 800c892:	6923      	ldreq	r3, [r4, #16]
 800c894:	61ab      	streq	r3, [r5, #24]
 800c896:	6963      	ldreq	r3, [r4, #20]
 800c898:	61eb      	streq	r3, [r5, #28]
 800c89a:	bf19      	ittee	ne
 800c89c:	3410      	addne	r4, #16
 800c89e:	f105 0018 	addne.w	r0, r5, #24
 800c8a2:	f105 0020 	addeq.w	r0, r5, #32
 800c8a6:	3418      	addeq	r4, #24
 800c8a8:	e7e5      	b.n	800c876 <_realloc_r+0x262>
 800c8aa:	4621      	mov	r1, r4
 800c8ac:	f7ff fe99 	bl	800c5e2 <memmove>
 800c8b0:	e7e7      	b.n	800c882 <_realloc_r+0x26e>
 800c8b2:	4611      	mov	r1, r2
 800c8b4:	4650      	mov	r0, sl
 800c8b6:	f7fb fb33 	bl	8007f20 <_malloc_r>
 800c8ba:	4683      	mov	fp, r0
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	f43f af6f 	beq.w	800c7a0 <_realloc_r+0x18c>
 800c8c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c8c6:	f023 0301 	bic.w	r3, r3, #1
 800c8ca:	444b      	add	r3, r9
 800c8cc:	f1a0 0208 	sub.w	r2, r0, #8
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d105      	bne.n	800c8e0 <_realloc_r+0x2cc>
 800c8d4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800c8d8:	f027 0703 	bic.w	r7, r7, #3
 800c8dc:	4437      	add	r7, r6
 800c8de:	e6fb      	b.n	800c6d8 <_realloc_r+0xc4>
 800c8e0:	1f32      	subs	r2, r6, #4
 800c8e2:	2a24      	cmp	r2, #36	; 0x24
 800c8e4:	d82f      	bhi.n	800c946 <_realloc_r+0x332>
 800c8e6:	2a13      	cmp	r2, #19
 800c8e8:	d92a      	bls.n	800c940 <_realloc_r+0x32c>
 800c8ea:	6823      	ldr	r3, [r4, #0]
 800c8ec:	6003      	str	r3, [r0, #0]
 800c8ee:	6863      	ldr	r3, [r4, #4]
 800c8f0:	6043      	str	r3, [r0, #4]
 800c8f2:	2a1b      	cmp	r2, #27
 800c8f4:	d810      	bhi.n	800c918 <_realloc_r+0x304>
 800c8f6:	f104 0208 	add.w	r2, r4, #8
 800c8fa:	f100 0308 	add.w	r3, r0, #8
 800c8fe:	6811      	ldr	r1, [r2, #0]
 800c900:	6019      	str	r1, [r3, #0]
 800c902:	6851      	ldr	r1, [r2, #4]
 800c904:	6059      	str	r1, [r3, #4]
 800c906:	6892      	ldr	r2, [r2, #8]
 800c908:	609a      	str	r2, [r3, #8]
 800c90a:	4621      	mov	r1, r4
 800c90c:	4650      	mov	r0, sl
 800c90e:	f7fe fd19 	bl	800b344 <_free_r>
 800c912:	e745      	b.n	800c7a0 <_realloc_r+0x18c>
 800c914:	20000440 	.word	0x20000440
 800c918:	68a3      	ldr	r3, [r4, #8]
 800c91a:	6083      	str	r3, [r0, #8]
 800c91c:	68e3      	ldr	r3, [r4, #12]
 800c91e:	60c3      	str	r3, [r0, #12]
 800c920:	2a24      	cmp	r2, #36	; 0x24
 800c922:	bf01      	itttt	eq
 800c924:	6923      	ldreq	r3, [r4, #16]
 800c926:	6103      	streq	r3, [r0, #16]
 800c928:	6961      	ldreq	r1, [r4, #20]
 800c92a:	6141      	streq	r1, [r0, #20]
 800c92c:	bf19      	ittee	ne
 800c92e:	f104 0210 	addne.w	r2, r4, #16
 800c932:	f100 0310 	addne.w	r3, r0, #16
 800c936:	f104 0218 	addeq.w	r2, r4, #24
 800c93a:	f100 0318 	addeq.w	r3, r0, #24
 800c93e:	e7de      	b.n	800c8fe <_realloc_r+0x2ea>
 800c940:	4603      	mov	r3, r0
 800c942:	4622      	mov	r2, r4
 800c944:	e7db      	b.n	800c8fe <_realloc_r+0x2ea>
 800c946:	4621      	mov	r1, r4
 800c948:	f7ff fe4b 	bl	800c5e2 <memmove>
 800c94c:	e7dd      	b.n	800c90a <_realloc_r+0x2f6>
 800c94e:	4637      	mov	r7, r6
 800c950:	e6c2      	b.n	800c6d8 <_realloc_r+0xc4>
 800c952:	4317      	orrs	r7, r2
 800c954:	f8c9 7004 	str.w	r7, [r9, #4]
 800c958:	685a      	ldr	r2, [r3, #4]
 800c95a:	f042 0201 	orr.w	r2, r2, #1
 800c95e:	605a      	str	r2, [r3, #4]
 800c960:	e6d6      	b.n	800c710 <_realloc_r+0xfc>
 800c962:	bf00      	nop
 800c964:	0000      	movs	r0, r0
	...

0800c968 <cos>:
 800c968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c96a:	ec51 0b10 	vmov	r0, r1, d0
 800c96e:	4a1e      	ldr	r2, [pc, #120]	; (800c9e8 <cos+0x80>)
 800c970:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c974:	4293      	cmp	r3, r2
 800c976:	dc06      	bgt.n	800c986 <cos+0x1e>
 800c978:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800c9e0 <cos+0x78>
 800c97c:	f001 fc54 	bl	800e228 <__kernel_cos>
 800c980:	ec51 0b10 	vmov	r0, r1, d0
 800c984:	e007      	b.n	800c996 <cos+0x2e>
 800c986:	4a19      	ldr	r2, [pc, #100]	; (800c9ec <cos+0x84>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	dd09      	ble.n	800c9a0 <cos+0x38>
 800c98c:	ee10 2a10 	vmov	r2, s0
 800c990:	460b      	mov	r3, r1
 800c992:	f7f3 fc79 	bl	8000288 <__aeabi_dsub>
 800c996:	ec41 0b10 	vmov	d0, r0, r1
 800c99a:	b005      	add	sp, #20
 800c99c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c9a0:	4668      	mov	r0, sp
 800c9a2:	f001 f99d 	bl	800dce0 <__ieee754_rem_pio2>
 800c9a6:	f000 0003 	and.w	r0, r0, #3
 800c9aa:	2801      	cmp	r0, #1
 800c9ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c9b0:	ed9d 0b00 	vldr	d0, [sp]
 800c9b4:	d007      	beq.n	800c9c6 <cos+0x5e>
 800c9b6:	2802      	cmp	r0, #2
 800c9b8:	d00e      	beq.n	800c9d8 <cos+0x70>
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	d0de      	beq.n	800c97c <cos+0x14>
 800c9be:	2001      	movs	r0, #1
 800c9c0:	f002 f83a 	bl	800ea38 <__kernel_sin>
 800c9c4:	e7dc      	b.n	800c980 <cos+0x18>
 800c9c6:	f002 f837 	bl	800ea38 <__kernel_sin>
 800c9ca:	ec53 2b10 	vmov	r2, r3, d0
 800c9ce:	ee10 0a10 	vmov	r0, s0
 800c9d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c9d6:	e7de      	b.n	800c996 <cos+0x2e>
 800c9d8:	f001 fc26 	bl	800e228 <__kernel_cos>
 800c9dc:	e7f5      	b.n	800c9ca <cos+0x62>
 800c9de:	bf00      	nop
	...
 800c9e8:	3fe921fb 	.word	0x3fe921fb
 800c9ec:	7fefffff 	.word	0x7fefffff

0800c9f0 <sin>:
 800c9f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9f2:	ec51 0b10 	vmov	r0, r1, d0
 800c9f6:	4a20      	ldr	r2, [pc, #128]	; (800ca78 <sin+0x88>)
 800c9f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	dc07      	bgt.n	800ca10 <sin+0x20>
 800ca00:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800ca70 <sin+0x80>
 800ca04:	2000      	movs	r0, #0
 800ca06:	f002 f817 	bl	800ea38 <__kernel_sin>
 800ca0a:	ec51 0b10 	vmov	r0, r1, d0
 800ca0e:	e007      	b.n	800ca20 <sin+0x30>
 800ca10:	4a1a      	ldr	r2, [pc, #104]	; (800ca7c <sin+0x8c>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	dd09      	ble.n	800ca2a <sin+0x3a>
 800ca16:	ee10 2a10 	vmov	r2, s0
 800ca1a:	460b      	mov	r3, r1
 800ca1c:	f7f3 fc34 	bl	8000288 <__aeabi_dsub>
 800ca20:	ec41 0b10 	vmov	d0, r0, r1
 800ca24:	b005      	add	sp, #20
 800ca26:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca2a:	4668      	mov	r0, sp
 800ca2c:	f001 f958 	bl	800dce0 <__ieee754_rem_pio2>
 800ca30:	f000 0003 	and.w	r0, r0, #3
 800ca34:	2801      	cmp	r0, #1
 800ca36:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ca3a:	ed9d 0b00 	vldr	d0, [sp]
 800ca3e:	d004      	beq.n	800ca4a <sin+0x5a>
 800ca40:	2802      	cmp	r0, #2
 800ca42:	d005      	beq.n	800ca50 <sin+0x60>
 800ca44:	b970      	cbnz	r0, 800ca64 <sin+0x74>
 800ca46:	2001      	movs	r0, #1
 800ca48:	e7dd      	b.n	800ca06 <sin+0x16>
 800ca4a:	f001 fbed 	bl	800e228 <__kernel_cos>
 800ca4e:	e7dc      	b.n	800ca0a <sin+0x1a>
 800ca50:	2001      	movs	r0, #1
 800ca52:	f001 fff1 	bl	800ea38 <__kernel_sin>
 800ca56:	ec53 2b10 	vmov	r2, r3, d0
 800ca5a:	ee10 0a10 	vmov	r0, s0
 800ca5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ca62:	e7dd      	b.n	800ca20 <sin+0x30>
 800ca64:	f001 fbe0 	bl	800e228 <__kernel_cos>
 800ca68:	e7f5      	b.n	800ca56 <sin+0x66>
 800ca6a:	bf00      	nop
 800ca6c:	f3af 8000 	nop.w
	...
 800ca78:	3fe921fb 	.word	0x3fe921fb
 800ca7c:	7fefffff 	.word	0x7fefffff

0800ca80 <atan2>:
 800ca80:	f000 ba2e 	b.w	800cee0 <__ieee754_atan2>

0800ca84 <fmod>:
 800ca84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca88:	ed2d 8b02 	vpush	{d8}
 800ca8c:	b08b      	sub	sp, #44	; 0x2c
 800ca8e:	ec55 4b10 	vmov	r4, r5, d0
 800ca92:	ec57 6b11 	vmov	r6, r7, d1
 800ca96:	f000 fb01 	bl	800d09c <__ieee754_fmod>
 800ca9a:	4b2a      	ldr	r3, [pc, #168]	; (800cb44 <fmod+0xc0>)
 800ca9c:	eeb0 8a40 	vmov.f32	s16, s0
 800caa0:	eef0 8a60 	vmov.f32	s17, s1
 800caa4:	f993 8000 	ldrsb.w	r8, [r3]
 800caa8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800caac:	d030      	beq.n	800cb10 <fmod+0x8c>
 800caae:	4632      	mov	r2, r6
 800cab0:	463b      	mov	r3, r7
 800cab2:	4630      	mov	r0, r6
 800cab4:	4639      	mov	r1, r7
 800cab6:	f7f4 f839 	bl	8000b2c <__aeabi_dcmpun>
 800caba:	bb48      	cbnz	r0, 800cb10 <fmod+0x8c>
 800cabc:	4622      	mov	r2, r4
 800cabe:	462b      	mov	r3, r5
 800cac0:	4620      	mov	r0, r4
 800cac2:	4629      	mov	r1, r5
 800cac4:	f7f4 f832 	bl	8000b2c <__aeabi_dcmpun>
 800cac8:	4681      	mov	r9, r0
 800caca:	bb08      	cbnz	r0, 800cb10 <fmod+0x8c>
 800cacc:	2200      	movs	r2, #0
 800cace:	2300      	movs	r3, #0
 800cad0:	4630      	mov	r0, r6
 800cad2:	4639      	mov	r1, r7
 800cad4:	f7f3 fff8 	bl	8000ac8 <__aeabi_dcmpeq>
 800cad8:	b1d0      	cbz	r0, 800cb10 <fmod+0x8c>
 800cada:	2301      	movs	r3, #1
 800cadc:	9300      	str	r3, [sp, #0]
 800cade:	4b1a      	ldr	r3, [pc, #104]	; (800cb48 <fmod+0xc4>)
 800cae0:	9301      	str	r3, [sp, #4]
 800cae2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cae6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800caea:	f8cd 9020 	str.w	r9, [sp, #32]
 800caee:	f1b8 0f00 	cmp.w	r8, #0
 800caf2:	d116      	bne.n	800cb22 <fmod+0x9e>
 800caf4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800caf8:	4668      	mov	r0, sp
 800cafa:	f002 fa91 	bl	800f020 <matherr>
 800cafe:	b1d8      	cbz	r0, 800cb38 <fmod+0xb4>
 800cb00:	9b08      	ldr	r3, [sp, #32]
 800cb02:	b11b      	cbz	r3, 800cb0c <fmod+0x88>
 800cb04:	f7fe fbb0 	bl	800b268 <__errno>
 800cb08:	9b08      	ldr	r3, [sp, #32]
 800cb0a:	6003      	str	r3, [r0, #0]
 800cb0c:	ed9d 8b06 	vldr	d8, [sp, #24]
 800cb10:	eeb0 0a48 	vmov.f32	s0, s16
 800cb14:	eef0 0a68 	vmov.f32	s1, s17
 800cb18:	b00b      	add	sp, #44	; 0x2c
 800cb1a:	ecbd 8b02 	vpop	{d8}
 800cb1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb22:	2200      	movs	r2, #0
 800cb24:	2300      	movs	r3, #0
 800cb26:	4610      	mov	r0, r2
 800cb28:	4619      	mov	r1, r3
 800cb2a:	f7f3 fe8f 	bl	800084c <__aeabi_ddiv>
 800cb2e:	f1b8 0f02 	cmp.w	r8, #2
 800cb32:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cb36:	d1df      	bne.n	800caf8 <fmod+0x74>
 800cb38:	f7fe fb96 	bl	800b268 <__errno>
 800cb3c:	2321      	movs	r3, #33	; 0x21
 800cb3e:	6003      	str	r3, [r0, #0]
 800cb40:	e7de      	b.n	800cb00 <fmod+0x7c>
 800cb42:	bf00      	nop
 800cb44:	200009c0 	.word	0x200009c0
 800cb48:	0800f5dd 	.word	0x0800f5dd

0800cb4c <pow>:
 800cb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb50:	ed2d 8b04 	vpush	{d8-d9}
 800cb54:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800ce28 <pow+0x2dc>
 800cb58:	b08d      	sub	sp, #52	; 0x34
 800cb5a:	ec57 6b10 	vmov	r6, r7, d0
 800cb5e:	ec55 4b11 	vmov	r4, r5, d1
 800cb62:	f000 fbad 	bl	800d2c0 <__ieee754_pow>
 800cb66:	f999 3000 	ldrsb.w	r3, [r9]
 800cb6a:	9300      	str	r3, [sp, #0]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	eeb0 8a40 	vmov.f32	s16, s0
 800cb72:	eef0 8a60 	vmov.f32	s17, s1
 800cb76:	46c8      	mov	r8, r9
 800cb78:	d05f      	beq.n	800cc3a <pow+0xee>
 800cb7a:	4622      	mov	r2, r4
 800cb7c:	462b      	mov	r3, r5
 800cb7e:	4620      	mov	r0, r4
 800cb80:	4629      	mov	r1, r5
 800cb82:	f7f3 ffd3 	bl	8000b2c <__aeabi_dcmpun>
 800cb86:	4683      	mov	fp, r0
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	d156      	bne.n	800cc3a <pow+0xee>
 800cb8c:	4632      	mov	r2, r6
 800cb8e:	463b      	mov	r3, r7
 800cb90:	4630      	mov	r0, r6
 800cb92:	4639      	mov	r1, r7
 800cb94:	f7f3 ffca 	bl	8000b2c <__aeabi_dcmpun>
 800cb98:	9001      	str	r0, [sp, #4]
 800cb9a:	b1e8      	cbz	r0, 800cbd8 <pow+0x8c>
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	2300      	movs	r3, #0
 800cba0:	4620      	mov	r0, r4
 800cba2:	4629      	mov	r1, r5
 800cba4:	f7f3 ff90 	bl	8000ac8 <__aeabi_dcmpeq>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	d046      	beq.n	800cc3a <pow+0xee>
 800cbac:	2301      	movs	r3, #1
 800cbae:	9302      	str	r3, [sp, #8]
 800cbb0:	4b96      	ldr	r3, [pc, #600]	; (800ce0c <pow+0x2c0>)
 800cbb2:	9303      	str	r3, [sp, #12]
 800cbb4:	4b96      	ldr	r3, [pc, #600]	; (800ce10 <pow+0x2c4>)
 800cbb6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800cbba:	2200      	movs	r2, #0
 800cbbc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cbc0:	9b00      	ldr	r3, [sp, #0]
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cbc8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cbcc:	d033      	beq.n	800cc36 <pow+0xea>
 800cbce:	a802      	add	r0, sp, #8
 800cbd0:	f002 fa26 	bl	800f020 <matherr>
 800cbd4:	bb48      	cbnz	r0, 800cc2a <pow+0xde>
 800cbd6:	e05d      	b.n	800cc94 <pow+0x148>
 800cbd8:	f04f 0a00 	mov.w	sl, #0
 800cbdc:	f04f 0b00 	mov.w	fp, #0
 800cbe0:	4652      	mov	r2, sl
 800cbe2:	465b      	mov	r3, fp
 800cbe4:	4630      	mov	r0, r6
 800cbe6:	4639      	mov	r1, r7
 800cbe8:	f7f3 ff6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbec:	ec4b ab19 	vmov	d9, sl, fp
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d054      	beq.n	800cc9e <pow+0x152>
 800cbf4:	4652      	mov	r2, sl
 800cbf6:	465b      	mov	r3, fp
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	f7f3 ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc00:	4680      	mov	r8, r0
 800cc02:	b318      	cbz	r0, 800cc4c <pow+0x100>
 800cc04:	2301      	movs	r3, #1
 800cc06:	9302      	str	r3, [sp, #8]
 800cc08:	4b80      	ldr	r3, [pc, #512]	; (800ce0c <pow+0x2c0>)
 800cc0a:	9303      	str	r3, [sp, #12]
 800cc0c:	9b01      	ldr	r3, [sp, #4]
 800cc0e:	930a      	str	r3, [sp, #40]	; 0x28
 800cc10:	9b00      	ldr	r3, [sp, #0]
 800cc12:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cc16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cc1a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d0d5      	beq.n	800cbce <pow+0x82>
 800cc22:	4b7b      	ldr	r3, [pc, #492]	; (800ce10 <pow+0x2c4>)
 800cc24:	2200      	movs	r2, #0
 800cc26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cc2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc2c:	b11b      	cbz	r3, 800cc36 <pow+0xea>
 800cc2e:	f7fe fb1b 	bl	800b268 <__errno>
 800cc32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc34:	6003      	str	r3, [r0, #0]
 800cc36:	ed9d 8b08 	vldr	d8, [sp, #32]
 800cc3a:	eeb0 0a48 	vmov.f32	s0, s16
 800cc3e:	eef0 0a68 	vmov.f32	s1, s17
 800cc42:	b00d      	add	sp, #52	; 0x34
 800cc44:	ecbd 8b04 	vpop	{d8-d9}
 800cc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4c:	ec45 4b10 	vmov	d0, r4, r5
 800cc50:	f002 f957 	bl	800ef02 <finite>
 800cc54:	2800      	cmp	r0, #0
 800cc56:	d0f0      	beq.n	800cc3a <pow+0xee>
 800cc58:	4652      	mov	r2, sl
 800cc5a:	465b      	mov	r3, fp
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	4629      	mov	r1, r5
 800cc60:	f7f3 ff3c 	bl	8000adc <__aeabi_dcmplt>
 800cc64:	2800      	cmp	r0, #0
 800cc66:	d0e8      	beq.n	800cc3a <pow+0xee>
 800cc68:	2301      	movs	r3, #1
 800cc6a:	9302      	str	r3, [sp, #8]
 800cc6c:	4b67      	ldr	r3, [pc, #412]	; (800ce0c <pow+0x2c0>)
 800cc6e:	9303      	str	r3, [sp, #12]
 800cc70:	f999 3000 	ldrsb.w	r3, [r9]
 800cc74:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800cc78:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cc7c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cc80:	b913      	cbnz	r3, 800cc88 <pow+0x13c>
 800cc82:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800cc86:	e7a2      	b.n	800cbce <pow+0x82>
 800cc88:	4962      	ldr	r1, [pc, #392]	; (800ce14 <pow+0x2c8>)
 800cc8a:	2000      	movs	r0, #0
 800cc8c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cc90:	2b02      	cmp	r3, #2
 800cc92:	d19c      	bne.n	800cbce <pow+0x82>
 800cc94:	f7fe fae8 	bl	800b268 <__errno>
 800cc98:	2321      	movs	r3, #33	; 0x21
 800cc9a:	6003      	str	r3, [r0, #0]
 800cc9c:	e7c5      	b.n	800cc2a <pow+0xde>
 800cc9e:	eeb0 0a48 	vmov.f32	s0, s16
 800cca2:	eef0 0a68 	vmov.f32	s1, s17
 800cca6:	f002 f92c 	bl	800ef02 <finite>
 800ccaa:	9000      	str	r0, [sp, #0]
 800ccac:	2800      	cmp	r0, #0
 800ccae:	f040 8081 	bne.w	800cdb4 <pow+0x268>
 800ccb2:	ec47 6b10 	vmov	d0, r6, r7
 800ccb6:	f002 f924 	bl	800ef02 <finite>
 800ccba:	2800      	cmp	r0, #0
 800ccbc:	d07a      	beq.n	800cdb4 <pow+0x268>
 800ccbe:	ec45 4b10 	vmov	d0, r4, r5
 800ccc2:	f002 f91e 	bl	800ef02 <finite>
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d074      	beq.n	800cdb4 <pow+0x268>
 800ccca:	ec53 2b18 	vmov	r2, r3, d8
 800ccce:	ee18 0a10 	vmov	r0, s16
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	f7f3 ff2a 	bl	8000b2c <__aeabi_dcmpun>
 800ccd8:	f999 9000 	ldrsb.w	r9, [r9]
 800ccdc:	4b4b      	ldr	r3, [pc, #300]	; (800ce0c <pow+0x2c0>)
 800ccde:	b1b0      	cbz	r0, 800cd0e <pow+0x1c2>
 800cce0:	2201      	movs	r2, #1
 800cce2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cce6:	9b00      	ldr	r3, [sp, #0]
 800cce8:	930a      	str	r3, [sp, #40]	; 0x28
 800ccea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ccee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ccf2:	f1b9 0f00 	cmp.w	r9, #0
 800ccf6:	d0c4      	beq.n	800cc82 <pow+0x136>
 800ccf8:	4652      	mov	r2, sl
 800ccfa:	465b      	mov	r3, fp
 800ccfc:	4650      	mov	r0, sl
 800ccfe:	4659      	mov	r1, fp
 800cd00:	f7f3 fda4 	bl	800084c <__aeabi_ddiv>
 800cd04:	f1b9 0f02 	cmp.w	r9, #2
 800cd08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cd0c:	e7c1      	b.n	800cc92 <pow+0x146>
 800cd0e:	2203      	movs	r2, #3
 800cd10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd14:	900a      	str	r0, [sp, #40]	; 0x28
 800cd16:	4629      	mov	r1, r5
 800cd18:	4620      	mov	r0, r4
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	4b3e      	ldr	r3, [pc, #248]	; (800ce18 <pow+0x2cc>)
 800cd1e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cd22:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cd26:	f7f3 fc67 	bl	80005f8 <__aeabi_dmul>
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	460d      	mov	r5, r1
 800cd2e:	f1b9 0f00 	cmp.w	r9, #0
 800cd32:	d124      	bne.n	800cd7e <pow+0x232>
 800cd34:	4b39      	ldr	r3, [pc, #228]	; (800ce1c <pow+0x2d0>)
 800cd36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800cd3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cd3e:	4630      	mov	r0, r6
 800cd40:	4652      	mov	r2, sl
 800cd42:	465b      	mov	r3, fp
 800cd44:	4639      	mov	r1, r7
 800cd46:	f7f3 fec9 	bl	8000adc <__aeabi_dcmplt>
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	d056      	beq.n	800cdfc <pow+0x2b0>
 800cd4e:	ec45 4b10 	vmov	d0, r4, r5
 800cd52:	f002 f971 	bl	800f038 <rint>
 800cd56:	4622      	mov	r2, r4
 800cd58:	462b      	mov	r3, r5
 800cd5a:	ec51 0b10 	vmov	r0, r1, d0
 800cd5e:	f7f3 feb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd62:	b920      	cbnz	r0, 800cd6e <pow+0x222>
 800cd64:	4b2e      	ldr	r3, [pc, #184]	; (800ce20 <pow+0x2d4>)
 800cd66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800cd6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cd6e:	f998 3000 	ldrsb.w	r3, [r8]
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d142      	bne.n	800cdfc <pow+0x2b0>
 800cd76:	f7fe fa77 	bl	800b268 <__errno>
 800cd7a:	2322      	movs	r3, #34	; 0x22
 800cd7c:	e78d      	b.n	800cc9a <pow+0x14e>
 800cd7e:	4b29      	ldr	r3, [pc, #164]	; (800ce24 <pow+0x2d8>)
 800cd80:	2200      	movs	r2, #0
 800cd82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cd86:	4630      	mov	r0, r6
 800cd88:	4652      	mov	r2, sl
 800cd8a:	465b      	mov	r3, fp
 800cd8c:	4639      	mov	r1, r7
 800cd8e:	f7f3 fea5 	bl	8000adc <__aeabi_dcmplt>
 800cd92:	2800      	cmp	r0, #0
 800cd94:	d0eb      	beq.n	800cd6e <pow+0x222>
 800cd96:	ec45 4b10 	vmov	d0, r4, r5
 800cd9a:	f002 f94d 	bl	800f038 <rint>
 800cd9e:	4622      	mov	r2, r4
 800cda0:	462b      	mov	r3, r5
 800cda2:	ec51 0b10 	vmov	r0, r1, d0
 800cda6:	f7f3 fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	d1df      	bne.n	800cd6e <pow+0x222>
 800cdae:	2200      	movs	r2, #0
 800cdb0:	4b18      	ldr	r3, [pc, #96]	; (800ce14 <pow+0x2c8>)
 800cdb2:	e7da      	b.n	800cd6a <pow+0x21e>
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	ec51 0b18 	vmov	r0, r1, d8
 800cdbc:	f7f3 fe84 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	f43f af3a 	beq.w	800cc3a <pow+0xee>
 800cdc6:	ec47 6b10 	vmov	d0, r6, r7
 800cdca:	f002 f89a 	bl	800ef02 <finite>
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	f43f af33 	beq.w	800cc3a <pow+0xee>
 800cdd4:	ec45 4b10 	vmov	d0, r4, r5
 800cdd8:	f002 f893 	bl	800ef02 <finite>
 800cddc:	2800      	cmp	r0, #0
 800cdde:	f43f af2c 	beq.w	800cc3a <pow+0xee>
 800cde2:	2304      	movs	r3, #4
 800cde4:	9302      	str	r3, [sp, #8]
 800cde6:	4b09      	ldr	r3, [pc, #36]	; (800ce0c <pow+0x2c0>)
 800cde8:	9303      	str	r3, [sp, #12]
 800cdea:	2300      	movs	r3, #0
 800cdec:	930a      	str	r3, [sp, #40]	; 0x28
 800cdee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cdf2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cdf6:	ed8d 9b08 	vstr	d9, [sp, #32]
 800cdfa:	e7b8      	b.n	800cd6e <pow+0x222>
 800cdfc:	a802      	add	r0, sp, #8
 800cdfe:	f002 f90f 	bl	800f020 <matherr>
 800ce02:	2800      	cmp	r0, #0
 800ce04:	f47f af11 	bne.w	800cc2a <pow+0xde>
 800ce08:	e7b5      	b.n	800cd76 <pow+0x22a>
 800ce0a:	bf00      	nop
 800ce0c:	0800f5e2 	.word	0x0800f5e2
 800ce10:	3ff00000 	.word	0x3ff00000
 800ce14:	fff00000 	.word	0xfff00000
 800ce18:	3fe00000 	.word	0x3fe00000
 800ce1c:	47efffff 	.word	0x47efffff
 800ce20:	c7efffff 	.word	0xc7efffff
 800ce24:	7ff00000 	.word	0x7ff00000
 800ce28:	200009c0 	.word	0x200009c0

0800ce2c <sqrt>:
 800ce2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce30:	ed2d 8b02 	vpush	{d8}
 800ce34:	b08b      	sub	sp, #44	; 0x2c
 800ce36:	ec55 4b10 	vmov	r4, r5, d0
 800ce3a:	f001 f943 	bl	800e0c4 <__ieee754_sqrt>
 800ce3e:	4b26      	ldr	r3, [pc, #152]	; (800ced8 <sqrt+0xac>)
 800ce40:	eeb0 8a40 	vmov.f32	s16, s0
 800ce44:	eef0 8a60 	vmov.f32	s17, s1
 800ce48:	f993 6000 	ldrsb.w	r6, [r3]
 800ce4c:	1c73      	adds	r3, r6, #1
 800ce4e:	d02a      	beq.n	800cea6 <sqrt+0x7a>
 800ce50:	4622      	mov	r2, r4
 800ce52:	462b      	mov	r3, r5
 800ce54:	4620      	mov	r0, r4
 800ce56:	4629      	mov	r1, r5
 800ce58:	f7f3 fe68 	bl	8000b2c <__aeabi_dcmpun>
 800ce5c:	4607      	mov	r7, r0
 800ce5e:	bb10      	cbnz	r0, 800cea6 <sqrt+0x7a>
 800ce60:	f04f 0800 	mov.w	r8, #0
 800ce64:	f04f 0900 	mov.w	r9, #0
 800ce68:	4642      	mov	r2, r8
 800ce6a:	464b      	mov	r3, r9
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	4629      	mov	r1, r5
 800ce70:	f7f3 fe34 	bl	8000adc <__aeabi_dcmplt>
 800ce74:	b1b8      	cbz	r0, 800cea6 <sqrt+0x7a>
 800ce76:	2301      	movs	r3, #1
 800ce78:	9300      	str	r3, [sp, #0]
 800ce7a:	4b18      	ldr	r3, [pc, #96]	; (800cedc <sqrt+0xb0>)
 800ce7c:	9301      	str	r3, [sp, #4]
 800ce7e:	9708      	str	r7, [sp, #32]
 800ce80:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ce84:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ce88:	b9b6      	cbnz	r6, 800ceb8 <sqrt+0x8c>
 800ce8a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ce8e:	4668      	mov	r0, sp
 800ce90:	f002 f8c6 	bl	800f020 <matherr>
 800ce94:	b1d0      	cbz	r0, 800cecc <sqrt+0xa0>
 800ce96:	9b08      	ldr	r3, [sp, #32]
 800ce98:	b11b      	cbz	r3, 800cea2 <sqrt+0x76>
 800ce9a:	f7fe f9e5 	bl	800b268 <__errno>
 800ce9e:	9b08      	ldr	r3, [sp, #32]
 800cea0:	6003      	str	r3, [r0, #0]
 800cea2:	ed9d 8b06 	vldr	d8, [sp, #24]
 800cea6:	eeb0 0a48 	vmov.f32	s0, s16
 800ceaa:	eef0 0a68 	vmov.f32	s1, s17
 800ceae:	b00b      	add	sp, #44	; 0x2c
 800ceb0:	ecbd 8b02 	vpop	{d8}
 800ceb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceb8:	4642      	mov	r2, r8
 800ceba:	464b      	mov	r3, r9
 800cebc:	4640      	mov	r0, r8
 800cebe:	4649      	mov	r1, r9
 800cec0:	f7f3 fcc4 	bl	800084c <__aeabi_ddiv>
 800cec4:	2e02      	cmp	r6, #2
 800cec6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ceca:	d1e0      	bne.n	800ce8e <sqrt+0x62>
 800cecc:	f7fe f9cc 	bl	800b268 <__errno>
 800ced0:	2321      	movs	r3, #33	; 0x21
 800ced2:	6003      	str	r3, [r0, #0]
 800ced4:	e7df      	b.n	800ce96 <sqrt+0x6a>
 800ced6:	bf00      	nop
 800ced8:	200009c0 	.word	0x200009c0
 800cedc:	0800f5e6 	.word	0x0800f5e6

0800cee0 <__ieee754_atan2>:
 800cee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cee4:	ec57 6b11 	vmov	r6, r7, d1
 800cee8:	4273      	negs	r3, r6
 800ceea:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ceee:	4333      	orrs	r3, r6
 800cef0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800d098 <__ieee754_atan2+0x1b8>
 800cef4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cef8:	4573      	cmp	r3, lr
 800cefa:	ec51 0b10 	vmov	r0, r1, d0
 800cefe:	ee11 8a10 	vmov	r8, s2
 800cf02:	d80a      	bhi.n	800cf1a <__ieee754_atan2+0x3a>
 800cf04:	4244      	negs	r4, r0
 800cf06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cf0a:	4304      	orrs	r4, r0
 800cf0c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800cf10:	4574      	cmp	r4, lr
 800cf12:	468c      	mov	ip, r1
 800cf14:	ee10 9a10 	vmov	r9, s0
 800cf18:	d907      	bls.n	800cf2a <__ieee754_atan2+0x4a>
 800cf1a:	4632      	mov	r2, r6
 800cf1c:	463b      	mov	r3, r7
 800cf1e:	f7f3 f9b5 	bl	800028c <__adddf3>
 800cf22:	ec41 0b10 	vmov	d0, r0, r1
 800cf26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf2a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800cf2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cf32:	4334      	orrs	r4, r6
 800cf34:	d103      	bne.n	800cf3e <__ieee754_atan2+0x5e>
 800cf36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf3a:	f001 be39 	b.w	800ebb0 <atan>
 800cf3e:	17bc      	asrs	r4, r7, #30
 800cf40:	f004 0402 	and.w	r4, r4, #2
 800cf44:	ea53 0909 	orrs.w	r9, r3, r9
 800cf48:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800cf4c:	d107      	bne.n	800cf5e <__ieee754_atan2+0x7e>
 800cf4e:	2c02      	cmp	r4, #2
 800cf50:	d073      	beq.n	800d03a <__ieee754_atan2+0x15a>
 800cf52:	2c03      	cmp	r4, #3
 800cf54:	d1e5      	bne.n	800cf22 <__ieee754_atan2+0x42>
 800cf56:	a13e      	add	r1, pc, #248	; (adr r1, 800d050 <__ieee754_atan2+0x170>)
 800cf58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf5c:	e7e1      	b.n	800cf22 <__ieee754_atan2+0x42>
 800cf5e:	ea52 0808 	orrs.w	r8, r2, r8
 800cf62:	d106      	bne.n	800cf72 <__ieee754_atan2+0x92>
 800cf64:	f1bc 0f00 	cmp.w	ip, #0
 800cf68:	da6b      	bge.n	800d042 <__ieee754_atan2+0x162>
 800cf6a:	a13b      	add	r1, pc, #236	; (adr r1, 800d058 <__ieee754_atan2+0x178>)
 800cf6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf70:	e7d7      	b.n	800cf22 <__ieee754_atan2+0x42>
 800cf72:	4572      	cmp	r2, lr
 800cf74:	d120      	bne.n	800cfb8 <__ieee754_atan2+0xd8>
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d111      	bne.n	800cf9e <__ieee754_atan2+0xbe>
 800cf7a:	2c02      	cmp	r4, #2
 800cf7c:	d007      	beq.n	800cf8e <__ieee754_atan2+0xae>
 800cf7e:	2c03      	cmp	r4, #3
 800cf80:	d009      	beq.n	800cf96 <__ieee754_atan2+0xb6>
 800cf82:	2c01      	cmp	r4, #1
 800cf84:	d155      	bne.n	800d032 <__ieee754_atan2+0x152>
 800cf86:	a136      	add	r1, pc, #216	; (adr r1, 800d060 <__ieee754_atan2+0x180>)
 800cf88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf8c:	e7c9      	b.n	800cf22 <__ieee754_atan2+0x42>
 800cf8e:	a136      	add	r1, pc, #216	; (adr r1, 800d068 <__ieee754_atan2+0x188>)
 800cf90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf94:	e7c5      	b.n	800cf22 <__ieee754_atan2+0x42>
 800cf96:	a136      	add	r1, pc, #216	; (adr r1, 800d070 <__ieee754_atan2+0x190>)
 800cf98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf9c:	e7c1      	b.n	800cf22 <__ieee754_atan2+0x42>
 800cf9e:	2c02      	cmp	r4, #2
 800cfa0:	d04b      	beq.n	800d03a <__ieee754_atan2+0x15a>
 800cfa2:	2c03      	cmp	r4, #3
 800cfa4:	d0d7      	beq.n	800cf56 <__ieee754_atan2+0x76>
 800cfa6:	2c01      	cmp	r4, #1
 800cfa8:	f04f 0000 	mov.w	r0, #0
 800cfac:	d102      	bne.n	800cfb4 <__ieee754_atan2+0xd4>
 800cfae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cfb2:	e7b6      	b.n	800cf22 <__ieee754_atan2+0x42>
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	e7b4      	b.n	800cf22 <__ieee754_atan2+0x42>
 800cfb8:	4573      	cmp	r3, lr
 800cfba:	d0d3      	beq.n	800cf64 <__ieee754_atan2+0x84>
 800cfbc:	1a9b      	subs	r3, r3, r2
 800cfbe:	151b      	asrs	r3, r3, #20
 800cfc0:	2b3c      	cmp	r3, #60	; 0x3c
 800cfc2:	dc1e      	bgt.n	800d002 <__ieee754_atan2+0x122>
 800cfc4:	2f00      	cmp	r7, #0
 800cfc6:	da01      	bge.n	800cfcc <__ieee754_atan2+0xec>
 800cfc8:	333c      	adds	r3, #60	; 0x3c
 800cfca:	db1e      	blt.n	800d00a <__ieee754_atan2+0x12a>
 800cfcc:	4632      	mov	r2, r6
 800cfce:	463b      	mov	r3, r7
 800cfd0:	f7f3 fc3c 	bl	800084c <__aeabi_ddiv>
 800cfd4:	ec41 0b10 	vmov	d0, r0, r1
 800cfd8:	f001 ff8a 	bl	800eef0 <fabs>
 800cfdc:	f001 fde8 	bl	800ebb0 <atan>
 800cfe0:	ec51 0b10 	vmov	r0, r1, d0
 800cfe4:	2c01      	cmp	r4, #1
 800cfe6:	d013      	beq.n	800d010 <__ieee754_atan2+0x130>
 800cfe8:	2c02      	cmp	r4, #2
 800cfea:	d015      	beq.n	800d018 <__ieee754_atan2+0x138>
 800cfec:	2c00      	cmp	r4, #0
 800cfee:	d098      	beq.n	800cf22 <__ieee754_atan2+0x42>
 800cff0:	a321      	add	r3, pc, #132	; (adr r3, 800d078 <__ieee754_atan2+0x198>)
 800cff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff6:	f7f3 f947 	bl	8000288 <__aeabi_dsub>
 800cffa:	a321      	add	r3, pc, #132	; (adr r3, 800d080 <__ieee754_atan2+0x1a0>)
 800cffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d000:	e014      	b.n	800d02c <__ieee754_atan2+0x14c>
 800d002:	a121      	add	r1, pc, #132	; (adr r1, 800d088 <__ieee754_atan2+0x1a8>)
 800d004:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d008:	e7ec      	b.n	800cfe4 <__ieee754_atan2+0x104>
 800d00a:	2000      	movs	r0, #0
 800d00c:	2100      	movs	r1, #0
 800d00e:	e7e9      	b.n	800cfe4 <__ieee754_atan2+0x104>
 800d010:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d014:	4619      	mov	r1, r3
 800d016:	e784      	b.n	800cf22 <__ieee754_atan2+0x42>
 800d018:	a317      	add	r3, pc, #92	; (adr r3, 800d078 <__ieee754_atan2+0x198>)
 800d01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01e:	f7f3 f933 	bl	8000288 <__aeabi_dsub>
 800d022:	4602      	mov	r2, r0
 800d024:	460b      	mov	r3, r1
 800d026:	a116      	add	r1, pc, #88	; (adr r1, 800d080 <__ieee754_atan2+0x1a0>)
 800d028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d02c:	f7f3 f92c 	bl	8000288 <__aeabi_dsub>
 800d030:	e777      	b.n	800cf22 <__ieee754_atan2+0x42>
 800d032:	a117      	add	r1, pc, #92	; (adr r1, 800d090 <__ieee754_atan2+0x1b0>)
 800d034:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d038:	e773      	b.n	800cf22 <__ieee754_atan2+0x42>
 800d03a:	a111      	add	r1, pc, #68	; (adr r1, 800d080 <__ieee754_atan2+0x1a0>)
 800d03c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d040:	e76f      	b.n	800cf22 <__ieee754_atan2+0x42>
 800d042:	a111      	add	r1, pc, #68	; (adr r1, 800d088 <__ieee754_atan2+0x1a8>)
 800d044:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d048:	e76b      	b.n	800cf22 <__ieee754_atan2+0x42>
 800d04a:	bf00      	nop
 800d04c:	f3af 8000 	nop.w
 800d050:	54442d18 	.word	0x54442d18
 800d054:	c00921fb 	.word	0xc00921fb
 800d058:	54442d18 	.word	0x54442d18
 800d05c:	bff921fb 	.word	0xbff921fb
 800d060:	54442d18 	.word	0x54442d18
 800d064:	bfe921fb 	.word	0xbfe921fb
 800d068:	7f3321d2 	.word	0x7f3321d2
 800d06c:	4002d97c 	.word	0x4002d97c
 800d070:	7f3321d2 	.word	0x7f3321d2
 800d074:	c002d97c 	.word	0xc002d97c
 800d078:	33145c07 	.word	0x33145c07
 800d07c:	3ca1a626 	.word	0x3ca1a626
 800d080:	54442d18 	.word	0x54442d18
 800d084:	400921fb 	.word	0x400921fb
 800d088:	54442d18 	.word	0x54442d18
 800d08c:	3ff921fb 	.word	0x3ff921fb
 800d090:	54442d18 	.word	0x54442d18
 800d094:	3fe921fb 	.word	0x3fe921fb
 800d098:	7ff00000 	.word	0x7ff00000

0800d09c <__ieee754_fmod>:
 800d09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0a0:	ec53 2b11 	vmov	r2, r3, d1
 800d0a4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800d0a8:	ea5e 0402 	orrs.w	r4, lr, r2
 800d0ac:	ec51 0b10 	vmov	r0, r1, d0
 800d0b0:	461e      	mov	r6, r3
 800d0b2:	ee11 5a10 	vmov	r5, s2
 800d0b6:	4694      	mov	ip, r2
 800d0b8:	d00c      	beq.n	800d0d4 <__ieee754_fmod+0x38>
 800d0ba:	4c7a      	ldr	r4, [pc, #488]	; (800d2a4 <__ieee754_fmod+0x208>)
 800d0bc:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800d0c0:	45a0      	cmp	r8, r4
 800d0c2:	4689      	mov	r9, r1
 800d0c4:	dc06      	bgt.n	800d0d4 <__ieee754_fmod+0x38>
 800d0c6:	4254      	negs	r4, r2
 800d0c8:	4314      	orrs	r4, r2
 800d0ca:	4f77      	ldr	r7, [pc, #476]	; (800d2a8 <__ieee754_fmod+0x20c>)
 800d0cc:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800d0d0:	42bc      	cmp	r4, r7
 800d0d2:	d909      	bls.n	800d0e8 <__ieee754_fmod+0x4c>
 800d0d4:	f7f3 fa90 	bl	80005f8 <__aeabi_dmul>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	460b      	mov	r3, r1
 800d0dc:	f7f3 fbb6 	bl	800084c <__aeabi_ddiv>
 800d0e0:	ec41 0b10 	vmov	d0, r0, r1
 800d0e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0e8:	45f0      	cmp	r8, lr
 800d0ea:	ee10 2a10 	vmov	r2, s0
 800d0ee:	4607      	mov	r7, r0
 800d0f0:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800d0f4:	dc0a      	bgt.n	800d10c <__ieee754_fmod+0x70>
 800d0f6:	dbf3      	blt.n	800d0e0 <__ieee754_fmod+0x44>
 800d0f8:	42a8      	cmp	r0, r5
 800d0fa:	d3f1      	bcc.n	800d0e0 <__ieee754_fmod+0x44>
 800d0fc:	d106      	bne.n	800d10c <__ieee754_fmod+0x70>
 800d0fe:	496b      	ldr	r1, [pc, #428]	; (800d2ac <__ieee754_fmod+0x210>)
 800d100:	0fe4      	lsrs	r4, r4, #31
 800d102:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800d106:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d10a:	e7e9      	b.n	800d0e0 <__ieee754_fmod+0x44>
 800d10c:	4b68      	ldr	r3, [pc, #416]	; (800d2b0 <__ieee754_fmod+0x214>)
 800d10e:	4598      	cmp	r8, r3
 800d110:	dc49      	bgt.n	800d1a6 <__ieee754_fmod+0x10a>
 800d112:	f1b8 0f00 	cmp.w	r8, #0
 800d116:	d13d      	bne.n	800d194 <__ieee754_fmod+0xf8>
 800d118:	4866      	ldr	r0, [pc, #408]	; (800d2b4 <__ieee754_fmod+0x218>)
 800d11a:	4611      	mov	r1, r2
 800d11c:	2900      	cmp	r1, #0
 800d11e:	dc36      	bgt.n	800d18e <__ieee754_fmod+0xf2>
 800d120:	459e      	cmp	lr, r3
 800d122:	dc51      	bgt.n	800d1c8 <__ieee754_fmod+0x12c>
 800d124:	f1be 0f00 	cmp.w	lr, #0
 800d128:	d145      	bne.n	800d1b6 <__ieee754_fmod+0x11a>
 800d12a:	4b62      	ldr	r3, [pc, #392]	; (800d2b4 <__ieee754_fmod+0x218>)
 800d12c:	4629      	mov	r1, r5
 800d12e:	2900      	cmp	r1, #0
 800d130:	dc3e      	bgt.n	800d1b0 <__ieee754_fmod+0x114>
 800d132:	4961      	ldr	r1, [pc, #388]	; (800d2b8 <__ieee754_fmod+0x21c>)
 800d134:	4288      	cmp	r0, r1
 800d136:	db4c      	blt.n	800d1d2 <__ieee754_fmod+0x136>
 800d138:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800d13c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d140:	4a5d      	ldr	r2, [pc, #372]	; (800d2b8 <__ieee754_fmod+0x21c>)
 800d142:	4293      	cmp	r3, r2
 800d144:	db59      	blt.n	800d1fa <__ieee754_fmod+0x15e>
 800d146:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d14a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800d14e:	1ac0      	subs	r0, r0, r3
 800d150:	1b8a      	subs	r2, r1, r6
 800d152:	eba7 050c 	sub.w	r5, r7, ip
 800d156:	2800      	cmp	r0, #0
 800d158:	d166      	bne.n	800d228 <__ieee754_fmod+0x18c>
 800d15a:	4567      	cmp	r7, ip
 800d15c:	bf38      	it	cc
 800d15e:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800d162:	2a00      	cmp	r2, #0
 800d164:	bfbc      	itt	lt
 800d166:	463d      	movlt	r5, r7
 800d168:	460a      	movlt	r2, r1
 800d16a:	ea52 0105 	orrs.w	r1, r2, r5
 800d16e:	d0c6      	beq.n	800d0fe <__ieee754_fmod+0x62>
 800d170:	494f      	ldr	r1, [pc, #316]	; (800d2b0 <__ieee754_fmod+0x214>)
 800d172:	428a      	cmp	r2, r1
 800d174:	dd6d      	ble.n	800d252 <__ieee754_fmod+0x1b6>
 800d176:	4950      	ldr	r1, [pc, #320]	; (800d2b8 <__ieee754_fmod+0x21c>)
 800d178:	428b      	cmp	r3, r1
 800d17a:	db70      	blt.n	800d25e <__ieee754_fmod+0x1c2>
 800d17c:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800d180:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800d184:	4314      	orrs	r4, r2
 800d186:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 800d18a:	4628      	mov	r0, r5
 800d18c:	e7a8      	b.n	800d0e0 <__ieee754_fmod+0x44>
 800d18e:	3801      	subs	r0, #1
 800d190:	0049      	lsls	r1, r1, #1
 800d192:	e7c3      	b.n	800d11c <__ieee754_fmod+0x80>
 800d194:	4848      	ldr	r0, [pc, #288]	; (800d2b8 <__ieee754_fmod+0x21c>)
 800d196:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800d19a:	0049      	lsls	r1, r1, #1
 800d19c:	2900      	cmp	r1, #0
 800d19e:	f100 30ff 	add.w	r0, r0, #4294967295
 800d1a2:	dcfa      	bgt.n	800d19a <__ieee754_fmod+0xfe>
 800d1a4:	e7bc      	b.n	800d120 <__ieee754_fmod+0x84>
 800d1a6:	ea4f 5028 	mov.w	r0, r8, asr #20
 800d1aa:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800d1ae:	e7b7      	b.n	800d120 <__ieee754_fmod+0x84>
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	0049      	lsls	r1, r1, #1
 800d1b4:	e7bb      	b.n	800d12e <__ieee754_fmod+0x92>
 800d1b6:	4b40      	ldr	r3, [pc, #256]	; (800d2b8 <__ieee754_fmod+0x21c>)
 800d1b8:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 800d1bc:	0049      	lsls	r1, r1, #1
 800d1be:	2900      	cmp	r1, #0
 800d1c0:	f103 33ff 	add.w	r3, r3, #4294967295
 800d1c4:	dcfa      	bgt.n	800d1bc <__ieee754_fmod+0x120>
 800d1c6:	e7b4      	b.n	800d132 <__ieee754_fmod+0x96>
 800d1c8:	ea4f 532e 	mov.w	r3, lr, asr #20
 800d1cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d1d0:	e7af      	b.n	800d132 <__ieee754_fmod+0x96>
 800d1d2:	1a0f      	subs	r7, r1, r0
 800d1d4:	2f1f      	cmp	r7, #31
 800d1d6:	dc0a      	bgt.n	800d1ee <__ieee754_fmod+0x152>
 800d1d8:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800d1dc:	fa08 f807 	lsl.w	r8, r8, r7
 800d1e0:	fa22 f101 	lsr.w	r1, r2, r1
 800d1e4:	ea41 0108 	orr.w	r1, r1, r8
 800d1e8:	fa02 f707 	lsl.w	r7, r2, r7
 800d1ec:	e7a8      	b.n	800d140 <__ieee754_fmod+0xa4>
 800d1ee:	4933      	ldr	r1, [pc, #204]	; (800d2bc <__ieee754_fmod+0x220>)
 800d1f0:	1a09      	subs	r1, r1, r0
 800d1f2:	fa02 f101 	lsl.w	r1, r2, r1
 800d1f6:	2700      	movs	r7, #0
 800d1f8:	e7a2      	b.n	800d140 <__ieee754_fmod+0xa4>
 800d1fa:	eba2 0c03 	sub.w	ip, r2, r3
 800d1fe:	f1bc 0f1f 	cmp.w	ip, #31
 800d202:	dc0a      	bgt.n	800d21a <__ieee754_fmod+0x17e>
 800d204:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800d208:	fa0e fe0c 	lsl.w	lr, lr, ip
 800d20c:	fa25 f606 	lsr.w	r6, r5, r6
 800d210:	ea46 060e 	orr.w	r6, r6, lr
 800d214:	fa05 fc0c 	lsl.w	ip, r5, ip
 800d218:	e799      	b.n	800d14e <__ieee754_fmod+0xb2>
 800d21a:	4e28      	ldr	r6, [pc, #160]	; (800d2bc <__ieee754_fmod+0x220>)
 800d21c:	1af6      	subs	r6, r6, r3
 800d21e:	fa05 f606 	lsl.w	r6, r5, r6
 800d222:	f04f 0c00 	mov.w	ip, #0
 800d226:	e792      	b.n	800d14e <__ieee754_fmod+0xb2>
 800d228:	4567      	cmp	r7, ip
 800d22a:	bf38      	it	cc
 800d22c:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800d230:	2a00      	cmp	r2, #0
 800d232:	da05      	bge.n	800d240 <__ieee754_fmod+0x1a4>
 800d234:	0ffa      	lsrs	r2, r7, #31
 800d236:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d23a:	007f      	lsls	r7, r7, #1
 800d23c:	3801      	subs	r0, #1
 800d23e:	e787      	b.n	800d150 <__ieee754_fmod+0xb4>
 800d240:	ea52 0105 	orrs.w	r1, r2, r5
 800d244:	f43f af5b 	beq.w	800d0fe <__ieee754_fmod+0x62>
 800d248:	0fe9      	lsrs	r1, r5, #31
 800d24a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800d24e:	006f      	lsls	r7, r5, #1
 800d250:	e7f4      	b.n	800d23c <__ieee754_fmod+0x1a0>
 800d252:	0fe8      	lsrs	r0, r5, #31
 800d254:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800d258:	006d      	lsls	r5, r5, #1
 800d25a:	3b01      	subs	r3, #1
 800d25c:	e789      	b.n	800d172 <__ieee754_fmod+0xd6>
 800d25e:	1ac9      	subs	r1, r1, r3
 800d260:	2914      	cmp	r1, #20
 800d262:	dc0a      	bgt.n	800d27a <__ieee754_fmod+0x1de>
 800d264:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800d268:	fa02 f303 	lsl.w	r3, r2, r3
 800d26c:	40cd      	lsrs	r5, r1
 800d26e:	432b      	orrs	r3, r5
 800d270:	410a      	asrs	r2, r1
 800d272:	ea42 0104 	orr.w	r1, r2, r4
 800d276:	4618      	mov	r0, r3
 800d278:	e732      	b.n	800d0e0 <__ieee754_fmod+0x44>
 800d27a:	291f      	cmp	r1, #31
 800d27c:	dc07      	bgt.n	800d28e <__ieee754_fmod+0x1f2>
 800d27e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800d282:	40cd      	lsrs	r5, r1
 800d284:	fa02 f303 	lsl.w	r3, r2, r3
 800d288:	432b      	orrs	r3, r5
 800d28a:	4622      	mov	r2, r4
 800d28c:	e7f1      	b.n	800d272 <__ieee754_fmod+0x1d6>
 800d28e:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800d292:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800d296:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800d29a:	33e2      	adds	r3, #226	; 0xe2
 800d29c:	fa42 f303 	asr.w	r3, r2, r3
 800d2a0:	e7f3      	b.n	800d28a <__ieee754_fmod+0x1ee>
 800d2a2:	bf00      	nop
 800d2a4:	7fefffff 	.word	0x7fefffff
 800d2a8:	7ff00000 	.word	0x7ff00000
 800d2ac:	0800f5f0 	.word	0x0800f5f0
 800d2b0:	000fffff 	.word	0x000fffff
 800d2b4:	fffffbed 	.word	0xfffffbed
 800d2b8:	fffffc02 	.word	0xfffffc02
 800d2bc:	fffffbe2 	.word	0xfffffbe2

0800d2c0 <__ieee754_pow>:
 800d2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c4:	b091      	sub	sp, #68	; 0x44
 800d2c6:	ed8d 1b00 	vstr	d1, [sp]
 800d2ca:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d2ce:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d2d2:	ea58 0302 	orrs.w	r3, r8, r2
 800d2d6:	ec57 6b10 	vmov	r6, r7, d0
 800d2da:	f000 84be 	beq.w	800dc5a <__ieee754_pow+0x99a>
 800d2de:	4b7a      	ldr	r3, [pc, #488]	; (800d4c8 <__ieee754_pow+0x208>)
 800d2e0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d2e4:	429c      	cmp	r4, r3
 800d2e6:	463d      	mov	r5, r7
 800d2e8:	ee10 aa10 	vmov	sl, s0
 800d2ec:	dc09      	bgt.n	800d302 <__ieee754_pow+0x42>
 800d2ee:	d103      	bne.n	800d2f8 <__ieee754_pow+0x38>
 800d2f0:	b93e      	cbnz	r6, 800d302 <__ieee754_pow+0x42>
 800d2f2:	45a0      	cmp	r8, r4
 800d2f4:	dc0d      	bgt.n	800d312 <__ieee754_pow+0x52>
 800d2f6:	e001      	b.n	800d2fc <__ieee754_pow+0x3c>
 800d2f8:	4598      	cmp	r8, r3
 800d2fa:	dc02      	bgt.n	800d302 <__ieee754_pow+0x42>
 800d2fc:	4598      	cmp	r8, r3
 800d2fe:	d10e      	bne.n	800d31e <__ieee754_pow+0x5e>
 800d300:	b16a      	cbz	r2, 800d31e <__ieee754_pow+0x5e>
 800d302:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d306:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d30a:	ea54 030a 	orrs.w	r3, r4, sl
 800d30e:	f000 84a4 	beq.w	800dc5a <__ieee754_pow+0x99a>
 800d312:	486e      	ldr	r0, [pc, #440]	; (800d4cc <__ieee754_pow+0x20c>)
 800d314:	b011      	add	sp, #68	; 0x44
 800d316:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d31a:	f001 be85 	b.w	800f028 <nan>
 800d31e:	2d00      	cmp	r5, #0
 800d320:	da53      	bge.n	800d3ca <__ieee754_pow+0x10a>
 800d322:	4b6b      	ldr	r3, [pc, #428]	; (800d4d0 <__ieee754_pow+0x210>)
 800d324:	4598      	cmp	r8, r3
 800d326:	dc4d      	bgt.n	800d3c4 <__ieee754_pow+0x104>
 800d328:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d32c:	4598      	cmp	r8, r3
 800d32e:	dd4c      	ble.n	800d3ca <__ieee754_pow+0x10a>
 800d330:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d334:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d338:	2b14      	cmp	r3, #20
 800d33a:	dd26      	ble.n	800d38a <__ieee754_pow+0xca>
 800d33c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d340:	fa22 f103 	lsr.w	r1, r2, r3
 800d344:	fa01 f303 	lsl.w	r3, r1, r3
 800d348:	4293      	cmp	r3, r2
 800d34a:	d13e      	bne.n	800d3ca <__ieee754_pow+0x10a>
 800d34c:	f001 0101 	and.w	r1, r1, #1
 800d350:	f1c1 0b02 	rsb	fp, r1, #2
 800d354:	2a00      	cmp	r2, #0
 800d356:	d15b      	bne.n	800d410 <__ieee754_pow+0x150>
 800d358:	4b5b      	ldr	r3, [pc, #364]	; (800d4c8 <__ieee754_pow+0x208>)
 800d35a:	4598      	cmp	r8, r3
 800d35c:	d124      	bne.n	800d3a8 <__ieee754_pow+0xe8>
 800d35e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d362:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d366:	ea53 030a 	orrs.w	r3, r3, sl
 800d36a:	f000 8476 	beq.w	800dc5a <__ieee754_pow+0x99a>
 800d36e:	4b59      	ldr	r3, [pc, #356]	; (800d4d4 <__ieee754_pow+0x214>)
 800d370:	429c      	cmp	r4, r3
 800d372:	dd2d      	ble.n	800d3d0 <__ieee754_pow+0x110>
 800d374:	f1b9 0f00 	cmp.w	r9, #0
 800d378:	f280 8473 	bge.w	800dc62 <__ieee754_pow+0x9a2>
 800d37c:	2000      	movs	r0, #0
 800d37e:	2100      	movs	r1, #0
 800d380:	ec41 0b10 	vmov	d0, r0, r1
 800d384:	b011      	add	sp, #68	; 0x44
 800d386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d38a:	2a00      	cmp	r2, #0
 800d38c:	d13e      	bne.n	800d40c <__ieee754_pow+0x14c>
 800d38e:	f1c3 0314 	rsb	r3, r3, #20
 800d392:	fa48 f103 	asr.w	r1, r8, r3
 800d396:	fa01 f303 	lsl.w	r3, r1, r3
 800d39a:	4543      	cmp	r3, r8
 800d39c:	f040 8469 	bne.w	800dc72 <__ieee754_pow+0x9b2>
 800d3a0:	f001 0101 	and.w	r1, r1, #1
 800d3a4:	f1c1 0b02 	rsb	fp, r1, #2
 800d3a8:	4b4b      	ldr	r3, [pc, #300]	; (800d4d8 <__ieee754_pow+0x218>)
 800d3aa:	4598      	cmp	r8, r3
 800d3ac:	d118      	bne.n	800d3e0 <__ieee754_pow+0x120>
 800d3ae:	f1b9 0f00 	cmp.w	r9, #0
 800d3b2:	f280 845a 	bge.w	800dc6a <__ieee754_pow+0x9aa>
 800d3b6:	4948      	ldr	r1, [pc, #288]	; (800d4d8 <__ieee754_pow+0x218>)
 800d3b8:	4632      	mov	r2, r6
 800d3ba:	463b      	mov	r3, r7
 800d3bc:	2000      	movs	r0, #0
 800d3be:	f7f3 fa45 	bl	800084c <__aeabi_ddiv>
 800d3c2:	e7dd      	b.n	800d380 <__ieee754_pow+0xc0>
 800d3c4:	f04f 0b02 	mov.w	fp, #2
 800d3c8:	e7c4      	b.n	800d354 <__ieee754_pow+0x94>
 800d3ca:	f04f 0b00 	mov.w	fp, #0
 800d3ce:	e7c1      	b.n	800d354 <__ieee754_pow+0x94>
 800d3d0:	f1b9 0f00 	cmp.w	r9, #0
 800d3d4:	dad2      	bge.n	800d37c <__ieee754_pow+0xbc>
 800d3d6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d3da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d3de:	e7cf      	b.n	800d380 <__ieee754_pow+0xc0>
 800d3e0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d3e4:	d106      	bne.n	800d3f4 <__ieee754_pow+0x134>
 800d3e6:	4632      	mov	r2, r6
 800d3e8:	463b      	mov	r3, r7
 800d3ea:	4610      	mov	r0, r2
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	f7f3 f903 	bl	80005f8 <__aeabi_dmul>
 800d3f2:	e7c5      	b.n	800d380 <__ieee754_pow+0xc0>
 800d3f4:	4b39      	ldr	r3, [pc, #228]	; (800d4dc <__ieee754_pow+0x21c>)
 800d3f6:	4599      	cmp	r9, r3
 800d3f8:	d10a      	bne.n	800d410 <__ieee754_pow+0x150>
 800d3fa:	2d00      	cmp	r5, #0
 800d3fc:	db08      	blt.n	800d410 <__ieee754_pow+0x150>
 800d3fe:	ec47 6b10 	vmov	d0, r6, r7
 800d402:	b011      	add	sp, #68	; 0x44
 800d404:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d408:	f000 be5c 	b.w	800e0c4 <__ieee754_sqrt>
 800d40c:	f04f 0b00 	mov.w	fp, #0
 800d410:	ec47 6b10 	vmov	d0, r6, r7
 800d414:	f001 fd6c 	bl	800eef0 <fabs>
 800d418:	ec51 0b10 	vmov	r0, r1, d0
 800d41c:	f1ba 0f00 	cmp.w	sl, #0
 800d420:	d127      	bne.n	800d472 <__ieee754_pow+0x1b2>
 800d422:	b124      	cbz	r4, 800d42e <__ieee754_pow+0x16e>
 800d424:	4b2c      	ldr	r3, [pc, #176]	; (800d4d8 <__ieee754_pow+0x218>)
 800d426:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d121      	bne.n	800d472 <__ieee754_pow+0x1b2>
 800d42e:	f1b9 0f00 	cmp.w	r9, #0
 800d432:	da05      	bge.n	800d440 <__ieee754_pow+0x180>
 800d434:	4602      	mov	r2, r0
 800d436:	460b      	mov	r3, r1
 800d438:	2000      	movs	r0, #0
 800d43a:	4927      	ldr	r1, [pc, #156]	; (800d4d8 <__ieee754_pow+0x218>)
 800d43c:	f7f3 fa06 	bl	800084c <__aeabi_ddiv>
 800d440:	2d00      	cmp	r5, #0
 800d442:	da9d      	bge.n	800d380 <__ieee754_pow+0xc0>
 800d444:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d448:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d44c:	ea54 030b 	orrs.w	r3, r4, fp
 800d450:	d108      	bne.n	800d464 <__ieee754_pow+0x1a4>
 800d452:	4602      	mov	r2, r0
 800d454:	460b      	mov	r3, r1
 800d456:	4610      	mov	r0, r2
 800d458:	4619      	mov	r1, r3
 800d45a:	f7f2 ff15 	bl	8000288 <__aeabi_dsub>
 800d45e:	4602      	mov	r2, r0
 800d460:	460b      	mov	r3, r1
 800d462:	e7ac      	b.n	800d3be <__ieee754_pow+0xfe>
 800d464:	f1bb 0f01 	cmp.w	fp, #1
 800d468:	d18a      	bne.n	800d380 <__ieee754_pow+0xc0>
 800d46a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d46e:	4619      	mov	r1, r3
 800d470:	e786      	b.n	800d380 <__ieee754_pow+0xc0>
 800d472:	0fed      	lsrs	r5, r5, #31
 800d474:	1e6b      	subs	r3, r5, #1
 800d476:	930d      	str	r3, [sp, #52]	; 0x34
 800d478:	ea5b 0303 	orrs.w	r3, fp, r3
 800d47c:	d102      	bne.n	800d484 <__ieee754_pow+0x1c4>
 800d47e:	4632      	mov	r2, r6
 800d480:	463b      	mov	r3, r7
 800d482:	e7e8      	b.n	800d456 <__ieee754_pow+0x196>
 800d484:	4b16      	ldr	r3, [pc, #88]	; (800d4e0 <__ieee754_pow+0x220>)
 800d486:	4598      	cmp	r8, r3
 800d488:	f340 80fe 	ble.w	800d688 <__ieee754_pow+0x3c8>
 800d48c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d490:	4598      	cmp	r8, r3
 800d492:	dd0a      	ble.n	800d4aa <__ieee754_pow+0x1ea>
 800d494:	4b0f      	ldr	r3, [pc, #60]	; (800d4d4 <__ieee754_pow+0x214>)
 800d496:	429c      	cmp	r4, r3
 800d498:	dc0d      	bgt.n	800d4b6 <__ieee754_pow+0x1f6>
 800d49a:	f1b9 0f00 	cmp.w	r9, #0
 800d49e:	f6bf af6d 	bge.w	800d37c <__ieee754_pow+0xbc>
 800d4a2:	a307      	add	r3, pc, #28	; (adr r3, 800d4c0 <__ieee754_pow+0x200>)
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	e79f      	b.n	800d3ea <__ieee754_pow+0x12a>
 800d4aa:	4b0e      	ldr	r3, [pc, #56]	; (800d4e4 <__ieee754_pow+0x224>)
 800d4ac:	429c      	cmp	r4, r3
 800d4ae:	ddf4      	ble.n	800d49a <__ieee754_pow+0x1da>
 800d4b0:	4b09      	ldr	r3, [pc, #36]	; (800d4d8 <__ieee754_pow+0x218>)
 800d4b2:	429c      	cmp	r4, r3
 800d4b4:	dd18      	ble.n	800d4e8 <__ieee754_pow+0x228>
 800d4b6:	f1b9 0f00 	cmp.w	r9, #0
 800d4ba:	dcf2      	bgt.n	800d4a2 <__ieee754_pow+0x1e2>
 800d4bc:	e75e      	b.n	800d37c <__ieee754_pow+0xbc>
 800d4be:	bf00      	nop
 800d4c0:	8800759c 	.word	0x8800759c
 800d4c4:	7e37e43c 	.word	0x7e37e43c
 800d4c8:	7ff00000 	.word	0x7ff00000
 800d4cc:	0800f3da 	.word	0x0800f3da
 800d4d0:	433fffff 	.word	0x433fffff
 800d4d4:	3fefffff 	.word	0x3fefffff
 800d4d8:	3ff00000 	.word	0x3ff00000
 800d4dc:	3fe00000 	.word	0x3fe00000
 800d4e0:	41e00000 	.word	0x41e00000
 800d4e4:	3feffffe 	.word	0x3feffffe
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	4b63      	ldr	r3, [pc, #396]	; (800d678 <__ieee754_pow+0x3b8>)
 800d4ec:	f7f2 fecc 	bl	8000288 <__aeabi_dsub>
 800d4f0:	a355      	add	r3, pc, #340	; (adr r3, 800d648 <__ieee754_pow+0x388>)
 800d4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	460d      	mov	r5, r1
 800d4fa:	f7f3 f87d 	bl	80005f8 <__aeabi_dmul>
 800d4fe:	a354      	add	r3, pc, #336	; (adr r3, 800d650 <__ieee754_pow+0x390>)
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	4606      	mov	r6, r0
 800d506:	460f      	mov	r7, r1
 800d508:	4620      	mov	r0, r4
 800d50a:	4629      	mov	r1, r5
 800d50c:	f7f3 f874 	bl	80005f8 <__aeabi_dmul>
 800d510:	2200      	movs	r2, #0
 800d512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d516:	4b59      	ldr	r3, [pc, #356]	; (800d67c <__ieee754_pow+0x3bc>)
 800d518:	4620      	mov	r0, r4
 800d51a:	4629      	mov	r1, r5
 800d51c:	f7f3 f86c 	bl	80005f8 <__aeabi_dmul>
 800d520:	4602      	mov	r2, r0
 800d522:	460b      	mov	r3, r1
 800d524:	a14c      	add	r1, pc, #304	; (adr r1, 800d658 <__ieee754_pow+0x398>)
 800d526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d52a:	f7f2 fead 	bl	8000288 <__aeabi_dsub>
 800d52e:	4622      	mov	r2, r4
 800d530:	462b      	mov	r3, r5
 800d532:	f7f3 f861 	bl	80005f8 <__aeabi_dmul>
 800d536:	4602      	mov	r2, r0
 800d538:	460b      	mov	r3, r1
 800d53a:	2000      	movs	r0, #0
 800d53c:	4950      	ldr	r1, [pc, #320]	; (800d680 <__ieee754_pow+0x3c0>)
 800d53e:	f7f2 fea3 	bl	8000288 <__aeabi_dsub>
 800d542:	4622      	mov	r2, r4
 800d544:	462b      	mov	r3, r5
 800d546:	4680      	mov	r8, r0
 800d548:	4689      	mov	r9, r1
 800d54a:	4620      	mov	r0, r4
 800d54c:	4629      	mov	r1, r5
 800d54e:	f7f3 f853 	bl	80005f8 <__aeabi_dmul>
 800d552:	4602      	mov	r2, r0
 800d554:	460b      	mov	r3, r1
 800d556:	4640      	mov	r0, r8
 800d558:	4649      	mov	r1, r9
 800d55a:	f7f3 f84d 	bl	80005f8 <__aeabi_dmul>
 800d55e:	a340      	add	r3, pc, #256	; (adr r3, 800d660 <__ieee754_pow+0x3a0>)
 800d560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d564:	f7f3 f848 	bl	80005f8 <__aeabi_dmul>
 800d568:	4602      	mov	r2, r0
 800d56a:	460b      	mov	r3, r1
 800d56c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d570:	f7f2 fe8a 	bl	8000288 <__aeabi_dsub>
 800d574:	4602      	mov	r2, r0
 800d576:	460b      	mov	r3, r1
 800d578:	4604      	mov	r4, r0
 800d57a:	460d      	mov	r5, r1
 800d57c:	4630      	mov	r0, r6
 800d57e:	4639      	mov	r1, r7
 800d580:	f7f2 fe84 	bl	800028c <__adddf3>
 800d584:	2000      	movs	r0, #0
 800d586:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d58a:	4632      	mov	r2, r6
 800d58c:	463b      	mov	r3, r7
 800d58e:	f7f2 fe7b 	bl	8000288 <__aeabi_dsub>
 800d592:	4602      	mov	r2, r0
 800d594:	460b      	mov	r3, r1
 800d596:	4620      	mov	r0, r4
 800d598:	4629      	mov	r1, r5
 800d59a:	f7f2 fe75 	bl	8000288 <__aeabi_dsub>
 800d59e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5a0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	460f      	mov	r7, r1
 800d5aa:	f040 81eb 	bne.w	800d984 <__ieee754_pow+0x6c4>
 800d5ae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800d668 <__ieee754_pow+0x3a8>
 800d5b2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800d5b6:	2400      	movs	r4, #0
 800d5b8:	4622      	mov	r2, r4
 800d5ba:	462b      	mov	r3, r5
 800d5bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d5c4:	f7f2 fe60 	bl	8000288 <__aeabi_dsub>
 800d5c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5cc:	f7f3 f814 	bl	80005f8 <__aeabi_dmul>
 800d5d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5d4:	4680      	mov	r8, r0
 800d5d6:	4689      	mov	r9, r1
 800d5d8:	4630      	mov	r0, r6
 800d5da:	4639      	mov	r1, r7
 800d5dc:	f7f3 f80c 	bl	80005f8 <__aeabi_dmul>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	4640      	mov	r0, r8
 800d5e6:	4649      	mov	r1, r9
 800d5e8:	f7f2 fe50 	bl	800028c <__adddf3>
 800d5ec:	4622      	mov	r2, r4
 800d5ee:	462b      	mov	r3, r5
 800d5f0:	4680      	mov	r8, r0
 800d5f2:	4689      	mov	r9, r1
 800d5f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5f8:	f7f2 fffe 	bl	80005f8 <__aeabi_dmul>
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	4604      	mov	r4, r0
 800d600:	460d      	mov	r5, r1
 800d602:	4602      	mov	r2, r0
 800d604:	4649      	mov	r1, r9
 800d606:	4640      	mov	r0, r8
 800d608:	e9cd 4500 	strd	r4, r5, [sp]
 800d60c:	f7f2 fe3e 	bl	800028c <__adddf3>
 800d610:	4b1c      	ldr	r3, [pc, #112]	; (800d684 <__ieee754_pow+0x3c4>)
 800d612:	4299      	cmp	r1, r3
 800d614:	4606      	mov	r6, r0
 800d616:	460f      	mov	r7, r1
 800d618:	468b      	mov	fp, r1
 800d61a:	f340 82f7 	ble.w	800dc0c <__ieee754_pow+0x94c>
 800d61e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d622:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d626:	4303      	orrs	r3, r0
 800d628:	f000 81ea 	beq.w	800da00 <__ieee754_pow+0x740>
 800d62c:	a310      	add	r3, pc, #64	; (adr r3, 800d670 <__ieee754_pow+0x3b0>)
 800d62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d636:	f7f2 ffdf 	bl	80005f8 <__aeabi_dmul>
 800d63a:	a30d      	add	r3, pc, #52	; (adr r3, 800d670 <__ieee754_pow+0x3b0>)
 800d63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d640:	e6d5      	b.n	800d3ee <__ieee754_pow+0x12e>
 800d642:	bf00      	nop
 800d644:	f3af 8000 	nop.w
 800d648:	60000000 	.word	0x60000000
 800d64c:	3ff71547 	.word	0x3ff71547
 800d650:	f85ddf44 	.word	0xf85ddf44
 800d654:	3e54ae0b 	.word	0x3e54ae0b
 800d658:	55555555 	.word	0x55555555
 800d65c:	3fd55555 	.word	0x3fd55555
 800d660:	652b82fe 	.word	0x652b82fe
 800d664:	3ff71547 	.word	0x3ff71547
 800d668:	00000000 	.word	0x00000000
 800d66c:	bff00000 	.word	0xbff00000
 800d670:	8800759c 	.word	0x8800759c
 800d674:	7e37e43c 	.word	0x7e37e43c
 800d678:	3ff00000 	.word	0x3ff00000
 800d67c:	3fd00000 	.word	0x3fd00000
 800d680:	3fe00000 	.word	0x3fe00000
 800d684:	408fffff 	.word	0x408fffff
 800d688:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d68c:	f04f 0200 	mov.w	r2, #0
 800d690:	da05      	bge.n	800d69e <__ieee754_pow+0x3de>
 800d692:	4bd3      	ldr	r3, [pc, #844]	; (800d9e0 <__ieee754_pow+0x720>)
 800d694:	f7f2 ffb0 	bl	80005f8 <__aeabi_dmul>
 800d698:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d69c:	460c      	mov	r4, r1
 800d69e:	1523      	asrs	r3, r4, #20
 800d6a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d6a4:	4413      	add	r3, r2
 800d6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6a8:	4bce      	ldr	r3, [pc, #824]	; (800d9e4 <__ieee754_pow+0x724>)
 800d6aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d6ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d6b2:	429c      	cmp	r4, r3
 800d6b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d6b8:	dd08      	ble.n	800d6cc <__ieee754_pow+0x40c>
 800d6ba:	4bcb      	ldr	r3, [pc, #812]	; (800d9e8 <__ieee754_pow+0x728>)
 800d6bc:	429c      	cmp	r4, r3
 800d6be:	f340 815e 	ble.w	800d97e <__ieee754_pow+0x6be>
 800d6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6c8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d6cc:	f04f 0a00 	mov.w	sl, #0
 800d6d0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d6d4:	930c      	str	r3, [sp, #48]	; 0x30
 800d6d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6d8:	4bc4      	ldr	r3, [pc, #784]	; (800d9ec <__ieee754_pow+0x72c>)
 800d6da:	4413      	add	r3, r2
 800d6dc:	ed93 7b00 	vldr	d7, [r3]
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	ec53 2b17 	vmov	r2, r3, d7
 800d6e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d6ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d6ee:	f7f2 fdcb 	bl	8000288 <__aeabi_dsub>
 800d6f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d6f6:	4606      	mov	r6, r0
 800d6f8:	460f      	mov	r7, r1
 800d6fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6fe:	f7f2 fdc5 	bl	800028c <__adddf3>
 800d702:	4602      	mov	r2, r0
 800d704:	460b      	mov	r3, r1
 800d706:	2000      	movs	r0, #0
 800d708:	49b9      	ldr	r1, [pc, #740]	; (800d9f0 <__ieee754_pow+0x730>)
 800d70a:	f7f3 f89f 	bl	800084c <__aeabi_ddiv>
 800d70e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d712:	4602      	mov	r2, r0
 800d714:	460b      	mov	r3, r1
 800d716:	4630      	mov	r0, r6
 800d718:	4639      	mov	r1, r7
 800d71a:	f7f2 ff6d 	bl	80005f8 <__aeabi_dmul>
 800d71e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d722:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d726:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d72a:	2300      	movs	r3, #0
 800d72c:	9302      	str	r3, [sp, #8]
 800d72e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d732:	106d      	asrs	r5, r5, #1
 800d734:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d738:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d73c:	2200      	movs	r2, #0
 800d73e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800d742:	4640      	mov	r0, r8
 800d744:	4649      	mov	r1, r9
 800d746:	4614      	mov	r4, r2
 800d748:	461d      	mov	r5, r3
 800d74a:	f7f2 ff55 	bl	80005f8 <__aeabi_dmul>
 800d74e:	4602      	mov	r2, r0
 800d750:	460b      	mov	r3, r1
 800d752:	4630      	mov	r0, r6
 800d754:	4639      	mov	r1, r7
 800d756:	f7f2 fd97 	bl	8000288 <__aeabi_dsub>
 800d75a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d75e:	4606      	mov	r6, r0
 800d760:	460f      	mov	r7, r1
 800d762:	4620      	mov	r0, r4
 800d764:	4629      	mov	r1, r5
 800d766:	f7f2 fd8f 	bl	8000288 <__aeabi_dsub>
 800d76a:	4602      	mov	r2, r0
 800d76c:	460b      	mov	r3, r1
 800d76e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d772:	f7f2 fd89 	bl	8000288 <__aeabi_dsub>
 800d776:	4642      	mov	r2, r8
 800d778:	464b      	mov	r3, r9
 800d77a:	f7f2 ff3d 	bl	80005f8 <__aeabi_dmul>
 800d77e:	4602      	mov	r2, r0
 800d780:	460b      	mov	r3, r1
 800d782:	4630      	mov	r0, r6
 800d784:	4639      	mov	r1, r7
 800d786:	f7f2 fd7f 	bl	8000288 <__aeabi_dsub>
 800d78a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d78e:	f7f2 ff33 	bl	80005f8 <__aeabi_dmul>
 800d792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d796:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d79a:	4610      	mov	r0, r2
 800d79c:	4619      	mov	r1, r3
 800d79e:	f7f2 ff2b 	bl	80005f8 <__aeabi_dmul>
 800d7a2:	a37b      	add	r3, pc, #492	; (adr r3, 800d990 <__ieee754_pow+0x6d0>)
 800d7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a8:	4604      	mov	r4, r0
 800d7aa:	460d      	mov	r5, r1
 800d7ac:	f7f2 ff24 	bl	80005f8 <__aeabi_dmul>
 800d7b0:	a379      	add	r3, pc, #484	; (adr r3, 800d998 <__ieee754_pow+0x6d8>)
 800d7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b6:	f7f2 fd69 	bl	800028c <__adddf3>
 800d7ba:	4622      	mov	r2, r4
 800d7bc:	462b      	mov	r3, r5
 800d7be:	f7f2 ff1b 	bl	80005f8 <__aeabi_dmul>
 800d7c2:	a377      	add	r3, pc, #476	; (adr r3, 800d9a0 <__ieee754_pow+0x6e0>)
 800d7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c8:	f7f2 fd60 	bl	800028c <__adddf3>
 800d7cc:	4622      	mov	r2, r4
 800d7ce:	462b      	mov	r3, r5
 800d7d0:	f7f2 ff12 	bl	80005f8 <__aeabi_dmul>
 800d7d4:	a374      	add	r3, pc, #464	; (adr r3, 800d9a8 <__ieee754_pow+0x6e8>)
 800d7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7da:	f7f2 fd57 	bl	800028c <__adddf3>
 800d7de:	4622      	mov	r2, r4
 800d7e0:	462b      	mov	r3, r5
 800d7e2:	f7f2 ff09 	bl	80005f8 <__aeabi_dmul>
 800d7e6:	a372      	add	r3, pc, #456	; (adr r3, 800d9b0 <__ieee754_pow+0x6f0>)
 800d7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ec:	f7f2 fd4e 	bl	800028c <__adddf3>
 800d7f0:	4622      	mov	r2, r4
 800d7f2:	462b      	mov	r3, r5
 800d7f4:	f7f2 ff00 	bl	80005f8 <__aeabi_dmul>
 800d7f8:	a36f      	add	r3, pc, #444	; (adr r3, 800d9b8 <__ieee754_pow+0x6f8>)
 800d7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fe:	f7f2 fd45 	bl	800028c <__adddf3>
 800d802:	4622      	mov	r2, r4
 800d804:	4606      	mov	r6, r0
 800d806:	460f      	mov	r7, r1
 800d808:	462b      	mov	r3, r5
 800d80a:	4620      	mov	r0, r4
 800d80c:	4629      	mov	r1, r5
 800d80e:	f7f2 fef3 	bl	80005f8 <__aeabi_dmul>
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4630      	mov	r0, r6
 800d818:	4639      	mov	r1, r7
 800d81a:	f7f2 feed 	bl	80005f8 <__aeabi_dmul>
 800d81e:	4642      	mov	r2, r8
 800d820:	4604      	mov	r4, r0
 800d822:	460d      	mov	r5, r1
 800d824:	464b      	mov	r3, r9
 800d826:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d82a:	f7f2 fd2f 	bl	800028c <__adddf3>
 800d82e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d832:	f7f2 fee1 	bl	80005f8 <__aeabi_dmul>
 800d836:	4622      	mov	r2, r4
 800d838:	462b      	mov	r3, r5
 800d83a:	f7f2 fd27 	bl	800028c <__adddf3>
 800d83e:	4642      	mov	r2, r8
 800d840:	4606      	mov	r6, r0
 800d842:	460f      	mov	r7, r1
 800d844:	464b      	mov	r3, r9
 800d846:	4640      	mov	r0, r8
 800d848:	4649      	mov	r1, r9
 800d84a:	f7f2 fed5 	bl	80005f8 <__aeabi_dmul>
 800d84e:	2200      	movs	r2, #0
 800d850:	4b68      	ldr	r3, [pc, #416]	; (800d9f4 <__ieee754_pow+0x734>)
 800d852:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d856:	f7f2 fd19 	bl	800028c <__adddf3>
 800d85a:	4632      	mov	r2, r6
 800d85c:	463b      	mov	r3, r7
 800d85e:	f7f2 fd15 	bl	800028c <__adddf3>
 800d862:	9802      	ldr	r0, [sp, #8]
 800d864:	460d      	mov	r5, r1
 800d866:	4604      	mov	r4, r0
 800d868:	4602      	mov	r2, r0
 800d86a:	460b      	mov	r3, r1
 800d86c:	4640      	mov	r0, r8
 800d86e:	4649      	mov	r1, r9
 800d870:	f7f2 fec2 	bl	80005f8 <__aeabi_dmul>
 800d874:	2200      	movs	r2, #0
 800d876:	4680      	mov	r8, r0
 800d878:	4689      	mov	r9, r1
 800d87a:	4b5e      	ldr	r3, [pc, #376]	; (800d9f4 <__ieee754_pow+0x734>)
 800d87c:	4620      	mov	r0, r4
 800d87e:	4629      	mov	r1, r5
 800d880:	f7f2 fd02 	bl	8000288 <__aeabi_dsub>
 800d884:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d888:	f7f2 fcfe 	bl	8000288 <__aeabi_dsub>
 800d88c:	4602      	mov	r2, r0
 800d88e:	460b      	mov	r3, r1
 800d890:	4630      	mov	r0, r6
 800d892:	4639      	mov	r1, r7
 800d894:	f7f2 fcf8 	bl	8000288 <__aeabi_dsub>
 800d898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d89c:	f7f2 feac 	bl	80005f8 <__aeabi_dmul>
 800d8a0:	4622      	mov	r2, r4
 800d8a2:	4606      	mov	r6, r0
 800d8a4:	460f      	mov	r7, r1
 800d8a6:	462b      	mov	r3, r5
 800d8a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8ac:	f7f2 fea4 	bl	80005f8 <__aeabi_dmul>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	4639      	mov	r1, r7
 800d8b8:	f7f2 fce8 	bl	800028c <__adddf3>
 800d8bc:	4606      	mov	r6, r0
 800d8be:	460f      	mov	r7, r1
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	4640      	mov	r0, r8
 800d8c6:	4649      	mov	r1, r9
 800d8c8:	f7f2 fce0 	bl	800028c <__adddf3>
 800d8cc:	9802      	ldr	r0, [sp, #8]
 800d8ce:	a33c      	add	r3, pc, #240	; (adr r3, 800d9c0 <__ieee754_pow+0x700>)
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	4604      	mov	r4, r0
 800d8d6:	460d      	mov	r5, r1
 800d8d8:	f7f2 fe8e 	bl	80005f8 <__aeabi_dmul>
 800d8dc:	4642      	mov	r2, r8
 800d8de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d8e2:	464b      	mov	r3, r9
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	4629      	mov	r1, r5
 800d8e8:	f7f2 fcce 	bl	8000288 <__aeabi_dsub>
 800d8ec:	4602      	mov	r2, r0
 800d8ee:	460b      	mov	r3, r1
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	4639      	mov	r1, r7
 800d8f4:	f7f2 fcc8 	bl	8000288 <__aeabi_dsub>
 800d8f8:	a333      	add	r3, pc, #204	; (adr r3, 800d9c8 <__ieee754_pow+0x708>)
 800d8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fe:	f7f2 fe7b 	bl	80005f8 <__aeabi_dmul>
 800d902:	a333      	add	r3, pc, #204	; (adr r3, 800d9d0 <__ieee754_pow+0x710>)
 800d904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d908:	4606      	mov	r6, r0
 800d90a:	460f      	mov	r7, r1
 800d90c:	4620      	mov	r0, r4
 800d90e:	4629      	mov	r1, r5
 800d910:	f7f2 fe72 	bl	80005f8 <__aeabi_dmul>
 800d914:	4602      	mov	r2, r0
 800d916:	460b      	mov	r3, r1
 800d918:	4630      	mov	r0, r6
 800d91a:	4639      	mov	r1, r7
 800d91c:	f7f2 fcb6 	bl	800028c <__adddf3>
 800d920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d922:	4b35      	ldr	r3, [pc, #212]	; (800d9f8 <__ieee754_pow+0x738>)
 800d924:	4413      	add	r3, r2
 800d926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92a:	f7f2 fcaf 	bl	800028c <__adddf3>
 800d92e:	4604      	mov	r4, r0
 800d930:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d932:	460d      	mov	r5, r1
 800d934:	f7f2 fdf6 	bl	8000524 <__aeabi_i2d>
 800d938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d93a:	4b30      	ldr	r3, [pc, #192]	; (800d9fc <__ieee754_pow+0x73c>)
 800d93c:	4413      	add	r3, r2
 800d93e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d942:	4606      	mov	r6, r0
 800d944:	460f      	mov	r7, r1
 800d946:	4622      	mov	r2, r4
 800d948:	462b      	mov	r3, r5
 800d94a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d94e:	f7f2 fc9d 	bl	800028c <__adddf3>
 800d952:	4642      	mov	r2, r8
 800d954:	464b      	mov	r3, r9
 800d956:	f7f2 fc99 	bl	800028c <__adddf3>
 800d95a:	4632      	mov	r2, r6
 800d95c:	463b      	mov	r3, r7
 800d95e:	f7f2 fc95 	bl	800028c <__adddf3>
 800d962:	9802      	ldr	r0, [sp, #8]
 800d964:	4632      	mov	r2, r6
 800d966:	463b      	mov	r3, r7
 800d968:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d96c:	f7f2 fc8c 	bl	8000288 <__aeabi_dsub>
 800d970:	4642      	mov	r2, r8
 800d972:	464b      	mov	r3, r9
 800d974:	f7f2 fc88 	bl	8000288 <__aeabi_dsub>
 800d978:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d97c:	e607      	b.n	800d58e <__ieee754_pow+0x2ce>
 800d97e:	f04f 0a01 	mov.w	sl, #1
 800d982:	e6a5      	b.n	800d6d0 <__ieee754_pow+0x410>
 800d984:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800d9d8 <__ieee754_pow+0x718>
 800d988:	e613      	b.n	800d5b2 <__ieee754_pow+0x2f2>
 800d98a:	bf00      	nop
 800d98c:	f3af 8000 	nop.w
 800d990:	4a454eef 	.word	0x4a454eef
 800d994:	3fca7e28 	.word	0x3fca7e28
 800d998:	93c9db65 	.word	0x93c9db65
 800d99c:	3fcd864a 	.word	0x3fcd864a
 800d9a0:	a91d4101 	.word	0xa91d4101
 800d9a4:	3fd17460 	.word	0x3fd17460
 800d9a8:	518f264d 	.word	0x518f264d
 800d9ac:	3fd55555 	.word	0x3fd55555
 800d9b0:	db6fabff 	.word	0xdb6fabff
 800d9b4:	3fdb6db6 	.word	0x3fdb6db6
 800d9b8:	33333303 	.word	0x33333303
 800d9bc:	3fe33333 	.word	0x3fe33333
 800d9c0:	e0000000 	.word	0xe0000000
 800d9c4:	3feec709 	.word	0x3feec709
 800d9c8:	dc3a03fd 	.word	0xdc3a03fd
 800d9cc:	3feec709 	.word	0x3feec709
 800d9d0:	145b01f5 	.word	0x145b01f5
 800d9d4:	be3e2fe0 	.word	0xbe3e2fe0
 800d9d8:	00000000 	.word	0x00000000
 800d9dc:	3ff00000 	.word	0x3ff00000
 800d9e0:	43400000 	.word	0x43400000
 800d9e4:	0003988e 	.word	0x0003988e
 800d9e8:	000bb679 	.word	0x000bb679
 800d9ec:	0800f600 	.word	0x0800f600
 800d9f0:	3ff00000 	.word	0x3ff00000
 800d9f4:	40080000 	.word	0x40080000
 800d9f8:	0800f620 	.word	0x0800f620
 800d9fc:	0800f610 	.word	0x0800f610
 800da00:	a3b4      	add	r3, pc, #720	; (adr r3, 800dcd4 <__ieee754_pow+0xa14>)
 800da02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da06:	4640      	mov	r0, r8
 800da08:	4649      	mov	r1, r9
 800da0a:	f7f2 fc3f 	bl	800028c <__adddf3>
 800da0e:	4622      	mov	r2, r4
 800da10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da14:	462b      	mov	r3, r5
 800da16:	4630      	mov	r0, r6
 800da18:	4639      	mov	r1, r7
 800da1a:	f7f2 fc35 	bl	8000288 <__aeabi_dsub>
 800da1e:	4602      	mov	r2, r0
 800da20:	460b      	mov	r3, r1
 800da22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da26:	f7f3 f877 	bl	8000b18 <__aeabi_dcmpgt>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	f47f adfe 	bne.w	800d62c <__ieee754_pow+0x36c>
 800da30:	4aa3      	ldr	r2, [pc, #652]	; (800dcc0 <__ieee754_pow+0xa00>)
 800da32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da36:	4293      	cmp	r3, r2
 800da38:	f340 810a 	ble.w	800dc50 <__ieee754_pow+0x990>
 800da3c:	151b      	asrs	r3, r3, #20
 800da3e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800da42:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800da46:	fa4a f303 	asr.w	r3, sl, r3
 800da4a:	445b      	add	r3, fp
 800da4c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800da50:	4e9c      	ldr	r6, [pc, #624]	; (800dcc4 <__ieee754_pow+0xa04>)
 800da52:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800da56:	4116      	asrs	r6, r2
 800da58:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800da5c:	2000      	movs	r0, #0
 800da5e:	ea23 0106 	bic.w	r1, r3, r6
 800da62:	f1c2 0214 	rsb	r2, r2, #20
 800da66:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800da6a:	fa4a fa02 	asr.w	sl, sl, r2
 800da6e:	f1bb 0f00 	cmp.w	fp, #0
 800da72:	4602      	mov	r2, r0
 800da74:	460b      	mov	r3, r1
 800da76:	4620      	mov	r0, r4
 800da78:	4629      	mov	r1, r5
 800da7a:	bfb8      	it	lt
 800da7c:	f1ca 0a00 	rsblt	sl, sl, #0
 800da80:	f7f2 fc02 	bl	8000288 <__aeabi_dsub>
 800da84:	e9cd 0100 	strd	r0, r1, [sp]
 800da88:	4642      	mov	r2, r8
 800da8a:	464b      	mov	r3, r9
 800da8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da90:	f7f2 fbfc 	bl	800028c <__adddf3>
 800da94:	2000      	movs	r0, #0
 800da96:	a378      	add	r3, pc, #480	; (adr r3, 800dc78 <__ieee754_pow+0x9b8>)
 800da98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9c:	4604      	mov	r4, r0
 800da9e:	460d      	mov	r5, r1
 800daa0:	f7f2 fdaa 	bl	80005f8 <__aeabi_dmul>
 800daa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800daa8:	4606      	mov	r6, r0
 800daaa:	460f      	mov	r7, r1
 800daac:	4620      	mov	r0, r4
 800daae:	4629      	mov	r1, r5
 800dab0:	f7f2 fbea 	bl	8000288 <__aeabi_dsub>
 800dab4:	4602      	mov	r2, r0
 800dab6:	460b      	mov	r3, r1
 800dab8:	4640      	mov	r0, r8
 800daba:	4649      	mov	r1, r9
 800dabc:	f7f2 fbe4 	bl	8000288 <__aeabi_dsub>
 800dac0:	a36f      	add	r3, pc, #444	; (adr r3, 800dc80 <__ieee754_pow+0x9c0>)
 800dac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac6:	f7f2 fd97 	bl	80005f8 <__aeabi_dmul>
 800daca:	a36f      	add	r3, pc, #444	; (adr r3, 800dc88 <__ieee754_pow+0x9c8>)
 800dacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad0:	4680      	mov	r8, r0
 800dad2:	4689      	mov	r9, r1
 800dad4:	4620      	mov	r0, r4
 800dad6:	4629      	mov	r1, r5
 800dad8:	f7f2 fd8e 	bl	80005f8 <__aeabi_dmul>
 800dadc:	4602      	mov	r2, r0
 800dade:	460b      	mov	r3, r1
 800dae0:	4640      	mov	r0, r8
 800dae2:	4649      	mov	r1, r9
 800dae4:	f7f2 fbd2 	bl	800028c <__adddf3>
 800dae8:	4604      	mov	r4, r0
 800daea:	460d      	mov	r5, r1
 800daec:	4602      	mov	r2, r0
 800daee:	460b      	mov	r3, r1
 800daf0:	4630      	mov	r0, r6
 800daf2:	4639      	mov	r1, r7
 800daf4:	f7f2 fbca 	bl	800028c <__adddf3>
 800daf8:	4632      	mov	r2, r6
 800dafa:	463b      	mov	r3, r7
 800dafc:	4680      	mov	r8, r0
 800dafe:	4689      	mov	r9, r1
 800db00:	f7f2 fbc2 	bl	8000288 <__aeabi_dsub>
 800db04:	4602      	mov	r2, r0
 800db06:	460b      	mov	r3, r1
 800db08:	4620      	mov	r0, r4
 800db0a:	4629      	mov	r1, r5
 800db0c:	f7f2 fbbc 	bl	8000288 <__aeabi_dsub>
 800db10:	4642      	mov	r2, r8
 800db12:	4606      	mov	r6, r0
 800db14:	460f      	mov	r7, r1
 800db16:	464b      	mov	r3, r9
 800db18:	4640      	mov	r0, r8
 800db1a:	4649      	mov	r1, r9
 800db1c:	f7f2 fd6c 	bl	80005f8 <__aeabi_dmul>
 800db20:	a35b      	add	r3, pc, #364	; (adr r3, 800dc90 <__ieee754_pow+0x9d0>)
 800db22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db26:	4604      	mov	r4, r0
 800db28:	460d      	mov	r5, r1
 800db2a:	f7f2 fd65 	bl	80005f8 <__aeabi_dmul>
 800db2e:	a35a      	add	r3, pc, #360	; (adr r3, 800dc98 <__ieee754_pow+0x9d8>)
 800db30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db34:	f7f2 fba8 	bl	8000288 <__aeabi_dsub>
 800db38:	4622      	mov	r2, r4
 800db3a:	462b      	mov	r3, r5
 800db3c:	f7f2 fd5c 	bl	80005f8 <__aeabi_dmul>
 800db40:	a357      	add	r3, pc, #348	; (adr r3, 800dca0 <__ieee754_pow+0x9e0>)
 800db42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db46:	f7f2 fba1 	bl	800028c <__adddf3>
 800db4a:	4622      	mov	r2, r4
 800db4c:	462b      	mov	r3, r5
 800db4e:	f7f2 fd53 	bl	80005f8 <__aeabi_dmul>
 800db52:	a355      	add	r3, pc, #340	; (adr r3, 800dca8 <__ieee754_pow+0x9e8>)
 800db54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db58:	f7f2 fb96 	bl	8000288 <__aeabi_dsub>
 800db5c:	4622      	mov	r2, r4
 800db5e:	462b      	mov	r3, r5
 800db60:	f7f2 fd4a 	bl	80005f8 <__aeabi_dmul>
 800db64:	a352      	add	r3, pc, #328	; (adr r3, 800dcb0 <__ieee754_pow+0x9f0>)
 800db66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6a:	f7f2 fb8f 	bl	800028c <__adddf3>
 800db6e:	4622      	mov	r2, r4
 800db70:	462b      	mov	r3, r5
 800db72:	f7f2 fd41 	bl	80005f8 <__aeabi_dmul>
 800db76:	4602      	mov	r2, r0
 800db78:	460b      	mov	r3, r1
 800db7a:	4640      	mov	r0, r8
 800db7c:	4649      	mov	r1, r9
 800db7e:	f7f2 fb83 	bl	8000288 <__aeabi_dsub>
 800db82:	4604      	mov	r4, r0
 800db84:	460d      	mov	r5, r1
 800db86:	4602      	mov	r2, r0
 800db88:	460b      	mov	r3, r1
 800db8a:	4640      	mov	r0, r8
 800db8c:	4649      	mov	r1, r9
 800db8e:	f7f2 fd33 	bl	80005f8 <__aeabi_dmul>
 800db92:	2200      	movs	r2, #0
 800db94:	e9cd 0100 	strd	r0, r1, [sp]
 800db98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db9c:	4620      	mov	r0, r4
 800db9e:	4629      	mov	r1, r5
 800dba0:	f7f2 fb72 	bl	8000288 <__aeabi_dsub>
 800dba4:	4602      	mov	r2, r0
 800dba6:	460b      	mov	r3, r1
 800dba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbac:	f7f2 fe4e 	bl	800084c <__aeabi_ddiv>
 800dbb0:	4632      	mov	r2, r6
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	460d      	mov	r5, r1
 800dbb6:	463b      	mov	r3, r7
 800dbb8:	4640      	mov	r0, r8
 800dbba:	4649      	mov	r1, r9
 800dbbc:	f7f2 fd1c 	bl	80005f8 <__aeabi_dmul>
 800dbc0:	4632      	mov	r2, r6
 800dbc2:	463b      	mov	r3, r7
 800dbc4:	f7f2 fb62 	bl	800028c <__adddf3>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	460b      	mov	r3, r1
 800dbcc:	4620      	mov	r0, r4
 800dbce:	4629      	mov	r1, r5
 800dbd0:	f7f2 fb5a 	bl	8000288 <__aeabi_dsub>
 800dbd4:	4642      	mov	r2, r8
 800dbd6:	464b      	mov	r3, r9
 800dbd8:	f7f2 fb56 	bl	8000288 <__aeabi_dsub>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	460b      	mov	r3, r1
 800dbe0:	2000      	movs	r0, #0
 800dbe2:	4939      	ldr	r1, [pc, #228]	; (800dcc8 <__ieee754_pow+0xa08>)
 800dbe4:	f7f2 fb50 	bl	8000288 <__aeabi_dsub>
 800dbe8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800dbec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	da2f      	bge.n	800dc56 <__ieee754_pow+0x996>
 800dbf6:	4650      	mov	r0, sl
 800dbf8:	ec43 2b10 	vmov	d0, r2, r3
 800dbfc:	f001 faa0 	bl	800f140 <scalbn>
 800dc00:	ec51 0b10 	vmov	r0, r1, d0
 800dc04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc08:	f7ff bbf1 	b.w	800d3ee <__ieee754_pow+0x12e>
 800dc0c:	4b2f      	ldr	r3, [pc, #188]	; (800dccc <__ieee754_pow+0xa0c>)
 800dc0e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dc12:	429e      	cmp	r6, r3
 800dc14:	f77f af0c 	ble.w	800da30 <__ieee754_pow+0x770>
 800dc18:	4b2d      	ldr	r3, [pc, #180]	; (800dcd0 <__ieee754_pow+0xa10>)
 800dc1a:	440b      	add	r3, r1
 800dc1c:	4303      	orrs	r3, r0
 800dc1e:	d00b      	beq.n	800dc38 <__ieee754_pow+0x978>
 800dc20:	a325      	add	r3, pc, #148	; (adr r3, 800dcb8 <__ieee754_pow+0x9f8>)
 800dc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc2a:	f7f2 fce5 	bl	80005f8 <__aeabi_dmul>
 800dc2e:	a322      	add	r3, pc, #136	; (adr r3, 800dcb8 <__ieee754_pow+0x9f8>)
 800dc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc34:	f7ff bbdb 	b.w	800d3ee <__ieee754_pow+0x12e>
 800dc38:	4622      	mov	r2, r4
 800dc3a:	462b      	mov	r3, r5
 800dc3c:	f7f2 fb24 	bl	8000288 <__aeabi_dsub>
 800dc40:	4642      	mov	r2, r8
 800dc42:	464b      	mov	r3, r9
 800dc44:	f7f2 ff5e 	bl	8000b04 <__aeabi_dcmpge>
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	f43f aef1 	beq.w	800da30 <__ieee754_pow+0x770>
 800dc4e:	e7e7      	b.n	800dc20 <__ieee754_pow+0x960>
 800dc50:	f04f 0a00 	mov.w	sl, #0
 800dc54:	e718      	b.n	800da88 <__ieee754_pow+0x7c8>
 800dc56:	4621      	mov	r1, r4
 800dc58:	e7d4      	b.n	800dc04 <__ieee754_pow+0x944>
 800dc5a:	2000      	movs	r0, #0
 800dc5c:	491a      	ldr	r1, [pc, #104]	; (800dcc8 <__ieee754_pow+0xa08>)
 800dc5e:	f7ff bb8f 	b.w	800d380 <__ieee754_pow+0xc0>
 800dc62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc66:	f7ff bb8b 	b.w	800d380 <__ieee754_pow+0xc0>
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	4639      	mov	r1, r7
 800dc6e:	f7ff bb87 	b.w	800d380 <__ieee754_pow+0xc0>
 800dc72:	4693      	mov	fp, r2
 800dc74:	f7ff bb98 	b.w	800d3a8 <__ieee754_pow+0xe8>
 800dc78:	00000000 	.word	0x00000000
 800dc7c:	3fe62e43 	.word	0x3fe62e43
 800dc80:	fefa39ef 	.word	0xfefa39ef
 800dc84:	3fe62e42 	.word	0x3fe62e42
 800dc88:	0ca86c39 	.word	0x0ca86c39
 800dc8c:	be205c61 	.word	0xbe205c61
 800dc90:	72bea4d0 	.word	0x72bea4d0
 800dc94:	3e663769 	.word	0x3e663769
 800dc98:	c5d26bf1 	.word	0xc5d26bf1
 800dc9c:	3ebbbd41 	.word	0x3ebbbd41
 800dca0:	af25de2c 	.word	0xaf25de2c
 800dca4:	3f11566a 	.word	0x3f11566a
 800dca8:	16bebd93 	.word	0x16bebd93
 800dcac:	3f66c16c 	.word	0x3f66c16c
 800dcb0:	5555553e 	.word	0x5555553e
 800dcb4:	3fc55555 	.word	0x3fc55555
 800dcb8:	c2f8f359 	.word	0xc2f8f359
 800dcbc:	01a56e1f 	.word	0x01a56e1f
 800dcc0:	3fe00000 	.word	0x3fe00000
 800dcc4:	000fffff 	.word	0x000fffff
 800dcc8:	3ff00000 	.word	0x3ff00000
 800dccc:	4090cbff 	.word	0x4090cbff
 800dcd0:	3f6f3400 	.word	0x3f6f3400
 800dcd4:	652b82fe 	.word	0x652b82fe
 800dcd8:	3c971547 	.word	0x3c971547
 800dcdc:	00000000 	.word	0x00000000

0800dce0 <__ieee754_rem_pio2>:
 800dce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce4:	ec57 6b10 	vmov	r6, r7, d0
 800dce8:	4bc3      	ldr	r3, [pc, #780]	; (800dff8 <__ieee754_rem_pio2+0x318>)
 800dcea:	b08d      	sub	sp, #52	; 0x34
 800dcec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800dcf0:	4598      	cmp	r8, r3
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	9704      	str	r7, [sp, #16]
 800dcf6:	dc07      	bgt.n	800dd08 <__ieee754_rem_pio2+0x28>
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	ed84 0b00 	vstr	d0, [r4]
 800dd00:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dd04:	2500      	movs	r5, #0
 800dd06:	e027      	b.n	800dd58 <__ieee754_rem_pio2+0x78>
 800dd08:	4bbc      	ldr	r3, [pc, #752]	; (800dffc <__ieee754_rem_pio2+0x31c>)
 800dd0a:	4598      	cmp	r8, r3
 800dd0c:	dc75      	bgt.n	800ddfa <__ieee754_rem_pio2+0x11a>
 800dd0e:	9b04      	ldr	r3, [sp, #16]
 800dd10:	4dbb      	ldr	r5, [pc, #748]	; (800e000 <__ieee754_rem_pio2+0x320>)
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	ee10 0a10 	vmov	r0, s0
 800dd18:	a3a9      	add	r3, pc, #676	; (adr r3, 800dfc0 <__ieee754_rem_pio2+0x2e0>)
 800dd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1e:	4639      	mov	r1, r7
 800dd20:	dd36      	ble.n	800dd90 <__ieee754_rem_pio2+0xb0>
 800dd22:	f7f2 fab1 	bl	8000288 <__aeabi_dsub>
 800dd26:	45a8      	cmp	r8, r5
 800dd28:	4606      	mov	r6, r0
 800dd2a:	460f      	mov	r7, r1
 800dd2c:	d018      	beq.n	800dd60 <__ieee754_rem_pio2+0x80>
 800dd2e:	a3a6      	add	r3, pc, #664	; (adr r3, 800dfc8 <__ieee754_rem_pio2+0x2e8>)
 800dd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd34:	f7f2 faa8 	bl	8000288 <__aeabi_dsub>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	460b      	mov	r3, r1
 800dd3c:	e9c4 2300 	strd	r2, r3, [r4]
 800dd40:	4630      	mov	r0, r6
 800dd42:	4639      	mov	r1, r7
 800dd44:	f7f2 faa0 	bl	8000288 <__aeabi_dsub>
 800dd48:	a39f      	add	r3, pc, #636	; (adr r3, 800dfc8 <__ieee754_rem_pio2+0x2e8>)
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	f7f2 fa9b 	bl	8000288 <__aeabi_dsub>
 800dd52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dd56:	2501      	movs	r5, #1
 800dd58:	4628      	mov	r0, r5
 800dd5a:	b00d      	add	sp, #52	; 0x34
 800dd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd60:	a39b      	add	r3, pc, #620	; (adr r3, 800dfd0 <__ieee754_rem_pio2+0x2f0>)
 800dd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd66:	f7f2 fa8f 	bl	8000288 <__aeabi_dsub>
 800dd6a:	a39b      	add	r3, pc, #620	; (adr r3, 800dfd8 <__ieee754_rem_pio2+0x2f8>)
 800dd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd70:	4606      	mov	r6, r0
 800dd72:	460f      	mov	r7, r1
 800dd74:	f7f2 fa88 	bl	8000288 <__aeabi_dsub>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	e9c4 2300 	strd	r2, r3, [r4]
 800dd80:	4630      	mov	r0, r6
 800dd82:	4639      	mov	r1, r7
 800dd84:	f7f2 fa80 	bl	8000288 <__aeabi_dsub>
 800dd88:	a393      	add	r3, pc, #588	; (adr r3, 800dfd8 <__ieee754_rem_pio2+0x2f8>)
 800dd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8e:	e7de      	b.n	800dd4e <__ieee754_rem_pio2+0x6e>
 800dd90:	f7f2 fa7c 	bl	800028c <__adddf3>
 800dd94:	45a8      	cmp	r8, r5
 800dd96:	4606      	mov	r6, r0
 800dd98:	460f      	mov	r7, r1
 800dd9a:	d016      	beq.n	800ddca <__ieee754_rem_pio2+0xea>
 800dd9c:	a38a      	add	r3, pc, #552	; (adr r3, 800dfc8 <__ieee754_rem_pio2+0x2e8>)
 800dd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda2:	f7f2 fa73 	bl	800028c <__adddf3>
 800dda6:	4602      	mov	r2, r0
 800dda8:	460b      	mov	r3, r1
 800ddaa:	e9c4 2300 	strd	r2, r3, [r4]
 800ddae:	4630      	mov	r0, r6
 800ddb0:	4639      	mov	r1, r7
 800ddb2:	f7f2 fa69 	bl	8000288 <__aeabi_dsub>
 800ddb6:	a384      	add	r3, pc, #528	; (adr r3, 800dfc8 <__ieee754_rem_pio2+0x2e8>)
 800ddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbc:	f7f2 fa66 	bl	800028c <__adddf3>
 800ddc0:	f04f 35ff 	mov.w	r5, #4294967295
 800ddc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ddc8:	e7c6      	b.n	800dd58 <__ieee754_rem_pio2+0x78>
 800ddca:	a381      	add	r3, pc, #516	; (adr r3, 800dfd0 <__ieee754_rem_pio2+0x2f0>)
 800ddcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd0:	f7f2 fa5c 	bl	800028c <__adddf3>
 800ddd4:	a380      	add	r3, pc, #512	; (adr r3, 800dfd8 <__ieee754_rem_pio2+0x2f8>)
 800ddd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddda:	4606      	mov	r6, r0
 800dddc:	460f      	mov	r7, r1
 800ddde:	f7f2 fa55 	bl	800028c <__adddf3>
 800dde2:	4602      	mov	r2, r0
 800dde4:	460b      	mov	r3, r1
 800dde6:	e9c4 2300 	strd	r2, r3, [r4]
 800ddea:	4630      	mov	r0, r6
 800ddec:	4639      	mov	r1, r7
 800ddee:	f7f2 fa4b 	bl	8000288 <__aeabi_dsub>
 800ddf2:	a379      	add	r3, pc, #484	; (adr r3, 800dfd8 <__ieee754_rem_pio2+0x2f8>)
 800ddf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf8:	e7e0      	b.n	800ddbc <__ieee754_rem_pio2+0xdc>
 800ddfa:	4b82      	ldr	r3, [pc, #520]	; (800e004 <__ieee754_rem_pio2+0x324>)
 800ddfc:	4598      	cmp	r8, r3
 800ddfe:	f300 80d0 	bgt.w	800dfa2 <__ieee754_rem_pio2+0x2c2>
 800de02:	f001 f875 	bl	800eef0 <fabs>
 800de06:	ec57 6b10 	vmov	r6, r7, d0
 800de0a:	ee10 0a10 	vmov	r0, s0
 800de0e:	a374      	add	r3, pc, #464	; (adr r3, 800dfe0 <__ieee754_rem_pio2+0x300>)
 800de10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de14:	4639      	mov	r1, r7
 800de16:	f7f2 fbef 	bl	80005f8 <__aeabi_dmul>
 800de1a:	2200      	movs	r2, #0
 800de1c:	4b7a      	ldr	r3, [pc, #488]	; (800e008 <__ieee754_rem_pio2+0x328>)
 800de1e:	f7f2 fa35 	bl	800028c <__adddf3>
 800de22:	f7f2 fe99 	bl	8000b58 <__aeabi_d2iz>
 800de26:	4605      	mov	r5, r0
 800de28:	f7f2 fb7c 	bl	8000524 <__aeabi_i2d>
 800de2c:	a364      	add	r3, pc, #400	; (adr r3, 800dfc0 <__ieee754_rem_pio2+0x2e0>)
 800de2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de36:	f7f2 fbdf 	bl	80005f8 <__aeabi_dmul>
 800de3a:	4602      	mov	r2, r0
 800de3c:	460b      	mov	r3, r1
 800de3e:	4630      	mov	r0, r6
 800de40:	4639      	mov	r1, r7
 800de42:	f7f2 fa21 	bl	8000288 <__aeabi_dsub>
 800de46:	a360      	add	r3, pc, #384	; (adr r3, 800dfc8 <__ieee754_rem_pio2+0x2e8>)
 800de48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4c:	4682      	mov	sl, r0
 800de4e:	468b      	mov	fp, r1
 800de50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de54:	f7f2 fbd0 	bl	80005f8 <__aeabi_dmul>
 800de58:	2d1f      	cmp	r5, #31
 800de5a:	4606      	mov	r6, r0
 800de5c:	460f      	mov	r7, r1
 800de5e:	dc0c      	bgt.n	800de7a <__ieee754_rem_pio2+0x19a>
 800de60:	1e6a      	subs	r2, r5, #1
 800de62:	4b6a      	ldr	r3, [pc, #424]	; (800e00c <__ieee754_rem_pio2+0x32c>)
 800de64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de68:	4543      	cmp	r3, r8
 800de6a:	d006      	beq.n	800de7a <__ieee754_rem_pio2+0x19a>
 800de6c:	4632      	mov	r2, r6
 800de6e:	463b      	mov	r3, r7
 800de70:	4650      	mov	r0, sl
 800de72:	4659      	mov	r1, fp
 800de74:	f7f2 fa08 	bl	8000288 <__aeabi_dsub>
 800de78:	e00e      	b.n	800de98 <__ieee754_rem_pio2+0x1b8>
 800de7a:	4632      	mov	r2, r6
 800de7c:	463b      	mov	r3, r7
 800de7e:	4650      	mov	r0, sl
 800de80:	4659      	mov	r1, fp
 800de82:	f7f2 fa01 	bl	8000288 <__aeabi_dsub>
 800de86:	ea4f 5328 	mov.w	r3, r8, asr #20
 800de8a:	9305      	str	r3, [sp, #20]
 800de8c:	9a05      	ldr	r2, [sp, #20]
 800de8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800de92:	1ad3      	subs	r3, r2, r3
 800de94:	2b10      	cmp	r3, #16
 800de96:	dc02      	bgt.n	800de9e <__ieee754_rem_pio2+0x1be>
 800de98:	e9c4 0100 	strd	r0, r1, [r4]
 800de9c:	e039      	b.n	800df12 <__ieee754_rem_pio2+0x232>
 800de9e:	a34c      	add	r3, pc, #304	; (adr r3, 800dfd0 <__ieee754_rem_pio2+0x2f0>)
 800dea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dea8:	f7f2 fba6 	bl	80005f8 <__aeabi_dmul>
 800deac:	4606      	mov	r6, r0
 800deae:	460f      	mov	r7, r1
 800deb0:	4602      	mov	r2, r0
 800deb2:	460b      	mov	r3, r1
 800deb4:	4650      	mov	r0, sl
 800deb6:	4659      	mov	r1, fp
 800deb8:	f7f2 f9e6 	bl	8000288 <__aeabi_dsub>
 800debc:	4602      	mov	r2, r0
 800debe:	460b      	mov	r3, r1
 800dec0:	4680      	mov	r8, r0
 800dec2:	4689      	mov	r9, r1
 800dec4:	4650      	mov	r0, sl
 800dec6:	4659      	mov	r1, fp
 800dec8:	f7f2 f9de 	bl	8000288 <__aeabi_dsub>
 800decc:	4632      	mov	r2, r6
 800dece:	463b      	mov	r3, r7
 800ded0:	f7f2 f9da 	bl	8000288 <__aeabi_dsub>
 800ded4:	a340      	add	r3, pc, #256	; (adr r3, 800dfd8 <__ieee754_rem_pio2+0x2f8>)
 800ded6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deda:	4606      	mov	r6, r0
 800dedc:	460f      	mov	r7, r1
 800dede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dee2:	f7f2 fb89 	bl	80005f8 <__aeabi_dmul>
 800dee6:	4632      	mov	r2, r6
 800dee8:	463b      	mov	r3, r7
 800deea:	f7f2 f9cd 	bl	8000288 <__aeabi_dsub>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	4606      	mov	r6, r0
 800def4:	460f      	mov	r7, r1
 800def6:	4640      	mov	r0, r8
 800def8:	4649      	mov	r1, r9
 800defa:	f7f2 f9c5 	bl	8000288 <__aeabi_dsub>
 800defe:	9a05      	ldr	r2, [sp, #20]
 800df00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800df04:	1ad3      	subs	r3, r2, r3
 800df06:	2b31      	cmp	r3, #49	; 0x31
 800df08:	dc20      	bgt.n	800df4c <__ieee754_rem_pio2+0x26c>
 800df0a:	e9c4 0100 	strd	r0, r1, [r4]
 800df0e:	46c2      	mov	sl, r8
 800df10:	46cb      	mov	fp, r9
 800df12:	e9d4 8900 	ldrd	r8, r9, [r4]
 800df16:	4650      	mov	r0, sl
 800df18:	4642      	mov	r2, r8
 800df1a:	464b      	mov	r3, r9
 800df1c:	4659      	mov	r1, fp
 800df1e:	f7f2 f9b3 	bl	8000288 <__aeabi_dsub>
 800df22:	463b      	mov	r3, r7
 800df24:	4632      	mov	r2, r6
 800df26:	f7f2 f9af 	bl	8000288 <__aeabi_dsub>
 800df2a:	9b04      	ldr	r3, [sp, #16]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800df32:	f6bf af11 	bge.w	800dd58 <__ieee754_rem_pio2+0x78>
 800df36:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800df3a:	6063      	str	r3, [r4, #4]
 800df3c:	f8c4 8000 	str.w	r8, [r4]
 800df40:	60a0      	str	r0, [r4, #8]
 800df42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df46:	60e3      	str	r3, [r4, #12]
 800df48:	426d      	negs	r5, r5
 800df4a:	e705      	b.n	800dd58 <__ieee754_rem_pio2+0x78>
 800df4c:	a326      	add	r3, pc, #152	; (adr r3, 800dfe8 <__ieee754_rem_pio2+0x308>)
 800df4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df56:	f7f2 fb4f 	bl	80005f8 <__aeabi_dmul>
 800df5a:	4606      	mov	r6, r0
 800df5c:	460f      	mov	r7, r1
 800df5e:	4602      	mov	r2, r0
 800df60:	460b      	mov	r3, r1
 800df62:	4640      	mov	r0, r8
 800df64:	4649      	mov	r1, r9
 800df66:	f7f2 f98f 	bl	8000288 <__aeabi_dsub>
 800df6a:	4602      	mov	r2, r0
 800df6c:	460b      	mov	r3, r1
 800df6e:	4682      	mov	sl, r0
 800df70:	468b      	mov	fp, r1
 800df72:	4640      	mov	r0, r8
 800df74:	4649      	mov	r1, r9
 800df76:	f7f2 f987 	bl	8000288 <__aeabi_dsub>
 800df7a:	4632      	mov	r2, r6
 800df7c:	463b      	mov	r3, r7
 800df7e:	f7f2 f983 	bl	8000288 <__aeabi_dsub>
 800df82:	a31b      	add	r3, pc, #108	; (adr r3, 800dff0 <__ieee754_rem_pio2+0x310>)
 800df84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df88:	4606      	mov	r6, r0
 800df8a:	460f      	mov	r7, r1
 800df8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df90:	f7f2 fb32 	bl	80005f8 <__aeabi_dmul>
 800df94:	4632      	mov	r2, r6
 800df96:	463b      	mov	r3, r7
 800df98:	f7f2 f976 	bl	8000288 <__aeabi_dsub>
 800df9c:	4606      	mov	r6, r0
 800df9e:	460f      	mov	r7, r1
 800dfa0:	e764      	b.n	800de6c <__ieee754_rem_pio2+0x18c>
 800dfa2:	4b1b      	ldr	r3, [pc, #108]	; (800e010 <__ieee754_rem_pio2+0x330>)
 800dfa4:	4598      	cmp	r8, r3
 800dfa6:	dd35      	ble.n	800e014 <__ieee754_rem_pio2+0x334>
 800dfa8:	ee10 2a10 	vmov	r2, s0
 800dfac:	463b      	mov	r3, r7
 800dfae:	4630      	mov	r0, r6
 800dfb0:	4639      	mov	r1, r7
 800dfb2:	f7f2 f969 	bl	8000288 <__aeabi_dsub>
 800dfb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dfba:	e9c4 0100 	strd	r0, r1, [r4]
 800dfbe:	e6a1      	b.n	800dd04 <__ieee754_rem_pio2+0x24>
 800dfc0:	54400000 	.word	0x54400000
 800dfc4:	3ff921fb 	.word	0x3ff921fb
 800dfc8:	1a626331 	.word	0x1a626331
 800dfcc:	3dd0b461 	.word	0x3dd0b461
 800dfd0:	1a600000 	.word	0x1a600000
 800dfd4:	3dd0b461 	.word	0x3dd0b461
 800dfd8:	2e037073 	.word	0x2e037073
 800dfdc:	3ba3198a 	.word	0x3ba3198a
 800dfe0:	6dc9c883 	.word	0x6dc9c883
 800dfe4:	3fe45f30 	.word	0x3fe45f30
 800dfe8:	2e000000 	.word	0x2e000000
 800dfec:	3ba3198a 	.word	0x3ba3198a
 800dff0:	252049c1 	.word	0x252049c1
 800dff4:	397b839a 	.word	0x397b839a
 800dff8:	3fe921fb 	.word	0x3fe921fb
 800dffc:	4002d97b 	.word	0x4002d97b
 800e000:	3ff921fb 	.word	0x3ff921fb
 800e004:	413921fb 	.word	0x413921fb
 800e008:	3fe00000 	.word	0x3fe00000
 800e00c:	0800f630 	.word	0x0800f630
 800e010:	7fefffff 	.word	0x7fefffff
 800e014:	ea4f 5528 	mov.w	r5, r8, asr #20
 800e018:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800e01c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800e020:	4630      	mov	r0, r6
 800e022:	460f      	mov	r7, r1
 800e024:	f7f2 fd98 	bl	8000b58 <__aeabi_d2iz>
 800e028:	f7f2 fa7c 	bl	8000524 <__aeabi_i2d>
 800e02c:	4602      	mov	r2, r0
 800e02e:	460b      	mov	r3, r1
 800e030:	4630      	mov	r0, r6
 800e032:	4639      	mov	r1, r7
 800e034:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e038:	f7f2 f926 	bl	8000288 <__aeabi_dsub>
 800e03c:	2200      	movs	r2, #0
 800e03e:	4b1f      	ldr	r3, [pc, #124]	; (800e0bc <__ieee754_rem_pio2+0x3dc>)
 800e040:	f7f2 fada 	bl	80005f8 <__aeabi_dmul>
 800e044:	460f      	mov	r7, r1
 800e046:	4606      	mov	r6, r0
 800e048:	f7f2 fd86 	bl	8000b58 <__aeabi_d2iz>
 800e04c:	f7f2 fa6a 	bl	8000524 <__aeabi_i2d>
 800e050:	4602      	mov	r2, r0
 800e052:	460b      	mov	r3, r1
 800e054:	4630      	mov	r0, r6
 800e056:	4639      	mov	r1, r7
 800e058:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e05c:	f7f2 f914 	bl	8000288 <__aeabi_dsub>
 800e060:	2200      	movs	r2, #0
 800e062:	4b16      	ldr	r3, [pc, #88]	; (800e0bc <__ieee754_rem_pio2+0x3dc>)
 800e064:	f7f2 fac8 	bl	80005f8 <__aeabi_dmul>
 800e068:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e06c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800e070:	f04f 0803 	mov.w	r8, #3
 800e074:	2600      	movs	r6, #0
 800e076:	2700      	movs	r7, #0
 800e078:	4632      	mov	r2, r6
 800e07a:	463b      	mov	r3, r7
 800e07c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800e080:	f108 3aff 	add.w	sl, r8, #4294967295
 800e084:	f7f2 fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 800e088:	b9b0      	cbnz	r0, 800e0b8 <__ieee754_rem_pio2+0x3d8>
 800e08a:	4b0d      	ldr	r3, [pc, #52]	; (800e0c0 <__ieee754_rem_pio2+0x3e0>)
 800e08c:	9301      	str	r3, [sp, #4]
 800e08e:	2302      	movs	r3, #2
 800e090:	9300      	str	r3, [sp, #0]
 800e092:	462a      	mov	r2, r5
 800e094:	4643      	mov	r3, r8
 800e096:	4621      	mov	r1, r4
 800e098:	a806      	add	r0, sp, #24
 800e09a:	f000 f98d 	bl	800e3b8 <__kernel_rem_pio2>
 800e09e:	9b04      	ldr	r3, [sp, #16]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	4605      	mov	r5, r0
 800e0a4:	f6bf ae58 	bge.w	800dd58 <__ieee754_rem_pio2+0x78>
 800e0a8:	6863      	ldr	r3, [r4, #4]
 800e0aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e0ae:	6063      	str	r3, [r4, #4]
 800e0b0:	68e3      	ldr	r3, [r4, #12]
 800e0b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e0b6:	e746      	b.n	800df46 <__ieee754_rem_pio2+0x266>
 800e0b8:	46d0      	mov	r8, sl
 800e0ba:	e7dd      	b.n	800e078 <__ieee754_rem_pio2+0x398>
 800e0bc:	41700000 	.word	0x41700000
 800e0c0:	0800f6b0 	.word	0x0800f6b0

0800e0c4 <__ieee754_sqrt>:
 800e0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c8:	4955      	ldr	r1, [pc, #340]	; (800e220 <__ieee754_sqrt+0x15c>)
 800e0ca:	ec55 4b10 	vmov	r4, r5, d0
 800e0ce:	43a9      	bics	r1, r5
 800e0d0:	462b      	mov	r3, r5
 800e0d2:	462a      	mov	r2, r5
 800e0d4:	d112      	bne.n	800e0fc <__ieee754_sqrt+0x38>
 800e0d6:	ee10 2a10 	vmov	r2, s0
 800e0da:	ee10 0a10 	vmov	r0, s0
 800e0de:	4629      	mov	r1, r5
 800e0e0:	f7f2 fa8a 	bl	80005f8 <__aeabi_dmul>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	f7f2 f8ce 	bl	800028c <__adddf3>
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	460d      	mov	r5, r1
 800e0f4:	ec45 4b10 	vmov	d0, r4, r5
 800e0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0fc:	2d00      	cmp	r5, #0
 800e0fe:	ee10 0a10 	vmov	r0, s0
 800e102:	4621      	mov	r1, r4
 800e104:	dc0f      	bgt.n	800e126 <__ieee754_sqrt+0x62>
 800e106:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e10a:	4330      	orrs	r0, r6
 800e10c:	d0f2      	beq.n	800e0f4 <__ieee754_sqrt+0x30>
 800e10e:	b155      	cbz	r5, 800e126 <__ieee754_sqrt+0x62>
 800e110:	ee10 2a10 	vmov	r2, s0
 800e114:	4620      	mov	r0, r4
 800e116:	4629      	mov	r1, r5
 800e118:	f7f2 f8b6 	bl	8000288 <__aeabi_dsub>
 800e11c:	4602      	mov	r2, r0
 800e11e:	460b      	mov	r3, r1
 800e120:	f7f2 fb94 	bl	800084c <__aeabi_ddiv>
 800e124:	e7e4      	b.n	800e0f0 <__ieee754_sqrt+0x2c>
 800e126:	151b      	asrs	r3, r3, #20
 800e128:	d073      	beq.n	800e212 <__ieee754_sqrt+0x14e>
 800e12a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e12e:	07dd      	lsls	r5, r3, #31
 800e130:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e134:	bf48      	it	mi
 800e136:	0fc8      	lsrmi	r0, r1, #31
 800e138:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e13c:	bf44      	itt	mi
 800e13e:	0049      	lslmi	r1, r1, #1
 800e140:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800e144:	2500      	movs	r5, #0
 800e146:	1058      	asrs	r0, r3, #1
 800e148:	0fcb      	lsrs	r3, r1, #31
 800e14a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800e14e:	0049      	lsls	r1, r1, #1
 800e150:	2316      	movs	r3, #22
 800e152:	462c      	mov	r4, r5
 800e154:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800e158:	19a7      	adds	r7, r4, r6
 800e15a:	4297      	cmp	r7, r2
 800e15c:	bfde      	ittt	le
 800e15e:	19bc      	addle	r4, r7, r6
 800e160:	1bd2      	suble	r2, r2, r7
 800e162:	19ad      	addle	r5, r5, r6
 800e164:	0fcf      	lsrs	r7, r1, #31
 800e166:	3b01      	subs	r3, #1
 800e168:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800e16c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e170:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e174:	d1f0      	bne.n	800e158 <__ieee754_sqrt+0x94>
 800e176:	f04f 0c20 	mov.w	ip, #32
 800e17a:	469e      	mov	lr, r3
 800e17c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e180:	42a2      	cmp	r2, r4
 800e182:	eb06 070e 	add.w	r7, r6, lr
 800e186:	dc02      	bgt.n	800e18e <__ieee754_sqrt+0xca>
 800e188:	d112      	bne.n	800e1b0 <__ieee754_sqrt+0xec>
 800e18a:	428f      	cmp	r7, r1
 800e18c:	d810      	bhi.n	800e1b0 <__ieee754_sqrt+0xec>
 800e18e:	2f00      	cmp	r7, #0
 800e190:	eb07 0e06 	add.w	lr, r7, r6
 800e194:	da42      	bge.n	800e21c <__ieee754_sqrt+0x158>
 800e196:	f1be 0f00 	cmp.w	lr, #0
 800e19a:	db3f      	blt.n	800e21c <__ieee754_sqrt+0x158>
 800e19c:	f104 0801 	add.w	r8, r4, #1
 800e1a0:	1b12      	subs	r2, r2, r4
 800e1a2:	428f      	cmp	r7, r1
 800e1a4:	bf88      	it	hi
 800e1a6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e1aa:	1bc9      	subs	r1, r1, r7
 800e1ac:	4433      	add	r3, r6
 800e1ae:	4644      	mov	r4, r8
 800e1b0:	0052      	lsls	r2, r2, #1
 800e1b2:	f1bc 0c01 	subs.w	ip, ip, #1
 800e1b6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800e1ba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e1be:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e1c2:	d1dd      	bne.n	800e180 <__ieee754_sqrt+0xbc>
 800e1c4:	430a      	orrs	r2, r1
 800e1c6:	d006      	beq.n	800e1d6 <__ieee754_sqrt+0x112>
 800e1c8:	1c5c      	adds	r4, r3, #1
 800e1ca:	bf13      	iteet	ne
 800e1cc:	3301      	addne	r3, #1
 800e1ce:	3501      	addeq	r5, #1
 800e1d0:	4663      	moveq	r3, ip
 800e1d2:	f023 0301 	bicne.w	r3, r3, #1
 800e1d6:	106a      	asrs	r2, r5, #1
 800e1d8:	085b      	lsrs	r3, r3, #1
 800e1da:	07e9      	lsls	r1, r5, #31
 800e1dc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e1e0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e1e4:	bf48      	it	mi
 800e1e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e1ea:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800e1ee:	461c      	mov	r4, r3
 800e1f0:	e780      	b.n	800e0f4 <__ieee754_sqrt+0x30>
 800e1f2:	0aca      	lsrs	r2, r1, #11
 800e1f4:	3815      	subs	r0, #21
 800e1f6:	0549      	lsls	r1, r1, #21
 800e1f8:	2a00      	cmp	r2, #0
 800e1fa:	d0fa      	beq.n	800e1f2 <__ieee754_sqrt+0x12e>
 800e1fc:	02d6      	lsls	r6, r2, #11
 800e1fe:	d50a      	bpl.n	800e216 <__ieee754_sqrt+0x152>
 800e200:	f1c3 0420 	rsb	r4, r3, #32
 800e204:	fa21 f404 	lsr.w	r4, r1, r4
 800e208:	1e5d      	subs	r5, r3, #1
 800e20a:	4099      	lsls	r1, r3
 800e20c:	4322      	orrs	r2, r4
 800e20e:	1b43      	subs	r3, r0, r5
 800e210:	e78b      	b.n	800e12a <__ieee754_sqrt+0x66>
 800e212:	4618      	mov	r0, r3
 800e214:	e7f0      	b.n	800e1f8 <__ieee754_sqrt+0x134>
 800e216:	0052      	lsls	r2, r2, #1
 800e218:	3301      	adds	r3, #1
 800e21a:	e7ef      	b.n	800e1fc <__ieee754_sqrt+0x138>
 800e21c:	46a0      	mov	r8, r4
 800e21e:	e7bf      	b.n	800e1a0 <__ieee754_sqrt+0xdc>
 800e220:	7ff00000 	.word	0x7ff00000
 800e224:	00000000 	.word	0x00000000

0800e228 <__kernel_cos>:
 800e228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22c:	ec59 8b10 	vmov	r8, r9, d0
 800e230:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800e234:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800e238:	ed2d 8b02 	vpush	{d8}
 800e23c:	eeb0 8a41 	vmov.f32	s16, s2
 800e240:	eef0 8a61 	vmov.f32	s17, s3
 800e244:	da07      	bge.n	800e256 <__kernel_cos+0x2e>
 800e246:	ee10 0a10 	vmov	r0, s0
 800e24a:	4649      	mov	r1, r9
 800e24c:	f7f2 fc84 	bl	8000b58 <__aeabi_d2iz>
 800e250:	2800      	cmp	r0, #0
 800e252:	f000 8089 	beq.w	800e368 <__kernel_cos+0x140>
 800e256:	4642      	mov	r2, r8
 800e258:	464b      	mov	r3, r9
 800e25a:	4640      	mov	r0, r8
 800e25c:	4649      	mov	r1, r9
 800e25e:	f7f2 f9cb 	bl	80005f8 <__aeabi_dmul>
 800e262:	2200      	movs	r2, #0
 800e264:	4b4e      	ldr	r3, [pc, #312]	; (800e3a0 <__kernel_cos+0x178>)
 800e266:	4604      	mov	r4, r0
 800e268:	460d      	mov	r5, r1
 800e26a:	f7f2 f9c5 	bl	80005f8 <__aeabi_dmul>
 800e26e:	a340      	add	r3, pc, #256	; (adr r3, 800e370 <__kernel_cos+0x148>)
 800e270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e274:	4682      	mov	sl, r0
 800e276:	468b      	mov	fp, r1
 800e278:	4620      	mov	r0, r4
 800e27a:	4629      	mov	r1, r5
 800e27c:	f7f2 f9bc 	bl	80005f8 <__aeabi_dmul>
 800e280:	a33d      	add	r3, pc, #244	; (adr r3, 800e378 <__kernel_cos+0x150>)
 800e282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e286:	f7f2 f801 	bl	800028c <__adddf3>
 800e28a:	4622      	mov	r2, r4
 800e28c:	462b      	mov	r3, r5
 800e28e:	f7f2 f9b3 	bl	80005f8 <__aeabi_dmul>
 800e292:	a33b      	add	r3, pc, #236	; (adr r3, 800e380 <__kernel_cos+0x158>)
 800e294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e298:	f7f1 fff6 	bl	8000288 <__aeabi_dsub>
 800e29c:	4622      	mov	r2, r4
 800e29e:	462b      	mov	r3, r5
 800e2a0:	f7f2 f9aa 	bl	80005f8 <__aeabi_dmul>
 800e2a4:	a338      	add	r3, pc, #224	; (adr r3, 800e388 <__kernel_cos+0x160>)
 800e2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2aa:	f7f1 ffef 	bl	800028c <__adddf3>
 800e2ae:	4622      	mov	r2, r4
 800e2b0:	462b      	mov	r3, r5
 800e2b2:	f7f2 f9a1 	bl	80005f8 <__aeabi_dmul>
 800e2b6:	a336      	add	r3, pc, #216	; (adr r3, 800e390 <__kernel_cos+0x168>)
 800e2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2bc:	f7f1 ffe4 	bl	8000288 <__aeabi_dsub>
 800e2c0:	4622      	mov	r2, r4
 800e2c2:	462b      	mov	r3, r5
 800e2c4:	f7f2 f998 	bl	80005f8 <__aeabi_dmul>
 800e2c8:	a333      	add	r3, pc, #204	; (adr r3, 800e398 <__kernel_cos+0x170>)
 800e2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ce:	f7f1 ffdd 	bl	800028c <__adddf3>
 800e2d2:	4622      	mov	r2, r4
 800e2d4:	462b      	mov	r3, r5
 800e2d6:	f7f2 f98f 	bl	80005f8 <__aeabi_dmul>
 800e2da:	4622      	mov	r2, r4
 800e2dc:	462b      	mov	r3, r5
 800e2de:	f7f2 f98b 	bl	80005f8 <__aeabi_dmul>
 800e2e2:	ec53 2b18 	vmov	r2, r3, d8
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	460d      	mov	r5, r1
 800e2ea:	4640      	mov	r0, r8
 800e2ec:	4649      	mov	r1, r9
 800e2ee:	f7f2 f983 	bl	80005f8 <__aeabi_dmul>
 800e2f2:	460b      	mov	r3, r1
 800e2f4:	4602      	mov	r2, r0
 800e2f6:	4629      	mov	r1, r5
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	f7f1 ffc5 	bl	8000288 <__aeabi_dsub>
 800e2fe:	4b29      	ldr	r3, [pc, #164]	; (800e3a4 <__kernel_cos+0x17c>)
 800e300:	429e      	cmp	r6, r3
 800e302:	4680      	mov	r8, r0
 800e304:	4689      	mov	r9, r1
 800e306:	dc11      	bgt.n	800e32c <__kernel_cos+0x104>
 800e308:	4602      	mov	r2, r0
 800e30a:	460b      	mov	r3, r1
 800e30c:	4650      	mov	r0, sl
 800e30e:	4659      	mov	r1, fp
 800e310:	f7f1 ffba 	bl	8000288 <__aeabi_dsub>
 800e314:	460b      	mov	r3, r1
 800e316:	4924      	ldr	r1, [pc, #144]	; (800e3a8 <__kernel_cos+0x180>)
 800e318:	4602      	mov	r2, r0
 800e31a:	2000      	movs	r0, #0
 800e31c:	f7f1 ffb4 	bl	8000288 <__aeabi_dsub>
 800e320:	ecbd 8b02 	vpop	{d8}
 800e324:	ec41 0b10 	vmov	d0, r0, r1
 800e328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e32c:	4b1f      	ldr	r3, [pc, #124]	; (800e3ac <__kernel_cos+0x184>)
 800e32e:	491e      	ldr	r1, [pc, #120]	; (800e3a8 <__kernel_cos+0x180>)
 800e330:	429e      	cmp	r6, r3
 800e332:	bfcc      	ite	gt
 800e334:	4d1e      	ldrgt	r5, [pc, #120]	; (800e3b0 <__kernel_cos+0x188>)
 800e336:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800e33a:	2400      	movs	r4, #0
 800e33c:	4622      	mov	r2, r4
 800e33e:	462b      	mov	r3, r5
 800e340:	2000      	movs	r0, #0
 800e342:	f7f1 ffa1 	bl	8000288 <__aeabi_dsub>
 800e346:	4622      	mov	r2, r4
 800e348:	4606      	mov	r6, r0
 800e34a:	460f      	mov	r7, r1
 800e34c:	462b      	mov	r3, r5
 800e34e:	4650      	mov	r0, sl
 800e350:	4659      	mov	r1, fp
 800e352:	f7f1 ff99 	bl	8000288 <__aeabi_dsub>
 800e356:	4642      	mov	r2, r8
 800e358:	464b      	mov	r3, r9
 800e35a:	f7f1 ff95 	bl	8000288 <__aeabi_dsub>
 800e35e:	4602      	mov	r2, r0
 800e360:	460b      	mov	r3, r1
 800e362:	4630      	mov	r0, r6
 800e364:	4639      	mov	r1, r7
 800e366:	e7d9      	b.n	800e31c <__kernel_cos+0xf4>
 800e368:	2000      	movs	r0, #0
 800e36a:	490f      	ldr	r1, [pc, #60]	; (800e3a8 <__kernel_cos+0x180>)
 800e36c:	e7d8      	b.n	800e320 <__kernel_cos+0xf8>
 800e36e:	bf00      	nop
 800e370:	be8838d4 	.word	0xbe8838d4
 800e374:	bda8fae9 	.word	0xbda8fae9
 800e378:	bdb4b1c4 	.word	0xbdb4b1c4
 800e37c:	3e21ee9e 	.word	0x3e21ee9e
 800e380:	809c52ad 	.word	0x809c52ad
 800e384:	3e927e4f 	.word	0x3e927e4f
 800e388:	19cb1590 	.word	0x19cb1590
 800e38c:	3efa01a0 	.word	0x3efa01a0
 800e390:	16c15177 	.word	0x16c15177
 800e394:	3f56c16c 	.word	0x3f56c16c
 800e398:	5555554c 	.word	0x5555554c
 800e39c:	3fa55555 	.word	0x3fa55555
 800e3a0:	3fe00000 	.word	0x3fe00000
 800e3a4:	3fd33332 	.word	0x3fd33332
 800e3a8:	3ff00000 	.word	0x3ff00000
 800e3ac:	3fe90000 	.word	0x3fe90000
 800e3b0:	3fd20000 	.word	0x3fd20000
 800e3b4:	00000000 	.word	0x00000000

0800e3b8 <__kernel_rem_pio2>:
 800e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3bc:	ed2d 8b02 	vpush	{d8}
 800e3c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e3c4:	1ed4      	subs	r4, r2, #3
 800e3c6:	9308      	str	r3, [sp, #32]
 800e3c8:	9101      	str	r1, [sp, #4]
 800e3ca:	4bc5      	ldr	r3, [pc, #788]	; (800e6e0 <__kernel_rem_pio2+0x328>)
 800e3cc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e3ce:	9009      	str	r0, [sp, #36]	; 0x24
 800e3d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e3d4:	9304      	str	r3, [sp, #16]
 800e3d6:	9b08      	ldr	r3, [sp, #32]
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	9307      	str	r3, [sp, #28]
 800e3dc:	2318      	movs	r3, #24
 800e3de:	fb94 f4f3 	sdiv	r4, r4, r3
 800e3e2:	f06f 0317 	mvn.w	r3, #23
 800e3e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800e3ea:	fb04 3303 	mla	r3, r4, r3, r3
 800e3ee:	eb03 0a02 	add.w	sl, r3, r2
 800e3f2:	9b04      	ldr	r3, [sp, #16]
 800e3f4:	9a07      	ldr	r2, [sp, #28]
 800e3f6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800e6d0 <__kernel_rem_pio2+0x318>
 800e3fa:	eb03 0802 	add.w	r8, r3, r2
 800e3fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e400:	1aa7      	subs	r7, r4, r2
 800e402:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e406:	ae22      	add	r6, sp, #136	; 0x88
 800e408:	2500      	movs	r5, #0
 800e40a:	4545      	cmp	r5, r8
 800e40c:	dd13      	ble.n	800e436 <__kernel_rem_pio2+0x7e>
 800e40e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800e6d0 <__kernel_rem_pio2+0x318>
 800e412:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e416:	2600      	movs	r6, #0
 800e418:	9b04      	ldr	r3, [sp, #16]
 800e41a:	429e      	cmp	r6, r3
 800e41c:	dc32      	bgt.n	800e484 <__kernel_rem_pio2+0xcc>
 800e41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e420:	9302      	str	r3, [sp, #8]
 800e422:	9b08      	ldr	r3, [sp, #32]
 800e424:	199d      	adds	r5, r3, r6
 800e426:	ab22      	add	r3, sp, #136	; 0x88
 800e428:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e42c:	9306      	str	r3, [sp, #24]
 800e42e:	ec59 8b18 	vmov	r8, r9, d8
 800e432:	2700      	movs	r7, #0
 800e434:	e01f      	b.n	800e476 <__kernel_rem_pio2+0xbe>
 800e436:	42ef      	cmn	r7, r5
 800e438:	d407      	bmi.n	800e44a <__kernel_rem_pio2+0x92>
 800e43a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e43e:	f7f2 f871 	bl	8000524 <__aeabi_i2d>
 800e442:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e446:	3501      	adds	r5, #1
 800e448:	e7df      	b.n	800e40a <__kernel_rem_pio2+0x52>
 800e44a:	ec51 0b18 	vmov	r0, r1, d8
 800e44e:	e7f8      	b.n	800e442 <__kernel_rem_pio2+0x8a>
 800e450:	9906      	ldr	r1, [sp, #24]
 800e452:	9d02      	ldr	r5, [sp, #8]
 800e454:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800e458:	9106      	str	r1, [sp, #24]
 800e45a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800e45e:	9502      	str	r5, [sp, #8]
 800e460:	f7f2 f8ca 	bl	80005f8 <__aeabi_dmul>
 800e464:	4602      	mov	r2, r0
 800e466:	460b      	mov	r3, r1
 800e468:	4640      	mov	r0, r8
 800e46a:	4649      	mov	r1, r9
 800e46c:	f7f1 ff0e 	bl	800028c <__adddf3>
 800e470:	3701      	adds	r7, #1
 800e472:	4680      	mov	r8, r0
 800e474:	4689      	mov	r9, r1
 800e476:	9b07      	ldr	r3, [sp, #28]
 800e478:	429f      	cmp	r7, r3
 800e47a:	dde9      	ble.n	800e450 <__kernel_rem_pio2+0x98>
 800e47c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800e480:	3601      	adds	r6, #1
 800e482:	e7c9      	b.n	800e418 <__kernel_rem_pio2+0x60>
 800e484:	9b04      	ldr	r3, [sp, #16]
 800e486:	aa0e      	add	r2, sp, #56	; 0x38
 800e488:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e48c:	930c      	str	r3, [sp, #48]	; 0x30
 800e48e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e490:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e494:	9c04      	ldr	r4, [sp, #16]
 800e496:	930b      	str	r3, [sp, #44]	; 0x2c
 800e498:	ab9a      	add	r3, sp, #616	; 0x268
 800e49a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800e49e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e4a6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800e4aa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800e4ae:	ab9a      	add	r3, sp, #616	; 0x268
 800e4b0:	445b      	add	r3, fp
 800e4b2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800e4b6:	2500      	movs	r5, #0
 800e4b8:	1b63      	subs	r3, r4, r5
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	dc78      	bgt.n	800e5b0 <__kernel_rem_pio2+0x1f8>
 800e4be:	4650      	mov	r0, sl
 800e4c0:	ec49 8b10 	vmov	d0, r8, r9
 800e4c4:	f000 fe3c 	bl	800f140 <scalbn>
 800e4c8:	ec57 6b10 	vmov	r6, r7, d0
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e4d2:	ee10 0a10 	vmov	r0, s0
 800e4d6:	4639      	mov	r1, r7
 800e4d8:	f7f2 f88e 	bl	80005f8 <__aeabi_dmul>
 800e4dc:	ec41 0b10 	vmov	d0, r0, r1
 800e4e0:	f000 fd1a 	bl	800ef18 <floor>
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	ec51 0b10 	vmov	r0, r1, d0
 800e4ea:	4b7e      	ldr	r3, [pc, #504]	; (800e6e4 <__kernel_rem_pio2+0x32c>)
 800e4ec:	f7f2 f884 	bl	80005f8 <__aeabi_dmul>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	4639      	mov	r1, r7
 800e4f8:	f7f1 fec6 	bl	8000288 <__aeabi_dsub>
 800e4fc:	460f      	mov	r7, r1
 800e4fe:	4606      	mov	r6, r0
 800e500:	f7f2 fb2a 	bl	8000b58 <__aeabi_d2iz>
 800e504:	9006      	str	r0, [sp, #24]
 800e506:	f7f2 f80d 	bl	8000524 <__aeabi_i2d>
 800e50a:	4602      	mov	r2, r0
 800e50c:	460b      	mov	r3, r1
 800e50e:	4630      	mov	r0, r6
 800e510:	4639      	mov	r1, r7
 800e512:	f7f1 feb9 	bl	8000288 <__aeabi_dsub>
 800e516:	f1ba 0f00 	cmp.w	sl, #0
 800e51a:	4606      	mov	r6, r0
 800e51c:	460f      	mov	r7, r1
 800e51e:	dd6c      	ble.n	800e5fa <__kernel_rem_pio2+0x242>
 800e520:	1e62      	subs	r2, r4, #1
 800e522:	ab0e      	add	r3, sp, #56	; 0x38
 800e524:	f1ca 0118 	rsb	r1, sl, #24
 800e528:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e52c:	9d06      	ldr	r5, [sp, #24]
 800e52e:	fa40 f301 	asr.w	r3, r0, r1
 800e532:	441d      	add	r5, r3
 800e534:	408b      	lsls	r3, r1
 800e536:	1ac0      	subs	r0, r0, r3
 800e538:	ab0e      	add	r3, sp, #56	; 0x38
 800e53a:	9506      	str	r5, [sp, #24]
 800e53c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e540:	f1ca 0317 	rsb	r3, sl, #23
 800e544:	fa40 f303 	asr.w	r3, r0, r3
 800e548:	9302      	str	r3, [sp, #8]
 800e54a:	9b02      	ldr	r3, [sp, #8]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	dd62      	ble.n	800e616 <__kernel_rem_pio2+0x25e>
 800e550:	9b06      	ldr	r3, [sp, #24]
 800e552:	2200      	movs	r2, #0
 800e554:	3301      	adds	r3, #1
 800e556:	9306      	str	r3, [sp, #24]
 800e558:	4615      	mov	r5, r2
 800e55a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e55e:	4294      	cmp	r4, r2
 800e560:	f300 8095 	bgt.w	800e68e <__kernel_rem_pio2+0x2d6>
 800e564:	f1ba 0f00 	cmp.w	sl, #0
 800e568:	dd07      	ble.n	800e57a <__kernel_rem_pio2+0x1c2>
 800e56a:	f1ba 0f01 	cmp.w	sl, #1
 800e56e:	f000 80a2 	beq.w	800e6b6 <__kernel_rem_pio2+0x2fe>
 800e572:	f1ba 0f02 	cmp.w	sl, #2
 800e576:	f000 80c1 	beq.w	800e6fc <__kernel_rem_pio2+0x344>
 800e57a:	9b02      	ldr	r3, [sp, #8]
 800e57c:	2b02      	cmp	r3, #2
 800e57e:	d14a      	bne.n	800e616 <__kernel_rem_pio2+0x25e>
 800e580:	4632      	mov	r2, r6
 800e582:	463b      	mov	r3, r7
 800e584:	2000      	movs	r0, #0
 800e586:	4958      	ldr	r1, [pc, #352]	; (800e6e8 <__kernel_rem_pio2+0x330>)
 800e588:	f7f1 fe7e 	bl	8000288 <__aeabi_dsub>
 800e58c:	4606      	mov	r6, r0
 800e58e:	460f      	mov	r7, r1
 800e590:	2d00      	cmp	r5, #0
 800e592:	d040      	beq.n	800e616 <__kernel_rem_pio2+0x25e>
 800e594:	4650      	mov	r0, sl
 800e596:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800e6d8 <__kernel_rem_pio2+0x320>
 800e59a:	f000 fdd1 	bl	800f140 <scalbn>
 800e59e:	4630      	mov	r0, r6
 800e5a0:	4639      	mov	r1, r7
 800e5a2:	ec53 2b10 	vmov	r2, r3, d0
 800e5a6:	f7f1 fe6f 	bl	8000288 <__aeabi_dsub>
 800e5aa:	4606      	mov	r6, r0
 800e5ac:	460f      	mov	r7, r1
 800e5ae:	e032      	b.n	800e616 <__kernel_rem_pio2+0x25e>
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	4b4e      	ldr	r3, [pc, #312]	; (800e6ec <__kernel_rem_pio2+0x334>)
 800e5b4:	4640      	mov	r0, r8
 800e5b6:	4649      	mov	r1, r9
 800e5b8:	f7f2 f81e 	bl	80005f8 <__aeabi_dmul>
 800e5bc:	f7f2 facc 	bl	8000b58 <__aeabi_d2iz>
 800e5c0:	f7f1 ffb0 	bl	8000524 <__aeabi_i2d>
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	4b4a      	ldr	r3, [pc, #296]	; (800e6f0 <__kernel_rem_pio2+0x338>)
 800e5c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5cc:	f7f2 f814 	bl	80005f8 <__aeabi_dmul>
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	4640      	mov	r0, r8
 800e5d6:	4649      	mov	r1, r9
 800e5d8:	f7f1 fe56 	bl	8000288 <__aeabi_dsub>
 800e5dc:	f7f2 fabc 	bl	8000b58 <__aeabi_d2iz>
 800e5e0:	ab0e      	add	r3, sp, #56	; 0x38
 800e5e2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800e5e6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e5ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5ee:	f7f1 fe4d 	bl	800028c <__adddf3>
 800e5f2:	3501      	adds	r5, #1
 800e5f4:	4680      	mov	r8, r0
 800e5f6:	4689      	mov	r9, r1
 800e5f8:	e75e      	b.n	800e4b8 <__kernel_rem_pio2+0x100>
 800e5fa:	d105      	bne.n	800e608 <__kernel_rem_pio2+0x250>
 800e5fc:	1e63      	subs	r3, r4, #1
 800e5fe:	aa0e      	add	r2, sp, #56	; 0x38
 800e600:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e604:	15c3      	asrs	r3, r0, #23
 800e606:	e79f      	b.n	800e548 <__kernel_rem_pio2+0x190>
 800e608:	2200      	movs	r2, #0
 800e60a:	4b3a      	ldr	r3, [pc, #232]	; (800e6f4 <__kernel_rem_pio2+0x33c>)
 800e60c:	f7f2 fa7a 	bl	8000b04 <__aeabi_dcmpge>
 800e610:	2800      	cmp	r0, #0
 800e612:	d139      	bne.n	800e688 <__kernel_rem_pio2+0x2d0>
 800e614:	9002      	str	r0, [sp, #8]
 800e616:	2200      	movs	r2, #0
 800e618:	2300      	movs	r3, #0
 800e61a:	4630      	mov	r0, r6
 800e61c:	4639      	mov	r1, r7
 800e61e:	f7f2 fa53 	bl	8000ac8 <__aeabi_dcmpeq>
 800e622:	2800      	cmp	r0, #0
 800e624:	f000 80c7 	beq.w	800e7b6 <__kernel_rem_pio2+0x3fe>
 800e628:	1e65      	subs	r5, r4, #1
 800e62a:	462b      	mov	r3, r5
 800e62c:	2200      	movs	r2, #0
 800e62e:	9904      	ldr	r1, [sp, #16]
 800e630:	428b      	cmp	r3, r1
 800e632:	da6a      	bge.n	800e70a <__kernel_rem_pio2+0x352>
 800e634:	2a00      	cmp	r2, #0
 800e636:	f000 8088 	beq.w	800e74a <__kernel_rem_pio2+0x392>
 800e63a:	ab0e      	add	r3, sp, #56	; 0x38
 800e63c:	f1aa 0a18 	sub.w	sl, sl, #24
 800e640:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e644:	2b00      	cmp	r3, #0
 800e646:	f000 80b4 	beq.w	800e7b2 <__kernel_rem_pio2+0x3fa>
 800e64a:	4650      	mov	r0, sl
 800e64c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800e6d8 <__kernel_rem_pio2+0x320>
 800e650:	f000 fd76 	bl	800f140 <scalbn>
 800e654:	00ec      	lsls	r4, r5, #3
 800e656:	ab72      	add	r3, sp, #456	; 0x1c8
 800e658:	191e      	adds	r6, r3, r4
 800e65a:	ec59 8b10 	vmov	r8, r9, d0
 800e65e:	f106 0a08 	add.w	sl, r6, #8
 800e662:	462f      	mov	r7, r5
 800e664:	2f00      	cmp	r7, #0
 800e666:	f280 80df 	bge.w	800e828 <__kernel_rem_pio2+0x470>
 800e66a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800e6d0 <__kernel_rem_pio2+0x318>
 800e66e:	f04f 0a00 	mov.w	sl, #0
 800e672:	eba5 030a 	sub.w	r3, r5, sl
 800e676:	2b00      	cmp	r3, #0
 800e678:	f2c0 810a 	blt.w	800e890 <__kernel_rem_pio2+0x4d8>
 800e67c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800e6f8 <__kernel_rem_pio2+0x340>
 800e680:	ec59 8b18 	vmov	r8, r9, d8
 800e684:	2700      	movs	r7, #0
 800e686:	e0f5      	b.n	800e874 <__kernel_rem_pio2+0x4bc>
 800e688:	2302      	movs	r3, #2
 800e68a:	9302      	str	r3, [sp, #8]
 800e68c:	e760      	b.n	800e550 <__kernel_rem_pio2+0x198>
 800e68e:	ab0e      	add	r3, sp, #56	; 0x38
 800e690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e694:	b94d      	cbnz	r5, 800e6aa <__kernel_rem_pio2+0x2f2>
 800e696:	b12b      	cbz	r3, 800e6a4 <__kernel_rem_pio2+0x2ec>
 800e698:	a80e      	add	r0, sp, #56	; 0x38
 800e69a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e69e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	3201      	adds	r2, #1
 800e6a6:	461d      	mov	r5, r3
 800e6a8:	e759      	b.n	800e55e <__kernel_rem_pio2+0x1a6>
 800e6aa:	a80e      	add	r0, sp, #56	; 0x38
 800e6ac:	1acb      	subs	r3, r1, r3
 800e6ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e6b2:	462b      	mov	r3, r5
 800e6b4:	e7f6      	b.n	800e6a4 <__kernel_rem_pio2+0x2ec>
 800e6b6:	1e62      	subs	r2, r4, #1
 800e6b8:	ab0e      	add	r3, sp, #56	; 0x38
 800e6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e6c2:	a90e      	add	r1, sp, #56	; 0x38
 800e6c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e6c8:	e757      	b.n	800e57a <__kernel_rem_pio2+0x1c2>
 800e6ca:	bf00      	nop
 800e6cc:	f3af 8000 	nop.w
	...
 800e6dc:	3ff00000 	.word	0x3ff00000
 800e6e0:	0800f7f8 	.word	0x0800f7f8
 800e6e4:	40200000 	.word	0x40200000
 800e6e8:	3ff00000 	.word	0x3ff00000
 800e6ec:	3e700000 	.word	0x3e700000
 800e6f0:	41700000 	.word	0x41700000
 800e6f4:	3fe00000 	.word	0x3fe00000
 800e6f8:	0800f7b8 	.word	0x0800f7b8
 800e6fc:	1e62      	subs	r2, r4, #1
 800e6fe:	ab0e      	add	r3, sp, #56	; 0x38
 800e700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e704:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e708:	e7db      	b.n	800e6c2 <__kernel_rem_pio2+0x30a>
 800e70a:	a90e      	add	r1, sp, #56	; 0x38
 800e70c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e710:	3b01      	subs	r3, #1
 800e712:	430a      	orrs	r2, r1
 800e714:	e78b      	b.n	800e62e <__kernel_rem_pio2+0x276>
 800e716:	3301      	adds	r3, #1
 800e718:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e71c:	2900      	cmp	r1, #0
 800e71e:	d0fa      	beq.n	800e716 <__kernel_rem_pio2+0x35e>
 800e720:	9a08      	ldr	r2, [sp, #32]
 800e722:	4422      	add	r2, r4
 800e724:	00d2      	lsls	r2, r2, #3
 800e726:	a922      	add	r1, sp, #136	; 0x88
 800e728:	18e3      	adds	r3, r4, r3
 800e72a:	9206      	str	r2, [sp, #24]
 800e72c:	440a      	add	r2, r1
 800e72e:	9302      	str	r3, [sp, #8]
 800e730:	f10b 0108 	add.w	r1, fp, #8
 800e734:	f102 0308 	add.w	r3, r2, #8
 800e738:	1c66      	adds	r6, r4, #1
 800e73a:	910a      	str	r1, [sp, #40]	; 0x28
 800e73c:	2500      	movs	r5, #0
 800e73e:	930d      	str	r3, [sp, #52]	; 0x34
 800e740:	9b02      	ldr	r3, [sp, #8]
 800e742:	42b3      	cmp	r3, r6
 800e744:	da04      	bge.n	800e750 <__kernel_rem_pio2+0x398>
 800e746:	461c      	mov	r4, r3
 800e748:	e6a6      	b.n	800e498 <__kernel_rem_pio2+0xe0>
 800e74a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e74c:	2301      	movs	r3, #1
 800e74e:	e7e3      	b.n	800e718 <__kernel_rem_pio2+0x360>
 800e750:	9b06      	ldr	r3, [sp, #24]
 800e752:	18ef      	adds	r7, r5, r3
 800e754:	ab22      	add	r3, sp, #136	; 0x88
 800e756:	441f      	add	r7, r3
 800e758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e75a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e75e:	f7f1 fee1 	bl	8000524 <__aeabi_i2d>
 800e762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e764:	461c      	mov	r4, r3
 800e766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e768:	e9c7 0100 	strd	r0, r1, [r7]
 800e76c:	eb03 0b05 	add.w	fp, r3, r5
 800e770:	2700      	movs	r7, #0
 800e772:	f04f 0800 	mov.w	r8, #0
 800e776:	f04f 0900 	mov.w	r9, #0
 800e77a:	9b07      	ldr	r3, [sp, #28]
 800e77c:	429f      	cmp	r7, r3
 800e77e:	dd08      	ble.n	800e792 <__kernel_rem_pio2+0x3da>
 800e780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e782:	aa72      	add	r2, sp, #456	; 0x1c8
 800e784:	18eb      	adds	r3, r5, r3
 800e786:	4413      	add	r3, r2
 800e788:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800e78c:	3601      	adds	r6, #1
 800e78e:	3508      	adds	r5, #8
 800e790:	e7d6      	b.n	800e740 <__kernel_rem_pio2+0x388>
 800e792:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e796:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e79a:	f7f1 ff2d 	bl	80005f8 <__aeabi_dmul>
 800e79e:	4602      	mov	r2, r0
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	4640      	mov	r0, r8
 800e7a4:	4649      	mov	r1, r9
 800e7a6:	f7f1 fd71 	bl	800028c <__adddf3>
 800e7aa:	3701      	adds	r7, #1
 800e7ac:	4680      	mov	r8, r0
 800e7ae:	4689      	mov	r9, r1
 800e7b0:	e7e3      	b.n	800e77a <__kernel_rem_pio2+0x3c2>
 800e7b2:	3d01      	subs	r5, #1
 800e7b4:	e741      	b.n	800e63a <__kernel_rem_pio2+0x282>
 800e7b6:	f1ca 0000 	rsb	r0, sl, #0
 800e7ba:	ec47 6b10 	vmov	d0, r6, r7
 800e7be:	f000 fcbf 	bl	800f140 <scalbn>
 800e7c2:	ec57 6b10 	vmov	r6, r7, d0
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	4b99      	ldr	r3, [pc, #612]	; (800ea30 <__kernel_rem_pio2+0x678>)
 800e7ca:	ee10 0a10 	vmov	r0, s0
 800e7ce:	4639      	mov	r1, r7
 800e7d0:	f7f2 f998 	bl	8000b04 <__aeabi_dcmpge>
 800e7d4:	b1f8      	cbz	r0, 800e816 <__kernel_rem_pio2+0x45e>
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	4b96      	ldr	r3, [pc, #600]	; (800ea34 <__kernel_rem_pio2+0x67c>)
 800e7da:	4630      	mov	r0, r6
 800e7dc:	4639      	mov	r1, r7
 800e7de:	f7f1 ff0b 	bl	80005f8 <__aeabi_dmul>
 800e7e2:	f7f2 f9b9 	bl	8000b58 <__aeabi_d2iz>
 800e7e6:	4680      	mov	r8, r0
 800e7e8:	f7f1 fe9c 	bl	8000524 <__aeabi_i2d>
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	4b90      	ldr	r3, [pc, #576]	; (800ea30 <__kernel_rem_pio2+0x678>)
 800e7f0:	f7f1 ff02 	bl	80005f8 <__aeabi_dmul>
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	4639      	mov	r1, r7
 800e7fa:	4630      	mov	r0, r6
 800e7fc:	f7f1 fd44 	bl	8000288 <__aeabi_dsub>
 800e800:	f7f2 f9aa 	bl	8000b58 <__aeabi_d2iz>
 800e804:	1c65      	adds	r5, r4, #1
 800e806:	ab0e      	add	r3, sp, #56	; 0x38
 800e808:	f10a 0a18 	add.w	sl, sl, #24
 800e80c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e810:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e814:	e719      	b.n	800e64a <__kernel_rem_pio2+0x292>
 800e816:	4630      	mov	r0, r6
 800e818:	4639      	mov	r1, r7
 800e81a:	f7f2 f99d 	bl	8000b58 <__aeabi_d2iz>
 800e81e:	ab0e      	add	r3, sp, #56	; 0x38
 800e820:	4625      	mov	r5, r4
 800e822:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e826:	e710      	b.n	800e64a <__kernel_rem_pio2+0x292>
 800e828:	ab0e      	add	r3, sp, #56	; 0x38
 800e82a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e82e:	f7f1 fe79 	bl	8000524 <__aeabi_i2d>
 800e832:	4642      	mov	r2, r8
 800e834:	464b      	mov	r3, r9
 800e836:	f7f1 fedf 	bl	80005f8 <__aeabi_dmul>
 800e83a:	2200      	movs	r2, #0
 800e83c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e840:	4b7c      	ldr	r3, [pc, #496]	; (800ea34 <__kernel_rem_pio2+0x67c>)
 800e842:	4640      	mov	r0, r8
 800e844:	4649      	mov	r1, r9
 800e846:	f7f1 fed7 	bl	80005f8 <__aeabi_dmul>
 800e84a:	3f01      	subs	r7, #1
 800e84c:	4680      	mov	r8, r0
 800e84e:	4689      	mov	r9, r1
 800e850:	e708      	b.n	800e664 <__kernel_rem_pio2+0x2ac>
 800e852:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800e856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800e85e:	f7f1 fecb 	bl	80005f8 <__aeabi_dmul>
 800e862:	4602      	mov	r2, r0
 800e864:	460b      	mov	r3, r1
 800e866:	4640      	mov	r0, r8
 800e868:	4649      	mov	r1, r9
 800e86a:	f7f1 fd0f 	bl	800028c <__adddf3>
 800e86e:	3701      	adds	r7, #1
 800e870:	4680      	mov	r8, r0
 800e872:	4689      	mov	r9, r1
 800e874:	9b04      	ldr	r3, [sp, #16]
 800e876:	429f      	cmp	r7, r3
 800e878:	dc01      	bgt.n	800e87e <__kernel_rem_pio2+0x4c6>
 800e87a:	45ba      	cmp	sl, r7
 800e87c:	dae9      	bge.n	800e852 <__kernel_rem_pio2+0x49a>
 800e87e:	ab4a      	add	r3, sp, #296	; 0x128
 800e880:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e884:	e9c3 8900 	strd	r8, r9, [r3]
 800e888:	f10a 0a01 	add.w	sl, sl, #1
 800e88c:	3e08      	subs	r6, #8
 800e88e:	e6f0      	b.n	800e672 <__kernel_rem_pio2+0x2ba>
 800e890:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e892:	2b03      	cmp	r3, #3
 800e894:	d85b      	bhi.n	800e94e <__kernel_rem_pio2+0x596>
 800e896:	e8df f003 	tbb	[pc, r3]
 800e89a:	264a      	.short	0x264a
 800e89c:	0226      	.short	0x0226
 800e89e:	ab9a      	add	r3, sp, #616	; 0x268
 800e8a0:	441c      	add	r4, r3
 800e8a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e8a6:	46a2      	mov	sl, r4
 800e8a8:	46ab      	mov	fp, r5
 800e8aa:	f1bb 0f00 	cmp.w	fp, #0
 800e8ae:	dc6c      	bgt.n	800e98a <__kernel_rem_pio2+0x5d2>
 800e8b0:	46a2      	mov	sl, r4
 800e8b2:	46ab      	mov	fp, r5
 800e8b4:	f1bb 0f01 	cmp.w	fp, #1
 800e8b8:	f300 8086 	bgt.w	800e9c8 <__kernel_rem_pio2+0x610>
 800e8bc:	2000      	movs	r0, #0
 800e8be:	2100      	movs	r1, #0
 800e8c0:	2d01      	cmp	r5, #1
 800e8c2:	f300 80a0 	bgt.w	800ea06 <__kernel_rem_pio2+0x64e>
 800e8c6:	9b02      	ldr	r3, [sp, #8]
 800e8c8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e8cc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	f040 809e 	bne.w	800ea12 <__kernel_rem_pio2+0x65a>
 800e8d6:	9b01      	ldr	r3, [sp, #4]
 800e8d8:	e9c3 7800 	strd	r7, r8, [r3]
 800e8dc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e8e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e8e4:	e033      	b.n	800e94e <__kernel_rem_pio2+0x596>
 800e8e6:	3408      	adds	r4, #8
 800e8e8:	ab4a      	add	r3, sp, #296	; 0x128
 800e8ea:	441c      	add	r4, r3
 800e8ec:	462e      	mov	r6, r5
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	2100      	movs	r1, #0
 800e8f2:	2e00      	cmp	r6, #0
 800e8f4:	da3a      	bge.n	800e96c <__kernel_rem_pio2+0x5b4>
 800e8f6:	9b02      	ldr	r3, [sp, #8]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d03d      	beq.n	800e978 <__kernel_rem_pio2+0x5c0>
 800e8fc:	4602      	mov	r2, r0
 800e8fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e902:	9c01      	ldr	r4, [sp, #4]
 800e904:	e9c4 2300 	strd	r2, r3, [r4]
 800e908:	4602      	mov	r2, r0
 800e90a:	460b      	mov	r3, r1
 800e90c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e910:	f7f1 fcba 	bl	8000288 <__aeabi_dsub>
 800e914:	ae4c      	add	r6, sp, #304	; 0x130
 800e916:	2401      	movs	r4, #1
 800e918:	42a5      	cmp	r5, r4
 800e91a:	da30      	bge.n	800e97e <__kernel_rem_pio2+0x5c6>
 800e91c:	9b02      	ldr	r3, [sp, #8]
 800e91e:	b113      	cbz	r3, 800e926 <__kernel_rem_pio2+0x56e>
 800e920:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e924:	4619      	mov	r1, r3
 800e926:	9b01      	ldr	r3, [sp, #4]
 800e928:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e92c:	e00f      	b.n	800e94e <__kernel_rem_pio2+0x596>
 800e92e:	ab9a      	add	r3, sp, #616	; 0x268
 800e930:	441c      	add	r4, r3
 800e932:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e936:	2000      	movs	r0, #0
 800e938:	2100      	movs	r1, #0
 800e93a:	2d00      	cmp	r5, #0
 800e93c:	da10      	bge.n	800e960 <__kernel_rem_pio2+0x5a8>
 800e93e:	9b02      	ldr	r3, [sp, #8]
 800e940:	b113      	cbz	r3, 800e948 <__kernel_rem_pio2+0x590>
 800e942:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e946:	4619      	mov	r1, r3
 800e948:	9b01      	ldr	r3, [sp, #4]
 800e94a:	e9c3 0100 	strd	r0, r1, [r3]
 800e94e:	9b06      	ldr	r3, [sp, #24]
 800e950:	f003 0007 	and.w	r0, r3, #7
 800e954:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e958:	ecbd 8b02 	vpop	{d8}
 800e95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e960:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e964:	f7f1 fc92 	bl	800028c <__adddf3>
 800e968:	3d01      	subs	r5, #1
 800e96a:	e7e6      	b.n	800e93a <__kernel_rem_pio2+0x582>
 800e96c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e970:	f7f1 fc8c 	bl	800028c <__adddf3>
 800e974:	3e01      	subs	r6, #1
 800e976:	e7bc      	b.n	800e8f2 <__kernel_rem_pio2+0x53a>
 800e978:	4602      	mov	r2, r0
 800e97a:	460b      	mov	r3, r1
 800e97c:	e7c1      	b.n	800e902 <__kernel_rem_pio2+0x54a>
 800e97e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e982:	f7f1 fc83 	bl	800028c <__adddf3>
 800e986:	3401      	adds	r4, #1
 800e988:	e7c6      	b.n	800e918 <__kernel_rem_pio2+0x560>
 800e98a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800e98e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e992:	4640      	mov	r0, r8
 800e994:	ec53 2b17 	vmov	r2, r3, d7
 800e998:	4649      	mov	r1, r9
 800e99a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e99e:	f7f1 fc75 	bl	800028c <__adddf3>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	4606      	mov	r6, r0
 800e9a8:	460f      	mov	r7, r1
 800e9aa:	4640      	mov	r0, r8
 800e9ac:	4649      	mov	r1, r9
 800e9ae:	f7f1 fc6b 	bl	8000288 <__aeabi_dsub>
 800e9b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9b6:	f7f1 fc69 	bl	800028c <__adddf3>
 800e9ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e9be:	e9ca 0100 	strd	r0, r1, [sl]
 800e9c2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800e9c6:	e770      	b.n	800e8aa <__kernel_rem_pio2+0x4f2>
 800e9c8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800e9cc:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e9d0:	4630      	mov	r0, r6
 800e9d2:	ec53 2b17 	vmov	r2, r3, d7
 800e9d6:	4639      	mov	r1, r7
 800e9d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e9dc:	f7f1 fc56 	bl	800028c <__adddf3>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	4680      	mov	r8, r0
 800e9e6:	4689      	mov	r9, r1
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	4639      	mov	r1, r7
 800e9ec:	f7f1 fc4c 	bl	8000288 <__aeabi_dsub>
 800e9f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9f4:	f7f1 fc4a 	bl	800028c <__adddf3>
 800e9f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e9fc:	e9ca 0100 	strd	r0, r1, [sl]
 800ea00:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800ea04:	e756      	b.n	800e8b4 <__kernel_rem_pio2+0x4fc>
 800ea06:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ea0a:	f7f1 fc3f 	bl	800028c <__adddf3>
 800ea0e:	3d01      	subs	r5, #1
 800ea10:	e756      	b.n	800e8c0 <__kernel_rem_pio2+0x508>
 800ea12:	9b01      	ldr	r3, [sp, #4]
 800ea14:	9a01      	ldr	r2, [sp, #4]
 800ea16:	601f      	str	r7, [r3, #0]
 800ea18:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ea1c:	605c      	str	r4, [r3, #4]
 800ea1e:	609d      	str	r5, [r3, #8]
 800ea20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ea24:	60d3      	str	r3, [r2, #12]
 800ea26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea2a:	6110      	str	r0, [r2, #16]
 800ea2c:	6153      	str	r3, [r2, #20]
 800ea2e:	e78e      	b.n	800e94e <__kernel_rem_pio2+0x596>
 800ea30:	41700000 	.word	0x41700000
 800ea34:	3e700000 	.word	0x3e700000

0800ea38 <__kernel_sin>:
 800ea38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3c:	ec55 4b10 	vmov	r4, r5, d0
 800ea40:	b085      	sub	sp, #20
 800ea42:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ea46:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ea4a:	ed8d 1b00 	vstr	d1, [sp]
 800ea4e:	9002      	str	r0, [sp, #8]
 800ea50:	da06      	bge.n	800ea60 <__kernel_sin+0x28>
 800ea52:	ee10 0a10 	vmov	r0, s0
 800ea56:	4629      	mov	r1, r5
 800ea58:	f7f2 f87e 	bl	8000b58 <__aeabi_d2iz>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d051      	beq.n	800eb04 <__kernel_sin+0xcc>
 800ea60:	4622      	mov	r2, r4
 800ea62:	462b      	mov	r3, r5
 800ea64:	4620      	mov	r0, r4
 800ea66:	4629      	mov	r1, r5
 800ea68:	f7f1 fdc6 	bl	80005f8 <__aeabi_dmul>
 800ea6c:	4682      	mov	sl, r0
 800ea6e:	468b      	mov	fp, r1
 800ea70:	4602      	mov	r2, r0
 800ea72:	460b      	mov	r3, r1
 800ea74:	4620      	mov	r0, r4
 800ea76:	4629      	mov	r1, r5
 800ea78:	f7f1 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ea7c:	a341      	add	r3, pc, #260	; (adr r3, 800eb84 <__kernel_sin+0x14c>)
 800ea7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea82:	4680      	mov	r8, r0
 800ea84:	4689      	mov	r9, r1
 800ea86:	4650      	mov	r0, sl
 800ea88:	4659      	mov	r1, fp
 800ea8a:	f7f1 fdb5 	bl	80005f8 <__aeabi_dmul>
 800ea8e:	a33f      	add	r3, pc, #252	; (adr r3, 800eb8c <__kernel_sin+0x154>)
 800ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea94:	f7f1 fbf8 	bl	8000288 <__aeabi_dsub>
 800ea98:	4652      	mov	r2, sl
 800ea9a:	465b      	mov	r3, fp
 800ea9c:	f7f1 fdac 	bl	80005f8 <__aeabi_dmul>
 800eaa0:	a33c      	add	r3, pc, #240	; (adr r3, 800eb94 <__kernel_sin+0x15c>)
 800eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa6:	f7f1 fbf1 	bl	800028c <__adddf3>
 800eaaa:	4652      	mov	r2, sl
 800eaac:	465b      	mov	r3, fp
 800eaae:	f7f1 fda3 	bl	80005f8 <__aeabi_dmul>
 800eab2:	a33a      	add	r3, pc, #232	; (adr r3, 800eb9c <__kernel_sin+0x164>)
 800eab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab8:	f7f1 fbe6 	bl	8000288 <__aeabi_dsub>
 800eabc:	4652      	mov	r2, sl
 800eabe:	465b      	mov	r3, fp
 800eac0:	f7f1 fd9a 	bl	80005f8 <__aeabi_dmul>
 800eac4:	a337      	add	r3, pc, #220	; (adr r3, 800eba4 <__kernel_sin+0x16c>)
 800eac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaca:	f7f1 fbdf 	bl	800028c <__adddf3>
 800eace:	9b02      	ldr	r3, [sp, #8]
 800ead0:	4606      	mov	r6, r0
 800ead2:	460f      	mov	r7, r1
 800ead4:	b9db      	cbnz	r3, 800eb0e <__kernel_sin+0xd6>
 800ead6:	4602      	mov	r2, r0
 800ead8:	460b      	mov	r3, r1
 800eada:	4650      	mov	r0, sl
 800eadc:	4659      	mov	r1, fp
 800eade:	f7f1 fd8b 	bl	80005f8 <__aeabi_dmul>
 800eae2:	a325      	add	r3, pc, #148	; (adr r3, 800eb78 <__kernel_sin+0x140>)
 800eae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae8:	f7f1 fbce 	bl	8000288 <__aeabi_dsub>
 800eaec:	4642      	mov	r2, r8
 800eaee:	464b      	mov	r3, r9
 800eaf0:	f7f1 fd82 	bl	80005f8 <__aeabi_dmul>
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	460b      	mov	r3, r1
 800eaf8:	4620      	mov	r0, r4
 800eafa:	4629      	mov	r1, r5
 800eafc:	f7f1 fbc6 	bl	800028c <__adddf3>
 800eb00:	4604      	mov	r4, r0
 800eb02:	460d      	mov	r5, r1
 800eb04:	ec45 4b10 	vmov	d0, r4, r5
 800eb08:	b005      	add	sp, #20
 800eb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0e:	2200      	movs	r2, #0
 800eb10:	4b1b      	ldr	r3, [pc, #108]	; (800eb80 <__kernel_sin+0x148>)
 800eb12:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb16:	f7f1 fd6f 	bl	80005f8 <__aeabi_dmul>
 800eb1a:	4632      	mov	r2, r6
 800eb1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb20:	463b      	mov	r3, r7
 800eb22:	4640      	mov	r0, r8
 800eb24:	4649      	mov	r1, r9
 800eb26:	f7f1 fd67 	bl	80005f8 <__aeabi_dmul>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb32:	f7f1 fba9 	bl	8000288 <__aeabi_dsub>
 800eb36:	4652      	mov	r2, sl
 800eb38:	465b      	mov	r3, fp
 800eb3a:	f7f1 fd5d 	bl	80005f8 <__aeabi_dmul>
 800eb3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb42:	f7f1 fba1 	bl	8000288 <__aeabi_dsub>
 800eb46:	a30c      	add	r3, pc, #48	; (adr r3, 800eb78 <__kernel_sin+0x140>)
 800eb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4c:	4606      	mov	r6, r0
 800eb4e:	460f      	mov	r7, r1
 800eb50:	4640      	mov	r0, r8
 800eb52:	4649      	mov	r1, r9
 800eb54:	f7f1 fd50 	bl	80005f8 <__aeabi_dmul>
 800eb58:	4602      	mov	r2, r0
 800eb5a:	460b      	mov	r3, r1
 800eb5c:	4630      	mov	r0, r6
 800eb5e:	4639      	mov	r1, r7
 800eb60:	f7f1 fb94 	bl	800028c <__adddf3>
 800eb64:	4602      	mov	r2, r0
 800eb66:	460b      	mov	r3, r1
 800eb68:	4620      	mov	r0, r4
 800eb6a:	4629      	mov	r1, r5
 800eb6c:	f7f1 fb8c 	bl	8000288 <__aeabi_dsub>
 800eb70:	e7c6      	b.n	800eb00 <__kernel_sin+0xc8>
 800eb72:	bf00      	nop
 800eb74:	f3af 8000 	nop.w
 800eb78:	55555549 	.word	0x55555549
 800eb7c:	3fc55555 	.word	0x3fc55555
 800eb80:	3fe00000 	.word	0x3fe00000
 800eb84:	5acfd57c 	.word	0x5acfd57c
 800eb88:	3de5d93a 	.word	0x3de5d93a
 800eb8c:	8a2b9ceb 	.word	0x8a2b9ceb
 800eb90:	3e5ae5e6 	.word	0x3e5ae5e6
 800eb94:	57b1fe7d 	.word	0x57b1fe7d
 800eb98:	3ec71de3 	.word	0x3ec71de3
 800eb9c:	19c161d5 	.word	0x19c161d5
 800eba0:	3f2a01a0 	.word	0x3f2a01a0
 800eba4:	1110f8a6 	.word	0x1110f8a6
 800eba8:	3f811111 	.word	0x3f811111
 800ebac:	00000000 	.word	0x00000000

0800ebb0 <atan>:
 800ebb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb4:	ec55 4b10 	vmov	r4, r5, d0
 800ebb8:	4bc3      	ldr	r3, [pc, #780]	; (800eec8 <atan+0x318>)
 800ebba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ebbe:	429e      	cmp	r6, r3
 800ebc0:	46ab      	mov	fp, r5
 800ebc2:	dd18      	ble.n	800ebf6 <atan+0x46>
 800ebc4:	4bc1      	ldr	r3, [pc, #772]	; (800eecc <atan+0x31c>)
 800ebc6:	429e      	cmp	r6, r3
 800ebc8:	dc01      	bgt.n	800ebce <atan+0x1e>
 800ebca:	d109      	bne.n	800ebe0 <atan+0x30>
 800ebcc:	b144      	cbz	r4, 800ebe0 <atan+0x30>
 800ebce:	4622      	mov	r2, r4
 800ebd0:	462b      	mov	r3, r5
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	4629      	mov	r1, r5
 800ebd6:	f7f1 fb59 	bl	800028c <__adddf3>
 800ebda:	4604      	mov	r4, r0
 800ebdc:	460d      	mov	r5, r1
 800ebde:	e006      	b.n	800ebee <atan+0x3e>
 800ebe0:	f1bb 0f00 	cmp.w	fp, #0
 800ebe4:	f340 8131 	ble.w	800ee4a <atan+0x29a>
 800ebe8:	a59b      	add	r5, pc, #620	; (adr r5, 800ee58 <atan+0x2a8>)
 800ebea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ebee:	ec45 4b10 	vmov	d0, r4, r5
 800ebf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebf6:	4bb6      	ldr	r3, [pc, #728]	; (800eed0 <atan+0x320>)
 800ebf8:	429e      	cmp	r6, r3
 800ebfa:	dc14      	bgt.n	800ec26 <atan+0x76>
 800ebfc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ec00:	429e      	cmp	r6, r3
 800ec02:	dc0d      	bgt.n	800ec20 <atan+0x70>
 800ec04:	a396      	add	r3, pc, #600	; (adr r3, 800ee60 <atan+0x2b0>)
 800ec06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0a:	ee10 0a10 	vmov	r0, s0
 800ec0e:	4629      	mov	r1, r5
 800ec10:	f7f1 fb3c 	bl	800028c <__adddf3>
 800ec14:	2200      	movs	r2, #0
 800ec16:	4baf      	ldr	r3, [pc, #700]	; (800eed4 <atan+0x324>)
 800ec18:	f7f1 ff7e 	bl	8000b18 <__aeabi_dcmpgt>
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	d1e6      	bne.n	800ebee <atan+0x3e>
 800ec20:	f04f 3aff 	mov.w	sl, #4294967295
 800ec24:	e02b      	b.n	800ec7e <atan+0xce>
 800ec26:	f000 f963 	bl	800eef0 <fabs>
 800ec2a:	4bab      	ldr	r3, [pc, #684]	; (800eed8 <atan+0x328>)
 800ec2c:	429e      	cmp	r6, r3
 800ec2e:	ec55 4b10 	vmov	r4, r5, d0
 800ec32:	f300 80bf 	bgt.w	800edb4 <atan+0x204>
 800ec36:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ec3a:	429e      	cmp	r6, r3
 800ec3c:	f300 80a0 	bgt.w	800ed80 <atan+0x1d0>
 800ec40:	ee10 2a10 	vmov	r2, s0
 800ec44:	ee10 0a10 	vmov	r0, s0
 800ec48:	462b      	mov	r3, r5
 800ec4a:	4629      	mov	r1, r5
 800ec4c:	f7f1 fb1e 	bl	800028c <__adddf3>
 800ec50:	2200      	movs	r2, #0
 800ec52:	4ba0      	ldr	r3, [pc, #640]	; (800eed4 <atan+0x324>)
 800ec54:	f7f1 fb18 	bl	8000288 <__aeabi_dsub>
 800ec58:	2200      	movs	r2, #0
 800ec5a:	4606      	mov	r6, r0
 800ec5c:	460f      	mov	r7, r1
 800ec5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec62:	4620      	mov	r0, r4
 800ec64:	4629      	mov	r1, r5
 800ec66:	f7f1 fb11 	bl	800028c <__adddf3>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	4630      	mov	r0, r6
 800ec70:	4639      	mov	r1, r7
 800ec72:	f7f1 fdeb 	bl	800084c <__aeabi_ddiv>
 800ec76:	f04f 0a00 	mov.w	sl, #0
 800ec7a:	4604      	mov	r4, r0
 800ec7c:	460d      	mov	r5, r1
 800ec7e:	4622      	mov	r2, r4
 800ec80:	462b      	mov	r3, r5
 800ec82:	4620      	mov	r0, r4
 800ec84:	4629      	mov	r1, r5
 800ec86:	f7f1 fcb7 	bl	80005f8 <__aeabi_dmul>
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	4680      	mov	r8, r0
 800ec90:	4689      	mov	r9, r1
 800ec92:	f7f1 fcb1 	bl	80005f8 <__aeabi_dmul>
 800ec96:	a374      	add	r3, pc, #464	; (adr r3, 800ee68 <atan+0x2b8>)
 800ec98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9c:	4606      	mov	r6, r0
 800ec9e:	460f      	mov	r7, r1
 800eca0:	f7f1 fcaa 	bl	80005f8 <__aeabi_dmul>
 800eca4:	a372      	add	r3, pc, #456	; (adr r3, 800ee70 <atan+0x2c0>)
 800eca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecaa:	f7f1 faef 	bl	800028c <__adddf3>
 800ecae:	4632      	mov	r2, r6
 800ecb0:	463b      	mov	r3, r7
 800ecb2:	f7f1 fca1 	bl	80005f8 <__aeabi_dmul>
 800ecb6:	a370      	add	r3, pc, #448	; (adr r3, 800ee78 <atan+0x2c8>)
 800ecb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecbc:	f7f1 fae6 	bl	800028c <__adddf3>
 800ecc0:	4632      	mov	r2, r6
 800ecc2:	463b      	mov	r3, r7
 800ecc4:	f7f1 fc98 	bl	80005f8 <__aeabi_dmul>
 800ecc8:	a36d      	add	r3, pc, #436	; (adr r3, 800ee80 <atan+0x2d0>)
 800ecca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecce:	f7f1 fadd 	bl	800028c <__adddf3>
 800ecd2:	4632      	mov	r2, r6
 800ecd4:	463b      	mov	r3, r7
 800ecd6:	f7f1 fc8f 	bl	80005f8 <__aeabi_dmul>
 800ecda:	a36b      	add	r3, pc, #428	; (adr r3, 800ee88 <atan+0x2d8>)
 800ecdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece0:	f7f1 fad4 	bl	800028c <__adddf3>
 800ece4:	4632      	mov	r2, r6
 800ece6:	463b      	mov	r3, r7
 800ece8:	f7f1 fc86 	bl	80005f8 <__aeabi_dmul>
 800ecec:	a368      	add	r3, pc, #416	; (adr r3, 800ee90 <atan+0x2e0>)
 800ecee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf2:	f7f1 facb 	bl	800028c <__adddf3>
 800ecf6:	4642      	mov	r2, r8
 800ecf8:	464b      	mov	r3, r9
 800ecfa:	f7f1 fc7d 	bl	80005f8 <__aeabi_dmul>
 800ecfe:	a366      	add	r3, pc, #408	; (adr r3, 800ee98 <atan+0x2e8>)
 800ed00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed04:	4680      	mov	r8, r0
 800ed06:	4689      	mov	r9, r1
 800ed08:	4630      	mov	r0, r6
 800ed0a:	4639      	mov	r1, r7
 800ed0c:	f7f1 fc74 	bl	80005f8 <__aeabi_dmul>
 800ed10:	a363      	add	r3, pc, #396	; (adr r3, 800eea0 <atan+0x2f0>)
 800ed12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed16:	f7f1 fab7 	bl	8000288 <__aeabi_dsub>
 800ed1a:	4632      	mov	r2, r6
 800ed1c:	463b      	mov	r3, r7
 800ed1e:	f7f1 fc6b 	bl	80005f8 <__aeabi_dmul>
 800ed22:	a361      	add	r3, pc, #388	; (adr r3, 800eea8 <atan+0x2f8>)
 800ed24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed28:	f7f1 faae 	bl	8000288 <__aeabi_dsub>
 800ed2c:	4632      	mov	r2, r6
 800ed2e:	463b      	mov	r3, r7
 800ed30:	f7f1 fc62 	bl	80005f8 <__aeabi_dmul>
 800ed34:	a35e      	add	r3, pc, #376	; (adr r3, 800eeb0 <atan+0x300>)
 800ed36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3a:	f7f1 faa5 	bl	8000288 <__aeabi_dsub>
 800ed3e:	4632      	mov	r2, r6
 800ed40:	463b      	mov	r3, r7
 800ed42:	f7f1 fc59 	bl	80005f8 <__aeabi_dmul>
 800ed46:	a35c      	add	r3, pc, #368	; (adr r3, 800eeb8 <atan+0x308>)
 800ed48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4c:	f7f1 fa9c 	bl	8000288 <__aeabi_dsub>
 800ed50:	4632      	mov	r2, r6
 800ed52:	463b      	mov	r3, r7
 800ed54:	f7f1 fc50 	bl	80005f8 <__aeabi_dmul>
 800ed58:	4602      	mov	r2, r0
 800ed5a:	460b      	mov	r3, r1
 800ed5c:	4640      	mov	r0, r8
 800ed5e:	4649      	mov	r1, r9
 800ed60:	f7f1 fa94 	bl	800028c <__adddf3>
 800ed64:	4622      	mov	r2, r4
 800ed66:	462b      	mov	r3, r5
 800ed68:	f7f1 fc46 	bl	80005f8 <__aeabi_dmul>
 800ed6c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ed70:	4602      	mov	r2, r0
 800ed72:	460b      	mov	r3, r1
 800ed74:	d14b      	bne.n	800ee0e <atan+0x25e>
 800ed76:	4620      	mov	r0, r4
 800ed78:	4629      	mov	r1, r5
 800ed7a:	f7f1 fa85 	bl	8000288 <__aeabi_dsub>
 800ed7e:	e72c      	b.n	800ebda <atan+0x2a>
 800ed80:	ee10 0a10 	vmov	r0, s0
 800ed84:	2200      	movs	r2, #0
 800ed86:	4b53      	ldr	r3, [pc, #332]	; (800eed4 <atan+0x324>)
 800ed88:	4629      	mov	r1, r5
 800ed8a:	f7f1 fa7d 	bl	8000288 <__aeabi_dsub>
 800ed8e:	2200      	movs	r2, #0
 800ed90:	4606      	mov	r6, r0
 800ed92:	460f      	mov	r7, r1
 800ed94:	4b4f      	ldr	r3, [pc, #316]	; (800eed4 <atan+0x324>)
 800ed96:	4620      	mov	r0, r4
 800ed98:	4629      	mov	r1, r5
 800ed9a:	f7f1 fa77 	bl	800028c <__adddf3>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	460b      	mov	r3, r1
 800eda2:	4630      	mov	r0, r6
 800eda4:	4639      	mov	r1, r7
 800eda6:	f7f1 fd51 	bl	800084c <__aeabi_ddiv>
 800edaa:	f04f 0a01 	mov.w	sl, #1
 800edae:	4604      	mov	r4, r0
 800edb0:	460d      	mov	r5, r1
 800edb2:	e764      	b.n	800ec7e <atan+0xce>
 800edb4:	4b49      	ldr	r3, [pc, #292]	; (800eedc <atan+0x32c>)
 800edb6:	429e      	cmp	r6, r3
 800edb8:	dc1d      	bgt.n	800edf6 <atan+0x246>
 800edba:	ee10 0a10 	vmov	r0, s0
 800edbe:	2200      	movs	r2, #0
 800edc0:	4b47      	ldr	r3, [pc, #284]	; (800eee0 <atan+0x330>)
 800edc2:	4629      	mov	r1, r5
 800edc4:	f7f1 fa60 	bl	8000288 <__aeabi_dsub>
 800edc8:	2200      	movs	r2, #0
 800edca:	4606      	mov	r6, r0
 800edcc:	460f      	mov	r7, r1
 800edce:	4b44      	ldr	r3, [pc, #272]	; (800eee0 <atan+0x330>)
 800edd0:	4620      	mov	r0, r4
 800edd2:	4629      	mov	r1, r5
 800edd4:	f7f1 fc10 	bl	80005f8 <__aeabi_dmul>
 800edd8:	2200      	movs	r2, #0
 800edda:	4b3e      	ldr	r3, [pc, #248]	; (800eed4 <atan+0x324>)
 800eddc:	f7f1 fa56 	bl	800028c <__adddf3>
 800ede0:	4602      	mov	r2, r0
 800ede2:	460b      	mov	r3, r1
 800ede4:	4630      	mov	r0, r6
 800ede6:	4639      	mov	r1, r7
 800ede8:	f7f1 fd30 	bl	800084c <__aeabi_ddiv>
 800edec:	f04f 0a02 	mov.w	sl, #2
 800edf0:	4604      	mov	r4, r0
 800edf2:	460d      	mov	r5, r1
 800edf4:	e743      	b.n	800ec7e <atan+0xce>
 800edf6:	462b      	mov	r3, r5
 800edf8:	ee10 2a10 	vmov	r2, s0
 800edfc:	2000      	movs	r0, #0
 800edfe:	4939      	ldr	r1, [pc, #228]	; (800eee4 <atan+0x334>)
 800ee00:	f7f1 fd24 	bl	800084c <__aeabi_ddiv>
 800ee04:	f04f 0a03 	mov.w	sl, #3
 800ee08:	4604      	mov	r4, r0
 800ee0a:	460d      	mov	r5, r1
 800ee0c:	e737      	b.n	800ec7e <atan+0xce>
 800ee0e:	4b36      	ldr	r3, [pc, #216]	; (800eee8 <atan+0x338>)
 800ee10:	4e36      	ldr	r6, [pc, #216]	; (800eeec <atan+0x33c>)
 800ee12:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800ee16:	4456      	add	r6, sl
 800ee18:	449a      	add	sl, r3
 800ee1a:	e9da 2300 	ldrd	r2, r3, [sl]
 800ee1e:	f7f1 fa33 	bl	8000288 <__aeabi_dsub>
 800ee22:	4622      	mov	r2, r4
 800ee24:	462b      	mov	r3, r5
 800ee26:	f7f1 fa2f 	bl	8000288 <__aeabi_dsub>
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ee32:	f7f1 fa29 	bl	8000288 <__aeabi_dsub>
 800ee36:	f1bb 0f00 	cmp.w	fp, #0
 800ee3a:	4604      	mov	r4, r0
 800ee3c:	460d      	mov	r5, r1
 800ee3e:	f6bf aed6 	bge.w	800ebee <atan+0x3e>
 800ee42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee46:	461d      	mov	r5, r3
 800ee48:	e6d1      	b.n	800ebee <atan+0x3e>
 800ee4a:	a51d      	add	r5, pc, #116	; (adr r5, 800eec0 <atan+0x310>)
 800ee4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ee50:	e6cd      	b.n	800ebee <atan+0x3e>
 800ee52:	bf00      	nop
 800ee54:	f3af 8000 	nop.w
 800ee58:	54442d18 	.word	0x54442d18
 800ee5c:	3ff921fb 	.word	0x3ff921fb
 800ee60:	8800759c 	.word	0x8800759c
 800ee64:	7e37e43c 	.word	0x7e37e43c
 800ee68:	e322da11 	.word	0xe322da11
 800ee6c:	3f90ad3a 	.word	0x3f90ad3a
 800ee70:	24760deb 	.word	0x24760deb
 800ee74:	3fa97b4b 	.word	0x3fa97b4b
 800ee78:	a0d03d51 	.word	0xa0d03d51
 800ee7c:	3fb10d66 	.word	0x3fb10d66
 800ee80:	c54c206e 	.word	0xc54c206e
 800ee84:	3fb745cd 	.word	0x3fb745cd
 800ee88:	920083ff 	.word	0x920083ff
 800ee8c:	3fc24924 	.word	0x3fc24924
 800ee90:	5555550d 	.word	0x5555550d
 800ee94:	3fd55555 	.word	0x3fd55555
 800ee98:	2c6a6c2f 	.word	0x2c6a6c2f
 800ee9c:	bfa2b444 	.word	0xbfa2b444
 800eea0:	52defd9a 	.word	0x52defd9a
 800eea4:	3fadde2d 	.word	0x3fadde2d
 800eea8:	af749a6d 	.word	0xaf749a6d
 800eeac:	3fb3b0f2 	.word	0x3fb3b0f2
 800eeb0:	fe231671 	.word	0xfe231671
 800eeb4:	3fbc71c6 	.word	0x3fbc71c6
 800eeb8:	9998ebc4 	.word	0x9998ebc4
 800eebc:	3fc99999 	.word	0x3fc99999
 800eec0:	54442d18 	.word	0x54442d18
 800eec4:	bff921fb 	.word	0xbff921fb
 800eec8:	440fffff 	.word	0x440fffff
 800eecc:	7ff00000 	.word	0x7ff00000
 800eed0:	3fdbffff 	.word	0x3fdbffff
 800eed4:	3ff00000 	.word	0x3ff00000
 800eed8:	3ff2ffff 	.word	0x3ff2ffff
 800eedc:	40037fff 	.word	0x40037fff
 800eee0:	3ff80000 	.word	0x3ff80000
 800eee4:	bff00000 	.word	0xbff00000
 800eee8:	0800f828 	.word	0x0800f828
 800eeec:	0800f808 	.word	0x0800f808

0800eef0 <fabs>:
 800eef0:	ec51 0b10 	vmov	r0, r1, d0
 800eef4:	ee10 2a10 	vmov	r2, s0
 800eef8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eefc:	ec43 2b10 	vmov	d0, r2, r3
 800ef00:	4770      	bx	lr

0800ef02 <finite>:
 800ef02:	ee10 3a90 	vmov	r3, s1
 800ef06:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800ef0a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ef0e:	0fc0      	lsrs	r0, r0, #31
 800ef10:	4770      	bx	lr
 800ef12:	0000      	movs	r0, r0
 800ef14:	0000      	movs	r0, r0
	...

0800ef18 <floor>:
 800ef18:	ec51 0b10 	vmov	r0, r1, d0
 800ef1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ef24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ef28:	2e13      	cmp	r6, #19
 800ef2a:	460c      	mov	r4, r1
 800ef2c:	ee10 5a10 	vmov	r5, s0
 800ef30:	4680      	mov	r8, r0
 800ef32:	dc34      	bgt.n	800ef9e <floor+0x86>
 800ef34:	2e00      	cmp	r6, #0
 800ef36:	da16      	bge.n	800ef66 <floor+0x4e>
 800ef38:	a335      	add	r3, pc, #212	; (adr r3, 800f010 <floor+0xf8>)
 800ef3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3e:	f7f1 f9a5 	bl	800028c <__adddf3>
 800ef42:	2200      	movs	r2, #0
 800ef44:	2300      	movs	r3, #0
 800ef46:	f7f1 fde7 	bl	8000b18 <__aeabi_dcmpgt>
 800ef4a:	b148      	cbz	r0, 800ef60 <floor+0x48>
 800ef4c:	2c00      	cmp	r4, #0
 800ef4e:	da59      	bge.n	800f004 <floor+0xec>
 800ef50:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ef54:	4a30      	ldr	r2, [pc, #192]	; (800f018 <floor+0x100>)
 800ef56:	432b      	orrs	r3, r5
 800ef58:	2500      	movs	r5, #0
 800ef5a:	42ab      	cmp	r3, r5
 800ef5c:	bf18      	it	ne
 800ef5e:	4614      	movne	r4, r2
 800ef60:	4621      	mov	r1, r4
 800ef62:	4628      	mov	r0, r5
 800ef64:	e025      	b.n	800efb2 <floor+0x9a>
 800ef66:	4f2d      	ldr	r7, [pc, #180]	; (800f01c <floor+0x104>)
 800ef68:	4137      	asrs	r7, r6
 800ef6a:	ea01 0307 	and.w	r3, r1, r7
 800ef6e:	4303      	orrs	r3, r0
 800ef70:	d01f      	beq.n	800efb2 <floor+0x9a>
 800ef72:	a327      	add	r3, pc, #156	; (adr r3, 800f010 <floor+0xf8>)
 800ef74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef78:	f7f1 f988 	bl	800028c <__adddf3>
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	2300      	movs	r3, #0
 800ef80:	f7f1 fdca 	bl	8000b18 <__aeabi_dcmpgt>
 800ef84:	2800      	cmp	r0, #0
 800ef86:	d0eb      	beq.n	800ef60 <floor+0x48>
 800ef88:	2c00      	cmp	r4, #0
 800ef8a:	bfbe      	ittt	lt
 800ef8c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ef90:	fa43 f606 	asrlt.w	r6, r3, r6
 800ef94:	19a4      	addlt	r4, r4, r6
 800ef96:	ea24 0407 	bic.w	r4, r4, r7
 800ef9a:	2500      	movs	r5, #0
 800ef9c:	e7e0      	b.n	800ef60 <floor+0x48>
 800ef9e:	2e33      	cmp	r6, #51	; 0x33
 800efa0:	dd0b      	ble.n	800efba <floor+0xa2>
 800efa2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800efa6:	d104      	bne.n	800efb2 <floor+0x9a>
 800efa8:	ee10 2a10 	vmov	r2, s0
 800efac:	460b      	mov	r3, r1
 800efae:	f7f1 f96d 	bl	800028c <__adddf3>
 800efb2:	ec41 0b10 	vmov	d0, r0, r1
 800efb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800efbe:	f04f 33ff 	mov.w	r3, #4294967295
 800efc2:	fa23 f707 	lsr.w	r7, r3, r7
 800efc6:	4207      	tst	r7, r0
 800efc8:	d0f3      	beq.n	800efb2 <floor+0x9a>
 800efca:	a311      	add	r3, pc, #68	; (adr r3, 800f010 <floor+0xf8>)
 800efcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd0:	f7f1 f95c 	bl	800028c <__adddf3>
 800efd4:	2200      	movs	r2, #0
 800efd6:	2300      	movs	r3, #0
 800efd8:	f7f1 fd9e 	bl	8000b18 <__aeabi_dcmpgt>
 800efdc:	2800      	cmp	r0, #0
 800efde:	d0bf      	beq.n	800ef60 <floor+0x48>
 800efe0:	2c00      	cmp	r4, #0
 800efe2:	da02      	bge.n	800efea <floor+0xd2>
 800efe4:	2e14      	cmp	r6, #20
 800efe6:	d103      	bne.n	800eff0 <floor+0xd8>
 800efe8:	3401      	adds	r4, #1
 800efea:	ea25 0507 	bic.w	r5, r5, r7
 800efee:	e7b7      	b.n	800ef60 <floor+0x48>
 800eff0:	2301      	movs	r3, #1
 800eff2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800eff6:	fa03 f606 	lsl.w	r6, r3, r6
 800effa:	4435      	add	r5, r6
 800effc:	4545      	cmp	r5, r8
 800effe:	bf38      	it	cc
 800f000:	18e4      	addcc	r4, r4, r3
 800f002:	e7f2      	b.n	800efea <floor+0xd2>
 800f004:	2500      	movs	r5, #0
 800f006:	462c      	mov	r4, r5
 800f008:	e7aa      	b.n	800ef60 <floor+0x48>
 800f00a:	bf00      	nop
 800f00c:	f3af 8000 	nop.w
 800f010:	8800759c 	.word	0x8800759c
 800f014:	7e37e43c 	.word	0x7e37e43c
 800f018:	bff00000 	.word	0xbff00000
 800f01c:	000fffff 	.word	0x000fffff

0800f020 <matherr>:
 800f020:	2000      	movs	r0, #0
 800f022:	4770      	bx	lr
 800f024:	0000      	movs	r0, r0
	...

0800f028 <nan>:
 800f028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f030 <nan+0x8>
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop
 800f030:	00000000 	.word	0x00000000
 800f034:	7ff80000 	.word	0x7ff80000

0800f038 <rint>:
 800f038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f03a:	ec51 0b10 	vmov	r0, r1, d0
 800f03e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f042:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f046:	2e13      	cmp	r6, #19
 800f048:	460b      	mov	r3, r1
 800f04a:	ee10 4a10 	vmov	r4, s0
 800f04e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f052:	dc56      	bgt.n	800f102 <rint+0xca>
 800f054:	2e00      	cmp	r6, #0
 800f056:	da2b      	bge.n	800f0b0 <rint+0x78>
 800f058:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f05c:	4302      	orrs	r2, r0
 800f05e:	d023      	beq.n	800f0a8 <rint+0x70>
 800f060:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f064:	4302      	orrs	r2, r0
 800f066:	4254      	negs	r4, r2
 800f068:	4314      	orrs	r4, r2
 800f06a:	0c4b      	lsrs	r3, r1, #17
 800f06c:	0b24      	lsrs	r4, r4, #12
 800f06e:	045b      	lsls	r3, r3, #17
 800f070:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f074:	ea44 0103 	orr.w	r1, r4, r3
 800f078:	460b      	mov	r3, r1
 800f07a:	492f      	ldr	r1, [pc, #188]	; (800f138 <rint+0x100>)
 800f07c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800f080:	e9d1 6700 	ldrd	r6, r7, [r1]
 800f084:	4602      	mov	r2, r0
 800f086:	4639      	mov	r1, r7
 800f088:	4630      	mov	r0, r6
 800f08a:	f7f1 f8ff 	bl	800028c <__adddf3>
 800f08e:	e9cd 0100 	strd	r0, r1, [sp]
 800f092:	463b      	mov	r3, r7
 800f094:	4632      	mov	r2, r6
 800f096:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f09a:	f7f1 f8f5 	bl	8000288 <__aeabi_dsub>
 800f09e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f0a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f0a6:	4639      	mov	r1, r7
 800f0a8:	ec41 0b10 	vmov	d0, r0, r1
 800f0ac:	b003      	add	sp, #12
 800f0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0b0:	4a22      	ldr	r2, [pc, #136]	; (800f13c <rint+0x104>)
 800f0b2:	4132      	asrs	r2, r6
 800f0b4:	ea01 0702 	and.w	r7, r1, r2
 800f0b8:	4307      	orrs	r7, r0
 800f0ba:	d0f5      	beq.n	800f0a8 <rint+0x70>
 800f0bc:	0852      	lsrs	r2, r2, #1
 800f0be:	4011      	ands	r1, r2
 800f0c0:	430c      	orrs	r4, r1
 800f0c2:	d00b      	beq.n	800f0dc <rint+0xa4>
 800f0c4:	ea23 0202 	bic.w	r2, r3, r2
 800f0c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f0cc:	2e13      	cmp	r6, #19
 800f0ce:	fa43 f306 	asr.w	r3, r3, r6
 800f0d2:	bf0c      	ite	eq
 800f0d4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f0d8:	2400      	movne	r4, #0
 800f0da:	4313      	orrs	r3, r2
 800f0dc:	4916      	ldr	r1, [pc, #88]	; (800f138 <rint+0x100>)
 800f0de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f0e2:	4622      	mov	r2, r4
 800f0e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	f7f1 f8ce 	bl	800028c <__adddf3>
 800f0f0:	e9cd 0100 	strd	r0, r1, [sp]
 800f0f4:	4622      	mov	r2, r4
 800f0f6:	462b      	mov	r3, r5
 800f0f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f0fc:	f7f1 f8c4 	bl	8000288 <__aeabi_dsub>
 800f100:	e7d2      	b.n	800f0a8 <rint+0x70>
 800f102:	2e33      	cmp	r6, #51	; 0x33
 800f104:	dd07      	ble.n	800f116 <rint+0xde>
 800f106:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f10a:	d1cd      	bne.n	800f0a8 <rint+0x70>
 800f10c:	ee10 2a10 	vmov	r2, s0
 800f110:	f7f1 f8bc 	bl	800028c <__adddf3>
 800f114:	e7c8      	b.n	800f0a8 <rint+0x70>
 800f116:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800f11a:	f04f 32ff 	mov.w	r2, #4294967295
 800f11e:	40f2      	lsrs	r2, r6
 800f120:	4210      	tst	r0, r2
 800f122:	d0c1      	beq.n	800f0a8 <rint+0x70>
 800f124:	0852      	lsrs	r2, r2, #1
 800f126:	4210      	tst	r0, r2
 800f128:	bf1f      	itttt	ne
 800f12a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f12e:	ea20 0202 	bicne.w	r2, r0, r2
 800f132:	4134      	asrne	r4, r6
 800f134:	4314      	orrne	r4, r2
 800f136:	e7d1      	b.n	800f0dc <rint+0xa4>
 800f138:	0800f848 	.word	0x0800f848
 800f13c:	000fffff 	.word	0x000fffff

0800f140 <scalbn>:
 800f140:	b570      	push	{r4, r5, r6, lr}
 800f142:	ec55 4b10 	vmov	r4, r5, d0
 800f146:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f14a:	4606      	mov	r6, r0
 800f14c:	462b      	mov	r3, r5
 800f14e:	b9aa      	cbnz	r2, 800f17c <scalbn+0x3c>
 800f150:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f154:	4323      	orrs	r3, r4
 800f156:	d03b      	beq.n	800f1d0 <scalbn+0x90>
 800f158:	4b31      	ldr	r3, [pc, #196]	; (800f220 <scalbn+0xe0>)
 800f15a:	4629      	mov	r1, r5
 800f15c:	2200      	movs	r2, #0
 800f15e:	ee10 0a10 	vmov	r0, s0
 800f162:	f7f1 fa49 	bl	80005f8 <__aeabi_dmul>
 800f166:	4b2f      	ldr	r3, [pc, #188]	; (800f224 <scalbn+0xe4>)
 800f168:	429e      	cmp	r6, r3
 800f16a:	4604      	mov	r4, r0
 800f16c:	460d      	mov	r5, r1
 800f16e:	da12      	bge.n	800f196 <scalbn+0x56>
 800f170:	a327      	add	r3, pc, #156	; (adr r3, 800f210 <scalbn+0xd0>)
 800f172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f176:	f7f1 fa3f 	bl	80005f8 <__aeabi_dmul>
 800f17a:	e009      	b.n	800f190 <scalbn+0x50>
 800f17c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f180:	428a      	cmp	r2, r1
 800f182:	d10c      	bne.n	800f19e <scalbn+0x5e>
 800f184:	ee10 2a10 	vmov	r2, s0
 800f188:	4620      	mov	r0, r4
 800f18a:	4629      	mov	r1, r5
 800f18c:	f7f1 f87e 	bl	800028c <__adddf3>
 800f190:	4604      	mov	r4, r0
 800f192:	460d      	mov	r5, r1
 800f194:	e01c      	b.n	800f1d0 <scalbn+0x90>
 800f196:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f19a:	460b      	mov	r3, r1
 800f19c:	3a36      	subs	r2, #54	; 0x36
 800f19e:	4432      	add	r2, r6
 800f1a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f1a4:	428a      	cmp	r2, r1
 800f1a6:	dd0b      	ble.n	800f1c0 <scalbn+0x80>
 800f1a8:	ec45 4b11 	vmov	d1, r4, r5
 800f1ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800f218 <scalbn+0xd8>
 800f1b0:	f000 f83c 	bl	800f22c <copysign>
 800f1b4:	a318      	add	r3, pc, #96	; (adr r3, 800f218 <scalbn+0xd8>)
 800f1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ba:	ec51 0b10 	vmov	r0, r1, d0
 800f1be:	e7da      	b.n	800f176 <scalbn+0x36>
 800f1c0:	2a00      	cmp	r2, #0
 800f1c2:	dd08      	ble.n	800f1d6 <scalbn+0x96>
 800f1c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f1c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f1cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f1d0:	ec45 4b10 	vmov	d0, r4, r5
 800f1d4:	bd70      	pop	{r4, r5, r6, pc}
 800f1d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f1da:	da0d      	bge.n	800f1f8 <scalbn+0xb8>
 800f1dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f1e0:	429e      	cmp	r6, r3
 800f1e2:	ec45 4b11 	vmov	d1, r4, r5
 800f1e6:	dce1      	bgt.n	800f1ac <scalbn+0x6c>
 800f1e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800f210 <scalbn+0xd0>
 800f1ec:	f000 f81e 	bl	800f22c <copysign>
 800f1f0:	a307      	add	r3, pc, #28	; (adr r3, 800f210 <scalbn+0xd0>)
 800f1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f6:	e7e0      	b.n	800f1ba <scalbn+0x7a>
 800f1f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f1fc:	3236      	adds	r2, #54	; 0x36
 800f1fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f202:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f206:	4620      	mov	r0, r4
 800f208:	4629      	mov	r1, r5
 800f20a:	2200      	movs	r2, #0
 800f20c:	4b06      	ldr	r3, [pc, #24]	; (800f228 <scalbn+0xe8>)
 800f20e:	e7b2      	b.n	800f176 <scalbn+0x36>
 800f210:	c2f8f359 	.word	0xc2f8f359
 800f214:	01a56e1f 	.word	0x01a56e1f
 800f218:	8800759c 	.word	0x8800759c
 800f21c:	7e37e43c 	.word	0x7e37e43c
 800f220:	43500000 	.word	0x43500000
 800f224:	ffff3cb0 	.word	0xffff3cb0
 800f228:	3c900000 	.word	0x3c900000

0800f22c <copysign>:
 800f22c:	ec51 0b10 	vmov	r0, r1, d0
 800f230:	ee11 0a90 	vmov	r0, s3
 800f234:	ee10 2a10 	vmov	r2, s0
 800f238:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f23c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800f240:	ea41 0300 	orr.w	r3, r1, r0
 800f244:	ec43 2b10 	vmov	d0, r2, r3
 800f248:	4770      	bx	lr
	...

0800f24c <_sbrk>:
 800f24c:	4b04      	ldr	r3, [pc, #16]	; (800f260 <_sbrk+0x14>)
 800f24e:	6819      	ldr	r1, [r3, #0]
 800f250:	4602      	mov	r2, r0
 800f252:	b909      	cbnz	r1, 800f258 <_sbrk+0xc>
 800f254:	4903      	ldr	r1, [pc, #12]	; (800f264 <_sbrk+0x18>)
 800f256:	6019      	str	r1, [r3, #0]
 800f258:	6818      	ldr	r0, [r3, #0]
 800f25a:	4402      	add	r2, r0
 800f25c:	601a      	str	r2, [r3, #0]
 800f25e:	4770      	bx	lr
 800f260:	20000a18 	.word	0x20000a18
 800f264:	20000fa8 	.word	0x20000fa8

0800f268 <_init>:
 800f268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26a:	bf00      	nop
 800f26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f26e:	bc08      	pop	{r3}
 800f270:	469e      	mov	lr, r3
 800f272:	4770      	bx	lr

0800f274 <_fini>:
 800f274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f276:	bf00      	nop
 800f278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f27a:	bc08      	pop	{r3}
 800f27c:	469e      	mov	lr, r3
 800f27e:	4770      	bx	lr
